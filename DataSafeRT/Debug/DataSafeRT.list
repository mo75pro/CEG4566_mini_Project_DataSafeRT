
DataSafeRT.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007444  080001b0  080001b0  000011b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000ccc  080075f4  080075f4  000085f4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080082c0  080082c0  0000a0a4  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  080082c0  080082c0  000092c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080082c8  080082c8  0000a0a4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080082c8  080082c8  000092c8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080082cc  080082cc  000092cc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000000a4  20000000  080082d0  0000a000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0000a0a4  2**0
                  CONTENTS
 10 .bss          00000920  200000a4  200000a4  0000a0a4  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  200009c4  200009c4  0000a0a4  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0000a0a4  2**0
                  CONTENTS, READONLY
 13 .debug_info   000196aa  00000000  00000000  0000a0d4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000039c1  00000000  00000000  0002377e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001580  00000000  00000000  00027140  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00004cd2  00000000  00000000  000286c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00018911  00000000  00000000  0002d392  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000f431a  00000000  00000000  00045ca3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00139fbd  2**0
                  CONTENTS, READONLY
 20 .debug_rnglists 0000107a  00000000  00000000  0013a000  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  00005e30  00000000  00000000  0013b07c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000007f  00000000  00000000  00140eac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	@ (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	@ (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	@ (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	200000a4 	.word	0x200000a4
 80001cc:	00000000 	.word	0x00000000
 80001d0:	080075dc 	.word	0x080075dc

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	@ (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	@ (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	@ (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	200000a8 	.word	0x200000a8
 80001ec:	080075dc 	.word	0x080075dc

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_uldivmod>:
 8000290:	b953      	cbnz	r3, 80002a8 <__aeabi_uldivmod+0x18>
 8000292:	b94a      	cbnz	r2, 80002a8 <__aeabi_uldivmod+0x18>
 8000294:	2900      	cmp	r1, #0
 8000296:	bf08      	it	eq
 8000298:	2800      	cmpeq	r0, #0
 800029a:	bf1c      	itt	ne
 800029c:	f04f 31ff 	movne.w	r1, #4294967295
 80002a0:	f04f 30ff 	movne.w	r0, #4294967295
 80002a4:	f000 b988 	b.w	80005b8 <__aeabi_idiv0>
 80002a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002b0:	f000 f806 	bl	80002c0 <__udivmoddi4>
 80002b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002bc:	b004      	add	sp, #16
 80002be:	4770      	bx	lr

080002c0 <__udivmoddi4>:
 80002c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002c4:	9d08      	ldr	r5, [sp, #32]
 80002c6:	468e      	mov	lr, r1
 80002c8:	4604      	mov	r4, r0
 80002ca:	4688      	mov	r8, r1
 80002cc:	2b00      	cmp	r3, #0
 80002ce:	d14a      	bne.n	8000366 <__udivmoddi4+0xa6>
 80002d0:	428a      	cmp	r2, r1
 80002d2:	4617      	mov	r7, r2
 80002d4:	d962      	bls.n	800039c <__udivmoddi4+0xdc>
 80002d6:	fab2 f682 	clz	r6, r2
 80002da:	b14e      	cbz	r6, 80002f0 <__udivmoddi4+0x30>
 80002dc:	f1c6 0320 	rsb	r3, r6, #32
 80002e0:	fa01 f806 	lsl.w	r8, r1, r6
 80002e4:	fa20 f303 	lsr.w	r3, r0, r3
 80002e8:	40b7      	lsls	r7, r6
 80002ea:	ea43 0808 	orr.w	r8, r3, r8
 80002ee:	40b4      	lsls	r4, r6
 80002f0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002f4:	fa1f fc87 	uxth.w	ip, r7
 80002f8:	fbb8 f1fe 	udiv	r1, r8, lr
 80002fc:	0c23      	lsrs	r3, r4, #16
 80002fe:	fb0e 8811 	mls	r8, lr, r1, r8
 8000302:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000306:	fb01 f20c 	mul.w	r2, r1, ip
 800030a:	429a      	cmp	r2, r3
 800030c:	d909      	bls.n	8000322 <__udivmoddi4+0x62>
 800030e:	18fb      	adds	r3, r7, r3
 8000310:	f101 30ff 	add.w	r0, r1, #4294967295
 8000314:	f080 80ea 	bcs.w	80004ec <__udivmoddi4+0x22c>
 8000318:	429a      	cmp	r2, r3
 800031a:	f240 80e7 	bls.w	80004ec <__udivmoddi4+0x22c>
 800031e:	3902      	subs	r1, #2
 8000320:	443b      	add	r3, r7
 8000322:	1a9a      	subs	r2, r3, r2
 8000324:	b2a3      	uxth	r3, r4
 8000326:	fbb2 f0fe 	udiv	r0, r2, lr
 800032a:	fb0e 2210 	mls	r2, lr, r0, r2
 800032e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000332:	fb00 fc0c 	mul.w	ip, r0, ip
 8000336:	459c      	cmp	ip, r3
 8000338:	d909      	bls.n	800034e <__udivmoddi4+0x8e>
 800033a:	18fb      	adds	r3, r7, r3
 800033c:	f100 32ff 	add.w	r2, r0, #4294967295
 8000340:	f080 80d6 	bcs.w	80004f0 <__udivmoddi4+0x230>
 8000344:	459c      	cmp	ip, r3
 8000346:	f240 80d3 	bls.w	80004f0 <__udivmoddi4+0x230>
 800034a:	443b      	add	r3, r7
 800034c:	3802      	subs	r0, #2
 800034e:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000352:	eba3 030c 	sub.w	r3, r3, ip
 8000356:	2100      	movs	r1, #0
 8000358:	b11d      	cbz	r5, 8000362 <__udivmoddi4+0xa2>
 800035a:	40f3      	lsrs	r3, r6
 800035c:	2200      	movs	r2, #0
 800035e:	e9c5 3200 	strd	r3, r2, [r5]
 8000362:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000366:	428b      	cmp	r3, r1
 8000368:	d905      	bls.n	8000376 <__udivmoddi4+0xb6>
 800036a:	b10d      	cbz	r5, 8000370 <__udivmoddi4+0xb0>
 800036c:	e9c5 0100 	strd	r0, r1, [r5]
 8000370:	2100      	movs	r1, #0
 8000372:	4608      	mov	r0, r1
 8000374:	e7f5      	b.n	8000362 <__udivmoddi4+0xa2>
 8000376:	fab3 f183 	clz	r1, r3
 800037a:	2900      	cmp	r1, #0
 800037c:	d146      	bne.n	800040c <__udivmoddi4+0x14c>
 800037e:	4573      	cmp	r3, lr
 8000380:	d302      	bcc.n	8000388 <__udivmoddi4+0xc8>
 8000382:	4282      	cmp	r2, r0
 8000384:	f200 8105 	bhi.w	8000592 <__udivmoddi4+0x2d2>
 8000388:	1a84      	subs	r4, r0, r2
 800038a:	eb6e 0203 	sbc.w	r2, lr, r3
 800038e:	2001      	movs	r0, #1
 8000390:	4690      	mov	r8, r2
 8000392:	2d00      	cmp	r5, #0
 8000394:	d0e5      	beq.n	8000362 <__udivmoddi4+0xa2>
 8000396:	e9c5 4800 	strd	r4, r8, [r5]
 800039a:	e7e2      	b.n	8000362 <__udivmoddi4+0xa2>
 800039c:	2a00      	cmp	r2, #0
 800039e:	f000 8090 	beq.w	80004c2 <__udivmoddi4+0x202>
 80003a2:	fab2 f682 	clz	r6, r2
 80003a6:	2e00      	cmp	r6, #0
 80003a8:	f040 80a4 	bne.w	80004f4 <__udivmoddi4+0x234>
 80003ac:	1a8a      	subs	r2, r1, r2
 80003ae:	0c03      	lsrs	r3, r0, #16
 80003b0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003b4:	b280      	uxth	r0, r0
 80003b6:	b2bc      	uxth	r4, r7
 80003b8:	2101      	movs	r1, #1
 80003ba:	fbb2 fcfe 	udiv	ip, r2, lr
 80003be:	fb0e 221c 	mls	r2, lr, ip, r2
 80003c2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80003c6:	fb04 f20c 	mul.w	r2, r4, ip
 80003ca:	429a      	cmp	r2, r3
 80003cc:	d907      	bls.n	80003de <__udivmoddi4+0x11e>
 80003ce:	18fb      	adds	r3, r7, r3
 80003d0:	f10c 38ff 	add.w	r8, ip, #4294967295
 80003d4:	d202      	bcs.n	80003dc <__udivmoddi4+0x11c>
 80003d6:	429a      	cmp	r2, r3
 80003d8:	f200 80e0 	bhi.w	800059c <__udivmoddi4+0x2dc>
 80003dc:	46c4      	mov	ip, r8
 80003de:	1a9b      	subs	r3, r3, r2
 80003e0:	fbb3 f2fe 	udiv	r2, r3, lr
 80003e4:	fb0e 3312 	mls	r3, lr, r2, r3
 80003e8:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 80003ec:	fb02 f404 	mul.w	r4, r2, r4
 80003f0:	429c      	cmp	r4, r3
 80003f2:	d907      	bls.n	8000404 <__udivmoddi4+0x144>
 80003f4:	18fb      	adds	r3, r7, r3
 80003f6:	f102 30ff 	add.w	r0, r2, #4294967295
 80003fa:	d202      	bcs.n	8000402 <__udivmoddi4+0x142>
 80003fc:	429c      	cmp	r4, r3
 80003fe:	f200 80ca 	bhi.w	8000596 <__udivmoddi4+0x2d6>
 8000402:	4602      	mov	r2, r0
 8000404:	1b1b      	subs	r3, r3, r4
 8000406:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 800040a:	e7a5      	b.n	8000358 <__udivmoddi4+0x98>
 800040c:	f1c1 0620 	rsb	r6, r1, #32
 8000410:	408b      	lsls	r3, r1
 8000412:	fa22 f706 	lsr.w	r7, r2, r6
 8000416:	431f      	orrs	r7, r3
 8000418:	fa0e f401 	lsl.w	r4, lr, r1
 800041c:	fa20 f306 	lsr.w	r3, r0, r6
 8000420:	fa2e fe06 	lsr.w	lr, lr, r6
 8000424:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000428:	4323      	orrs	r3, r4
 800042a:	fa00 f801 	lsl.w	r8, r0, r1
 800042e:	fa1f fc87 	uxth.w	ip, r7
 8000432:	fbbe f0f9 	udiv	r0, lr, r9
 8000436:	0c1c      	lsrs	r4, r3, #16
 8000438:	fb09 ee10 	mls	lr, r9, r0, lr
 800043c:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000440:	fb00 fe0c 	mul.w	lr, r0, ip
 8000444:	45a6      	cmp	lr, r4
 8000446:	fa02 f201 	lsl.w	r2, r2, r1
 800044a:	d909      	bls.n	8000460 <__udivmoddi4+0x1a0>
 800044c:	193c      	adds	r4, r7, r4
 800044e:	f100 3aff 	add.w	sl, r0, #4294967295
 8000452:	f080 809c 	bcs.w	800058e <__udivmoddi4+0x2ce>
 8000456:	45a6      	cmp	lr, r4
 8000458:	f240 8099 	bls.w	800058e <__udivmoddi4+0x2ce>
 800045c:	3802      	subs	r0, #2
 800045e:	443c      	add	r4, r7
 8000460:	eba4 040e 	sub.w	r4, r4, lr
 8000464:	fa1f fe83 	uxth.w	lr, r3
 8000468:	fbb4 f3f9 	udiv	r3, r4, r9
 800046c:	fb09 4413 	mls	r4, r9, r3, r4
 8000470:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000474:	fb03 fc0c 	mul.w	ip, r3, ip
 8000478:	45a4      	cmp	ip, r4
 800047a:	d908      	bls.n	800048e <__udivmoddi4+0x1ce>
 800047c:	193c      	adds	r4, r7, r4
 800047e:	f103 3eff 	add.w	lr, r3, #4294967295
 8000482:	f080 8082 	bcs.w	800058a <__udivmoddi4+0x2ca>
 8000486:	45a4      	cmp	ip, r4
 8000488:	d97f      	bls.n	800058a <__udivmoddi4+0x2ca>
 800048a:	3b02      	subs	r3, #2
 800048c:	443c      	add	r4, r7
 800048e:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000492:	eba4 040c 	sub.w	r4, r4, ip
 8000496:	fba0 ec02 	umull	lr, ip, r0, r2
 800049a:	4564      	cmp	r4, ip
 800049c:	4673      	mov	r3, lr
 800049e:	46e1      	mov	r9, ip
 80004a0:	d362      	bcc.n	8000568 <__udivmoddi4+0x2a8>
 80004a2:	d05f      	beq.n	8000564 <__udivmoddi4+0x2a4>
 80004a4:	b15d      	cbz	r5, 80004be <__udivmoddi4+0x1fe>
 80004a6:	ebb8 0203 	subs.w	r2, r8, r3
 80004aa:	eb64 0409 	sbc.w	r4, r4, r9
 80004ae:	fa04 f606 	lsl.w	r6, r4, r6
 80004b2:	fa22 f301 	lsr.w	r3, r2, r1
 80004b6:	431e      	orrs	r6, r3
 80004b8:	40cc      	lsrs	r4, r1
 80004ba:	e9c5 6400 	strd	r6, r4, [r5]
 80004be:	2100      	movs	r1, #0
 80004c0:	e74f      	b.n	8000362 <__udivmoddi4+0xa2>
 80004c2:	fbb1 fcf2 	udiv	ip, r1, r2
 80004c6:	0c01      	lsrs	r1, r0, #16
 80004c8:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 80004cc:	b280      	uxth	r0, r0
 80004ce:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 80004d2:	463b      	mov	r3, r7
 80004d4:	4638      	mov	r0, r7
 80004d6:	463c      	mov	r4, r7
 80004d8:	46b8      	mov	r8, r7
 80004da:	46be      	mov	lr, r7
 80004dc:	2620      	movs	r6, #32
 80004de:	fbb1 f1f7 	udiv	r1, r1, r7
 80004e2:	eba2 0208 	sub.w	r2, r2, r8
 80004e6:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 80004ea:	e766      	b.n	80003ba <__udivmoddi4+0xfa>
 80004ec:	4601      	mov	r1, r0
 80004ee:	e718      	b.n	8000322 <__udivmoddi4+0x62>
 80004f0:	4610      	mov	r0, r2
 80004f2:	e72c      	b.n	800034e <__udivmoddi4+0x8e>
 80004f4:	f1c6 0220 	rsb	r2, r6, #32
 80004f8:	fa2e f302 	lsr.w	r3, lr, r2
 80004fc:	40b7      	lsls	r7, r6
 80004fe:	40b1      	lsls	r1, r6
 8000500:	fa20 f202 	lsr.w	r2, r0, r2
 8000504:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000508:	430a      	orrs	r2, r1
 800050a:	fbb3 f8fe 	udiv	r8, r3, lr
 800050e:	b2bc      	uxth	r4, r7
 8000510:	fb0e 3318 	mls	r3, lr, r8, r3
 8000514:	0c11      	lsrs	r1, r2, #16
 8000516:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800051a:	fb08 f904 	mul.w	r9, r8, r4
 800051e:	40b0      	lsls	r0, r6
 8000520:	4589      	cmp	r9, r1
 8000522:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000526:	b280      	uxth	r0, r0
 8000528:	d93e      	bls.n	80005a8 <__udivmoddi4+0x2e8>
 800052a:	1879      	adds	r1, r7, r1
 800052c:	f108 3cff 	add.w	ip, r8, #4294967295
 8000530:	d201      	bcs.n	8000536 <__udivmoddi4+0x276>
 8000532:	4589      	cmp	r9, r1
 8000534:	d81f      	bhi.n	8000576 <__udivmoddi4+0x2b6>
 8000536:	eba1 0109 	sub.w	r1, r1, r9
 800053a:	fbb1 f9fe 	udiv	r9, r1, lr
 800053e:	fb09 f804 	mul.w	r8, r9, r4
 8000542:	fb0e 1119 	mls	r1, lr, r9, r1
 8000546:	b292      	uxth	r2, r2
 8000548:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800054c:	4542      	cmp	r2, r8
 800054e:	d229      	bcs.n	80005a4 <__udivmoddi4+0x2e4>
 8000550:	18ba      	adds	r2, r7, r2
 8000552:	f109 31ff 	add.w	r1, r9, #4294967295
 8000556:	d2c4      	bcs.n	80004e2 <__udivmoddi4+0x222>
 8000558:	4542      	cmp	r2, r8
 800055a:	d2c2      	bcs.n	80004e2 <__udivmoddi4+0x222>
 800055c:	f1a9 0102 	sub.w	r1, r9, #2
 8000560:	443a      	add	r2, r7
 8000562:	e7be      	b.n	80004e2 <__udivmoddi4+0x222>
 8000564:	45f0      	cmp	r8, lr
 8000566:	d29d      	bcs.n	80004a4 <__udivmoddi4+0x1e4>
 8000568:	ebbe 0302 	subs.w	r3, lr, r2
 800056c:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000570:	3801      	subs	r0, #1
 8000572:	46e1      	mov	r9, ip
 8000574:	e796      	b.n	80004a4 <__udivmoddi4+0x1e4>
 8000576:	eba7 0909 	sub.w	r9, r7, r9
 800057a:	4449      	add	r1, r9
 800057c:	f1a8 0c02 	sub.w	ip, r8, #2
 8000580:	fbb1 f9fe 	udiv	r9, r1, lr
 8000584:	fb09 f804 	mul.w	r8, r9, r4
 8000588:	e7db      	b.n	8000542 <__udivmoddi4+0x282>
 800058a:	4673      	mov	r3, lr
 800058c:	e77f      	b.n	800048e <__udivmoddi4+0x1ce>
 800058e:	4650      	mov	r0, sl
 8000590:	e766      	b.n	8000460 <__udivmoddi4+0x1a0>
 8000592:	4608      	mov	r0, r1
 8000594:	e6fd      	b.n	8000392 <__udivmoddi4+0xd2>
 8000596:	443b      	add	r3, r7
 8000598:	3a02      	subs	r2, #2
 800059a:	e733      	b.n	8000404 <__udivmoddi4+0x144>
 800059c:	f1ac 0c02 	sub.w	ip, ip, #2
 80005a0:	443b      	add	r3, r7
 80005a2:	e71c      	b.n	80003de <__udivmoddi4+0x11e>
 80005a4:	4649      	mov	r1, r9
 80005a6:	e79c      	b.n	80004e2 <__udivmoddi4+0x222>
 80005a8:	eba1 0109 	sub.w	r1, r1, r9
 80005ac:	46c4      	mov	ip, r8
 80005ae:	fbb1 f9fe 	udiv	r9, r1, lr
 80005b2:	fb09 f804 	mul.w	r8, r9, r4
 80005b6:	e7c4      	b.n	8000542 <__udivmoddi4+0x282>

080005b8 <__aeabi_idiv0>:
 80005b8:	4770      	bx	lr
 80005ba:	bf00      	nop

080005bc <ili9341_Init>:
  * @brief  Power on the LCD.
  * @param  None
  * @retval None
  */
void ili9341_Init(void)
{
 80005bc:	b580      	push	{r7, lr}
 80005be:	af00      	add	r7, sp, #0
  /* Initialize ILI9341 low level bus layer ----------------------------------*/
  LCD_IO_Init();
 80005c0:	f000 fc4e 	bl	8000e60 <LCD_IO_Init>
  
  /* Configure LCD */
  ili9341_WriteReg(0xCA);
 80005c4:	20ca      	movs	r0, #202	@ 0xca
 80005c6:	f000 f95d 	bl	8000884 <ili9341_WriteReg>
  ili9341_WriteData(0xC3);
 80005ca:	20c3      	movs	r0, #195	@ 0xc3
 80005cc:	f000 f967 	bl	800089e <ili9341_WriteData>
  ili9341_WriteData(0x08);
 80005d0:	2008      	movs	r0, #8
 80005d2:	f000 f964 	bl	800089e <ili9341_WriteData>
  ili9341_WriteData(0x50);
 80005d6:	2050      	movs	r0, #80	@ 0x50
 80005d8:	f000 f961 	bl	800089e <ili9341_WriteData>
  ili9341_WriteReg(LCD_POWERB);
 80005dc:	20cf      	movs	r0, #207	@ 0xcf
 80005de:	f000 f951 	bl	8000884 <ili9341_WriteReg>
  ili9341_WriteData(0x00);
 80005e2:	2000      	movs	r0, #0
 80005e4:	f000 f95b 	bl	800089e <ili9341_WriteData>
  ili9341_WriteData(0xC1);
 80005e8:	20c1      	movs	r0, #193	@ 0xc1
 80005ea:	f000 f958 	bl	800089e <ili9341_WriteData>
  ili9341_WriteData(0x30);
 80005ee:	2030      	movs	r0, #48	@ 0x30
 80005f0:	f000 f955 	bl	800089e <ili9341_WriteData>
  ili9341_WriteReg(LCD_POWER_SEQ);
 80005f4:	20ed      	movs	r0, #237	@ 0xed
 80005f6:	f000 f945 	bl	8000884 <ili9341_WriteReg>
  ili9341_WriteData(0x64);
 80005fa:	2064      	movs	r0, #100	@ 0x64
 80005fc:	f000 f94f 	bl	800089e <ili9341_WriteData>
  ili9341_WriteData(0x03);
 8000600:	2003      	movs	r0, #3
 8000602:	f000 f94c 	bl	800089e <ili9341_WriteData>
  ili9341_WriteData(0x12);
 8000606:	2012      	movs	r0, #18
 8000608:	f000 f949 	bl	800089e <ili9341_WriteData>
  ili9341_WriteData(0x81);
 800060c:	2081      	movs	r0, #129	@ 0x81
 800060e:	f000 f946 	bl	800089e <ili9341_WriteData>
  ili9341_WriteReg(LCD_DTCA);
 8000612:	20e8      	movs	r0, #232	@ 0xe8
 8000614:	f000 f936 	bl	8000884 <ili9341_WriteReg>
  ili9341_WriteData(0x85);
 8000618:	2085      	movs	r0, #133	@ 0x85
 800061a:	f000 f940 	bl	800089e <ili9341_WriteData>
  ili9341_WriteData(0x00);
 800061e:	2000      	movs	r0, #0
 8000620:	f000 f93d 	bl	800089e <ili9341_WriteData>
  ili9341_WriteData(0x78);
 8000624:	2078      	movs	r0, #120	@ 0x78
 8000626:	f000 f93a 	bl	800089e <ili9341_WriteData>
  ili9341_WriteReg(LCD_POWERA);
 800062a:	20cb      	movs	r0, #203	@ 0xcb
 800062c:	f000 f92a 	bl	8000884 <ili9341_WriteReg>
  ili9341_WriteData(0x39);
 8000630:	2039      	movs	r0, #57	@ 0x39
 8000632:	f000 f934 	bl	800089e <ili9341_WriteData>
  ili9341_WriteData(0x2C);
 8000636:	202c      	movs	r0, #44	@ 0x2c
 8000638:	f000 f931 	bl	800089e <ili9341_WriteData>
  ili9341_WriteData(0x00);
 800063c:	2000      	movs	r0, #0
 800063e:	f000 f92e 	bl	800089e <ili9341_WriteData>
  ili9341_WriteData(0x34);
 8000642:	2034      	movs	r0, #52	@ 0x34
 8000644:	f000 f92b 	bl	800089e <ili9341_WriteData>
  ili9341_WriteData(0x02);
 8000648:	2002      	movs	r0, #2
 800064a:	f000 f928 	bl	800089e <ili9341_WriteData>
  ili9341_WriteReg(LCD_PRC);
 800064e:	20f7      	movs	r0, #247	@ 0xf7
 8000650:	f000 f918 	bl	8000884 <ili9341_WriteReg>
  ili9341_WriteData(0x20);
 8000654:	2020      	movs	r0, #32
 8000656:	f000 f922 	bl	800089e <ili9341_WriteData>
  ili9341_WriteReg(LCD_DTCB);
 800065a:	20ea      	movs	r0, #234	@ 0xea
 800065c:	f000 f912 	bl	8000884 <ili9341_WriteReg>
  ili9341_WriteData(0x00);
 8000660:	2000      	movs	r0, #0
 8000662:	f000 f91c 	bl	800089e <ili9341_WriteData>
  ili9341_WriteData(0x00);
 8000666:	2000      	movs	r0, #0
 8000668:	f000 f919 	bl	800089e <ili9341_WriteData>
  ili9341_WriteReg(LCD_FRMCTR1);
 800066c:	20b1      	movs	r0, #177	@ 0xb1
 800066e:	f000 f909 	bl	8000884 <ili9341_WriteReg>
  ili9341_WriteData(0x00);
 8000672:	2000      	movs	r0, #0
 8000674:	f000 f913 	bl	800089e <ili9341_WriteData>
  ili9341_WriteData(0x1B);
 8000678:	201b      	movs	r0, #27
 800067a:	f000 f910 	bl	800089e <ili9341_WriteData>
  ili9341_WriteReg(LCD_DFC);
 800067e:	20b6      	movs	r0, #182	@ 0xb6
 8000680:	f000 f900 	bl	8000884 <ili9341_WriteReg>
  ili9341_WriteData(0x0A);
 8000684:	200a      	movs	r0, #10
 8000686:	f000 f90a 	bl	800089e <ili9341_WriteData>
  ili9341_WriteData(0xA2);
 800068a:	20a2      	movs	r0, #162	@ 0xa2
 800068c:	f000 f907 	bl	800089e <ili9341_WriteData>
  ili9341_WriteReg(LCD_POWER1);
 8000690:	20c0      	movs	r0, #192	@ 0xc0
 8000692:	f000 f8f7 	bl	8000884 <ili9341_WriteReg>
  ili9341_WriteData(0x10);
 8000696:	2010      	movs	r0, #16
 8000698:	f000 f901 	bl	800089e <ili9341_WriteData>
  ili9341_WriteReg(LCD_POWER2);
 800069c:	20c1      	movs	r0, #193	@ 0xc1
 800069e:	f000 f8f1 	bl	8000884 <ili9341_WriteReg>
  ili9341_WriteData(0x10);
 80006a2:	2010      	movs	r0, #16
 80006a4:	f000 f8fb 	bl	800089e <ili9341_WriteData>
  ili9341_WriteReg(LCD_VCOM1);
 80006a8:	20c5      	movs	r0, #197	@ 0xc5
 80006aa:	f000 f8eb 	bl	8000884 <ili9341_WriteReg>
  ili9341_WriteData(0x45);
 80006ae:	2045      	movs	r0, #69	@ 0x45
 80006b0:	f000 f8f5 	bl	800089e <ili9341_WriteData>
  ili9341_WriteData(0x15);
 80006b4:	2015      	movs	r0, #21
 80006b6:	f000 f8f2 	bl	800089e <ili9341_WriteData>
  ili9341_WriteReg(LCD_VCOM2);
 80006ba:	20c7      	movs	r0, #199	@ 0xc7
 80006bc:	f000 f8e2 	bl	8000884 <ili9341_WriteReg>
  ili9341_WriteData(0x90);
 80006c0:	2090      	movs	r0, #144	@ 0x90
 80006c2:	f000 f8ec 	bl	800089e <ili9341_WriteData>
  ili9341_WriteReg(LCD_MAC);
 80006c6:	2036      	movs	r0, #54	@ 0x36
 80006c8:	f000 f8dc 	bl	8000884 <ili9341_WriteReg>
  ili9341_WriteData(0xC8);
 80006cc:	20c8      	movs	r0, #200	@ 0xc8
 80006ce:	f000 f8e6 	bl	800089e <ili9341_WriteData>
  ili9341_WriteReg(LCD_3GAMMA_EN);
 80006d2:	20f2      	movs	r0, #242	@ 0xf2
 80006d4:	f000 f8d6 	bl	8000884 <ili9341_WriteReg>
  ili9341_WriteData(0x00);
 80006d8:	2000      	movs	r0, #0
 80006da:	f000 f8e0 	bl	800089e <ili9341_WriteData>
  ili9341_WriteReg(LCD_RGB_INTERFACE);
 80006de:	20b0      	movs	r0, #176	@ 0xb0
 80006e0:	f000 f8d0 	bl	8000884 <ili9341_WriteReg>
  ili9341_WriteData(0xC2);
 80006e4:	20c2      	movs	r0, #194	@ 0xc2
 80006e6:	f000 f8da 	bl	800089e <ili9341_WriteData>
  ili9341_WriteReg(LCD_DFC);
 80006ea:	20b6      	movs	r0, #182	@ 0xb6
 80006ec:	f000 f8ca 	bl	8000884 <ili9341_WriteReg>
  ili9341_WriteData(0x0A);
 80006f0:	200a      	movs	r0, #10
 80006f2:	f000 f8d4 	bl	800089e <ili9341_WriteData>
  ili9341_WriteData(0xA7);
 80006f6:	20a7      	movs	r0, #167	@ 0xa7
 80006f8:	f000 f8d1 	bl	800089e <ili9341_WriteData>
  ili9341_WriteData(0x27);
 80006fc:	2027      	movs	r0, #39	@ 0x27
 80006fe:	f000 f8ce 	bl	800089e <ili9341_WriteData>
  ili9341_WriteData(0x04);
 8000702:	2004      	movs	r0, #4
 8000704:	f000 f8cb 	bl	800089e <ili9341_WriteData>
  
  /* Colomn address set */
  ili9341_WriteReg(LCD_COLUMN_ADDR);
 8000708:	202a      	movs	r0, #42	@ 0x2a
 800070a:	f000 f8bb 	bl	8000884 <ili9341_WriteReg>
  ili9341_WriteData(0x00);
 800070e:	2000      	movs	r0, #0
 8000710:	f000 f8c5 	bl	800089e <ili9341_WriteData>
  ili9341_WriteData(0x00);
 8000714:	2000      	movs	r0, #0
 8000716:	f000 f8c2 	bl	800089e <ili9341_WriteData>
  ili9341_WriteData(0x00);
 800071a:	2000      	movs	r0, #0
 800071c:	f000 f8bf 	bl	800089e <ili9341_WriteData>
  ili9341_WriteData(0xEF);
 8000720:	20ef      	movs	r0, #239	@ 0xef
 8000722:	f000 f8bc 	bl	800089e <ili9341_WriteData>
  /* Page address set */
  ili9341_WriteReg(LCD_PAGE_ADDR);
 8000726:	202b      	movs	r0, #43	@ 0x2b
 8000728:	f000 f8ac 	bl	8000884 <ili9341_WriteReg>
  ili9341_WriteData(0x00);
 800072c:	2000      	movs	r0, #0
 800072e:	f000 f8b6 	bl	800089e <ili9341_WriteData>
  ili9341_WriteData(0x00);
 8000732:	2000      	movs	r0, #0
 8000734:	f000 f8b3 	bl	800089e <ili9341_WriteData>
  ili9341_WriteData(0x01);
 8000738:	2001      	movs	r0, #1
 800073a:	f000 f8b0 	bl	800089e <ili9341_WriteData>
  ili9341_WriteData(0x3F);
 800073e:	203f      	movs	r0, #63	@ 0x3f
 8000740:	f000 f8ad 	bl	800089e <ili9341_WriteData>
  ili9341_WriteReg(LCD_INTERFACE);
 8000744:	20f6      	movs	r0, #246	@ 0xf6
 8000746:	f000 f89d 	bl	8000884 <ili9341_WriteReg>
  ili9341_WriteData(0x01);
 800074a:	2001      	movs	r0, #1
 800074c:	f000 f8a7 	bl	800089e <ili9341_WriteData>
  ili9341_WriteData(0x00);
 8000750:	2000      	movs	r0, #0
 8000752:	f000 f8a4 	bl	800089e <ili9341_WriteData>
  ili9341_WriteData(0x06);
 8000756:	2006      	movs	r0, #6
 8000758:	f000 f8a1 	bl	800089e <ili9341_WriteData>
  
  ili9341_WriteReg(LCD_GRAM);
 800075c:	202c      	movs	r0, #44	@ 0x2c
 800075e:	f000 f891 	bl	8000884 <ili9341_WriteReg>
  LCD_Delay(200);
 8000762:	20c8      	movs	r0, #200	@ 0xc8
 8000764:	f000 fc6a 	bl	800103c <LCD_Delay>
  
  ili9341_WriteReg(LCD_GAMMA);
 8000768:	2026      	movs	r0, #38	@ 0x26
 800076a:	f000 f88b 	bl	8000884 <ili9341_WriteReg>
  ili9341_WriteData(0x01);
 800076e:	2001      	movs	r0, #1
 8000770:	f000 f895 	bl	800089e <ili9341_WriteData>
  
  ili9341_WriteReg(LCD_PGAMMA);
 8000774:	20e0      	movs	r0, #224	@ 0xe0
 8000776:	f000 f885 	bl	8000884 <ili9341_WriteReg>
  ili9341_WriteData(0x0F);
 800077a:	200f      	movs	r0, #15
 800077c:	f000 f88f 	bl	800089e <ili9341_WriteData>
  ili9341_WriteData(0x29);
 8000780:	2029      	movs	r0, #41	@ 0x29
 8000782:	f000 f88c 	bl	800089e <ili9341_WriteData>
  ili9341_WriteData(0x24);
 8000786:	2024      	movs	r0, #36	@ 0x24
 8000788:	f000 f889 	bl	800089e <ili9341_WriteData>
  ili9341_WriteData(0x0C);
 800078c:	200c      	movs	r0, #12
 800078e:	f000 f886 	bl	800089e <ili9341_WriteData>
  ili9341_WriteData(0x0E);
 8000792:	200e      	movs	r0, #14
 8000794:	f000 f883 	bl	800089e <ili9341_WriteData>
  ili9341_WriteData(0x09);
 8000798:	2009      	movs	r0, #9
 800079a:	f000 f880 	bl	800089e <ili9341_WriteData>
  ili9341_WriteData(0x4E);
 800079e:	204e      	movs	r0, #78	@ 0x4e
 80007a0:	f000 f87d 	bl	800089e <ili9341_WriteData>
  ili9341_WriteData(0x78);
 80007a4:	2078      	movs	r0, #120	@ 0x78
 80007a6:	f000 f87a 	bl	800089e <ili9341_WriteData>
  ili9341_WriteData(0x3C);
 80007aa:	203c      	movs	r0, #60	@ 0x3c
 80007ac:	f000 f877 	bl	800089e <ili9341_WriteData>
  ili9341_WriteData(0x09);
 80007b0:	2009      	movs	r0, #9
 80007b2:	f000 f874 	bl	800089e <ili9341_WriteData>
  ili9341_WriteData(0x13);
 80007b6:	2013      	movs	r0, #19
 80007b8:	f000 f871 	bl	800089e <ili9341_WriteData>
  ili9341_WriteData(0x05);
 80007bc:	2005      	movs	r0, #5
 80007be:	f000 f86e 	bl	800089e <ili9341_WriteData>
  ili9341_WriteData(0x17);
 80007c2:	2017      	movs	r0, #23
 80007c4:	f000 f86b 	bl	800089e <ili9341_WriteData>
  ili9341_WriteData(0x11);
 80007c8:	2011      	movs	r0, #17
 80007ca:	f000 f868 	bl	800089e <ili9341_WriteData>
  ili9341_WriteData(0x00);
 80007ce:	2000      	movs	r0, #0
 80007d0:	f000 f865 	bl	800089e <ili9341_WriteData>
  ili9341_WriteReg(LCD_NGAMMA);
 80007d4:	20e1      	movs	r0, #225	@ 0xe1
 80007d6:	f000 f855 	bl	8000884 <ili9341_WriteReg>
  ili9341_WriteData(0x00);
 80007da:	2000      	movs	r0, #0
 80007dc:	f000 f85f 	bl	800089e <ili9341_WriteData>
  ili9341_WriteData(0x16);
 80007e0:	2016      	movs	r0, #22
 80007e2:	f000 f85c 	bl	800089e <ili9341_WriteData>
  ili9341_WriteData(0x1B);
 80007e6:	201b      	movs	r0, #27
 80007e8:	f000 f859 	bl	800089e <ili9341_WriteData>
  ili9341_WriteData(0x04);
 80007ec:	2004      	movs	r0, #4
 80007ee:	f000 f856 	bl	800089e <ili9341_WriteData>
  ili9341_WriteData(0x11);
 80007f2:	2011      	movs	r0, #17
 80007f4:	f000 f853 	bl	800089e <ili9341_WriteData>
  ili9341_WriteData(0x07);
 80007f8:	2007      	movs	r0, #7
 80007fa:	f000 f850 	bl	800089e <ili9341_WriteData>
  ili9341_WriteData(0x31);
 80007fe:	2031      	movs	r0, #49	@ 0x31
 8000800:	f000 f84d 	bl	800089e <ili9341_WriteData>
  ili9341_WriteData(0x33);
 8000804:	2033      	movs	r0, #51	@ 0x33
 8000806:	f000 f84a 	bl	800089e <ili9341_WriteData>
  ili9341_WriteData(0x42);
 800080a:	2042      	movs	r0, #66	@ 0x42
 800080c:	f000 f847 	bl	800089e <ili9341_WriteData>
  ili9341_WriteData(0x05);
 8000810:	2005      	movs	r0, #5
 8000812:	f000 f844 	bl	800089e <ili9341_WriteData>
  ili9341_WriteData(0x0C);
 8000816:	200c      	movs	r0, #12
 8000818:	f000 f841 	bl	800089e <ili9341_WriteData>
  ili9341_WriteData(0x0A);
 800081c:	200a      	movs	r0, #10
 800081e:	f000 f83e 	bl	800089e <ili9341_WriteData>
  ili9341_WriteData(0x28);
 8000822:	2028      	movs	r0, #40	@ 0x28
 8000824:	f000 f83b 	bl	800089e <ili9341_WriteData>
  ili9341_WriteData(0x2F);
 8000828:	202f      	movs	r0, #47	@ 0x2f
 800082a:	f000 f838 	bl	800089e <ili9341_WriteData>
  ili9341_WriteData(0x0F);
 800082e:	200f      	movs	r0, #15
 8000830:	f000 f835 	bl	800089e <ili9341_WriteData>
  
  ili9341_WriteReg(LCD_SLEEP_OUT);
 8000834:	2011      	movs	r0, #17
 8000836:	f000 f825 	bl	8000884 <ili9341_WriteReg>
  LCD_Delay(200);
 800083a:	20c8      	movs	r0, #200	@ 0xc8
 800083c:	f000 fbfe 	bl	800103c <LCD_Delay>
  ili9341_WriteReg(LCD_DISPLAY_ON);
 8000840:	2029      	movs	r0, #41	@ 0x29
 8000842:	f000 f81f 	bl	8000884 <ili9341_WriteReg>
  /* GRAM start writing */
  ili9341_WriteReg(LCD_GRAM);
 8000846:	202c      	movs	r0, #44	@ 0x2c
 8000848:	f000 f81c 	bl	8000884 <ili9341_WriteReg>
}
 800084c:	bf00      	nop
 800084e:	bd80      	pop	{r7, pc}

08000850 <ili9341_ReadID>:
  * @brief  Disables the Display.
  * @param  None
  * @retval LCD Register Value.
  */
uint16_t ili9341_ReadID(void)
{
 8000850:	b580      	push	{r7, lr}
 8000852:	af00      	add	r7, sp, #0
  LCD_IO_Init();
 8000854:	f000 fb04 	bl	8000e60 <LCD_IO_Init>
  return ((uint16_t)ili9341_ReadData(LCD_READ_ID4, LCD_READ_ID4_SIZE));
 8000858:	2103      	movs	r1, #3
 800085a:	20d3      	movs	r0, #211	@ 0xd3
 800085c:	f000 f82c 	bl	80008b8 <ili9341_ReadData>
 8000860:	4603      	mov	r3, r0
 8000862:	b29b      	uxth	r3, r3
}
 8000864:	4618      	mov	r0, r3
 8000866:	bd80      	pop	{r7, pc}

08000868 <ili9341_DisplayOn>:
  * @brief  Enables the Display.
  * @param  None
  * @retval None
  */
void ili9341_DisplayOn(void)
{
 8000868:	b580      	push	{r7, lr}
 800086a:	af00      	add	r7, sp, #0
  /* Display On */
  ili9341_WriteReg(LCD_DISPLAY_ON);
 800086c:	2029      	movs	r0, #41	@ 0x29
 800086e:	f000 f809 	bl	8000884 <ili9341_WriteReg>
}
 8000872:	bf00      	nop
 8000874:	bd80      	pop	{r7, pc}

08000876 <ili9341_DisplayOff>:
  * @brief  Disables the Display.
  * @param  None
  * @retval None
  */
void ili9341_DisplayOff(void)
{
 8000876:	b580      	push	{r7, lr}
 8000878:	af00      	add	r7, sp, #0
  /* Display Off */
  ili9341_WriteReg(LCD_DISPLAY_OFF);
 800087a:	2028      	movs	r0, #40	@ 0x28
 800087c:	f000 f802 	bl	8000884 <ili9341_WriteReg>
}
 8000880:	bf00      	nop
 8000882:	bd80      	pop	{r7, pc}

08000884 <ili9341_WriteReg>:
  * @brief  Writes  to the selected LCD register.
  * @param  LCD_Reg: address of the selected register.
  * @retval None
  */
void ili9341_WriteReg(uint8_t LCD_Reg)
{
 8000884:	b580      	push	{r7, lr}
 8000886:	b082      	sub	sp, #8
 8000888:	af00      	add	r7, sp, #0
 800088a:	4603      	mov	r3, r0
 800088c:	71fb      	strb	r3, [r7, #7]
  LCD_IO_WriteReg(LCD_Reg);
 800088e:	79fb      	ldrb	r3, [r7, #7]
 8000890:	4618      	mov	r0, r3
 8000892:	f000 fb7f 	bl	8000f94 <LCD_IO_WriteReg>
}
 8000896:	bf00      	nop
 8000898:	3708      	adds	r7, #8
 800089a:	46bd      	mov	sp, r7
 800089c:	bd80      	pop	{r7, pc}

0800089e <ili9341_WriteData>:
  * @brief  Writes data to the selected LCD register.
  * @param  LCD_Reg: address of the selected register.
  * @retval None
  */
void ili9341_WriteData(uint16_t RegValue)
{
 800089e:	b580      	push	{r7, lr}
 80008a0:	b082      	sub	sp, #8
 80008a2:	af00      	add	r7, sp, #0
 80008a4:	4603      	mov	r3, r0
 80008a6:	80fb      	strh	r3, [r7, #6]
  LCD_IO_WriteData(RegValue);
 80008a8:	88fb      	ldrh	r3, [r7, #6]
 80008aa:	4618      	mov	r0, r3
 80008ac:	f000 fb50 	bl	8000f50 <LCD_IO_WriteData>
}
 80008b0:	bf00      	nop
 80008b2:	3708      	adds	r7, #8
 80008b4:	46bd      	mov	sp, r7
 80008b6:	bd80      	pop	{r7, pc}

080008b8 <ili9341_ReadData>:
  * @param  RegValue: Address of the register to read
  * @param  ReadSize: Number of bytes to read
  * @retval LCD Register Value.
  */
uint32_t ili9341_ReadData(uint16_t RegValue, uint8_t ReadSize)
{
 80008b8:	b580      	push	{r7, lr}
 80008ba:	b082      	sub	sp, #8
 80008bc:	af00      	add	r7, sp, #0
 80008be:	4603      	mov	r3, r0
 80008c0:	460a      	mov	r2, r1
 80008c2:	80fb      	strh	r3, [r7, #6]
 80008c4:	4613      	mov	r3, r2
 80008c6:	717b      	strb	r3, [r7, #5]
  /* Read a max of 4 bytes */
  return (LCD_IO_ReadData(RegValue, ReadSize));
 80008c8:	797a      	ldrb	r2, [r7, #5]
 80008ca:	88fb      	ldrh	r3, [r7, #6]
 80008cc:	4611      	mov	r1, r2
 80008ce:	4618      	mov	r0, r3
 80008d0:	f000 fb82 	bl	8000fd8 <LCD_IO_ReadData>
 80008d4:	4603      	mov	r3, r0
}
 80008d6:	4618      	mov	r0, r3
 80008d8:	3708      	adds	r7, #8
 80008da:	46bd      	mov	sp, r7
 80008dc:	bd80      	pop	{r7, pc}

080008de <ili9341_GetLcdPixelWidth>:
  * @brief  Get LCD PIXEL WIDTH.
  * @param  None
  * @retval LCD PIXEL WIDTH.
  */
uint16_t ili9341_GetLcdPixelWidth(void)
{
 80008de:	b480      	push	{r7}
 80008e0:	af00      	add	r7, sp, #0
  /* Return LCD PIXEL WIDTH */
  return ILI9341_LCD_PIXEL_WIDTH;
 80008e2:	23f0      	movs	r3, #240	@ 0xf0



}
 80008e4:	4618      	mov	r0, r3
 80008e6:	46bd      	mov	sp, r7
 80008e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008ec:	4770      	bx	lr

080008ee <ili9341_GetLcdPixelHeight>:
  * @brief  Get LCD PIXEL HEIGHT.
  * @param  None
  * @retval LCD PIXEL HEIGHT.
  */
uint16_t ili9341_GetLcdPixelHeight(void)
{
 80008ee:	b480      	push	{r7}
 80008f0:	af00      	add	r7, sp, #0
  /* Return LCD PIXEL HEIGHT */
  return ILI9341_LCD_PIXEL_HEIGHT;
 80008f2:	f44f 73a0 	mov.w	r3, #320	@ 0x140
}
 80008f6:	4618      	mov	r0, r3
 80008f8:	46bd      	mov	sp, r7
 80008fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008fe:	4770      	bx	lr

08000900 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000900:	b580      	push	{r7, lr}
 8000902:	b090      	sub	sp, #64	@ 0x40
 8000904:	af00      	add	r7, sp, #0
  char msg[50];                // Buffer pour afficher le message sur le LCD
  uint32_t adcValue = 0;       // Variable pour stocker la valeur ADC lue
 8000906:	2300      	movs	r3, #0
 8000908:	63fb      	str	r3, [r7, #60]	@ 0x3c
  const uint32_t GAS_THRESHOLD = 50;  // Seuil : si adcValue < 50, on considère que du gaz est détecté
 800090a:	2332      	movs	r3, #50	@ 0x32
 800090c:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Initialisation du HAL et configuration du système */
  HAL_Init();
 800090e:	f001 fe25 	bl	800255c <HAL_Init>
  SystemClock_Config();
 8000912:	f000 f85d 	bl	80009d0 <SystemClock_Config>

  /* Initialisation des périphériques */
  MX_GPIO_Init();
 8000916:	f000 f941 	bl	8000b9c <MX_GPIO_Init>
  MX_ADC1_Init();              // Initialisation de l’ADC sur A0
 800091a:	f000 f8c3 	bl	8000aa4 <MX_ADC1_Init>
  MX_USART1_UART_Init();       // Initialisation de l’UART (facultatif)
 800091e:	f000 f913 	bl	8000b48 <MX_USART1_UART_Init>

  /* Initialisation du LCD */
  BSP_LCD_Init();
 8000922:	f000 fb97 	bl	8001054 <BSP_LCD_Init>
  BSP_LCD_LayerDefaultInit(LCD_BACKGROUND_LAYER, LCD_FRAME_BUFFER);
 8000926:	f04f 4150 	mov.w	r1, #3489660928	@ 0xd0000000
 800092a:	2000      	movs	r0, #0
 800092c:	f000 fc0e 	bl	800114c <BSP_LCD_LayerDefaultInit>
  BSP_LCD_SelectLayer(LCD_BACKGROUND_LAYER);
 8000930:	2000      	movs	r0, #0
 8000932:	f000 fc6f 	bl	8001214 <BSP_LCD_SelectLayer>
  BSP_LCD_Clear(LCD_COLOR_WHITE);
 8000936:	f04f 30ff 	mov.w	r0, #4294967295
 800093a:	f000 fca9 	bl	8001290 <BSP_LCD_Clear>

  // Affichage d'un titre sur le LCD
  BSP_LCD_SetTextColor(LCD_COLOR_BLUE);
 800093e:	481e      	ldr	r0, [pc, #120]	@ (80009b8 <main+0xb8>)
 8000940:	f000 fc78 	bl	8001234 <BSP_LCD_SetTextColor>
  BSP_LCD_DisplayStringAtLine(2, (uint8_t *)"MQ-2 Sensor Demo");
 8000944:	491d      	ldr	r1, [pc, #116]	@ (80009bc <main+0xbc>)
 8000946:	2002      	movs	r0, #2
 8000948:	f000 fe30 	bl	80015ac <BSP_LCD_DisplayStringAtLine>

  while (1)
  {
    /* Démarrer une conversion ADC sur le canal A0 */
    HAL_ADC_Start(&hadc1);
 800094c:	481c      	ldr	r0, [pc, #112]	@ (80009c0 <main+0xc0>)
 800094e:	f001 fedf 	bl	8002710 <HAL_ADC_Start>
    if (HAL_ADC_PollForConversion(&hadc1, 100) == HAL_OK)
 8000952:	2164      	movs	r1, #100	@ 0x64
 8000954:	481a      	ldr	r0, [pc, #104]	@ (80009c0 <main+0xc0>)
 8000956:	f001 ffe0 	bl	800291a <HAL_ADC_PollForConversion>
 800095a:	4603      	mov	r3, r0
 800095c:	2b00      	cmp	r3, #0
 800095e:	d103      	bne.n	8000968 <main+0x68>
    {
      adcValue = HAL_ADC_GetValue(&hadc1);
 8000960:	4817      	ldr	r0, [pc, #92]	@ (80009c0 <main+0xc0>)
 8000962:	f002 f865 	bl	8002a30 <HAL_ADC_GetValue>
 8000966:	63f8      	str	r0, [r7, #60]	@ 0x3c
    }
    HAL_ADC_Stop(&hadc1);
 8000968:	4815      	ldr	r0, [pc, #84]	@ (80009c0 <main+0xc0>)
 800096a:	f001 ffa3 	bl	80028b4 <HAL_ADC_Stop>

    /* Condition de détection basée sur la valeur ADC */
    if (adcValue < GAS_THRESHOLD)
 800096e:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8000970:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8000972:	429a      	cmp	r2, r3
 8000974:	d209      	bcs.n	800098a <main+0x8a>
    {
      // Si la valeur ADC est inférieure au seuil : présence de gaz
      BSP_LCD_SetTextColor(LCD_COLOR_RED);
 8000976:	4813      	ldr	r0, [pc, #76]	@ (80009c4 <main+0xc4>)
 8000978:	f000 fc5c 	bl	8001234 <BSP_LCD_SetTextColor>
      sprintf(msg, "Gaz detecte! ADC: %lu", adcValue);
 800097c:	1d3b      	adds	r3, r7, #4
 800097e:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8000980:	4911      	ldr	r1, [pc, #68]	@ (80009c8 <main+0xc8>)
 8000982:	4618      	mov	r0, r3
 8000984:	f006 f98a 	bl	8006c9c <siprintf>
 8000988:	e009      	b.n	800099e <main+0x9e>
    }
    else
    {
      // Sinon : pas de gaz détecté
      BSP_LCD_SetTextColor(LCD_COLOR_GREEN);
 800098a:	f04f 20ff 	mov.w	r0, #4278255360	@ 0xff00ff00
 800098e:	f000 fc51 	bl	8001234 <BSP_LCD_SetTextColor>
      sprintf(msg, "Aucun gaz. ADC: %lu", adcValue);
 8000992:	1d3b      	adds	r3, r7, #4
 8000994:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8000996:	490d      	ldr	r1, [pc, #52]	@ (80009cc <main+0xcc>)
 8000998:	4618      	mov	r0, r3
 800099a:	f006 f97f 	bl	8006c9c <siprintf>
    }

    /* Affichage du message sur la ligne 5 du LCD */
    BSP_LCD_ClearStringLine(5);
 800099e:	2005      	movs	r0, #5
 80009a0:	f000 fc9e 	bl	80012e0 <BSP_LCD_ClearStringLine>
    BSP_LCD_DisplayStringAtLine(5, (uint8_t *)msg);
 80009a4:	1d3b      	adds	r3, r7, #4
 80009a6:	4619      	mov	r1, r3
 80009a8:	2005      	movs	r0, #5
 80009aa:	f000 fdff 	bl	80015ac <BSP_LCD_DisplayStringAtLine>

    HAL_Delay(1000);  // Délai d'une seconde
 80009ae:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80009b2:	f001 fe45 	bl	8002640 <HAL_Delay>
    HAL_ADC_Start(&hadc1);
 80009b6:	e7c9      	b.n	800094c <main+0x4c>
 80009b8:	ff0000ff 	.word	0xff0000ff
 80009bc:	08007600 	.word	0x08007600
 80009c0:	200000c0 	.word	0x200000c0
 80009c4:	ffff0000 	.word	0xffff0000
 80009c8:	08007614 	.word	0x08007614
 80009cc:	0800762c 	.word	0x0800762c

080009d0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80009d0:	b580      	push	{r7, lr}
 80009d2:	b094      	sub	sp, #80	@ 0x50
 80009d4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80009d6:	f107 0320 	add.w	r3, r7, #32
 80009da:	2230      	movs	r2, #48	@ 0x30
 80009dc:	2100      	movs	r1, #0
 80009de:	4618      	mov	r0, r3
 80009e0:	f006 f97e 	bl	8006ce0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80009e4:	f107 030c 	add.w	r3, r7, #12
 80009e8:	2200      	movs	r2, #0
 80009ea:	601a      	str	r2, [r3, #0]
 80009ec:	605a      	str	r2, [r3, #4]
 80009ee:	609a      	str	r2, [r3, #8]
 80009f0:	60da      	str	r2, [r3, #12]
 80009f2:	611a      	str	r2, [r3, #16]

  __HAL_RCC_PWR_CLK_ENABLE();
 80009f4:	2300      	movs	r3, #0
 80009f6:	60bb      	str	r3, [r7, #8]
 80009f8:	4b28      	ldr	r3, [pc, #160]	@ (8000a9c <SystemClock_Config+0xcc>)
 80009fa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80009fc:	4a27      	ldr	r2, [pc, #156]	@ (8000a9c <SystemClock_Config+0xcc>)
 80009fe:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000a02:	6413      	str	r3, [r2, #64]	@ 0x40
 8000a04:	4b25      	ldr	r3, [pc, #148]	@ (8000a9c <SystemClock_Config+0xcc>)
 8000a06:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000a08:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000a0c:	60bb      	str	r3, [r7, #8]
 8000a0e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000a10:	2300      	movs	r3, #0
 8000a12:	607b      	str	r3, [r7, #4]
 8000a14:	4b22      	ldr	r3, [pc, #136]	@ (8000aa0 <SystemClock_Config+0xd0>)
 8000a16:	681b      	ldr	r3, [r3, #0]
 8000a18:	4a21      	ldr	r2, [pc, #132]	@ (8000aa0 <SystemClock_Config+0xd0>)
 8000a1a:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8000a1e:	6013      	str	r3, [r2, #0]
 8000a20:	4b1f      	ldr	r3, [pc, #124]	@ (8000aa0 <SystemClock_Config+0xd0>)
 8000a22:	681b      	ldr	r3, [r3, #0]
 8000a24:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000a28:	607b      	str	r3, [r7, #4]
 8000a2a:	687b      	ldr	r3, [r7, #4]

  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000a2c:	2301      	movs	r3, #1
 8000a2e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState       = RCC_HSE_ON;
 8000a30:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000a34:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState   = RCC_PLL_ON;
 8000a36:	2302      	movs	r3, #2
 8000a38:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource  = RCC_PLLSOURCE_HSE;
 8000a3a:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8000a3e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM       = 8;
 8000a40:	2308      	movs	r3, #8
 8000a42:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN       = 360;
 8000a44:	f44f 73b4 	mov.w	r3, #360	@ 0x168
 8000a48:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP       = RCC_PLLP_DIV2;
 8000a4a:	2302      	movs	r3, #2
 8000a4c:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ       = 4;
 8000a4e:	2304      	movs	r3, #4
 8000a50:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000a52:	f107 0320 	add.w	r3, r7, #32
 8000a56:	4618      	mov	r0, r3
 8000a58:	f003 fe34 	bl	80046c4 <HAL_RCC_OscConfig>
 8000a5c:	4603      	mov	r3, r0
 8000a5e:	2b00      	cmp	r3, #0
 8000a60:	d001      	beq.n	8000a66 <SystemClock_Config+0x96>
  {
    Error_Handler();
 8000a62:	f000 f939 	bl	8000cd8 <Error_Handler>
  }
  RCC_ClkInitStruct.ClockType      = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000a66:	230f      	movs	r3, #15
 8000a68:	60fb      	str	r3, [r7, #12]
                                    |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource   = RCC_SYSCLKSOURCE_PLLCLK;
 8000a6a:	2302      	movs	r3, #2
 8000a6c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider  = RCC_SYSCLK_DIV1;
 8000a6e:	2300      	movs	r3, #0
 8000a70:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000a72:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8000a76:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000a78:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000a7c:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000a7e:	f107 030c 	add.w	r3, r7, #12
 8000a82:	2105      	movs	r1, #5
 8000a84:	4618      	mov	r0, r3
 8000a86:	f004 f895 	bl	8004bb4 <HAL_RCC_ClockConfig>
 8000a8a:	4603      	mov	r3, r0
 8000a8c:	2b00      	cmp	r3, #0
 8000a8e:	d001      	beq.n	8000a94 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8000a90:	f000 f922 	bl	8000cd8 <Error_Handler>
  }
}
 8000a94:	bf00      	nop
 8000a96:	3750      	adds	r7, #80	@ 0x50
 8000a98:	46bd      	mov	sp, r7
 8000a9a:	bd80      	pop	{r7, pc}
 8000a9c:	40023800 	.word	0x40023800
 8000aa0:	40007000 	.word	0x40007000

08000aa4 <MX_ADC1_Init>:
/**
  * @brief ADC1 Initialization Function – configuration pour lire la sortie analogique du capteur
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000aa4:	b580      	push	{r7, lr}
 8000aa6:	b084      	sub	sp, #16
 8000aa8:	af00      	add	r7, sp, #0
  ADC_ChannelConfTypeDef sConfig = {0};
 8000aaa:	463b      	mov	r3, r7
 8000aac:	2200      	movs	r2, #0
 8000aae:	601a      	str	r2, [r3, #0]
 8000ab0:	605a      	str	r2, [r3, #4]
 8000ab2:	609a      	str	r2, [r3, #8]
 8000ab4:	60da      	str	r2, [r3, #12]

  hadc1.Instance = ADC1;
 8000ab6:	4b21      	ldr	r3, [pc, #132]	@ (8000b3c <MX_ADC1_Init+0x98>)
 8000ab8:	4a21      	ldr	r2, [pc, #132]	@ (8000b40 <MX_ADC1_Init+0x9c>)
 8000aba:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8000abc:	4b1f      	ldr	r3, [pc, #124]	@ (8000b3c <MX_ADC1_Init+0x98>)
 8000abe:	2200      	movs	r2, #0
 8000ac0:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000ac2:	4b1e      	ldr	r3, [pc, #120]	@ (8000b3c <MX_ADC1_Init+0x98>)
 8000ac4:	2200      	movs	r2, #0
 8000ac6:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 8000ac8:	4b1c      	ldr	r3, [pc, #112]	@ (8000b3c <MX_ADC1_Init+0x98>)
 8000aca:	2200      	movs	r2, #0
 8000acc:	611a      	str	r2, [r3, #16]
  // On démarre l'ADC en mode single conversion (démarrage/arrêt pour chaque lecture)
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000ace:	4b1b      	ldr	r3, [pc, #108]	@ (8000b3c <MX_ADC1_Init+0x98>)
 8000ad0:	2200      	movs	r2, #0
 8000ad2:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000ad4:	4b19      	ldr	r3, [pc, #100]	@ (8000b3c <MX_ADC1_Init+0x98>)
 8000ad6:	2200      	movs	r2, #0
 8000ad8:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000adc:	4b17      	ldr	r3, [pc, #92]	@ (8000b3c <MX_ADC1_Init+0x98>)
 8000ade:	2200      	movs	r2, #0
 8000ae0:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000ae2:	4b16      	ldr	r3, [pc, #88]	@ (8000b3c <MX_ADC1_Init+0x98>)
 8000ae4:	4a17      	ldr	r2, [pc, #92]	@ (8000b44 <MX_ADC1_Init+0xa0>)
 8000ae6:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000ae8:	4b14      	ldr	r3, [pc, #80]	@ (8000b3c <MX_ADC1_Init+0x98>)
 8000aea:	2200      	movs	r2, #0
 8000aec:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8000aee:	4b13      	ldr	r3, [pc, #76]	@ (8000b3c <MX_ADC1_Init+0x98>)
 8000af0:	2201      	movs	r2, #1
 8000af2:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000af4:	4b11      	ldr	r3, [pc, #68]	@ (8000b3c <MX_ADC1_Init+0x98>)
 8000af6:	2200      	movs	r2, #0
 8000af8:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000afc:	4b0f      	ldr	r3, [pc, #60]	@ (8000b3c <MX_ADC1_Init+0x98>)
 8000afe:	2201      	movs	r2, #1
 8000b00:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000b02:	480e      	ldr	r0, [pc, #56]	@ (8000b3c <MX_ADC1_Init+0x98>)
 8000b04:	f001 fdc0 	bl	8002688 <HAL_ADC_Init>
 8000b08:	4603      	mov	r3, r0
 8000b0a:	2b00      	cmp	r3, #0
 8000b0c:	d001      	beq.n	8000b12 <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 8000b0e:	f000 f8e3 	bl	8000cd8 <Error_Handler>
  }
  /* Configuration du canal ADC – adapter le canal selon votre câblage (ex: ADC_CHANNEL_1 pour PA1) */
  sConfig.Channel = ADC_CHANNEL_1;
 8000b12:	2301      	movs	r3, #1
 8000b14:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8000b16:	2301      	movs	r3, #1
 8000b18:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_15CYCLES;
 8000b1a:	2301      	movs	r3, #1
 8000b1c:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000b1e:	463b      	mov	r3, r7
 8000b20:	4619      	mov	r1, r3
 8000b22:	4806      	ldr	r0, [pc, #24]	@ (8000b3c <MX_ADC1_Init+0x98>)
 8000b24:	f001 ff92 	bl	8002a4c <HAL_ADC_ConfigChannel>
 8000b28:	4603      	mov	r3, r0
 8000b2a:	2b00      	cmp	r3, #0
 8000b2c:	d001      	beq.n	8000b32 <MX_ADC1_Init+0x8e>
  {
    Error_Handler();
 8000b2e:	f000 f8d3 	bl	8000cd8 <Error_Handler>
  }
}
 8000b32:	bf00      	nop
 8000b34:	3710      	adds	r7, #16
 8000b36:	46bd      	mov	sp, r7
 8000b38:	bd80      	pop	{r7, pc}
 8000b3a:	bf00      	nop
 8000b3c:	200000c0 	.word	0x200000c0
 8000b40:	40012000 	.word	0x40012000
 8000b44:	0f000001 	.word	0x0f000001

08000b48 <MX_USART1_UART_Init>:
/**
  * @brief USART1 Initialization Function
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000b48:	b580      	push	{r7, lr}
 8000b4a:	af00      	add	r7, sp, #0
  huart1.Instance = USART1;
 8000b4c:	4b11      	ldr	r3, [pc, #68]	@ (8000b94 <MX_USART1_UART_Init+0x4c>)
 8000b4e:	4a12      	ldr	r2, [pc, #72]	@ (8000b98 <MX_USART1_UART_Init+0x50>)
 8000b50:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000b52:	4b10      	ldr	r3, [pc, #64]	@ (8000b94 <MX_USART1_UART_Init+0x4c>)
 8000b54:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000b58:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000b5a:	4b0e      	ldr	r3, [pc, #56]	@ (8000b94 <MX_USART1_UART_Init+0x4c>)
 8000b5c:	2200      	movs	r2, #0
 8000b5e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000b60:	4b0c      	ldr	r3, [pc, #48]	@ (8000b94 <MX_USART1_UART_Init+0x4c>)
 8000b62:	2200      	movs	r2, #0
 8000b64:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000b66:	4b0b      	ldr	r3, [pc, #44]	@ (8000b94 <MX_USART1_UART_Init+0x4c>)
 8000b68:	2200      	movs	r2, #0
 8000b6a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000b6c:	4b09      	ldr	r3, [pc, #36]	@ (8000b94 <MX_USART1_UART_Init+0x4c>)
 8000b6e:	220c      	movs	r2, #12
 8000b70:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000b72:	4b08      	ldr	r3, [pc, #32]	@ (8000b94 <MX_USART1_UART_Init+0x4c>)
 8000b74:	2200      	movs	r2, #0
 8000b76:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000b78:	4b06      	ldr	r3, [pc, #24]	@ (8000b94 <MX_USART1_UART_Init+0x4c>)
 8000b7a:	2200      	movs	r2, #0
 8000b7c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000b7e:	4805      	ldr	r0, [pc, #20]	@ (8000b94 <MX_USART1_UART_Init+0x4c>)
 8000b80:	f005 fa90 	bl	80060a4 <HAL_UART_Init>
 8000b84:	4603      	mov	r3, r0
 8000b86:	2b00      	cmp	r3, #0
 8000b88:	d001      	beq.n	8000b8e <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8000b8a:	f000 f8a5 	bl	8000cd8 <Error_Handler>
  }
}
 8000b8e:	bf00      	nop
 8000b90:	bd80      	pop	{r7, pc}
 8000b92:	bf00      	nop
 8000b94:	20000148 	.word	0x20000148
 8000b98:	40011000 	.word	0x40011000

08000b9c <MX_GPIO_Init>:
/**
  * @brief GPIO Initialization Function
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000b9c:	b580      	push	{r7, lr}
 8000b9e:	b08e      	sub	sp, #56	@ 0x38
 8000ba0:	af00      	add	r7, sp, #0
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000ba2:	2300      	movs	r3, #0
 8000ba4:	623b      	str	r3, [r7, #32]
 8000ba6:	4b4a      	ldr	r3, [pc, #296]	@ (8000cd0 <MX_GPIO_Init+0x134>)
 8000ba8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000baa:	4a49      	ldr	r2, [pc, #292]	@ (8000cd0 <MX_GPIO_Init+0x134>)
 8000bac:	f043 0320 	orr.w	r3, r3, #32
 8000bb0:	6313      	str	r3, [r2, #48]	@ 0x30
 8000bb2:	4b47      	ldr	r3, [pc, #284]	@ (8000cd0 <MX_GPIO_Init+0x134>)
 8000bb4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000bb6:	f003 0320 	and.w	r3, r3, #32
 8000bba:	623b      	str	r3, [r7, #32]
 8000bbc:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000bbe:	2300      	movs	r3, #0
 8000bc0:	61fb      	str	r3, [r7, #28]
 8000bc2:	4b43      	ldr	r3, [pc, #268]	@ (8000cd0 <MX_GPIO_Init+0x134>)
 8000bc4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000bc6:	4a42      	ldr	r2, [pc, #264]	@ (8000cd0 <MX_GPIO_Init+0x134>)
 8000bc8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000bcc:	6313      	str	r3, [r2, #48]	@ 0x30
 8000bce:	4b40      	ldr	r3, [pc, #256]	@ (8000cd0 <MX_GPIO_Init+0x134>)
 8000bd0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000bd2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000bd6:	61fb      	str	r3, [r7, #28]
 8000bd8:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000bda:	2300      	movs	r3, #0
 8000bdc:	61bb      	str	r3, [r7, #24]
 8000bde:	4b3c      	ldr	r3, [pc, #240]	@ (8000cd0 <MX_GPIO_Init+0x134>)
 8000be0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000be2:	4a3b      	ldr	r2, [pc, #236]	@ (8000cd0 <MX_GPIO_Init+0x134>)
 8000be4:	f043 0304 	orr.w	r3, r3, #4
 8000be8:	6313      	str	r3, [r2, #48]	@ 0x30
 8000bea:	4b39      	ldr	r3, [pc, #228]	@ (8000cd0 <MX_GPIO_Init+0x134>)
 8000bec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000bee:	f003 0304 	and.w	r3, r3, #4
 8000bf2:	61bb      	str	r3, [r7, #24]
 8000bf4:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000bf6:	2300      	movs	r3, #0
 8000bf8:	617b      	str	r3, [r7, #20]
 8000bfa:	4b35      	ldr	r3, [pc, #212]	@ (8000cd0 <MX_GPIO_Init+0x134>)
 8000bfc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000bfe:	4a34      	ldr	r2, [pc, #208]	@ (8000cd0 <MX_GPIO_Init+0x134>)
 8000c00:	f043 0301 	orr.w	r3, r3, #1
 8000c04:	6313      	str	r3, [r2, #48]	@ 0x30
 8000c06:	4b32      	ldr	r3, [pc, #200]	@ (8000cd0 <MX_GPIO_Init+0x134>)
 8000c08:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c0a:	f003 0301 	and.w	r3, r3, #1
 8000c0e:	617b      	str	r3, [r7, #20]
 8000c10:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c12:	2300      	movs	r3, #0
 8000c14:	613b      	str	r3, [r7, #16]
 8000c16:	4b2e      	ldr	r3, [pc, #184]	@ (8000cd0 <MX_GPIO_Init+0x134>)
 8000c18:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c1a:	4a2d      	ldr	r2, [pc, #180]	@ (8000cd0 <MX_GPIO_Init+0x134>)
 8000c1c:	f043 0302 	orr.w	r3, r3, #2
 8000c20:	6313      	str	r3, [r2, #48]	@ 0x30
 8000c22:	4b2b      	ldr	r3, [pc, #172]	@ (8000cd0 <MX_GPIO_Init+0x134>)
 8000c24:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c26:	f003 0302 	and.w	r3, r3, #2
 8000c2a:	613b      	str	r3, [r7, #16]
 8000c2c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000c2e:	2300      	movs	r3, #0
 8000c30:	60fb      	str	r3, [r7, #12]
 8000c32:	4b27      	ldr	r3, [pc, #156]	@ (8000cd0 <MX_GPIO_Init+0x134>)
 8000c34:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c36:	4a26      	ldr	r2, [pc, #152]	@ (8000cd0 <MX_GPIO_Init+0x134>)
 8000c38:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000c3c:	6313      	str	r3, [r2, #48]	@ 0x30
 8000c3e:	4b24      	ldr	r3, [pc, #144]	@ (8000cd0 <MX_GPIO_Init+0x134>)
 8000c40:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c42:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000c46:	60fb      	str	r3, [r7, #12]
 8000c48:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000c4a:	2300      	movs	r3, #0
 8000c4c:	60bb      	str	r3, [r7, #8]
 8000c4e:	4b20      	ldr	r3, [pc, #128]	@ (8000cd0 <MX_GPIO_Init+0x134>)
 8000c50:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c52:	4a1f      	ldr	r2, [pc, #124]	@ (8000cd0 <MX_GPIO_Init+0x134>)
 8000c54:	f043 0310 	orr.w	r3, r3, #16
 8000c58:	6313      	str	r3, [r2, #48]	@ 0x30
 8000c5a:	4b1d      	ldr	r3, [pc, #116]	@ (8000cd0 <MX_GPIO_Init+0x134>)
 8000c5c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c5e:	f003 0310 	and.w	r3, r3, #16
 8000c62:	60bb      	str	r3, [r7, #8]
 8000c64:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000c66:	2300      	movs	r3, #0
 8000c68:	607b      	str	r3, [r7, #4]
 8000c6a:	4b19      	ldr	r3, [pc, #100]	@ (8000cd0 <MX_GPIO_Init+0x134>)
 8000c6c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c6e:	4a18      	ldr	r2, [pc, #96]	@ (8000cd0 <MX_GPIO_Init+0x134>)
 8000c70:	f043 0308 	orr.w	r3, r3, #8
 8000c74:	6313      	str	r3, [r2, #48]	@ 0x30
 8000c76:	4b16      	ldr	r3, [pc, #88]	@ (8000cd0 <MX_GPIO_Init+0x134>)
 8000c78:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c7a:	f003 0308 	and.w	r3, r3, #8
 8000c7e:	607b      	str	r3, [r7, #4]
 8000c80:	687b      	ldr	r3, [r7, #4]

  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c82:	2300      	movs	r3, #0
 8000c84:	603b      	str	r3, [r7, #0]
 8000c86:	4b12      	ldr	r3, [pc, #72]	@ (8000cd0 <MX_GPIO_Init+0x134>)
 8000c88:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c8a:	4a11      	ldr	r2, [pc, #68]	@ (8000cd0 <MX_GPIO_Init+0x134>)
 8000c8c:	f043 0301 	orr.w	r3, r3, #1
 8000c90:	6313      	str	r3, [r2, #48]	@ 0x30
 8000c92:	4b0f      	ldr	r3, [pc, #60]	@ (8000cd0 <MX_GPIO_Init+0x134>)
 8000c94:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c96:	f003 0301 	and.w	r3, r3, #1
 8000c9a:	603b      	str	r3, [r7, #0]
 8000c9c:	683b      	ldr	r3, [r7, #0]

  /* Configuration de la broche PA0 en mode entrée pour la sortie digitale (DO)
     – elle reste configurée même si nous utilisons ici l’ADC pour AO sur un autre canal. */
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c9e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000ca2:	2200      	movs	r2, #0
 8000ca4:	601a      	str	r2, [r3, #0]
 8000ca6:	605a      	str	r2, [r3, #4]
 8000ca8:	609a      	str	r2, [r3, #8]
 8000caa:	60da      	str	r2, [r3, #12]
 8000cac:	611a      	str	r2, [r3, #16]
  GPIO_InitStruct.Pin = MQ2_DO_PIN;
 8000cae:	2301      	movs	r3, #1
 8000cb0:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000cb2:	2300      	movs	r3, #0
 8000cb4:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cb6:	2300      	movs	r3, #0
 8000cb8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(MQ2_DO_GPIO_PORT, &GPIO_InitStruct);
 8000cba:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000cbe:	4619      	mov	r1, r3
 8000cc0:	4804      	ldr	r0, [pc, #16]	@ (8000cd4 <MX_GPIO_Init+0x138>)
 8000cc2:	f002 ff5d 	bl	8003b80 <HAL_GPIO_Init>
}
 8000cc6:	bf00      	nop
 8000cc8:	3738      	adds	r7, #56	@ 0x38
 8000cca:	46bd      	mov	sp, r7
 8000ccc:	bd80      	pop	{r7, pc}
 8000cce:	bf00      	nop
 8000cd0:	40023800 	.word	0x40023800
 8000cd4:	40020000 	.word	0x40020000

08000cd8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000cd8:	b480      	push	{r7}
 8000cda:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000cdc:	b672      	cpsid	i
}
 8000cde:	bf00      	nop
  __disable_irq();
  while (1)
 8000ce0:	bf00      	nop
 8000ce2:	e7fd      	b.n	8000ce0 <Error_Handler+0x8>

08000ce4 <SPIx_Init>:

/**
  * @brief  SPIx Bus initialization
  */
static void SPIx_Init(void)
{
 8000ce4:	b580      	push	{r7, lr}
 8000ce6:	af00      	add	r7, sp, #0
  if(HAL_SPI_GetState(&SpiHandle) == HAL_SPI_STATE_RESET)
 8000ce8:	4819      	ldr	r0, [pc, #100]	@ (8000d50 <SPIx_Init+0x6c>)
 8000cea:	f005 f88b 	bl	8005e04 <HAL_SPI_GetState>
 8000cee:	4603      	mov	r3, r0
 8000cf0:	2b00      	cmp	r3, #0
 8000cf2:	d12b      	bne.n	8000d4c <SPIx_Init+0x68>
  {
    /* SPI configuration -----------------------------------------------------*/
    SpiHandle.Instance = DISCOVERY_SPIx;
 8000cf4:	4b16      	ldr	r3, [pc, #88]	@ (8000d50 <SPIx_Init+0x6c>)
 8000cf6:	4a17      	ldr	r2, [pc, #92]	@ (8000d54 <SPIx_Init+0x70>)
 8000cf8:	601a      	str	r2, [r3, #0]
       to verify these constraints:
       - ILI9341 LCD SPI interface max baudrate is 10MHz for write and 6.66MHz for read
       - l3gd20 SPI interface max baudrate is 10MHz for write/read
       - PCLK2 frequency is set to 90 MHz 
    */  
    SpiHandle.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8000cfa:	4b15      	ldr	r3, [pc, #84]	@ (8000d50 <SPIx_Init+0x6c>)
 8000cfc:	2218      	movs	r2, #24
 8000cfe:	61da      	str	r2, [r3, #28]

    /* On STM32F429I-Discovery, LCD ID cannot be read then keep a common configuration */
    /* for LCD and GYRO (SPI_DIRECTION_2LINES) */
    /* Note: To read a register a LCD, SPI_DIRECTION_1LINE should be set */
    SpiHandle.Init.Direction      = SPI_DIRECTION_2LINES;
 8000d00:	4b13      	ldr	r3, [pc, #76]	@ (8000d50 <SPIx_Init+0x6c>)
 8000d02:	2200      	movs	r2, #0
 8000d04:	609a      	str	r2, [r3, #8]
    SpiHandle.Init.CLKPhase       = SPI_PHASE_1EDGE;
 8000d06:	4b12      	ldr	r3, [pc, #72]	@ (8000d50 <SPIx_Init+0x6c>)
 8000d08:	2200      	movs	r2, #0
 8000d0a:	615a      	str	r2, [r3, #20]
    SpiHandle.Init.CLKPolarity    = SPI_POLARITY_LOW;
 8000d0c:	4b10      	ldr	r3, [pc, #64]	@ (8000d50 <SPIx_Init+0x6c>)
 8000d0e:	2200      	movs	r2, #0
 8000d10:	611a      	str	r2, [r3, #16]
    SpiHandle.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLED;
 8000d12:	4b0f      	ldr	r3, [pc, #60]	@ (8000d50 <SPIx_Init+0x6c>)
 8000d14:	2200      	movs	r2, #0
 8000d16:	629a      	str	r2, [r3, #40]	@ 0x28
    SpiHandle.Init.CRCPolynomial  = 7;
 8000d18:	4b0d      	ldr	r3, [pc, #52]	@ (8000d50 <SPIx_Init+0x6c>)
 8000d1a:	2207      	movs	r2, #7
 8000d1c:	62da      	str	r2, [r3, #44]	@ 0x2c
    SpiHandle.Init.DataSize       = SPI_DATASIZE_8BIT;
 8000d1e:	4b0c      	ldr	r3, [pc, #48]	@ (8000d50 <SPIx_Init+0x6c>)
 8000d20:	2200      	movs	r2, #0
 8000d22:	60da      	str	r2, [r3, #12]
    SpiHandle.Init.FirstBit       = SPI_FIRSTBIT_MSB;
 8000d24:	4b0a      	ldr	r3, [pc, #40]	@ (8000d50 <SPIx_Init+0x6c>)
 8000d26:	2200      	movs	r2, #0
 8000d28:	621a      	str	r2, [r3, #32]
    SpiHandle.Init.NSS            = SPI_NSS_SOFT;
 8000d2a:	4b09      	ldr	r3, [pc, #36]	@ (8000d50 <SPIx_Init+0x6c>)
 8000d2c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000d30:	619a      	str	r2, [r3, #24]
    SpiHandle.Init.TIMode         = SPI_TIMODE_DISABLED;
 8000d32:	4b07      	ldr	r3, [pc, #28]	@ (8000d50 <SPIx_Init+0x6c>)
 8000d34:	2200      	movs	r2, #0
 8000d36:	625a      	str	r2, [r3, #36]	@ 0x24
    SpiHandle.Init.Mode           = SPI_MODE_MASTER;
 8000d38:	4b05      	ldr	r3, [pc, #20]	@ (8000d50 <SPIx_Init+0x6c>)
 8000d3a:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8000d3e:	605a      	str	r2, [r3, #4]
  
    SPIx_MspInit(&SpiHandle);
 8000d40:	4803      	ldr	r0, [pc, #12]	@ (8000d50 <SPIx_Init+0x6c>)
 8000d42:	f000 f853 	bl	8000dec <SPIx_MspInit>
    HAL_SPI_Init(&SpiHandle);
 8000d46:	4802      	ldr	r0, [pc, #8]	@ (8000d50 <SPIx_Init+0x6c>)
 8000d48:	f004 fba5 	bl	8005496 <HAL_SPI_Init>
  } 
}
 8000d4c:	bf00      	nop
 8000d4e:	bd80      	pop	{r7, pc}
 8000d50:	20000190 	.word	0x20000190
 8000d54:	40015000 	.word	0x40015000

08000d58 <SPIx_Read>:
  * @brief  Reads 4 bytes from device.
  * @param  ReadSize: Number of bytes to read (max 4 bytes)
  * @retval Value read on the SPI
  */
static uint32_t SPIx_Read(uint8_t ReadSize)
{
 8000d58:	b580      	push	{r7, lr}
 8000d5a:	b084      	sub	sp, #16
 8000d5c:	af00      	add	r7, sp, #0
 8000d5e:	4603      	mov	r3, r0
 8000d60:	71fb      	strb	r3, [r7, #7]
  HAL_StatusTypeDef status = HAL_OK;
 8000d62:	2300      	movs	r3, #0
 8000d64:	73fb      	strb	r3, [r7, #15]
  uint32_t readvalue;
  
  status = HAL_SPI_Receive(&SpiHandle, (uint8_t*) &readvalue, ReadSize, SpixTimeout);
 8000d66:	79fb      	ldrb	r3, [r7, #7]
 8000d68:	b29a      	uxth	r2, r3
 8000d6a:	4b09      	ldr	r3, [pc, #36]	@ (8000d90 <SPIx_Read+0x38>)
 8000d6c:	681b      	ldr	r3, [r3, #0]
 8000d6e:	f107 0108 	add.w	r1, r7, #8
 8000d72:	4808      	ldr	r0, [pc, #32]	@ (8000d94 <SPIx_Read+0x3c>)
 8000d74:	f004 fd84 	bl	8005880 <HAL_SPI_Receive>
 8000d78:	4603      	mov	r3, r0
 8000d7a:	73fb      	strb	r3, [r7, #15]
  
  /* Check the communication status */
  if(status != HAL_OK)
 8000d7c:	7bfb      	ldrb	r3, [r7, #15]
 8000d7e:	2b00      	cmp	r3, #0
 8000d80:	d001      	beq.n	8000d86 <SPIx_Read+0x2e>
  {
    /* Re-Initialize the BUS */
    SPIx_Error();
 8000d82:	f000 f827 	bl	8000dd4 <SPIx_Error>
  }
  
  return readvalue;
 8000d86:	68bb      	ldr	r3, [r7, #8]
}
 8000d88:	4618      	mov	r0, r3
 8000d8a:	3710      	adds	r7, #16
 8000d8c:	46bd      	mov	sp, r7
 8000d8e:	bd80      	pop	{r7, pc}
 8000d90:	20000040 	.word	0x20000040
 8000d94:	20000190 	.word	0x20000190

08000d98 <SPIx_Write>:
/**
  * @brief  Writes a byte to device.
  * @param  Value: value to be written
  */
static void SPIx_Write(uint16_t Value)
{
 8000d98:	b580      	push	{r7, lr}
 8000d9a:	b084      	sub	sp, #16
 8000d9c:	af00      	add	r7, sp, #0
 8000d9e:	4603      	mov	r3, r0
 8000da0:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status = HAL_OK;
 8000da2:	2300      	movs	r3, #0
 8000da4:	73fb      	strb	r3, [r7, #15]
  
  status = HAL_SPI_Transmit(&SpiHandle, (uint8_t*) &Value, 1, SpixTimeout);
 8000da6:	4b09      	ldr	r3, [pc, #36]	@ (8000dcc <SPIx_Write+0x34>)
 8000da8:	681b      	ldr	r3, [r3, #0]
 8000daa:	1db9      	adds	r1, r7, #6
 8000dac:	2201      	movs	r2, #1
 8000dae:	4808      	ldr	r0, [pc, #32]	@ (8000dd0 <SPIx_Write+0x38>)
 8000db0:	f004 fc22 	bl	80055f8 <HAL_SPI_Transmit>
 8000db4:	4603      	mov	r3, r0
 8000db6:	73fb      	strb	r3, [r7, #15]
  
  /* Check the communication status */
  if(status != HAL_OK)
 8000db8:	7bfb      	ldrb	r3, [r7, #15]
 8000dba:	2b00      	cmp	r3, #0
 8000dbc:	d001      	beq.n	8000dc2 <SPIx_Write+0x2a>
  {
    /* Re-Initialize the BUS */
    SPIx_Error();
 8000dbe:	f000 f809 	bl	8000dd4 <SPIx_Error>
  }
}
 8000dc2:	bf00      	nop
 8000dc4:	3710      	adds	r7, #16
 8000dc6:	46bd      	mov	sp, r7
 8000dc8:	bd80      	pop	{r7, pc}
 8000dca:	bf00      	nop
 8000dcc:	20000040 	.word	0x20000040
 8000dd0:	20000190 	.word	0x20000190

08000dd4 <SPIx_Error>:

/**
  * @brief  SPIx error treatment function.
  */
static void SPIx_Error(void)
{
 8000dd4:	b580      	push	{r7, lr}
 8000dd6:	af00      	add	r7, sp, #0
  /* De-initialize the SPI communication BUS */
  HAL_SPI_DeInit(&SpiHandle);
 8000dd8:	4803      	ldr	r0, [pc, #12]	@ (8000de8 <SPIx_Error+0x14>)
 8000dda:	f004 fbe5 	bl	80055a8 <HAL_SPI_DeInit>
  
  /* Re- Initialize the SPI communication BUS */
  SPIx_Init();
 8000dde:	f7ff ff81 	bl	8000ce4 <SPIx_Init>
}
 8000de2:	bf00      	nop
 8000de4:	bd80      	pop	{r7, pc}
 8000de6:	bf00      	nop
 8000de8:	20000190 	.word	0x20000190

08000dec <SPIx_MspInit>:
/**
  * @brief  SPI MSP Init.
  * @param  hspi: SPI handle
  */
static void SPIx_MspInit(SPI_HandleTypeDef *hspi)
{
 8000dec:	b580      	push	{r7, lr}
 8000dee:	b08a      	sub	sp, #40	@ 0x28
 8000df0:	af00      	add	r7, sp, #0
 8000df2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef   GPIO_InitStructure;

  /* Enable SPIx clock */
  DISCOVERY_SPIx_CLK_ENABLE();
 8000df4:	2300      	movs	r3, #0
 8000df6:	613b      	str	r3, [r7, #16]
 8000df8:	4b17      	ldr	r3, [pc, #92]	@ (8000e58 <SPIx_MspInit+0x6c>)
 8000dfa:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000dfc:	4a16      	ldr	r2, [pc, #88]	@ (8000e58 <SPIx_MspInit+0x6c>)
 8000dfe:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000e02:	6453      	str	r3, [r2, #68]	@ 0x44
 8000e04:	4b14      	ldr	r3, [pc, #80]	@ (8000e58 <SPIx_MspInit+0x6c>)
 8000e06:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000e08:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8000e0c:	613b      	str	r3, [r7, #16]
 8000e0e:	693b      	ldr	r3, [r7, #16]

  /* Enable DISCOVERY_SPI GPIO clock */
  DISCOVERY_SPIx_GPIO_CLK_ENABLE();
 8000e10:	2300      	movs	r3, #0
 8000e12:	60fb      	str	r3, [r7, #12]
 8000e14:	4b10      	ldr	r3, [pc, #64]	@ (8000e58 <SPIx_MspInit+0x6c>)
 8000e16:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e18:	4a0f      	ldr	r2, [pc, #60]	@ (8000e58 <SPIx_MspInit+0x6c>)
 8000e1a:	f043 0320 	orr.w	r3, r3, #32
 8000e1e:	6313      	str	r3, [r2, #48]	@ 0x30
 8000e20:	4b0d      	ldr	r3, [pc, #52]	@ (8000e58 <SPIx_MspInit+0x6c>)
 8000e22:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e24:	f003 0320 	and.w	r3, r3, #32
 8000e28:	60fb      	str	r3, [r7, #12]
 8000e2a:	68fb      	ldr	r3, [r7, #12]

  /* configure SPI SCK, MOSI and MISO */    
  GPIO_InitStructure.Pin    = (DISCOVERY_SPIx_SCK_PIN | DISCOVERY_SPIx_MOSI_PIN | DISCOVERY_SPIx_MISO_PIN);
 8000e2c:	f44f 7360 	mov.w	r3, #896	@ 0x380
 8000e30:	617b      	str	r3, [r7, #20]
  GPIO_InitStructure.Mode   = GPIO_MODE_AF_PP;
 8000e32:	2302      	movs	r3, #2
 8000e34:	61bb      	str	r3, [r7, #24]
  GPIO_InitStructure.Pull   = GPIO_PULLDOWN;
 8000e36:	2302      	movs	r3, #2
 8000e38:	61fb      	str	r3, [r7, #28]
  GPIO_InitStructure.Speed  = GPIO_SPEED_MEDIUM;
 8000e3a:	2301      	movs	r3, #1
 8000e3c:	623b      	str	r3, [r7, #32]
  GPIO_InitStructure.Alternate = DISCOVERY_SPIx_AF;
 8000e3e:	2305      	movs	r3, #5
 8000e40:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(DISCOVERY_SPIx_GPIO_PORT, &GPIO_InitStructure);      
 8000e42:	f107 0314 	add.w	r3, r7, #20
 8000e46:	4619      	mov	r1, r3
 8000e48:	4804      	ldr	r0, [pc, #16]	@ (8000e5c <SPIx_MspInit+0x70>)
 8000e4a:	f002 fe99 	bl	8003b80 <HAL_GPIO_Init>
}
 8000e4e:	bf00      	nop
 8000e50:	3728      	adds	r7, #40	@ 0x28
 8000e52:	46bd      	mov	sp, r7
 8000e54:	bd80      	pop	{r7, pc}
 8000e56:	bf00      	nop
 8000e58:	40023800 	.word	0x40023800
 8000e5c:	40021400 	.word	0x40021400

08000e60 <LCD_IO_Init>:

/**
  * @brief  Configures the LCD_SPI interface.
  */
void LCD_IO_Init(void)
{
 8000e60:	b580      	push	{r7, lr}
 8000e62:	b088      	sub	sp, #32
 8000e64:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStructure;
  
  if(Is_LCD_IO_Initialized == 0)
 8000e66:	4b36      	ldr	r3, [pc, #216]	@ (8000f40 <LCD_IO_Init+0xe0>)
 8000e68:	781b      	ldrb	r3, [r3, #0]
 8000e6a:	2b00      	cmp	r3, #0
 8000e6c:	d164      	bne.n	8000f38 <LCD_IO_Init+0xd8>
  {
    Is_LCD_IO_Initialized = 1; 
 8000e6e:	4b34      	ldr	r3, [pc, #208]	@ (8000f40 <LCD_IO_Init+0xe0>)
 8000e70:	2201      	movs	r2, #1
 8000e72:	701a      	strb	r2, [r3, #0]
    
    /* Configure NCS in Output Push-Pull mode */
    LCD_WRX_GPIO_CLK_ENABLE();
 8000e74:	2300      	movs	r3, #0
 8000e76:	60bb      	str	r3, [r7, #8]
 8000e78:	4b32      	ldr	r3, [pc, #200]	@ (8000f44 <LCD_IO_Init+0xe4>)
 8000e7a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e7c:	4a31      	ldr	r2, [pc, #196]	@ (8000f44 <LCD_IO_Init+0xe4>)
 8000e7e:	f043 0308 	orr.w	r3, r3, #8
 8000e82:	6313      	str	r3, [r2, #48]	@ 0x30
 8000e84:	4b2f      	ldr	r3, [pc, #188]	@ (8000f44 <LCD_IO_Init+0xe4>)
 8000e86:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e88:	f003 0308 	and.w	r3, r3, #8
 8000e8c:	60bb      	str	r3, [r7, #8]
 8000e8e:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStructure.Pin     = LCD_WRX_PIN;
 8000e90:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000e94:	60fb      	str	r3, [r7, #12]
    GPIO_InitStructure.Mode    = GPIO_MODE_OUTPUT_PP;
 8000e96:	2301      	movs	r3, #1
 8000e98:	613b      	str	r3, [r7, #16]
    GPIO_InitStructure.Pull    = GPIO_NOPULL;
 8000e9a:	2300      	movs	r3, #0
 8000e9c:	617b      	str	r3, [r7, #20]
    GPIO_InitStructure.Speed   = GPIO_SPEED_FAST;
 8000e9e:	2302      	movs	r3, #2
 8000ea0:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(LCD_WRX_GPIO_PORT, &GPIO_InitStructure);
 8000ea2:	f107 030c 	add.w	r3, r7, #12
 8000ea6:	4619      	mov	r1, r3
 8000ea8:	4827      	ldr	r0, [pc, #156]	@ (8000f48 <LCD_IO_Init+0xe8>)
 8000eaa:	f002 fe69 	bl	8003b80 <HAL_GPIO_Init>
    
    LCD_RDX_GPIO_CLK_ENABLE();
 8000eae:	2300      	movs	r3, #0
 8000eb0:	607b      	str	r3, [r7, #4]
 8000eb2:	4b24      	ldr	r3, [pc, #144]	@ (8000f44 <LCD_IO_Init+0xe4>)
 8000eb4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000eb6:	4a23      	ldr	r2, [pc, #140]	@ (8000f44 <LCD_IO_Init+0xe4>)
 8000eb8:	f043 0308 	orr.w	r3, r3, #8
 8000ebc:	6313      	str	r3, [r2, #48]	@ 0x30
 8000ebe:	4b21      	ldr	r3, [pc, #132]	@ (8000f44 <LCD_IO_Init+0xe4>)
 8000ec0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ec2:	f003 0308 	and.w	r3, r3, #8
 8000ec6:	607b      	str	r3, [r7, #4]
 8000ec8:	687b      	ldr	r3, [r7, #4]
    GPIO_InitStructure.Pin     = LCD_RDX_PIN;
 8000eca:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000ece:	60fb      	str	r3, [r7, #12]
    GPIO_InitStructure.Mode    = GPIO_MODE_OUTPUT_PP;
 8000ed0:	2301      	movs	r3, #1
 8000ed2:	613b      	str	r3, [r7, #16]
    GPIO_InitStructure.Pull    = GPIO_NOPULL;
 8000ed4:	2300      	movs	r3, #0
 8000ed6:	617b      	str	r3, [r7, #20]
    GPIO_InitStructure.Speed   = GPIO_SPEED_FAST;
 8000ed8:	2302      	movs	r3, #2
 8000eda:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(LCD_RDX_GPIO_PORT, &GPIO_InitStructure);
 8000edc:	f107 030c 	add.w	r3, r7, #12
 8000ee0:	4619      	mov	r1, r3
 8000ee2:	4819      	ldr	r0, [pc, #100]	@ (8000f48 <LCD_IO_Init+0xe8>)
 8000ee4:	f002 fe4c 	bl	8003b80 <HAL_GPIO_Init>
    
    /* Configure the LCD Control pins ----------------------------------------*/
    LCD_NCS_GPIO_CLK_ENABLE();
 8000ee8:	2300      	movs	r3, #0
 8000eea:	603b      	str	r3, [r7, #0]
 8000eec:	4b15      	ldr	r3, [pc, #84]	@ (8000f44 <LCD_IO_Init+0xe4>)
 8000eee:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ef0:	4a14      	ldr	r2, [pc, #80]	@ (8000f44 <LCD_IO_Init+0xe4>)
 8000ef2:	f043 0304 	orr.w	r3, r3, #4
 8000ef6:	6313      	str	r3, [r2, #48]	@ 0x30
 8000ef8:	4b12      	ldr	r3, [pc, #72]	@ (8000f44 <LCD_IO_Init+0xe4>)
 8000efa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000efc:	f003 0304 	and.w	r3, r3, #4
 8000f00:	603b      	str	r3, [r7, #0]
 8000f02:	683b      	ldr	r3, [r7, #0]
    
    /* Configure NCS in Output Push-Pull mode */
    GPIO_InitStructure.Pin     = LCD_NCS_PIN;
 8000f04:	2304      	movs	r3, #4
 8000f06:	60fb      	str	r3, [r7, #12]
    GPIO_InitStructure.Mode    = GPIO_MODE_OUTPUT_PP;
 8000f08:	2301      	movs	r3, #1
 8000f0a:	613b      	str	r3, [r7, #16]
    GPIO_InitStructure.Pull    = GPIO_NOPULL;
 8000f0c:	2300      	movs	r3, #0
 8000f0e:	617b      	str	r3, [r7, #20]
    GPIO_InitStructure.Speed   = GPIO_SPEED_FAST;
 8000f10:	2302      	movs	r3, #2
 8000f12:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(LCD_NCS_GPIO_PORT, &GPIO_InitStructure);
 8000f14:	f107 030c 	add.w	r3, r7, #12
 8000f18:	4619      	mov	r1, r3
 8000f1a:	480c      	ldr	r0, [pc, #48]	@ (8000f4c <LCD_IO_Init+0xec>)
 8000f1c:	f002 fe30 	bl	8003b80 <HAL_GPIO_Init>
    
    /* Set or Reset the control line */
    LCD_CS_LOW();
 8000f20:	2200      	movs	r2, #0
 8000f22:	2104      	movs	r1, #4
 8000f24:	4809      	ldr	r0, [pc, #36]	@ (8000f4c <LCD_IO_Init+0xec>)
 8000f26:	f003 f8e3 	bl	80040f0 <HAL_GPIO_WritePin>
    LCD_CS_HIGH();
 8000f2a:	2201      	movs	r2, #1
 8000f2c:	2104      	movs	r1, #4
 8000f2e:	4807      	ldr	r0, [pc, #28]	@ (8000f4c <LCD_IO_Init+0xec>)
 8000f30:	f003 f8de 	bl	80040f0 <HAL_GPIO_WritePin>
    
    SPIx_Init();
 8000f34:	f7ff fed6 	bl	8000ce4 <SPIx_Init>
  }
}
 8000f38:	bf00      	nop
 8000f3a:	3720      	adds	r7, #32
 8000f3c:	46bd      	mov	sp, r7
 8000f3e:	bd80      	pop	{r7, pc}
 8000f40:	200001e8 	.word	0x200001e8
 8000f44:	40023800 	.word	0x40023800
 8000f48:	40020c00 	.word	0x40020c00
 8000f4c:	40020800 	.word	0x40020800

08000f50 <LCD_IO_WriteData>:

/**
  * @brief  Writes register value.
  */
void LCD_IO_WriteData(uint16_t RegValue) 
{
 8000f50:	b580      	push	{r7, lr}
 8000f52:	b082      	sub	sp, #8
 8000f54:	af00      	add	r7, sp, #0
 8000f56:	4603      	mov	r3, r0
 8000f58:	80fb      	strh	r3, [r7, #6]
  /* Set WRX to send data */
  LCD_WRX_HIGH();
 8000f5a:	2201      	movs	r2, #1
 8000f5c:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000f60:	480a      	ldr	r0, [pc, #40]	@ (8000f8c <LCD_IO_WriteData+0x3c>)
 8000f62:	f003 f8c5 	bl	80040f0 <HAL_GPIO_WritePin>
  
  /* Reset LCD control line(/CS) and Send data */  
  LCD_CS_LOW();
 8000f66:	2200      	movs	r2, #0
 8000f68:	2104      	movs	r1, #4
 8000f6a:	4809      	ldr	r0, [pc, #36]	@ (8000f90 <LCD_IO_WriteData+0x40>)
 8000f6c:	f003 f8c0 	bl	80040f0 <HAL_GPIO_WritePin>
  SPIx_Write(RegValue);
 8000f70:	88fb      	ldrh	r3, [r7, #6]
 8000f72:	4618      	mov	r0, r3
 8000f74:	f7ff ff10 	bl	8000d98 <SPIx_Write>
  
  /* Deselect: Chip Select high */
  LCD_CS_HIGH();
 8000f78:	2201      	movs	r2, #1
 8000f7a:	2104      	movs	r1, #4
 8000f7c:	4804      	ldr	r0, [pc, #16]	@ (8000f90 <LCD_IO_WriteData+0x40>)
 8000f7e:	f003 f8b7 	bl	80040f0 <HAL_GPIO_WritePin>
}
 8000f82:	bf00      	nop
 8000f84:	3708      	adds	r7, #8
 8000f86:	46bd      	mov	sp, r7
 8000f88:	bd80      	pop	{r7, pc}
 8000f8a:	bf00      	nop
 8000f8c:	40020c00 	.word	0x40020c00
 8000f90:	40020800 	.word	0x40020800

08000f94 <LCD_IO_WriteReg>:

/**
  * @brief  Writes register address.
  */
void LCD_IO_WriteReg(uint8_t Reg) 
{
 8000f94:	b580      	push	{r7, lr}
 8000f96:	b082      	sub	sp, #8
 8000f98:	af00      	add	r7, sp, #0
 8000f9a:	4603      	mov	r3, r0
 8000f9c:	71fb      	strb	r3, [r7, #7]
  /* Reset WRX to send command */
  LCD_WRX_LOW();
 8000f9e:	2200      	movs	r2, #0
 8000fa0:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000fa4:	480a      	ldr	r0, [pc, #40]	@ (8000fd0 <LCD_IO_WriteReg+0x3c>)
 8000fa6:	f003 f8a3 	bl	80040f0 <HAL_GPIO_WritePin>
  
  /* Reset LCD control line(/CS) and Send command */
  LCD_CS_LOW();
 8000faa:	2200      	movs	r2, #0
 8000fac:	2104      	movs	r1, #4
 8000fae:	4809      	ldr	r0, [pc, #36]	@ (8000fd4 <LCD_IO_WriteReg+0x40>)
 8000fb0:	f003 f89e 	bl	80040f0 <HAL_GPIO_WritePin>
  SPIx_Write(Reg);
 8000fb4:	79fb      	ldrb	r3, [r7, #7]
 8000fb6:	b29b      	uxth	r3, r3
 8000fb8:	4618      	mov	r0, r3
 8000fba:	f7ff feed 	bl	8000d98 <SPIx_Write>
  
  /* Deselect: Chip Select high */
  LCD_CS_HIGH();
 8000fbe:	2201      	movs	r2, #1
 8000fc0:	2104      	movs	r1, #4
 8000fc2:	4804      	ldr	r0, [pc, #16]	@ (8000fd4 <LCD_IO_WriteReg+0x40>)
 8000fc4:	f003 f894 	bl	80040f0 <HAL_GPIO_WritePin>
}
 8000fc8:	bf00      	nop
 8000fca:	3708      	adds	r7, #8
 8000fcc:	46bd      	mov	sp, r7
 8000fce:	bd80      	pop	{r7, pc}
 8000fd0:	40020c00 	.word	0x40020c00
 8000fd4:	40020800 	.word	0x40020800

08000fd8 <LCD_IO_ReadData>:
  * @param  RegValue Address of the register to read
  * @param  ReadSize Number of bytes to read
  * @retval Content of the register value
  */
uint32_t LCD_IO_ReadData(uint16_t RegValue, uint8_t ReadSize) 
{
 8000fd8:	b580      	push	{r7, lr}
 8000fda:	b084      	sub	sp, #16
 8000fdc:	af00      	add	r7, sp, #0
 8000fde:	4603      	mov	r3, r0
 8000fe0:	460a      	mov	r2, r1
 8000fe2:	80fb      	strh	r3, [r7, #6]
 8000fe4:	4613      	mov	r3, r2
 8000fe6:	717b      	strb	r3, [r7, #5]
  uint32_t readvalue = 0;
 8000fe8:	2300      	movs	r3, #0
 8000fea:	60fb      	str	r3, [r7, #12]

  /* Select: Chip Select low */
  LCD_CS_LOW();
 8000fec:	2200      	movs	r2, #0
 8000fee:	2104      	movs	r1, #4
 8000ff0:	4810      	ldr	r0, [pc, #64]	@ (8001034 <LCD_IO_ReadData+0x5c>)
 8000ff2:	f003 f87d 	bl	80040f0 <HAL_GPIO_WritePin>

  /* Reset WRX to send command */
  LCD_WRX_LOW();
 8000ff6:	2200      	movs	r2, #0
 8000ff8:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000ffc:	480e      	ldr	r0, [pc, #56]	@ (8001038 <LCD_IO_ReadData+0x60>)
 8000ffe:	f003 f877 	bl	80040f0 <HAL_GPIO_WritePin>
  
  SPIx_Write(RegValue);
 8001002:	88fb      	ldrh	r3, [r7, #6]
 8001004:	4618      	mov	r0, r3
 8001006:	f7ff fec7 	bl	8000d98 <SPIx_Write>
  
  readvalue = SPIx_Read(ReadSize);
 800100a:	797b      	ldrb	r3, [r7, #5]
 800100c:	4618      	mov	r0, r3
 800100e:	f7ff fea3 	bl	8000d58 <SPIx_Read>
 8001012:	60f8      	str	r0, [r7, #12]

  /* Set WRX to send data */
  LCD_WRX_HIGH();
 8001014:	2201      	movs	r2, #1
 8001016:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800101a:	4807      	ldr	r0, [pc, #28]	@ (8001038 <LCD_IO_ReadData+0x60>)
 800101c:	f003 f868 	bl	80040f0 <HAL_GPIO_WritePin>

  /* Deselect: Chip Select high */
  LCD_CS_HIGH();
 8001020:	2201      	movs	r2, #1
 8001022:	2104      	movs	r1, #4
 8001024:	4803      	ldr	r0, [pc, #12]	@ (8001034 <LCD_IO_ReadData+0x5c>)
 8001026:	f003 f863 	bl	80040f0 <HAL_GPIO_WritePin>
  
  return readvalue;
 800102a:	68fb      	ldr	r3, [r7, #12]
}
 800102c:	4618      	mov	r0, r3
 800102e:	3710      	adds	r7, #16
 8001030:	46bd      	mov	sp, r7
 8001032:	bd80      	pop	{r7, pc}
 8001034:	40020800 	.word	0x40020800
 8001038:	40020c00 	.word	0x40020c00

0800103c <LCD_Delay>:
/**
  * @brief  Wait for loop in ms.
  * @param  Delay in ms.
  */
void LCD_Delay(uint32_t Delay)
{
 800103c:	b580      	push	{r7, lr}
 800103e:	b082      	sub	sp, #8
 8001040:	af00      	add	r7, sp, #0
 8001042:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 8001044:	6878      	ldr	r0, [r7, #4]
 8001046:	f001 fafb 	bl	8002640 <HAL_Delay>
}
 800104a:	bf00      	nop
 800104c:	3708      	adds	r7, #8
 800104e:	46bd      	mov	sp, r7
 8001050:	bd80      	pop	{r7, pc}
	...

08001054 <BSP_LCD_Init>:
/**
  * @brief  Initializes the LCD.
  * @retval LCD state
  */
uint8_t BSP_LCD_Init(void)
{ 
 8001054:	b580      	push	{r7, lr}
 8001056:	af00      	add	r7, sp, #0
  /* PIN EXTC is not connected to VDD and then LCD_READ_ID4 is not accessible. */
  /* In this case, ReadID function is bypassed.*/  
  /*if(ili9341_drv.ReadID() == ILI9341_ID)*/

    /* LTDC Configuration ----------------------------------------------------*/
    LtdcHandler.Instance = LTDC;
 8001058:	4b2b      	ldr	r3, [pc, #172]	@ (8001108 <BSP_LCD_Init+0xb4>)
 800105a:	4a2c      	ldr	r2, [pc, #176]	@ (800110c <BSP_LCD_Init+0xb8>)
 800105c:	601a      	str	r2, [r3, #0]
          ActiveH=320 (323-2-2+1)
          VFP=4 (327-320-2-2+1)
      */

    /* Configure horizontal synchronization width */
    LtdcHandler.Init.HorizontalSync = ILI9341_HSYNC;
 800105e:	4b2a      	ldr	r3, [pc, #168]	@ (8001108 <BSP_LCD_Init+0xb4>)
 8001060:	2209      	movs	r2, #9
 8001062:	615a      	str	r2, [r3, #20]
    /* Configure vertical synchronization height */
    LtdcHandler.Init.VerticalSync = ILI9341_VSYNC;
 8001064:	4b28      	ldr	r3, [pc, #160]	@ (8001108 <BSP_LCD_Init+0xb4>)
 8001066:	2201      	movs	r2, #1
 8001068:	619a      	str	r2, [r3, #24]
    /* Configure accumulated horizontal back porch */
    LtdcHandler.Init.AccumulatedHBP = ILI9341_HBP;
 800106a:	4b27      	ldr	r3, [pc, #156]	@ (8001108 <BSP_LCD_Init+0xb4>)
 800106c:	221d      	movs	r2, #29
 800106e:	61da      	str	r2, [r3, #28]
    /* Configure accumulated vertical back porch */
    LtdcHandler.Init.AccumulatedVBP = ILI9341_VBP;
 8001070:	4b25      	ldr	r3, [pc, #148]	@ (8001108 <BSP_LCD_Init+0xb4>)
 8001072:	2203      	movs	r2, #3
 8001074:	621a      	str	r2, [r3, #32]
    /* Configure accumulated active width */
    LtdcHandler.Init.AccumulatedActiveW = 269;
 8001076:	4b24      	ldr	r3, [pc, #144]	@ (8001108 <BSP_LCD_Init+0xb4>)
 8001078:	f240 120d 	movw	r2, #269	@ 0x10d
 800107c:	625a      	str	r2, [r3, #36]	@ 0x24
    /* Configure accumulated active height */
    LtdcHandler.Init.AccumulatedActiveH = 323;
 800107e:	4b22      	ldr	r3, [pc, #136]	@ (8001108 <BSP_LCD_Init+0xb4>)
 8001080:	f240 1243 	movw	r2, #323	@ 0x143
 8001084:	629a      	str	r2, [r3, #40]	@ 0x28
    /* Configure total width */
    LtdcHandler.Init.TotalWidth = 279;
 8001086:	4b20      	ldr	r3, [pc, #128]	@ (8001108 <BSP_LCD_Init+0xb4>)
 8001088:	f240 1217 	movw	r2, #279	@ 0x117
 800108c:	62da      	str	r2, [r3, #44]	@ 0x2c
    /* Configure total height */
    LtdcHandler.Init.TotalHeigh = 327;
 800108e:	4b1e      	ldr	r3, [pc, #120]	@ (8001108 <BSP_LCD_Init+0xb4>)
 8001090:	f240 1247 	movw	r2, #327	@ 0x147
 8001094:	631a      	str	r2, [r3, #48]	@ 0x30
    
    /* Configure R,G,B component values for LCD background color */
    LtdcHandler.Init.Backcolor.Red= 0;
 8001096:	4b1c      	ldr	r3, [pc, #112]	@ (8001108 <BSP_LCD_Init+0xb4>)
 8001098:	2200      	movs	r2, #0
 800109a:	f883 2036 	strb.w	r2, [r3, #54]	@ 0x36
    LtdcHandler.Init.Backcolor.Blue= 0;
 800109e:	4b1a      	ldr	r3, [pc, #104]	@ (8001108 <BSP_LCD_Init+0xb4>)
 80010a0:	2200      	movs	r2, #0
 80010a2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    LtdcHandler.Init.Backcolor.Green= 0;
 80010a6:	4b18      	ldr	r3, [pc, #96]	@ (8001108 <BSP_LCD_Init+0xb4>)
 80010a8:	2200      	movs	r2, #0
 80010aa:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    /* LCD clock configuration */
    /* PLLSAI_VCO Input = HSE_VALUE/PLL_M = 1 Mhz */
    /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN = 192 Mhz */
    /* PLLLCDCLK = PLLSAI_VCO Output/PLLSAIR = 192/4 = 48 Mhz */
    /* LTDC clock frequency = PLLLCDCLK / LTDC_PLLSAI_DIVR_8 = 48/4 = 6Mhz */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 80010ae:	4b18      	ldr	r3, [pc, #96]	@ (8001110 <BSP_LCD_Init+0xbc>)
 80010b0:	2208      	movs	r2, #8
 80010b2:	601a      	str	r2, [r3, #0]
    PeriphClkInitStruct.PLLSAI.PLLSAIN = 192;
 80010b4:	4b16      	ldr	r3, [pc, #88]	@ (8001110 <BSP_LCD_Init+0xbc>)
 80010b6:	22c0      	movs	r2, #192	@ 0xc0
 80010b8:	611a      	str	r2, [r3, #16]
    PeriphClkInitStruct.PLLSAI.PLLSAIR = 4;
 80010ba:	4b15      	ldr	r3, [pc, #84]	@ (8001110 <BSP_LCD_Init+0xbc>)
 80010bc:	2204      	movs	r2, #4
 80010be:	619a      	str	r2, [r3, #24]
    PeriphClkInitStruct.PLLSAIDivR = RCC_PLLSAIDIVR_8;
 80010c0:	4b13      	ldr	r3, [pc, #76]	@ (8001110 <BSP_LCD_Init+0xbc>)
 80010c2:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 80010c6:	625a      	str	r2, [r3, #36]	@ 0x24
    HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct); 
 80010c8:	4811      	ldr	r0, [pc, #68]	@ (8001110 <BSP_LCD_Init+0xbc>)
 80010ca:	f003 ff93 	bl	8004ff4 <HAL_RCCEx_PeriphCLKConfig>
    
    /* Polarity */
    LtdcHandler.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 80010ce:	4b0e      	ldr	r3, [pc, #56]	@ (8001108 <BSP_LCD_Init+0xb4>)
 80010d0:	2200      	movs	r2, #0
 80010d2:	605a      	str	r2, [r3, #4]
    LtdcHandler.Init.VSPolarity = LTDC_VSPOLARITY_AL;
 80010d4:	4b0c      	ldr	r3, [pc, #48]	@ (8001108 <BSP_LCD_Init+0xb4>)
 80010d6:	2200      	movs	r2, #0
 80010d8:	609a      	str	r2, [r3, #8]
    LtdcHandler.Init.DEPolarity = LTDC_DEPOLARITY_AL;
 80010da:	4b0b      	ldr	r3, [pc, #44]	@ (8001108 <BSP_LCD_Init+0xb4>)
 80010dc:	2200      	movs	r2, #0
 80010de:	60da      	str	r2, [r3, #12]
    LtdcHandler.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 80010e0:	4b09      	ldr	r3, [pc, #36]	@ (8001108 <BSP_LCD_Init+0xb4>)
 80010e2:	2200      	movs	r2, #0
 80010e4:	611a      	str	r2, [r3, #16]
    
    BSP_LCD_MspInit();
 80010e6:	f000 fad3 	bl	8001690 <BSP_LCD_MspInit>
    HAL_LTDC_Init(&LtdcHandler); 
 80010ea:	4807      	ldr	r0, [pc, #28]	@ (8001108 <BSP_LCD_Init+0xb4>)
 80010ec:	f003 f81a 	bl	8004124 <HAL_LTDC_Init>
    
    /* Select the device */
    LcdDrv = &ili9341_drv;
 80010f0:	4b08      	ldr	r3, [pc, #32]	@ (8001114 <BSP_LCD_Init+0xc0>)
 80010f2:	4a09      	ldr	r2, [pc, #36]	@ (8001118 <BSP_LCD_Init+0xc4>)
 80010f4:	601a      	str	r2, [r3, #0]

    /* LCD Init */	 
    LcdDrv->Init();
 80010f6:	4b07      	ldr	r3, [pc, #28]	@ (8001114 <BSP_LCD_Init+0xc0>)
 80010f8:	681b      	ldr	r3, [r3, #0]
 80010fa:	681b      	ldr	r3, [r3, #0]
 80010fc:	4798      	blx	r3

    /* Initialize the SDRAM */
    BSP_SDRAM_Init();
 80010fe:	f000 fcb5 	bl	8001a6c <BSP_SDRAM_Init>

    /* Initialize the font */
    //BSP_LCD_SetFont(&LCD_DEFAULT_FONT);

  return LCD_OK;
 8001102:	2300      	movs	r3, #0
}  
 8001104:	4618      	mov	r0, r3
 8001106:	bd80      	pop	{r7, pc}
 8001108:	200001ec 	.word	0x200001ec
 800110c:	40016800 	.word	0x40016800
 8001110:	200002d4 	.word	0x200002d4
 8001114:	20000320 	.word	0x20000320
 8001118:	20000008 	.word	0x20000008

0800111c <BSP_LCD_GetXSize>:
/**
  * @brief  Gets the LCD X size.  
  * @retval The used LCD X size
  */
uint32_t BSP_LCD_GetXSize(void)
{
 800111c:	b580      	push	{r7, lr}
 800111e:	af00      	add	r7, sp, #0
  return LcdDrv->GetLcdPixelWidth();
 8001120:	4b03      	ldr	r3, [pc, #12]	@ (8001130 <BSP_LCD_GetXSize+0x14>)
 8001122:	681b      	ldr	r3, [r3, #0]
 8001124:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001126:	4798      	blx	r3
 8001128:	4603      	mov	r3, r0
}
 800112a:	4618      	mov	r0, r3
 800112c:	bd80      	pop	{r7, pc}
 800112e:	bf00      	nop
 8001130:	20000320 	.word	0x20000320

08001134 <BSP_LCD_GetYSize>:
/**
  * @brief  Gets the LCD Y size.  
  * @retval The used LCD Y size
  */
uint32_t BSP_LCD_GetYSize(void)
{
 8001134:	b580      	push	{r7, lr}
 8001136:	af00      	add	r7, sp, #0
  return LcdDrv->GetLcdPixelHeight();
 8001138:	4b03      	ldr	r3, [pc, #12]	@ (8001148 <BSP_LCD_GetYSize+0x14>)
 800113a:	681b      	ldr	r3, [r3, #0]
 800113c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800113e:	4798      	blx	r3
 8001140:	4603      	mov	r3, r0
}
 8001142:	4618      	mov	r0, r3
 8001144:	bd80      	pop	{r7, pc}
 8001146:	bf00      	nop
 8001148:	20000320 	.word	0x20000320

0800114c <BSP_LCD_LayerDefaultInit>:
  * @brief  Initializes the LCD layers.
  * @param  LayerIndex: the layer foreground or background. 
  * @param  FB_Address: the layer frame buffer.
  */
void BSP_LCD_LayerDefaultInit(uint16_t LayerIndex, uint32_t FB_Address)
{     
 800114c:	b580      	push	{r7, lr}
 800114e:	b090      	sub	sp, #64	@ 0x40
 8001150:	af00      	add	r7, sp, #0
 8001152:	4603      	mov	r3, r0
 8001154:	6039      	str	r1, [r7, #0]
 8001156:	80fb      	strh	r3, [r7, #6]
  LCD_LayerCfgTypeDef   Layercfg;

 /* Layer Init */
  Layercfg.WindowX0 = 0;
 8001158:	2300      	movs	r3, #0
 800115a:	60fb      	str	r3, [r7, #12]
  Layercfg.WindowX1 = BSP_LCD_GetXSize();
 800115c:	f7ff ffde 	bl	800111c <BSP_LCD_GetXSize>
 8001160:	4603      	mov	r3, r0
 8001162:	613b      	str	r3, [r7, #16]
  Layercfg.WindowY0 = 0;
 8001164:	2300      	movs	r3, #0
 8001166:	617b      	str	r3, [r7, #20]
  Layercfg.WindowY1 = BSP_LCD_GetYSize();
 8001168:	f7ff ffe4 	bl	8001134 <BSP_LCD_GetYSize>
 800116c:	4603      	mov	r3, r0
 800116e:	61bb      	str	r3, [r7, #24]
  Layercfg.PixelFormat = LTDC_PIXEL_FORMAT_ARGB8888;
 8001170:	2300      	movs	r3, #0
 8001172:	61fb      	str	r3, [r7, #28]
  Layercfg.FBStartAdress = FB_Address;
 8001174:	683b      	ldr	r3, [r7, #0]
 8001176:	633b      	str	r3, [r7, #48]	@ 0x30
  Layercfg.Alpha = 255;
 8001178:	23ff      	movs	r3, #255	@ 0xff
 800117a:	623b      	str	r3, [r7, #32]
  Layercfg.Alpha0 = 0;
 800117c:	2300      	movs	r3, #0
 800117e:	627b      	str	r3, [r7, #36]	@ 0x24
  Layercfg.Backcolor.Blue = 0;
 8001180:	2300      	movs	r3, #0
 8001182:	f887 303c 	strb.w	r3, [r7, #60]	@ 0x3c
  Layercfg.Backcolor.Green = 0;
 8001186:	2300      	movs	r3, #0
 8001188:	f887 303d 	strb.w	r3, [r7, #61]	@ 0x3d
  Layercfg.Backcolor.Red = 0;
 800118c:	2300      	movs	r3, #0
 800118e:	f887 303e 	strb.w	r3, [r7, #62]	@ 0x3e
  Layercfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_PAxCA;
 8001192:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 8001196:	62bb      	str	r3, [r7, #40]	@ 0x28
  Layercfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_PAxCA;
 8001198:	2307      	movs	r3, #7
 800119a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  Layercfg.ImageWidth = BSP_LCD_GetXSize();
 800119c:	f7ff ffbe 	bl	800111c <BSP_LCD_GetXSize>
 80011a0:	4603      	mov	r3, r0
 80011a2:	637b      	str	r3, [r7, #52]	@ 0x34
  Layercfg.ImageHeight = BSP_LCD_GetYSize();
 80011a4:	f7ff ffc6 	bl	8001134 <BSP_LCD_GetYSize>
 80011a8:	4603      	mov	r3, r0
 80011aa:	63bb      	str	r3, [r7, #56]	@ 0x38
  
  HAL_LTDC_ConfigLayer(&LtdcHandler, &Layercfg, LayerIndex); 
 80011ac:	88fa      	ldrh	r2, [r7, #6]
 80011ae:	f107 030c 	add.w	r3, r7, #12
 80011b2:	4619      	mov	r1, r3
 80011b4:	4814      	ldr	r0, [pc, #80]	@ (8001208 <BSP_LCD_LayerDefaultInit+0xbc>)
 80011b6:	f003 f885 	bl	80042c4 <HAL_LTDC_ConfigLayer>

  DrawProp[LayerIndex].BackColor = LCD_COLOR_WHITE;
 80011ba:	88fa      	ldrh	r2, [r7, #6]
 80011bc:	4913      	ldr	r1, [pc, #76]	@ (800120c <BSP_LCD_LayerDefaultInit+0xc0>)
 80011be:	4613      	mov	r3, r2
 80011c0:	005b      	lsls	r3, r3, #1
 80011c2:	4413      	add	r3, r2
 80011c4:	009b      	lsls	r3, r3, #2
 80011c6:	440b      	add	r3, r1
 80011c8:	3304      	adds	r3, #4
 80011ca:	f04f 32ff 	mov.w	r2, #4294967295
 80011ce:	601a      	str	r2, [r3, #0]
  DrawProp[LayerIndex].pFont     = &Font16;
 80011d0:	88fa      	ldrh	r2, [r7, #6]
 80011d2:	490e      	ldr	r1, [pc, #56]	@ (800120c <BSP_LCD_LayerDefaultInit+0xc0>)
 80011d4:	4613      	mov	r3, r2
 80011d6:	005b      	lsls	r3, r3, #1
 80011d8:	4413      	add	r3, r2
 80011da:	009b      	lsls	r3, r3, #2
 80011dc:	440b      	add	r3, r1
 80011de:	3308      	adds	r3, #8
 80011e0:	4a0b      	ldr	r2, [pc, #44]	@ (8001210 <BSP_LCD_LayerDefaultInit+0xc4>)
 80011e2:	601a      	str	r2, [r3, #0]
  DrawProp[LayerIndex].TextColor = LCD_COLOR_BLACK;
 80011e4:	88fa      	ldrh	r2, [r7, #6]
 80011e6:	4909      	ldr	r1, [pc, #36]	@ (800120c <BSP_LCD_LayerDefaultInit+0xc0>)
 80011e8:	4613      	mov	r3, r2
 80011ea:	005b      	lsls	r3, r3, #1
 80011ec:	4413      	add	r3, r2
 80011ee:	009b      	lsls	r3, r3, #2
 80011f0:	440b      	add	r3, r1
 80011f2:	f04f 427f 	mov.w	r2, #4278190080	@ 0xff000000
 80011f6:	601a      	str	r2, [r3, #0]

  /* Dithering activation */
  HAL_LTDC_EnableDither(&LtdcHandler);
 80011f8:	4803      	ldr	r0, [pc, #12]	@ (8001208 <BSP_LCD_LayerDefaultInit+0xbc>)
 80011fa:	f003 f8a1 	bl	8004340 <HAL_LTDC_EnableDither>
}
 80011fe:	bf00      	nop
 8001200:	3740      	adds	r7, #64	@ 0x40
 8001202:	46bd      	mov	sp, r7
 8001204:	bd80      	pop	{r7, pc}
 8001206:	bf00      	nop
 8001208:	200001ec 	.word	0x200001ec
 800120c:	20000308 	.word	0x20000308
 8001210:	20000000 	.word	0x20000000

08001214 <BSP_LCD_SelectLayer>:
/**
  * @brief  Selects the LCD Layer.
  * @param  LayerIndex: the Layer foreground or background.
  */
void BSP_LCD_SelectLayer(uint32_t LayerIndex)
{
 8001214:	b480      	push	{r7}
 8001216:	b083      	sub	sp, #12
 8001218:	af00      	add	r7, sp, #0
 800121a:	6078      	str	r0, [r7, #4]
  ActiveLayer = LayerIndex;
 800121c:	4a04      	ldr	r2, [pc, #16]	@ (8001230 <BSP_LCD_SelectLayer+0x1c>)
 800121e:	687b      	ldr	r3, [r7, #4]
 8001220:	6013      	str	r3, [r2, #0]
}
 8001222:	bf00      	nop
 8001224:	370c      	adds	r7, #12
 8001226:	46bd      	mov	sp, r7
 8001228:	f85d 7b04 	ldr.w	r7, [sp], #4
 800122c:	4770      	bx	lr
 800122e:	bf00      	nop
 8001230:	20000304 	.word	0x20000304

08001234 <BSP_LCD_SetTextColor>:
/**
  * @brief  Sets the Text color.
  * @param  Color: the Text color code ARGB(8-8-8-8)
  */
void BSP_LCD_SetTextColor(uint32_t Color)
{
 8001234:	b480      	push	{r7}
 8001236:	b083      	sub	sp, #12
 8001238:	af00      	add	r7, sp, #0
 800123a:	6078      	str	r0, [r7, #4]
  DrawProp[ActiveLayer].TextColor = Color;
 800123c:	4b07      	ldr	r3, [pc, #28]	@ (800125c <BSP_LCD_SetTextColor+0x28>)
 800123e:	681a      	ldr	r2, [r3, #0]
 8001240:	4907      	ldr	r1, [pc, #28]	@ (8001260 <BSP_LCD_SetTextColor+0x2c>)
 8001242:	4613      	mov	r3, r2
 8001244:	005b      	lsls	r3, r3, #1
 8001246:	4413      	add	r3, r2
 8001248:	009b      	lsls	r3, r3, #2
 800124a:	440b      	add	r3, r1
 800124c:	687a      	ldr	r2, [r7, #4]
 800124e:	601a      	str	r2, [r3, #0]
}
 8001250:	bf00      	nop
 8001252:	370c      	adds	r7, #12
 8001254:	46bd      	mov	sp, r7
 8001256:	f85d 7b04 	ldr.w	r7, [sp], #4
 800125a:	4770      	bx	lr
 800125c:	20000304 	.word	0x20000304
 8001260:	20000308 	.word	0x20000308

08001264 <BSP_LCD_GetFont>:
/**
  * @brief  Gets the Text Font.
  * @retval Layer font
  */
sFONT *BSP_LCD_GetFont(void)
{
 8001264:	b480      	push	{r7}
 8001266:	af00      	add	r7, sp, #0
  return DrawProp[ActiveLayer].pFont;
 8001268:	4b07      	ldr	r3, [pc, #28]	@ (8001288 <BSP_LCD_GetFont+0x24>)
 800126a:	681a      	ldr	r2, [r3, #0]
 800126c:	4907      	ldr	r1, [pc, #28]	@ (800128c <BSP_LCD_GetFont+0x28>)
 800126e:	4613      	mov	r3, r2
 8001270:	005b      	lsls	r3, r3, #1
 8001272:	4413      	add	r3, r2
 8001274:	009b      	lsls	r3, r3, #2
 8001276:	440b      	add	r3, r1
 8001278:	3308      	adds	r3, #8
 800127a:	681b      	ldr	r3, [r3, #0]
}
 800127c:	4618      	mov	r0, r3
 800127e:	46bd      	mov	sp, r7
 8001280:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001284:	4770      	bx	lr
 8001286:	bf00      	nop
 8001288:	20000304 	.word	0x20000304
 800128c:	20000308 	.word	0x20000308

08001290 <BSP_LCD_Clear>:
/**
  * @brief  Clears the hole LCD.
  * @param  Color: the color of the background
  */
void BSP_LCD_Clear(uint32_t Color)
{ 
 8001290:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001292:	b085      	sub	sp, #20
 8001294:	af02      	add	r7, sp, #8
 8001296:	6078      	str	r0, [r7, #4]
  /* Clear the LCD */ 
  FillBuffer(ActiveLayer, (uint32_t *)(LtdcHandler.LayerCfg[ActiveLayer].FBStartAdress), BSP_LCD_GetXSize(), BSP_LCD_GetYSize(), 0, Color);
 8001298:	4b0f      	ldr	r3, [pc, #60]	@ (80012d8 <BSP_LCD_Clear+0x48>)
 800129a:	681c      	ldr	r4, [r3, #0]
 800129c:	4b0e      	ldr	r3, [pc, #56]	@ (80012d8 <BSP_LCD_Clear+0x48>)
 800129e:	681b      	ldr	r3, [r3, #0]
 80012a0:	4a0e      	ldr	r2, [pc, #56]	@ (80012dc <BSP_LCD_Clear+0x4c>)
 80012a2:	2134      	movs	r1, #52	@ 0x34
 80012a4:	fb01 f303 	mul.w	r3, r1, r3
 80012a8:	4413      	add	r3, r2
 80012aa:	335c      	adds	r3, #92	@ 0x5c
 80012ac:	681b      	ldr	r3, [r3, #0]
 80012ae:	461e      	mov	r6, r3
 80012b0:	f7ff ff34 	bl	800111c <BSP_LCD_GetXSize>
 80012b4:	4605      	mov	r5, r0
 80012b6:	f7ff ff3d 	bl	8001134 <BSP_LCD_GetYSize>
 80012ba:	4602      	mov	r2, r0
 80012bc:	687b      	ldr	r3, [r7, #4]
 80012be:	9301      	str	r3, [sp, #4]
 80012c0:	2300      	movs	r3, #0
 80012c2:	9300      	str	r3, [sp, #0]
 80012c4:	4613      	mov	r3, r2
 80012c6:	462a      	mov	r2, r5
 80012c8:	4631      	mov	r1, r6
 80012ca:	4620      	mov	r0, r4
 80012cc:	f000 fb96 	bl	80019fc <FillBuffer>
}
 80012d0:	bf00      	nop
 80012d2:	370c      	adds	r7, #12
 80012d4:	46bd      	mov	sp, r7
 80012d6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80012d8:	20000304 	.word	0x20000304
 80012dc:	200001ec 	.word	0x200001ec

080012e0 <BSP_LCD_ClearStringLine>:
/**
  * @brief  Clears the selected line.
  * @param  Line: the line to be cleared
  */
void BSP_LCD_ClearStringLine(uint32_t Line)
{
 80012e0:	b590      	push	{r4, r7, lr}
 80012e2:	b085      	sub	sp, #20
 80012e4:	af00      	add	r7, sp, #0
 80012e6:	6078      	str	r0, [r7, #4]
  uint32_t colorbackup = DrawProp[ActiveLayer].TextColor;
 80012e8:	4b2d      	ldr	r3, [pc, #180]	@ (80013a0 <BSP_LCD_ClearStringLine+0xc0>)
 80012ea:	681a      	ldr	r2, [r3, #0]
 80012ec:	492d      	ldr	r1, [pc, #180]	@ (80013a4 <BSP_LCD_ClearStringLine+0xc4>)
 80012ee:	4613      	mov	r3, r2
 80012f0:	005b      	lsls	r3, r3, #1
 80012f2:	4413      	add	r3, r2
 80012f4:	009b      	lsls	r3, r3, #2
 80012f6:	440b      	add	r3, r1
 80012f8:	681b      	ldr	r3, [r3, #0]
 80012fa:	60fb      	str	r3, [r7, #12]
  DrawProp[ActiveLayer].TextColor = DrawProp[ActiveLayer].BackColor;
 80012fc:	4b28      	ldr	r3, [pc, #160]	@ (80013a0 <BSP_LCD_ClearStringLine+0xc0>)
 80012fe:	6819      	ldr	r1, [r3, #0]
 8001300:	4b27      	ldr	r3, [pc, #156]	@ (80013a0 <BSP_LCD_ClearStringLine+0xc0>)
 8001302:	681a      	ldr	r2, [r3, #0]
 8001304:	4827      	ldr	r0, [pc, #156]	@ (80013a4 <BSP_LCD_ClearStringLine+0xc4>)
 8001306:	460b      	mov	r3, r1
 8001308:	005b      	lsls	r3, r3, #1
 800130a:	440b      	add	r3, r1
 800130c:	009b      	lsls	r3, r3, #2
 800130e:	4403      	add	r3, r0
 8001310:	3304      	adds	r3, #4
 8001312:	6819      	ldr	r1, [r3, #0]
 8001314:	4823      	ldr	r0, [pc, #140]	@ (80013a4 <BSP_LCD_ClearStringLine+0xc4>)
 8001316:	4613      	mov	r3, r2
 8001318:	005b      	lsls	r3, r3, #1
 800131a:	4413      	add	r3, r2
 800131c:	009b      	lsls	r3, r3, #2
 800131e:	4403      	add	r3, r0
 8001320:	6019      	str	r1, [r3, #0]

  /* Draw rectangle with background color */
  BSP_LCD_FillRect(0, (Line * DrawProp[ActiveLayer].pFont->Height), BSP_LCD_GetXSize(), DrawProp[ActiveLayer].pFont->Height);
 8001322:	4b1f      	ldr	r3, [pc, #124]	@ (80013a0 <BSP_LCD_ClearStringLine+0xc0>)
 8001324:	681a      	ldr	r2, [r3, #0]
 8001326:	491f      	ldr	r1, [pc, #124]	@ (80013a4 <BSP_LCD_ClearStringLine+0xc4>)
 8001328:	4613      	mov	r3, r2
 800132a:	005b      	lsls	r3, r3, #1
 800132c:	4413      	add	r3, r2
 800132e:	009b      	lsls	r3, r3, #2
 8001330:	440b      	add	r3, r1
 8001332:	3308      	adds	r3, #8
 8001334:	681b      	ldr	r3, [r3, #0]
 8001336:	88da      	ldrh	r2, [r3, #6]
 8001338:	687b      	ldr	r3, [r7, #4]
 800133a:	b29b      	uxth	r3, r3
 800133c:	fb12 f303 	smulbb	r3, r2, r3
 8001340:	b29c      	uxth	r4, r3
 8001342:	f7ff feeb 	bl	800111c <BSP_LCD_GetXSize>
 8001346:	4603      	mov	r3, r0
 8001348:	b299      	uxth	r1, r3
 800134a:	4b15      	ldr	r3, [pc, #84]	@ (80013a0 <BSP_LCD_ClearStringLine+0xc0>)
 800134c:	681a      	ldr	r2, [r3, #0]
 800134e:	4815      	ldr	r0, [pc, #84]	@ (80013a4 <BSP_LCD_ClearStringLine+0xc4>)
 8001350:	4613      	mov	r3, r2
 8001352:	005b      	lsls	r3, r3, #1
 8001354:	4413      	add	r3, r2
 8001356:	009b      	lsls	r3, r3, #2
 8001358:	4403      	add	r3, r0
 800135a:	3308      	adds	r3, #8
 800135c:	681b      	ldr	r3, [r3, #0]
 800135e:	88db      	ldrh	r3, [r3, #6]
 8001360:	460a      	mov	r2, r1
 8001362:	4621      	mov	r1, r4
 8001364:	2000      	movs	r0, #0
 8001366:	f000 f939 	bl	80015dc <BSP_LCD_FillRect>
  
  DrawProp[ActiveLayer].TextColor = colorbackup;
 800136a:	4b0d      	ldr	r3, [pc, #52]	@ (80013a0 <BSP_LCD_ClearStringLine+0xc0>)
 800136c:	681a      	ldr	r2, [r3, #0]
 800136e:	490d      	ldr	r1, [pc, #52]	@ (80013a4 <BSP_LCD_ClearStringLine+0xc4>)
 8001370:	4613      	mov	r3, r2
 8001372:	005b      	lsls	r3, r3, #1
 8001374:	4413      	add	r3, r2
 8001376:	009b      	lsls	r3, r3, #2
 8001378:	440b      	add	r3, r1
 800137a:	68fa      	ldr	r2, [r7, #12]
 800137c:	601a      	str	r2, [r3, #0]
  BSP_LCD_SetTextColor(DrawProp[ActiveLayer].TextColor);  
 800137e:	4b08      	ldr	r3, [pc, #32]	@ (80013a0 <BSP_LCD_ClearStringLine+0xc0>)
 8001380:	681a      	ldr	r2, [r3, #0]
 8001382:	4908      	ldr	r1, [pc, #32]	@ (80013a4 <BSP_LCD_ClearStringLine+0xc4>)
 8001384:	4613      	mov	r3, r2
 8001386:	005b      	lsls	r3, r3, #1
 8001388:	4413      	add	r3, r2
 800138a:	009b      	lsls	r3, r3, #2
 800138c:	440b      	add	r3, r1
 800138e:	681b      	ldr	r3, [r3, #0]
 8001390:	4618      	mov	r0, r3
 8001392:	f7ff ff4f 	bl	8001234 <BSP_LCD_SetTextColor>
}
 8001396:	bf00      	nop
 8001398:	3714      	adds	r7, #20
 800139a:	46bd      	mov	sp, r7
 800139c:	bd90      	pop	{r4, r7, pc}
 800139e:	bf00      	nop
 80013a0:	20000304 	.word	0x20000304
 80013a4:	20000308 	.word	0x20000308

080013a8 <BSP_LCD_DisplayChar>:
  * @param  Xpos: start column address
  * @param  Ypos: the Line where to display the character shape
  * @param  Ascii: character ascii code, must be between 0x20 and 0x7E
  */
void BSP_LCD_DisplayChar(uint16_t Xpos, uint16_t Ypos, uint8_t Ascii)
{
 80013a8:	b590      	push	{r4, r7, lr}
 80013aa:	b083      	sub	sp, #12
 80013ac:	af00      	add	r7, sp, #0
 80013ae:	4603      	mov	r3, r0
 80013b0:	80fb      	strh	r3, [r7, #6]
 80013b2:	460b      	mov	r3, r1
 80013b4:	80bb      	strh	r3, [r7, #4]
 80013b6:	4613      	mov	r3, r2
 80013b8:	70fb      	strb	r3, [r7, #3]
  DrawChar(Xpos, Ypos, &DrawProp[ActiveLayer].pFont->table[(Ascii-' ') *\
 80013ba:	4b1b      	ldr	r3, [pc, #108]	@ (8001428 <BSP_LCD_DisplayChar+0x80>)
 80013bc:	681a      	ldr	r2, [r3, #0]
 80013be:	491b      	ldr	r1, [pc, #108]	@ (800142c <BSP_LCD_DisplayChar+0x84>)
 80013c0:	4613      	mov	r3, r2
 80013c2:	005b      	lsls	r3, r3, #1
 80013c4:	4413      	add	r3, r2
 80013c6:	009b      	lsls	r3, r3, #2
 80013c8:	440b      	add	r3, r1
 80013ca:	3308      	adds	r3, #8
 80013cc:	681b      	ldr	r3, [r3, #0]
 80013ce:	6819      	ldr	r1, [r3, #0]
 80013d0:	78fb      	ldrb	r3, [r7, #3]
 80013d2:	f1a3 0020 	sub.w	r0, r3, #32
              DrawProp[ActiveLayer].pFont->Height * ((DrawProp[ActiveLayer].pFont->Width + 7) / 8)]);
 80013d6:	4b14      	ldr	r3, [pc, #80]	@ (8001428 <BSP_LCD_DisplayChar+0x80>)
 80013d8:	681a      	ldr	r2, [r3, #0]
 80013da:	4c14      	ldr	r4, [pc, #80]	@ (800142c <BSP_LCD_DisplayChar+0x84>)
 80013dc:	4613      	mov	r3, r2
 80013de:	005b      	lsls	r3, r3, #1
 80013e0:	4413      	add	r3, r2
 80013e2:	009b      	lsls	r3, r3, #2
 80013e4:	4423      	add	r3, r4
 80013e6:	3308      	adds	r3, #8
 80013e8:	681b      	ldr	r3, [r3, #0]
 80013ea:	88db      	ldrh	r3, [r3, #6]
  DrawChar(Xpos, Ypos, &DrawProp[ActiveLayer].pFont->table[(Ascii-' ') *\
 80013ec:	fb03 f000 	mul.w	r0, r3, r0
              DrawProp[ActiveLayer].pFont->Height * ((DrawProp[ActiveLayer].pFont->Width + 7) / 8)]);
 80013f0:	4b0d      	ldr	r3, [pc, #52]	@ (8001428 <BSP_LCD_DisplayChar+0x80>)
 80013f2:	681a      	ldr	r2, [r3, #0]
 80013f4:	4c0d      	ldr	r4, [pc, #52]	@ (800142c <BSP_LCD_DisplayChar+0x84>)
 80013f6:	4613      	mov	r3, r2
 80013f8:	005b      	lsls	r3, r3, #1
 80013fa:	4413      	add	r3, r2
 80013fc:	009b      	lsls	r3, r3, #2
 80013fe:	4423      	add	r3, r4
 8001400:	3308      	adds	r3, #8
 8001402:	681b      	ldr	r3, [r3, #0]
 8001404:	889b      	ldrh	r3, [r3, #4]
 8001406:	3307      	adds	r3, #7
 8001408:	2b00      	cmp	r3, #0
 800140a:	da00      	bge.n	800140e <BSP_LCD_DisplayChar+0x66>
 800140c:	3307      	adds	r3, #7
 800140e:	10db      	asrs	r3, r3, #3
 8001410:	fb00 f303 	mul.w	r3, r0, r3
  DrawChar(Xpos, Ypos, &DrawProp[ActiveLayer].pFont->table[(Ascii-' ') *\
 8001414:	18ca      	adds	r2, r1, r3
 8001416:	88b9      	ldrh	r1, [r7, #4]
 8001418:	88fb      	ldrh	r3, [r7, #6]
 800141a:	4618      	mov	r0, r3
 800141c:	f000 fa34 	bl	8001888 <DrawChar>
}
 8001420:	bf00      	nop
 8001422:	370c      	adds	r7, #12
 8001424:	46bd      	mov	sp, r7
 8001426:	bd90      	pop	{r4, r7, pc}
 8001428:	20000304 	.word	0x20000304
 800142c:	20000308 	.word	0x20000308

08001430 <BSP_LCD_DisplayStringAt>:
  *                @arg CENTER_MODE 
  *                @arg RIGHT_MODE
  *                @arg LEFT_MODE   
  */
void BSP_LCD_DisplayStringAt(uint16_t X, uint16_t Y, uint8_t *pText, Text_AlignModeTypdef mode)
{
 8001430:	b5b0      	push	{r4, r5, r7, lr}
 8001432:	b088      	sub	sp, #32
 8001434:	af00      	add	r7, sp, #0
 8001436:	60ba      	str	r2, [r7, #8]
 8001438:	461a      	mov	r2, r3
 800143a:	4603      	mov	r3, r0
 800143c:	81fb      	strh	r3, [r7, #14]
 800143e:	460b      	mov	r3, r1
 8001440:	81bb      	strh	r3, [r7, #12]
 8001442:	4613      	mov	r3, r2
 8001444:	71fb      	strb	r3, [r7, #7]
  uint16_t refcolumn = 1, i = 0;
 8001446:	2301      	movs	r3, #1
 8001448:	83fb      	strh	r3, [r7, #30]
 800144a:	2300      	movs	r3, #0
 800144c:	83bb      	strh	r3, [r7, #28]
  uint32_t size = 0, xsize = 0; 
 800144e:	2300      	movs	r3, #0
 8001450:	61bb      	str	r3, [r7, #24]
 8001452:	2300      	movs	r3, #0
 8001454:	613b      	str	r3, [r7, #16]
  uint8_t  *ptr = pText;
 8001456:	68bb      	ldr	r3, [r7, #8]
 8001458:	617b      	str	r3, [r7, #20]
  
  /* Get the text size */
  while (*ptr++) size ++ ;
 800145a:	e002      	b.n	8001462 <BSP_LCD_DisplayStringAt+0x32>
 800145c:	69bb      	ldr	r3, [r7, #24]
 800145e:	3301      	adds	r3, #1
 8001460:	61bb      	str	r3, [r7, #24]
 8001462:	697b      	ldr	r3, [r7, #20]
 8001464:	1c5a      	adds	r2, r3, #1
 8001466:	617a      	str	r2, [r7, #20]
 8001468:	781b      	ldrb	r3, [r3, #0]
 800146a:	2b00      	cmp	r3, #0
 800146c:	d1f6      	bne.n	800145c <BSP_LCD_DisplayStringAt+0x2c>
  
  /* Characters number per line */
  xsize = (BSP_LCD_GetXSize()/DrawProp[ActiveLayer].pFont->Width);
 800146e:	f7ff fe55 	bl	800111c <BSP_LCD_GetXSize>
 8001472:	4601      	mov	r1, r0
 8001474:	4b4b      	ldr	r3, [pc, #300]	@ (80015a4 <BSP_LCD_DisplayStringAt+0x174>)
 8001476:	681a      	ldr	r2, [r3, #0]
 8001478:	484b      	ldr	r0, [pc, #300]	@ (80015a8 <BSP_LCD_DisplayStringAt+0x178>)
 800147a:	4613      	mov	r3, r2
 800147c:	005b      	lsls	r3, r3, #1
 800147e:	4413      	add	r3, r2
 8001480:	009b      	lsls	r3, r3, #2
 8001482:	4403      	add	r3, r0
 8001484:	3308      	adds	r3, #8
 8001486:	681b      	ldr	r3, [r3, #0]
 8001488:	889b      	ldrh	r3, [r3, #4]
 800148a:	fbb1 f3f3 	udiv	r3, r1, r3
 800148e:	613b      	str	r3, [r7, #16]
  
  switch (mode)
 8001490:	79fb      	ldrb	r3, [r7, #7]
 8001492:	2b03      	cmp	r3, #3
 8001494:	d01c      	beq.n	80014d0 <BSP_LCD_DisplayStringAt+0xa0>
 8001496:	2b03      	cmp	r3, #3
 8001498:	dc33      	bgt.n	8001502 <BSP_LCD_DisplayStringAt+0xd2>
 800149a:	2b01      	cmp	r3, #1
 800149c:	d002      	beq.n	80014a4 <BSP_LCD_DisplayStringAt+0x74>
 800149e:	2b02      	cmp	r3, #2
 80014a0:	d019      	beq.n	80014d6 <BSP_LCD_DisplayStringAt+0xa6>
 80014a2:	e02e      	b.n	8001502 <BSP_LCD_DisplayStringAt+0xd2>
  {
  case CENTER_MODE:
    {
      refcolumn = X+ ((xsize - size)* DrawProp[ActiveLayer].pFont->Width) / 2;
 80014a4:	693a      	ldr	r2, [r7, #16]
 80014a6:	69bb      	ldr	r3, [r7, #24]
 80014a8:	1ad1      	subs	r1, r2, r3
 80014aa:	4b3e      	ldr	r3, [pc, #248]	@ (80015a4 <BSP_LCD_DisplayStringAt+0x174>)
 80014ac:	681a      	ldr	r2, [r3, #0]
 80014ae:	483e      	ldr	r0, [pc, #248]	@ (80015a8 <BSP_LCD_DisplayStringAt+0x178>)
 80014b0:	4613      	mov	r3, r2
 80014b2:	005b      	lsls	r3, r3, #1
 80014b4:	4413      	add	r3, r2
 80014b6:	009b      	lsls	r3, r3, #2
 80014b8:	4403      	add	r3, r0
 80014ba:	3308      	adds	r3, #8
 80014bc:	681b      	ldr	r3, [r3, #0]
 80014be:	889b      	ldrh	r3, [r3, #4]
 80014c0:	fb01 f303 	mul.w	r3, r1, r3
 80014c4:	085b      	lsrs	r3, r3, #1
 80014c6:	b29a      	uxth	r2, r3
 80014c8:	89fb      	ldrh	r3, [r7, #14]
 80014ca:	4413      	add	r3, r2
 80014cc:	83fb      	strh	r3, [r7, #30]
      break;
 80014ce:	e01b      	b.n	8001508 <BSP_LCD_DisplayStringAt+0xd8>
    }
  case LEFT_MODE:
    {
      refcolumn = X;
 80014d0:	89fb      	ldrh	r3, [r7, #14]
 80014d2:	83fb      	strh	r3, [r7, #30]
      break;
 80014d4:	e018      	b.n	8001508 <BSP_LCD_DisplayStringAt+0xd8>
    }
  case RIGHT_MODE:
    {
      refcolumn = X + ((xsize - size)*DrawProp[ActiveLayer].pFont->Width);
 80014d6:	693a      	ldr	r2, [r7, #16]
 80014d8:	69bb      	ldr	r3, [r7, #24]
 80014da:	1ad3      	subs	r3, r2, r3
 80014dc:	b299      	uxth	r1, r3
 80014de:	4b31      	ldr	r3, [pc, #196]	@ (80015a4 <BSP_LCD_DisplayStringAt+0x174>)
 80014e0:	681a      	ldr	r2, [r3, #0]
 80014e2:	4831      	ldr	r0, [pc, #196]	@ (80015a8 <BSP_LCD_DisplayStringAt+0x178>)
 80014e4:	4613      	mov	r3, r2
 80014e6:	005b      	lsls	r3, r3, #1
 80014e8:	4413      	add	r3, r2
 80014ea:	009b      	lsls	r3, r3, #2
 80014ec:	4403      	add	r3, r0
 80014ee:	3308      	adds	r3, #8
 80014f0:	681b      	ldr	r3, [r3, #0]
 80014f2:	889b      	ldrh	r3, [r3, #4]
 80014f4:	fb11 f303 	smulbb	r3, r1, r3
 80014f8:	b29a      	uxth	r2, r3
 80014fa:	89fb      	ldrh	r3, [r7, #14]
 80014fc:	4413      	add	r3, r2
 80014fe:	83fb      	strh	r3, [r7, #30]
      break;
 8001500:	e002      	b.n	8001508 <BSP_LCD_DisplayStringAt+0xd8>
    }
  default:
    {
      refcolumn = X;
 8001502:	89fb      	ldrh	r3, [r7, #14]
 8001504:	83fb      	strh	r3, [r7, #30]
      break;
 8001506:	bf00      	nop
    }
  }

  /* Send the string character by character on LCD */
  while ((*pText != 0) & (((BSP_LCD_GetXSize() - (i*DrawProp[ActiveLayer].pFont->Width)) & 0xFFFF) >= DrawProp[ActiveLayer].pFont->Width))
 8001508:	e01a      	b.n	8001540 <BSP_LCD_DisplayStringAt+0x110>
  {
    /* Display one character on LCD */
    BSP_LCD_DisplayChar(refcolumn, Y, *pText);
 800150a:	68bb      	ldr	r3, [r7, #8]
 800150c:	781a      	ldrb	r2, [r3, #0]
 800150e:	89b9      	ldrh	r1, [r7, #12]
 8001510:	8bfb      	ldrh	r3, [r7, #30]
 8001512:	4618      	mov	r0, r3
 8001514:	f7ff ff48 	bl	80013a8 <BSP_LCD_DisplayChar>
    /* Decrement the column position by 16 */
    refcolumn += DrawProp[ActiveLayer].pFont->Width;
 8001518:	4b22      	ldr	r3, [pc, #136]	@ (80015a4 <BSP_LCD_DisplayStringAt+0x174>)
 800151a:	681a      	ldr	r2, [r3, #0]
 800151c:	4922      	ldr	r1, [pc, #136]	@ (80015a8 <BSP_LCD_DisplayStringAt+0x178>)
 800151e:	4613      	mov	r3, r2
 8001520:	005b      	lsls	r3, r3, #1
 8001522:	4413      	add	r3, r2
 8001524:	009b      	lsls	r3, r3, #2
 8001526:	440b      	add	r3, r1
 8001528:	3308      	adds	r3, #8
 800152a:	681b      	ldr	r3, [r3, #0]
 800152c:	889a      	ldrh	r2, [r3, #4]
 800152e:	8bfb      	ldrh	r3, [r7, #30]
 8001530:	4413      	add	r3, r2
 8001532:	83fb      	strh	r3, [r7, #30]
    /* Point on the next character */
    pText++;
 8001534:	68bb      	ldr	r3, [r7, #8]
 8001536:	3301      	adds	r3, #1
 8001538:	60bb      	str	r3, [r7, #8]
    i++;
 800153a:	8bbb      	ldrh	r3, [r7, #28]
 800153c:	3301      	adds	r3, #1
 800153e:	83bb      	strh	r3, [r7, #28]
  while ((*pText != 0) & (((BSP_LCD_GetXSize() - (i*DrawProp[ActiveLayer].pFont->Width)) & 0xFFFF) >= DrawProp[ActiveLayer].pFont->Width))
 8001540:	68bb      	ldr	r3, [r7, #8]
 8001542:	781b      	ldrb	r3, [r3, #0]
 8001544:	2b00      	cmp	r3, #0
 8001546:	bf14      	ite	ne
 8001548:	2301      	movne	r3, #1
 800154a:	2300      	moveq	r3, #0
 800154c:	b2dc      	uxtb	r4, r3
 800154e:	f7ff fde5 	bl	800111c <BSP_LCD_GetXSize>
 8001552:	8bb9      	ldrh	r1, [r7, #28]
 8001554:	4b13      	ldr	r3, [pc, #76]	@ (80015a4 <BSP_LCD_DisplayStringAt+0x174>)
 8001556:	681a      	ldr	r2, [r3, #0]
 8001558:	4d13      	ldr	r5, [pc, #76]	@ (80015a8 <BSP_LCD_DisplayStringAt+0x178>)
 800155a:	4613      	mov	r3, r2
 800155c:	005b      	lsls	r3, r3, #1
 800155e:	4413      	add	r3, r2
 8001560:	009b      	lsls	r3, r3, #2
 8001562:	442b      	add	r3, r5
 8001564:	3308      	adds	r3, #8
 8001566:	681b      	ldr	r3, [r3, #0]
 8001568:	889b      	ldrh	r3, [r3, #4]
 800156a:	fb01 f303 	mul.w	r3, r1, r3
 800156e:	1ac3      	subs	r3, r0, r3
 8001570:	b299      	uxth	r1, r3
 8001572:	4b0c      	ldr	r3, [pc, #48]	@ (80015a4 <BSP_LCD_DisplayStringAt+0x174>)
 8001574:	681a      	ldr	r2, [r3, #0]
 8001576:	480c      	ldr	r0, [pc, #48]	@ (80015a8 <BSP_LCD_DisplayStringAt+0x178>)
 8001578:	4613      	mov	r3, r2
 800157a:	005b      	lsls	r3, r3, #1
 800157c:	4413      	add	r3, r2
 800157e:	009b      	lsls	r3, r3, #2
 8001580:	4403      	add	r3, r0
 8001582:	3308      	adds	r3, #8
 8001584:	681b      	ldr	r3, [r3, #0]
 8001586:	889b      	ldrh	r3, [r3, #4]
 8001588:	4299      	cmp	r1, r3
 800158a:	bf2c      	ite	cs
 800158c:	2301      	movcs	r3, #1
 800158e:	2300      	movcc	r3, #0
 8001590:	b2db      	uxtb	r3, r3
 8001592:	4023      	ands	r3, r4
 8001594:	b2db      	uxtb	r3, r3
 8001596:	2b00      	cmp	r3, #0
 8001598:	d1b7      	bne.n	800150a <BSP_LCD_DisplayStringAt+0xda>
  }  
}
 800159a:	bf00      	nop
 800159c:	bf00      	nop
 800159e:	3720      	adds	r7, #32
 80015a0:	46bd      	mov	sp, r7
 80015a2:	bdb0      	pop	{r4, r5, r7, pc}
 80015a4:	20000304 	.word	0x20000304
 80015a8:	20000308 	.word	0x20000308

080015ac <BSP_LCD_DisplayStringAtLine>:
  * @brief  Displays a maximum of 20 char on the LCD.
  * @param  Line: the Line where to display the character shape
  * @param  ptr: pointer to string to display on LCD
  */
void BSP_LCD_DisplayStringAtLine(uint16_t Line, uint8_t *ptr)
{
 80015ac:	b580      	push	{r7, lr}
 80015ae:	b082      	sub	sp, #8
 80015b0:	af00      	add	r7, sp, #0
 80015b2:	4603      	mov	r3, r0
 80015b4:	6039      	str	r1, [r7, #0]
 80015b6:	80fb      	strh	r3, [r7, #6]
  BSP_LCD_DisplayStringAt(0, LINE(Line), ptr, LEFT_MODE);
 80015b8:	f7ff fe54 	bl	8001264 <BSP_LCD_GetFont>
 80015bc:	4603      	mov	r3, r0
 80015be:	88db      	ldrh	r3, [r3, #6]
 80015c0:	88fa      	ldrh	r2, [r7, #6]
 80015c2:	fb12 f303 	smulbb	r3, r2, r3
 80015c6:	b299      	uxth	r1, r3
 80015c8:	2303      	movs	r3, #3
 80015ca:	683a      	ldr	r2, [r7, #0]
 80015cc:	2000      	movs	r0, #0
 80015ce:	f7ff ff2f 	bl	8001430 <BSP_LCD_DisplayStringAt>
}
 80015d2:	bf00      	nop
 80015d4:	3708      	adds	r7, #8
 80015d6:	46bd      	mov	sp, r7
 80015d8:	bd80      	pop	{r7, pc}
	...

080015dc <BSP_LCD_FillRect>:
  * @param  Ypos: the Y position
  * @param  Height: rectangle height
  * @param  Width: rectangle width
  */
void BSP_LCD_FillRect(uint16_t Xpos, uint16_t Ypos, uint16_t Width, uint16_t Height)
{
 80015dc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80015e0:	b086      	sub	sp, #24
 80015e2:	af02      	add	r7, sp, #8
 80015e4:	4604      	mov	r4, r0
 80015e6:	4608      	mov	r0, r1
 80015e8:	4611      	mov	r1, r2
 80015ea:	461a      	mov	r2, r3
 80015ec:	4623      	mov	r3, r4
 80015ee:	80fb      	strh	r3, [r7, #6]
 80015f0:	4603      	mov	r3, r0
 80015f2:	80bb      	strh	r3, [r7, #4]
 80015f4:	460b      	mov	r3, r1
 80015f6:	807b      	strh	r3, [r7, #2]
 80015f8:	4613      	mov	r3, r2
 80015fa:	803b      	strh	r3, [r7, #0]
  uint32_t xaddress = 0;
 80015fc:	2300      	movs	r3, #0
 80015fe:	60fb      	str	r3, [r7, #12]

  /* Set the text color */
  BSP_LCD_SetTextColor(DrawProp[ActiveLayer].TextColor);
 8001600:	4b20      	ldr	r3, [pc, #128]	@ (8001684 <BSP_LCD_FillRect+0xa8>)
 8001602:	681a      	ldr	r2, [r3, #0]
 8001604:	4920      	ldr	r1, [pc, #128]	@ (8001688 <BSP_LCD_FillRect+0xac>)
 8001606:	4613      	mov	r3, r2
 8001608:	005b      	lsls	r3, r3, #1
 800160a:	4413      	add	r3, r2
 800160c:	009b      	lsls	r3, r3, #2
 800160e:	440b      	add	r3, r1
 8001610:	681b      	ldr	r3, [r3, #0]
 8001612:	4618      	mov	r0, r3
 8001614:	f7ff fe0e 	bl	8001234 <BSP_LCD_SetTextColor>

  /* Get the rectangle start address */
  xaddress = (LtdcHandler.LayerCfg[ActiveLayer].FBStartAdress) + 4*(BSP_LCD_GetXSize()*Ypos + Xpos);
 8001618:	4b1a      	ldr	r3, [pc, #104]	@ (8001684 <BSP_LCD_FillRect+0xa8>)
 800161a:	681b      	ldr	r3, [r3, #0]
 800161c:	4a1b      	ldr	r2, [pc, #108]	@ (800168c <BSP_LCD_FillRect+0xb0>)
 800161e:	2134      	movs	r1, #52	@ 0x34
 8001620:	fb01 f303 	mul.w	r3, r1, r3
 8001624:	4413      	add	r3, r2
 8001626:	335c      	adds	r3, #92	@ 0x5c
 8001628:	681c      	ldr	r4, [r3, #0]
 800162a:	f7ff fd77 	bl	800111c <BSP_LCD_GetXSize>
 800162e:	4602      	mov	r2, r0
 8001630:	88bb      	ldrh	r3, [r7, #4]
 8001632:	fb03 f202 	mul.w	r2, r3, r2
 8001636:	88fb      	ldrh	r3, [r7, #6]
 8001638:	4413      	add	r3, r2
 800163a:	009b      	lsls	r3, r3, #2
 800163c:	4423      	add	r3, r4
 800163e:	60fb      	str	r3, [r7, #12]

  /* Fill the rectangle */
  FillBuffer(ActiveLayer, (uint32_t *)xaddress, Width, Height, (BSP_LCD_GetXSize() - Width), DrawProp[ActiveLayer].TextColor);
 8001640:	4b10      	ldr	r3, [pc, #64]	@ (8001684 <BSP_LCD_FillRect+0xa8>)
 8001642:	681c      	ldr	r4, [r3, #0]
 8001644:	68fd      	ldr	r5, [r7, #12]
 8001646:	887e      	ldrh	r6, [r7, #2]
 8001648:	f8b7 8000 	ldrh.w	r8, [r7]
 800164c:	f7ff fd66 	bl	800111c <BSP_LCD_GetXSize>
 8001650:	4602      	mov	r2, r0
 8001652:	887b      	ldrh	r3, [r7, #2]
 8001654:	1ad1      	subs	r1, r2, r3
 8001656:	4b0b      	ldr	r3, [pc, #44]	@ (8001684 <BSP_LCD_FillRect+0xa8>)
 8001658:	681a      	ldr	r2, [r3, #0]
 800165a:	480b      	ldr	r0, [pc, #44]	@ (8001688 <BSP_LCD_FillRect+0xac>)
 800165c:	4613      	mov	r3, r2
 800165e:	005b      	lsls	r3, r3, #1
 8001660:	4413      	add	r3, r2
 8001662:	009b      	lsls	r3, r3, #2
 8001664:	4403      	add	r3, r0
 8001666:	681b      	ldr	r3, [r3, #0]
 8001668:	9301      	str	r3, [sp, #4]
 800166a:	9100      	str	r1, [sp, #0]
 800166c:	4643      	mov	r3, r8
 800166e:	4632      	mov	r2, r6
 8001670:	4629      	mov	r1, r5
 8001672:	4620      	mov	r0, r4
 8001674:	f000 f9c2 	bl	80019fc <FillBuffer>
}
 8001678:	bf00      	nop
 800167a:	3710      	adds	r7, #16
 800167c:	46bd      	mov	sp, r7
 800167e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8001682:	bf00      	nop
 8001684:	20000304 	.word	0x20000304
 8001688:	20000308 	.word	0x20000308
 800168c:	200001ec 	.word	0x200001ec

08001690 <BSP_LCD_MspInit>:

/**
  * @brief  Initializes the LTDC MSP.
  */
__weak void BSP_LCD_MspInit(void)
{
 8001690:	b580      	push	{r7, lr}
 8001692:	b08e      	sub	sp, #56	@ 0x38
 8001694:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStructure;
  
  /* Enable the LTDC and DMA2D Clock */
  __HAL_RCC_LTDC_CLK_ENABLE();
 8001696:	2300      	movs	r3, #0
 8001698:	623b      	str	r3, [r7, #32]
 800169a:	4b61      	ldr	r3, [pc, #388]	@ (8001820 <BSP_LCD_MspInit+0x190>)
 800169c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800169e:	4a60      	ldr	r2, [pc, #384]	@ (8001820 <BSP_LCD_MspInit+0x190>)
 80016a0:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80016a4:	6453      	str	r3, [r2, #68]	@ 0x44
 80016a6:	4b5e      	ldr	r3, [pc, #376]	@ (8001820 <BSP_LCD_MspInit+0x190>)
 80016a8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80016aa:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80016ae:	623b      	str	r3, [r7, #32]
 80016b0:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_DMA2D_CLK_ENABLE(); 
 80016b2:	2300      	movs	r3, #0
 80016b4:	61fb      	str	r3, [r7, #28]
 80016b6:	4b5a      	ldr	r3, [pc, #360]	@ (8001820 <BSP_LCD_MspInit+0x190>)
 80016b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80016ba:	4a59      	ldr	r2, [pc, #356]	@ (8001820 <BSP_LCD_MspInit+0x190>)
 80016bc:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 80016c0:	6313      	str	r3, [r2, #48]	@ 0x30
 80016c2:	4b57      	ldr	r3, [pc, #348]	@ (8001820 <BSP_LCD_MspInit+0x190>)
 80016c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80016c6:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80016ca:	61fb      	str	r3, [r7, #28]
 80016cc:	69fb      	ldr	r3, [r7, #28]
  
  /* Enable GPIOs clock */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80016ce:	2300      	movs	r3, #0
 80016d0:	61bb      	str	r3, [r7, #24]
 80016d2:	4b53      	ldr	r3, [pc, #332]	@ (8001820 <BSP_LCD_MspInit+0x190>)
 80016d4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80016d6:	4a52      	ldr	r2, [pc, #328]	@ (8001820 <BSP_LCD_MspInit+0x190>)
 80016d8:	f043 0301 	orr.w	r3, r3, #1
 80016dc:	6313      	str	r3, [r2, #48]	@ 0x30
 80016de:	4b50      	ldr	r3, [pc, #320]	@ (8001820 <BSP_LCD_MspInit+0x190>)
 80016e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80016e2:	f003 0301 	and.w	r3, r3, #1
 80016e6:	61bb      	str	r3, [r7, #24]
 80016e8:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80016ea:	2300      	movs	r3, #0
 80016ec:	617b      	str	r3, [r7, #20]
 80016ee:	4b4c      	ldr	r3, [pc, #304]	@ (8001820 <BSP_LCD_MspInit+0x190>)
 80016f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80016f2:	4a4b      	ldr	r2, [pc, #300]	@ (8001820 <BSP_LCD_MspInit+0x190>)
 80016f4:	f043 0302 	orr.w	r3, r3, #2
 80016f8:	6313      	str	r3, [r2, #48]	@ 0x30
 80016fa:	4b49      	ldr	r3, [pc, #292]	@ (8001820 <BSP_LCD_MspInit+0x190>)
 80016fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80016fe:	f003 0302 	and.w	r3, r3, #2
 8001702:	617b      	str	r3, [r7, #20]
 8001704:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001706:	2300      	movs	r3, #0
 8001708:	613b      	str	r3, [r7, #16]
 800170a:	4b45      	ldr	r3, [pc, #276]	@ (8001820 <BSP_LCD_MspInit+0x190>)
 800170c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800170e:	4a44      	ldr	r2, [pc, #272]	@ (8001820 <BSP_LCD_MspInit+0x190>)
 8001710:	f043 0304 	orr.w	r3, r3, #4
 8001714:	6313      	str	r3, [r2, #48]	@ 0x30
 8001716:	4b42      	ldr	r3, [pc, #264]	@ (8001820 <BSP_LCD_MspInit+0x190>)
 8001718:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800171a:	f003 0304 	and.w	r3, r3, #4
 800171e:	613b      	str	r3, [r7, #16]
 8001720:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001722:	2300      	movs	r3, #0
 8001724:	60fb      	str	r3, [r7, #12]
 8001726:	4b3e      	ldr	r3, [pc, #248]	@ (8001820 <BSP_LCD_MspInit+0x190>)
 8001728:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800172a:	4a3d      	ldr	r2, [pc, #244]	@ (8001820 <BSP_LCD_MspInit+0x190>)
 800172c:	f043 0308 	orr.w	r3, r3, #8
 8001730:	6313      	str	r3, [r2, #48]	@ 0x30
 8001732:	4b3b      	ldr	r3, [pc, #236]	@ (8001820 <BSP_LCD_MspInit+0x190>)
 8001734:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001736:	f003 0308 	and.w	r3, r3, #8
 800173a:	60fb      	str	r3, [r7, #12]
 800173c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800173e:	2300      	movs	r3, #0
 8001740:	60bb      	str	r3, [r7, #8]
 8001742:	4b37      	ldr	r3, [pc, #220]	@ (8001820 <BSP_LCD_MspInit+0x190>)
 8001744:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001746:	4a36      	ldr	r2, [pc, #216]	@ (8001820 <BSP_LCD_MspInit+0x190>)
 8001748:	f043 0320 	orr.w	r3, r3, #32
 800174c:	6313      	str	r3, [r2, #48]	@ 0x30
 800174e:	4b34      	ldr	r3, [pc, #208]	@ (8001820 <BSP_LCD_MspInit+0x190>)
 8001750:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001752:	f003 0320 	and.w	r3, r3, #32
 8001756:	60bb      	str	r3, [r7, #8]
 8001758:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800175a:	2300      	movs	r3, #0
 800175c:	607b      	str	r3, [r7, #4]
 800175e:	4b30      	ldr	r3, [pc, #192]	@ (8001820 <BSP_LCD_MspInit+0x190>)
 8001760:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001762:	4a2f      	ldr	r2, [pc, #188]	@ (8001820 <BSP_LCD_MspInit+0x190>)
 8001764:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001768:	6313      	str	r3, [r2, #48]	@ 0x30
 800176a:	4b2d      	ldr	r3, [pc, #180]	@ (8001820 <BSP_LCD_MspInit+0x190>)
 800176c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800176e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001772:	607b      	str	r3, [r7, #4]
 8001774:	687b      	ldr	r3, [r7, #4]
            |  LCD_TFT CLK   <-> PG.07  | LCD_TFT DE   <->  PF.10 |
             -----------------------------------------------------
  */

  /* GPIOA configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_3 | GPIO_PIN_4 | GPIO_PIN_6 |
 8001776:	f641 0358 	movw	r3, #6232	@ 0x1858
 800177a:	627b      	str	r3, [r7, #36]	@ 0x24
                           GPIO_PIN_11 | GPIO_PIN_12;
  GPIO_InitStructure.Mode = GPIO_MODE_AF_PP;
 800177c:	2302      	movs	r3, #2
 800177e:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStructure.Pull = GPIO_NOPULL;
 8001780:	2300      	movs	r3, #0
 8001782:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStructure.Speed = GPIO_SPEED_FAST;
 8001784:	2302      	movs	r3, #2
 8001786:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStructure.Alternate= GPIO_AF14_LTDC;
 8001788:	230e      	movs	r3, #14
 800178a:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStructure);
 800178c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001790:	4619      	mov	r1, r3
 8001792:	4824      	ldr	r0, [pc, #144]	@ (8001824 <BSP_LCD_MspInit+0x194>)
 8001794:	f002 f9f4 	bl	8003b80 <HAL_GPIO_Init>

 /* GPIOB configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_8 | \
 8001798:	f44f 6370 	mov.w	r3, #3840	@ 0xf00
 800179c:	627b      	str	r3, [r7, #36]	@ 0x24
                           GPIO_PIN_9 | GPIO_PIN_10 | GPIO_PIN_11;
  HAL_GPIO_Init(GPIOB, &GPIO_InitStructure);
 800179e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80017a2:	4619      	mov	r1, r3
 80017a4:	4820      	ldr	r0, [pc, #128]	@ (8001828 <BSP_LCD_MspInit+0x198>)
 80017a6:	f002 f9eb 	bl	8003b80 <HAL_GPIO_Init>

 /* GPIOC configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_6 | GPIO_PIN_7 | GPIO_PIN_10;
 80017aa:	f44f 6398 	mov.w	r3, #1216	@ 0x4c0
 80017ae:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStructure);
 80017b0:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80017b4:	4619      	mov	r1, r3
 80017b6:	481d      	ldr	r0, [pc, #116]	@ (800182c <BSP_LCD_MspInit+0x19c>)
 80017b8:	f002 f9e2 	bl	8003b80 <HAL_GPIO_Init>

 /* GPIOD configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_3 | GPIO_PIN_6;
 80017bc:	2348      	movs	r3, #72	@ 0x48
 80017be:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStructure);
 80017c0:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80017c4:	4619      	mov	r1, r3
 80017c6:	481a      	ldr	r0, [pc, #104]	@ (8001830 <BSP_LCD_MspInit+0x1a0>)
 80017c8:	f002 f9da 	bl	8003b80 <HAL_GPIO_Init>
  
 /* GPIOF configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_10;
 80017cc:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80017d0:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOF, &GPIO_InitStructure);     
 80017d2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80017d6:	4619      	mov	r1, r3
 80017d8:	4816      	ldr	r0, [pc, #88]	@ (8001834 <BSP_LCD_MspInit+0x1a4>)
 80017da:	f002 f9d1 	bl	8003b80 <HAL_GPIO_Init>

 /* GPIOG configuration */  
  GPIO_InitStructure.Pin = GPIO_PIN_6 | GPIO_PIN_7 | \
 80017de:	f44f 630c 	mov.w	r3, #2240	@ 0x8c0
 80017e2:	627b      	str	r3, [r7, #36]	@ 0x24
                           GPIO_PIN_11;
  HAL_GPIO_Init(GPIOG, &GPIO_InitStructure);
 80017e4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80017e8:	4619      	mov	r1, r3
 80017ea:	4813      	ldr	r0, [pc, #76]	@ (8001838 <BSP_LCD_MspInit+0x1a8>)
 80017ec:	f002 f9c8 	bl	8003b80 <HAL_GPIO_Init>
 
  /* GPIOB configuration */  
  GPIO_InitStructure.Pin = GPIO_PIN_0 | GPIO_PIN_1;
 80017f0:	2303      	movs	r3, #3
 80017f2:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStructure.Alternate= GPIO_AF9_LTDC;
 80017f4:	2309      	movs	r3, #9
 80017f6:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStructure);
 80017f8:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80017fc:	4619      	mov	r1, r3
 80017fe:	480a      	ldr	r0, [pc, #40]	@ (8001828 <BSP_LCD_MspInit+0x198>)
 8001800:	f002 f9be 	bl	8003b80 <HAL_GPIO_Init>

  /* GPIOG configuration */  
  GPIO_InitStructure.Pin = GPIO_PIN_10 | GPIO_PIN_12;
 8001804:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8001808:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOG, &GPIO_InitStructure);
 800180a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800180e:	4619      	mov	r1, r3
 8001810:	4809      	ldr	r0, [pc, #36]	@ (8001838 <BSP_LCD_MspInit+0x1a8>)
 8001812:	f002 f9b5 	bl	8003b80 <HAL_GPIO_Init>
}
 8001816:	bf00      	nop
 8001818:	3738      	adds	r7, #56	@ 0x38
 800181a:	46bd      	mov	sp, r7
 800181c:	bd80      	pop	{r7, pc}
 800181e:	bf00      	nop
 8001820:	40023800 	.word	0x40023800
 8001824:	40020000 	.word	0x40020000
 8001828:	40020400 	.word	0x40020400
 800182c:	40020800 	.word	0x40020800
 8001830:	40020c00 	.word	0x40020c00
 8001834:	40021400 	.word	0x40021400
 8001838:	40021800 	.word	0x40021800

0800183c <BSP_LCD_DrawPixel>:
  * @param  Xpos: the X position
  * @param  Ypos: the Y position
  * @param  RGB_Code: the pixel color in ARGB mode (8-8-8-8)  
  */
void BSP_LCD_DrawPixel(uint16_t Xpos, uint16_t Ypos, uint32_t RGB_Code)
{
 800183c:	b5b0      	push	{r4, r5, r7, lr}
 800183e:	b082      	sub	sp, #8
 8001840:	af00      	add	r7, sp, #0
 8001842:	4603      	mov	r3, r0
 8001844:	603a      	str	r2, [r7, #0]
 8001846:	80fb      	strh	r3, [r7, #6]
 8001848:	460b      	mov	r3, r1
 800184a:	80bb      	strh	r3, [r7, #4]
  /* Write data value to all SDRAM memory */
  *(__IO uint32_t*) (LtdcHandler.LayerCfg[ActiveLayer].FBStartAdress + (4*(Ypos*BSP_LCD_GetXSize() + Xpos))) = RGB_Code;
 800184c:	4b0c      	ldr	r3, [pc, #48]	@ (8001880 <BSP_LCD_DrawPixel+0x44>)
 800184e:	681b      	ldr	r3, [r3, #0]
 8001850:	4a0c      	ldr	r2, [pc, #48]	@ (8001884 <BSP_LCD_DrawPixel+0x48>)
 8001852:	2134      	movs	r1, #52	@ 0x34
 8001854:	fb01 f303 	mul.w	r3, r1, r3
 8001858:	4413      	add	r3, r2
 800185a:	335c      	adds	r3, #92	@ 0x5c
 800185c:	681c      	ldr	r4, [r3, #0]
 800185e:	88bd      	ldrh	r5, [r7, #4]
 8001860:	f7ff fc5c 	bl	800111c <BSP_LCD_GetXSize>
 8001864:	4603      	mov	r3, r0
 8001866:	fb03 f205 	mul.w	r2, r3, r5
 800186a:	88fb      	ldrh	r3, [r7, #6]
 800186c:	4413      	add	r3, r2
 800186e:	009b      	lsls	r3, r3, #2
 8001870:	4423      	add	r3, r4
 8001872:	461a      	mov	r2, r3
 8001874:	683b      	ldr	r3, [r7, #0]
 8001876:	6013      	str	r3, [r2, #0]
}
 8001878:	bf00      	nop
 800187a:	3708      	adds	r7, #8
 800187c:	46bd      	mov	sp, r7
 800187e:	bdb0      	pop	{r4, r5, r7, pc}
 8001880:	20000304 	.word	0x20000304
 8001884:	200001ec 	.word	0x200001ec

08001888 <DrawChar>:
  * @param  Xpos: the Line where to display the character shape
  * @param  Ypos: start column address
  * @param  c: pointer to the character data
  */
static void DrawChar(uint16_t Xpos, uint16_t Ypos, const uint8_t *c)
{
 8001888:	b580      	push	{r7, lr}
 800188a:	b088      	sub	sp, #32
 800188c:	af00      	add	r7, sp, #0
 800188e:	4603      	mov	r3, r0
 8001890:	603a      	str	r2, [r7, #0]
 8001892:	80fb      	strh	r3, [r7, #6]
 8001894:	460b      	mov	r3, r1
 8001896:	80bb      	strh	r3, [r7, #4]
  uint32_t i = 0, j = 0;
 8001898:	2300      	movs	r3, #0
 800189a:	61fb      	str	r3, [r7, #28]
 800189c:	2300      	movs	r3, #0
 800189e:	61bb      	str	r3, [r7, #24]
  uint16_t height, width;
  uint8_t offset;
  uint8_t *pchar;
  uint32_t line=0;
 80018a0:	2300      	movs	r3, #0
 80018a2:	617b      	str	r3, [r7, #20]

  height = DrawProp[ActiveLayer].pFont->Height;
 80018a4:	4b53      	ldr	r3, [pc, #332]	@ (80019f4 <DrawChar+0x16c>)
 80018a6:	681a      	ldr	r2, [r3, #0]
 80018a8:	4953      	ldr	r1, [pc, #332]	@ (80019f8 <DrawChar+0x170>)
 80018aa:	4613      	mov	r3, r2
 80018ac:	005b      	lsls	r3, r3, #1
 80018ae:	4413      	add	r3, r2
 80018b0:	009b      	lsls	r3, r3, #2
 80018b2:	440b      	add	r3, r1
 80018b4:	3308      	adds	r3, #8
 80018b6:	681b      	ldr	r3, [r3, #0]
 80018b8:	88db      	ldrh	r3, [r3, #6]
 80018ba:	827b      	strh	r3, [r7, #18]
  width  = DrawProp[ActiveLayer].pFont->Width;
 80018bc:	4b4d      	ldr	r3, [pc, #308]	@ (80019f4 <DrawChar+0x16c>)
 80018be:	681a      	ldr	r2, [r3, #0]
 80018c0:	494d      	ldr	r1, [pc, #308]	@ (80019f8 <DrawChar+0x170>)
 80018c2:	4613      	mov	r3, r2
 80018c4:	005b      	lsls	r3, r3, #1
 80018c6:	4413      	add	r3, r2
 80018c8:	009b      	lsls	r3, r3, #2
 80018ca:	440b      	add	r3, r1
 80018cc:	3308      	adds	r3, #8
 80018ce:	681b      	ldr	r3, [r3, #0]
 80018d0:	889b      	ldrh	r3, [r3, #4]
 80018d2:	823b      	strh	r3, [r7, #16]

  offset = 8 *((width + 7)/8) -  width ;
 80018d4:	8a3b      	ldrh	r3, [r7, #16]
 80018d6:	3307      	adds	r3, #7
 80018d8:	2b00      	cmp	r3, #0
 80018da:	da00      	bge.n	80018de <DrawChar+0x56>
 80018dc:	3307      	adds	r3, #7
 80018de:	10db      	asrs	r3, r3, #3
 80018e0:	b2db      	uxtb	r3, r3
 80018e2:	00db      	lsls	r3, r3, #3
 80018e4:	b2da      	uxtb	r2, r3
 80018e6:	8a3b      	ldrh	r3, [r7, #16]
 80018e8:	b2db      	uxtb	r3, r3
 80018ea:	1ad3      	subs	r3, r2, r3
 80018ec:	73fb      	strb	r3, [r7, #15]

  for(i = 0; i < height; i++)
 80018ee:	2300      	movs	r3, #0
 80018f0:	61fb      	str	r3, [r7, #28]
 80018f2:	e076      	b.n	80019e2 <DrawChar+0x15a>
  {
    pchar = ((uint8_t *)c + (width + 7)/8 * i);
 80018f4:	8a3b      	ldrh	r3, [r7, #16]
 80018f6:	3307      	adds	r3, #7
 80018f8:	2b00      	cmp	r3, #0
 80018fa:	da00      	bge.n	80018fe <DrawChar+0x76>
 80018fc:	3307      	adds	r3, #7
 80018fe:	10db      	asrs	r3, r3, #3
 8001900:	461a      	mov	r2, r3
 8001902:	69fb      	ldr	r3, [r7, #28]
 8001904:	fb02 f303 	mul.w	r3, r2, r3
 8001908:	683a      	ldr	r2, [r7, #0]
 800190a:	4413      	add	r3, r2
 800190c:	60bb      	str	r3, [r7, #8]

    switch(((width + 7)/8))
 800190e:	8a3b      	ldrh	r3, [r7, #16]
 8001910:	3307      	adds	r3, #7
 8001912:	2b00      	cmp	r3, #0
 8001914:	da00      	bge.n	8001918 <DrawChar+0x90>
 8001916:	3307      	adds	r3, #7
 8001918:	10db      	asrs	r3, r3, #3
 800191a:	2b01      	cmp	r3, #1
 800191c:	d002      	beq.n	8001924 <DrawChar+0x9c>
 800191e:	2b02      	cmp	r3, #2
 8001920:	d004      	beq.n	800192c <DrawChar+0xa4>
 8001922:	e00c      	b.n	800193e <DrawChar+0xb6>
    {
    case 1:
      line =  pchar[0];      
 8001924:	68bb      	ldr	r3, [r7, #8]
 8001926:	781b      	ldrb	r3, [r3, #0]
 8001928:	617b      	str	r3, [r7, #20]
      break;
 800192a:	e016      	b.n	800195a <DrawChar+0xd2>
      
    case 2:
      line =  (pchar[0]<< 8) | pchar[1];
 800192c:	68bb      	ldr	r3, [r7, #8]
 800192e:	781b      	ldrb	r3, [r3, #0]
 8001930:	021b      	lsls	r3, r3, #8
 8001932:	68ba      	ldr	r2, [r7, #8]
 8001934:	3201      	adds	r2, #1
 8001936:	7812      	ldrb	r2, [r2, #0]
 8001938:	4313      	orrs	r3, r2
 800193a:	617b      	str	r3, [r7, #20]
      break;
 800193c:	e00d      	b.n	800195a <DrawChar+0xd2>

    case 3:
    default:
      line =  (pchar[0]<< 16) | (pchar[1]<< 8) | pchar[2];      
 800193e:	68bb      	ldr	r3, [r7, #8]
 8001940:	781b      	ldrb	r3, [r3, #0]
 8001942:	041a      	lsls	r2, r3, #16
 8001944:	68bb      	ldr	r3, [r7, #8]
 8001946:	3301      	adds	r3, #1
 8001948:	781b      	ldrb	r3, [r3, #0]
 800194a:	021b      	lsls	r3, r3, #8
 800194c:	4313      	orrs	r3, r2
 800194e:	68ba      	ldr	r2, [r7, #8]
 8001950:	3202      	adds	r2, #2
 8001952:	7812      	ldrb	r2, [r2, #0]
 8001954:	4313      	orrs	r3, r2
 8001956:	617b      	str	r3, [r7, #20]
      break;
 8001958:	bf00      	nop
    }

    for (j = 0; j < width; j++)
 800195a:	2300      	movs	r3, #0
 800195c:	61bb      	str	r3, [r7, #24]
 800195e:	e036      	b.n	80019ce <DrawChar+0x146>
    {
      if(line & (1 << (width- j + offset- 1))) 
 8001960:	8a3a      	ldrh	r2, [r7, #16]
 8001962:	69bb      	ldr	r3, [r7, #24]
 8001964:	1ad2      	subs	r2, r2, r3
 8001966:	7bfb      	ldrb	r3, [r7, #15]
 8001968:	4413      	add	r3, r2
 800196a:	3b01      	subs	r3, #1
 800196c:	2201      	movs	r2, #1
 800196e:	fa02 f303 	lsl.w	r3, r2, r3
 8001972:	461a      	mov	r2, r3
 8001974:	697b      	ldr	r3, [r7, #20]
 8001976:	4013      	ands	r3, r2
 8001978:	2b00      	cmp	r3, #0
 800197a:	d012      	beq.n	80019a2 <DrawChar+0x11a>
      {
        BSP_LCD_DrawPixel((Xpos + j), Ypos, DrawProp[ActiveLayer].TextColor);
 800197c:	69bb      	ldr	r3, [r7, #24]
 800197e:	b29a      	uxth	r2, r3
 8001980:	88fb      	ldrh	r3, [r7, #6]
 8001982:	4413      	add	r3, r2
 8001984:	b298      	uxth	r0, r3
 8001986:	4b1b      	ldr	r3, [pc, #108]	@ (80019f4 <DrawChar+0x16c>)
 8001988:	681a      	ldr	r2, [r3, #0]
 800198a:	491b      	ldr	r1, [pc, #108]	@ (80019f8 <DrawChar+0x170>)
 800198c:	4613      	mov	r3, r2
 800198e:	005b      	lsls	r3, r3, #1
 8001990:	4413      	add	r3, r2
 8001992:	009b      	lsls	r3, r3, #2
 8001994:	440b      	add	r3, r1
 8001996:	681a      	ldr	r2, [r3, #0]
 8001998:	88bb      	ldrh	r3, [r7, #4]
 800199a:	4619      	mov	r1, r3
 800199c:	f7ff ff4e 	bl	800183c <BSP_LCD_DrawPixel>
 80019a0:	e012      	b.n	80019c8 <DrawChar+0x140>
      }
      else
      {
        BSP_LCD_DrawPixel((Xpos + j), Ypos, DrawProp[ActiveLayer].BackColor);
 80019a2:	69bb      	ldr	r3, [r7, #24]
 80019a4:	b29a      	uxth	r2, r3
 80019a6:	88fb      	ldrh	r3, [r7, #6]
 80019a8:	4413      	add	r3, r2
 80019aa:	b298      	uxth	r0, r3
 80019ac:	4b11      	ldr	r3, [pc, #68]	@ (80019f4 <DrawChar+0x16c>)
 80019ae:	681a      	ldr	r2, [r3, #0]
 80019b0:	4911      	ldr	r1, [pc, #68]	@ (80019f8 <DrawChar+0x170>)
 80019b2:	4613      	mov	r3, r2
 80019b4:	005b      	lsls	r3, r3, #1
 80019b6:	4413      	add	r3, r2
 80019b8:	009b      	lsls	r3, r3, #2
 80019ba:	440b      	add	r3, r1
 80019bc:	3304      	adds	r3, #4
 80019be:	681a      	ldr	r2, [r3, #0]
 80019c0:	88bb      	ldrh	r3, [r7, #4]
 80019c2:	4619      	mov	r1, r3
 80019c4:	f7ff ff3a 	bl	800183c <BSP_LCD_DrawPixel>
    for (j = 0; j < width; j++)
 80019c8:	69bb      	ldr	r3, [r7, #24]
 80019ca:	3301      	adds	r3, #1
 80019cc:	61bb      	str	r3, [r7, #24]
 80019ce:	8a3b      	ldrh	r3, [r7, #16]
 80019d0:	69ba      	ldr	r2, [r7, #24]
 80019d2:	429a      	cmp	r2, r3
 80019d4:	d3c4      	bcc.n	8001960 <DrawChar+0xd8>
      } 
    }
    Ypos++;
 80019d6:	88bb      	ldrh	r3, [r7, #4]
 80019d8:	3301      	adds	r3, #1
 80019da:	80bb      	strh	r3, [r7, #4]
  for(i = 0; i < height; i++)
 80019dc:	69fb      	ldr	r3, [r7, #28]
 80019de:	3301      	adds	r3, #1
 80019e0:	61fb      	str	r3, [r7, #28]
 80019e2:	8a7b      	ldrh	r3, [r7, #18]
 80019e4:	69fa      	ldr	r2, [r7, #28]
 80019e6:	429a      	cmp	r2, r3
 80019e8:	d384      	bcc.n	80018f4 <DrawChar+0x6c>
  }
}
 80019ea:	bf00      	nop
 80019ec:	bf00      	nop
 80019ee:	3720      	adds	r7, #32
 80019f0:	46bd      	mov	sp, r7
 80019f2:	bd80      	pop	{r7, pc}
 80019f4:	20000304 	.word	0x20000304
 80019f8:	20000308 	.word	0x20000308

080019fc <FillBuffer>:
  * @param  ySize: buffer height
  * @param  OffLine: offset
  * @param  ColorIndex: color Index  
  */
static void FillBuffer(uint32_t LayerIndex, void * pDst, uint32_t xSize, uint32_t ySize, uint32_t OffLine, uint32_t ColorIndex) 
{
 80019fc:	b580      	push	{r7, lr}
 80019fe:	b086      	sub	sp, #24
 8001a00:	af02      	add	r7, sp, #8
 8001a02:	60f8      	str	r0, [r7, #12]
 8001a04:	60b9      	str	r1, [r7, #8]
 8001a06:	607a      	str	r2, [r7, #4]
 8001a08:	603b      	str	r3, [r7, #0]
  
  /* Register to memory mode with ARGB8888 as color Mode */ 
  Dma2dHandler.Init.Mode         = DMA2D_R2M;
 8001a0a:	4b16      	ldr	r3, [pc, #88]	@ (8001a64 <FillBuffer+0x68>)
 8001a0c:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 8001a10:	605a      	str	r2, [r3, #4]
  Dma2dHandler.Init.ColorMode    = DMA2D_ARGB8888;
 8001a12:	4b14      	ldr	r3, [pc, #80]	@ (8001a64 <FillBuffer+0x68>)
 8001a14:	2200      	movs	r2, #0
 8001a16:	609a      	str	r2, [r3, #8]
  Dma2dHandler.Init.OutputOffset = OffLine;      
 8001a18:	4a12      	ldr	r2, [pc, #72]	@ (8001a64 <FillBuffer+0x68>)
 8001a1a:	69bb      	ldr	r3, [r7, #24]
 8001a1c:	60d3      	str	r3, [r2, #12]
  
  Dma2dHandler.Instance = DMA2D; 
 8001a1e:	4b11      	ldr	r3, [pc, #68]	@ (8001a64 <FillBuffer+0x68>)
 8001a20:	4a11      	ldr	r2, [pc, #68]	@ (8001a68 <FillBuffer+0x6c>)
 8001a22:	601a      	str	r2, [r3, #0]
  
  /* DMA2D Initialization */
  if(HAL_DMA2D_Init(&Dma2dHandler) == HAL_OK) 
 8001a24:	480f      	ldr	r0, [pc, #60]	@ (8001a64 <FillBuffer+0x68>)
 8001a26:	f001 fd0f 	bl	8003448 <HAL_DMA2D_Init>
 8001a2a:	4603      	mov	r3, r0
 8001a2c:	2b00      	cmp	r3, #0
 8001a2e:	d115      	bne.n	8001a5c <FillBuffer+0x60>
  {
    if(HAL_DMA2D_ConfigLayer(&Dma2dHandler, LayerIndex) == HAL_OK) 
 8001a30:	68f9      	ldr	r1, [r7, #12]
 8001a32:	480c      	ldr	r0, [pc, #48]	@ (8001a64 <FillBuffer+0x68>)
 8001a34:	f001 ff76 	bl	8003924 <HAL_DMA2D_ConfigLayer>
 8001a38:	4603      	mov	r3, r0
 8001a3a:	2b00      	cmp	r3, #0
 8001a3c:	d10e      	bne.n	8001a5c <FillBuffer+0x60>
    {
      if (HAL_DMA2D_Start(&Dma2dHandler, ColorIndex, (uint32_t)pDst, xSize, ySize) == HAL_OK)
 8001a3e:	68ba      	ldr	r2, [r7, #8]
 8001a40:	683b      	ldr	r3, [r7, #0]
 8001a42:	9300      	str	r3, [sp, #0]
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	69f9      	ldr	r1, [r7, #28]
 8001a48:	4806      	ldr	r0, [pc, #24]	@ (8001a64 <FillBuffer+0x68>)
 8001a4a:	f001 fd46 	bl	80034da <HAL_DMA2D_Start>
 8001a4e:	4603      	mov	r3, r0
 8001a50:	2b00      	cmp	r3, #0
 8001a52:	d103      	bne.n	8001a5c <FillBuffer+0x60>
      {
        /* Polling For DMA transfer */  
        HAL_DMA2D_PollForTransfer(&Dma2dHandler, 10);
 8001a54:	210a      	movs	r1, #10
 8001a56:	4803      	ldr	r0, [pc, #12]	@ (8001a64 <FillBuffer+0x68>)
 8001a58:	f001 fd6a 	bl	8003530 <HAL_DMA2D_PollForTransfer>
      }
    }
  } 
}
 8001a5c:	bf00      	nop
 8001a5e:	3710      	adds	r7, #16
 8001a60:	46bd      	mov	sp, r7
 8001a62:	bd80      	pop	{r7, pc}
 8001a64:	20000294 	.word	0x20000294
 8001a68:	4002b000 	.word	0x4002b000

08001a6c <BSP_SDRAM_Init>:

/**
  * @brief  Initializes the SDRAM device.
  */
uint8_t BSP_SDRAM_Init(void)
{
 8001a6c:	b580      	push	{r7, lr}
 8001a6e:	af00      	add	r7, sp, #0
  static uint8_t sdramstatus = SDRAM_ERROR;

  /* SDRAM device configuration */
  SdramHandle.Instance = FMC_SDRAM_DEVICE;
 8001a70:	4b29      	ldr	r3, [pc, #164]	@ (8001b18 <BSP_SDRAM_Init+0xac>)
 8001a72:	4a2a      	ldr	r2, [pc, #168]	@ (8001b1c <BSP_SDRAM_Init+0xb0>)
 8001a74:	601a      	str	r2, [r3, #0]

  /* FMC Configuration -------------------------------------------------------*/
  /* FMC SDRAM Bank configuration */
  /* Timing configuration for 90 Mhz of SD clock frequency (180Mhz/2) */
  /* TMRD: 2 Clock cycles */
  Timing.LoadToActiveDelay    = 2;
 8001a76:	4b2a      	ldr	r3, [pc, #168]	@ (8001b20 <BSP_SDRAM_Init+0xb4>)
 8001a78:	2202      	movs	r2, #2
 8001a7a:	601a      	str	r2, [r3, #0]
  /* TXSR: min=70ns (7x11.11ns) */
  Timing.ExitSelfRefreshDelay = 7;
 8001a7c:	4b28      	ldr	r3, [pc, #160]	@ (8001b20 <BSP_SDRAM_Init+0xb4>)
 8001a7e:	2207      	movs	r2, #7
 8001a80:	605a      	str	r2, [r3, #4]
  /* TRAS: min=42ns (4x11.11ns) max=120k (ns) */
  Timing.SelfRefreshTime      = 4;
 8001a82:	4b27      	ldr	r3, [pc, #156]	@ (8001b20 <BSP_SDRAM_Init+0xb4>)
 8001a84:	2204      	movs	r2, #4
 8001a86:	609a      	str	r2, [r3, #8]
  /* TRC:  min=70 (7x11.11ns) */
  Timing.RowCycleDelay        = 7;
 8001a88:	4b25      	ldr	r3, [pc, #148]	@ (8001b20 <BSP_SDRAM_Init+0xb4>)
 8001a8a:	2207      	movs	r2, #7
 8001a8c:	60da      	str	r2, [r3, #12]
  /* TWR:  min=1+ 7ns (1+1x11.11ns) */
  Timing.WriteRecoveryTime    = 2;
 8001a8e:	4b24      	ldr	r3, [pc, #144]	@ (8001b20 <BSP_SDRAM_Init+0xb4>)
 8001a90:	2202      	movs	r2, #2
 8001a92:	611a      	str	r2, [r3, #16]
  /* TRP:  20ns => 2x11.11ns*/
  Timing.RPDelay              = 2;
 8001a94:	4b22      	ldr	r3, [pc, #136]	@ (8001b20 <BSP_SDRAM_Init+0xb4>)
 8001a96:	2202      	movs	r2, #2
 8001a98:	615a      	str	r2, [r3, #20]
  /* TRCD: 20ns => 2x11.11ns */
  Timing.RCDDelay             = 2;
 8001a9a:	4b21      	ldr	r3, [pc, #132]	@ (8001b20 <BSP_SDRAM_Init+0xb4>)
 8001a9c:	2202      	movs	r2, #2
 8001a9e:	619a      	str	r2, [r3, #24]
  
  /* FMC SDRAM control configuration */
  SdramHandle.Init.SDBank             = FMC_SDRAM_BANK2;
 8001aa0:	4b1d      	ldr	r3, [pc, #116]	@ (8001b18 <BSP_SDRAM_Init+0xac>)
 8001aa2:	2201      	movs	r2, #1
 8001aa4:	605a      	str	r2, [r3, #4]
  /* Row addressing: [7:0] */
  SdramHandle.Init.ColumnBitsNumber   = FMC_SDRAM_COLUMN_BITS_NUM_8;
 8001aa6:	4b1c      	ldr	r3, [pc, #112]	@ (8001b18 <BSP_SDRAM_Init+0xac>)
 8001aa8:	2200      	movs	r2, #0
 8001aaa:	609a      	str	r2, [r3, #8]
  /* Column addressing: [11:0] */
  SdramHandle.Init.RowBitsNumber      = FMC_SDRAM_ROW_BITS_NUM_12;
 8001aac:	4b1a      	ldr	r3, [pc, #104]	@ (8001b18 <BSP_SDRAM_Init+0xac>)
 8001aae:	2204      	movs	r2, #4
 8001ab0:	60da      	str	r2, [r3, #12]
  SdramHandle.Init.MemoryDataWidth    = SDRAM_MEMORY_WIDTH;
 8001ab2:	4b19      	ldr	r3, [pc, #100]	@ (8001b18 <BSP_SDRAM_Init+0xac>)
 8001ab4:	2210      	movs	r2, #16
 8001ab6:	611a      	str	r2, [r3, #16]
  SdramHandle.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 8001ab8:	4b17      	ldr	r3, [pc, #92]	@ (8001b18 <BSP_SDRAM_Init+0xac>)
 8001aba:	2240      	movs	r2, #64	@ 0x40
 8001abc:	615a      	str	r2, [r3, #20]
  SdramHandle.Init.CASLatency         = SDRAM_CAS_LATENCY;
 8001abe:	4b16      	ldr	r3, [pc, #88]	@ (8001b18 <BSP_SDRAM_Init+0xac>)
 8001ac0:	f44f 72c0 	mov.w	r2, #384	@ 0x180
 8001ac4:	619a      	str	r2, [r3, #24]
  SdramHandle.Init.WriteProtection    = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 8001ac6:	4b14      	ldr	r3, [pc, #80]	@ (8001b18 <BSP_SDRAM_Init+0xac>)
 8001ac8:	2200      	movs	r2, #0
 8001aca:	61da      	str	r2, [r3, #28]
  SdramHandle.Init.SDClockPeriod      = SDCLOCK_PERIOD;
 8001acc:	4b12      	ldr	r3, [pc, #72]	@ (8001b18 <BSP_SDRAM_Init+0xac>)
 8001ace:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8001ad2:	621a      	str	r2, [r3, #32]
  SdramHandle.Init.ReadBurst          = SDRAM_READBURST;
 8001ad4:	4b10      	ldr	r3, [pc, #64]	@ (8001b18 <BSP_SDRAM_Init+0xac>)
 8001ad6:	2200      	movs	r2, #0
 8001ad8:	625a      	str	r2, [r3, #36]	@ 0x24
  SdramHandle.Init.ReadPipeDelay      = FMC_SDRAM_RPIPE_DELAY_1;
 8001ada:	4b0f      	ldr	r3, [pc, #60]	@ (8001b18 <BSP_SDRAM_Init+0xac>)
 8001adc:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001ae0:	629a      	str	r2, [r3, #40]	@ 0x28
                    
  /* SDRAM controller initialization */
  /* __weak function can be surcharged by the application code */
  BSP_SDRAM_MspInit(&SdramHandle, (void *)NULL);
 8001ae2:	2100      	movs	r1, #0
 8001ae4:	480c      	ldr	r0, [pc, #48]	@ (8001b18 <BSP_SDRAM_Init+0xac>)
 8001ae6:	f000 f87f 	bl	8001be8 <BSP_SDRAM_MspInit>
  if(HAL_SDRAM_Init(&SdramHandle, &Timing) != HAL_OK)
 8001aea:	490d      	ldr	r1, [pc, #52]	@ (8001b20 <BSP_SDRAM_Init+0xb4>)
 8001aec:	480a      	ldr	r0, [pc, #40]	@ (8001b18 <BSP_SDRAM_Init+0xac>)
 8001aee:	f003 fc41 	bl	8005374 <HAL_SDRAM_Init>
 8001af2:	4603      	mov	r3, r0
 8001af4:	2b00      	cmp	r3, #0
 8001af6:	d003      	beq.n	8001b00 <BSP_SDRAM_Init+0x94>
  {
    sdramstatus = SDRAM_ERROR;
 8001af8:	4b0a      	ldr	r3, [pc, #40]	@ (8001b24 <BSP_SDRAM_Init+0xb8>)
 8001afa:	2201      	movs	r2, #1
 8001afc:	701a      	strb	r2, [r3, #0]
 8001afe:	e002      	b.n	8001b06 <BSP_SDRAM_Init+0x9a>
  }
  else
  {
    sdramstatus = SDRAM_OK;
 8001b00:	4b08      	ldr	r3, [pc, #32]	@ (8001b24 <BSP_SDRAM_Init+0xb8>)
 8001b02:	2200      	movs	r2, #0
 8001b04:	701a      	strb	r2, [r3, #0]
  }
  
  /* SDRAM initialization sequence */
  BSP_SDRAM_Initialization_sequence(REFRESH_COUNT);
 8001b06:	f240 506a 	movw	r0, #1386	@ 0x56a
 8001b0a:	f000 f80d 	bl	8001b28 <BSP_SDRAM_Initialization_sequence>
  
  return sdramstatus;
 8001b0e:	4b05      	ldr	r3, [pc, #20]	@ (8001b24 <BSP_SDRAM_Init+0xb8>)
 8001b10:	781b      	ldrb	r3, [r3, #0]
}
 8001b12:	4618      	mov	r0, r3
 8001b14:	bd80      	pop	{r7, pc}
 8001b16:	bf00      	nop
 8001b18:	20000324 	.word	0x20000324
 8001b1c:	a0000140 	.word	0xa0000140
 8001b20:	20000358 	.word	0x20000358
 8001b24:	20000044 	.word	0x20000044

08001b28 <BSP_SDRAM_Initialization_sequence>:
/**
  * @brief  Programs the SDRAM device.
  * @param  RefreshCount: SDRAM refresh counter value 
  */
void BSP_SDRAM_Initialization_sequence(uint32_t RefreshCount)
{
 8001b28:	b580      	push	{r7, lr}
 8001b2a:	b084      	sub	sp, #16
 8001b2c:	af00      	add	r7, sp, #0
 8001b2e:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpmrd =0;
 8001b30:	2300      	movs	r3, #0
 8001b32:	60fb      	str	r3, [r7, #12]
  
  /* Step 1:  Configure a clock configuration enable command */
  Command.CommandMode             = FMC_SDRAM_CMD_CLK_ENABLE;
 8001b34:	4b2a      	ldr	r3, [pc, #168]	@ (8001be0 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8001b36:	2201      	movs	r2, #1
 8001b38:	601a      	str	r2, [r3, #0]
  Command.CommandTarget           = FMC_SDRAM_CMD_TARGET_BANK2;
 8001b3a:	4b29      	ldr	r3, [pc, #164]	@ (8001be0 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8001b3c:	2208      	movs	r2, #8
 8001b3e:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber       = 1;
 8001b40:	4b27      	ldr	r3, [pc, #156]	@ (8001be0 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8001b42:	2201      	movs	r2, #1
 8001b44:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition  = 0;
 8001b46:	4b26      	ldr	r3, [pc, #152]	@ (8001be0 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8001b48:	2200      	movs	r2, #0
 8001b4a:	60da      	str	r2, [r3, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&SdramHandle, &Command, SDRAM_TIMEOUT);
 8001b4c:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001b50:	4923      	ldr	r1, [pc, #140]	@ (8001be0 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8001b52:	4824      	ldr	r0, [pc, #144]	@ (8001be4 <BSP_SDRAM_Initialization_sequence+0xbc>)
 8001b54:	f003 fc42 	bl	80053dc <HAL_SDRAM_SendCommand>

  /* Step 2: Insert 100 us minimum delay */ 
  /* Inserted delay is equal to 1 ms due to systick time base unit (ms) */
  HAL_Delay(1);
 8001b58:	2001      	movs	r0, #1
 8001b5a:	f000 fd71 	bl	8002640 <HAL_Delay>

  /* Step 3: Configure a PALL (precharge all) command */ 
  Command.CommandMode             = FMC_SDRAM_CMD_PALL;
 8001b5e:	4b20      	ldr	r3, [pc, #128]	@ (8001be0 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8001b60:	2202      	movs	r2, #2
 8001b62:	601a      	str	r2, [r3, #0]
  Command.CommandTarget           = FMC_SDRAM_CMD_TARGET_BANK2;
 8001b64:	4b1e      	ldr	r3, [pc, #120]	@ (8001be0 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8001b66:	2208      	movs	r2, #8
 8001b68:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber       = 1;
 8001b6a:	4b1d      	ldr	r3, [pc, #116]	@ (8001be0 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8001b6c:	2201      	movs	r2, #1
 8001b6e:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition  = 0;
 8001b70:	4b1b      	ldr	r3, [pc, #108]	@ (8001be0 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8001b72:	2200      	movs	r2, #0
 8001b74:	60da      	str	r2, [r3, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&SdramHandle, &Command, SDRAM_TIMEOUT);  
 8001b76:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001b7a:	4919      	ldr	r1, [pc, #100]	@ (8001be0 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8001b7c:	4819      	ldr	r0, [pc, #100]	@ (8001be4 <BSP_SDRAM_Initialization_sequence+0xbc>)
 8001b7e:	f003 fc2d 	bl	80053dc <HAL_SDRAM_SendCommand>
  
  /* Step 4: Configure an Auto Refresh command */ 
  Command.CommandMode             = FMC_SDRAM_CMD_AUTOREFRESH_MODE;
 8001b82:	4b17      	ldr	r3, [pc, #92]	@ (8001be0 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8001b84:	2203      	movs	r2, #3
 8001b86:	601a      	str	r2, [r3, #0]
  Command.CommandTarget           = FMC_SDRAM_CMD_TARGET_BANK2;
 8001b88:	4b15      	ldr	r3, [pc, #84]	@ (8001be0 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8001b8a:	2208      	movs	r2, #8
 8001b8c:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber       = 4;
 8001b8e:	4b14      	ldr	r3, [pc, #80]	@ (8001be0 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8001b90:	2204      	movs	r2, #4
 8001b92:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition  = 0;
 8001b94:	4b12      	ldr	r3, [pc, #72]	@ (8001be0 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8001b96:	2200      	movs	r2, #0
 8001b98:	60da      	str	r2, [r3, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&SdramHandle, &Command, SDRAM_TIMEOUT);
 8001b9a:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001b9e:	4910      	ldr	r1, [pc, #64]	@ (8001be0 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8001ba0:	4810      	ldr	r0, [pc, #64]	@ (8001be4 <BSP_SDRAM_Initialization_sequence+0xbc>)
 8001ba2:	f003 fc1b 	bl	80053dc <HAL_SDRAM_SendCommand>
  
  /* Step 5: Program the external memory mode register */
  tmpmrd = (uint32_t)SDRAM_MODEREG_BURST_LENGTH_1          |
 8001ba6:	f44f 730c 	mov.w	r3, #560	@ 0x230
 8001baa:	60fb      	str	r3, [r7, #12]
                     SDRAM_MODEREG_BURST_TYPE_SEQUENTIAL   |
                     SDRAM_MODEREG_CAS_LATENCY_3           |
                     SDRAM_MODEREG_OPERATING_MODE_STANDARD |
                     SDRAM_MODEREG_WRITEBURST_MODE_SINGLE;
  
  Command.CommandMode             = FMC_SDRAM_CMD_LOAD_MODE;
 8001bac:	4b0c      	ldr	r3, [pc, #48]	@ (8001be0 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8001bae:	2204      	movs	r2, #4
 8001bb0:	601a      	str	r2, [r3, #0]
  Command.CommandTarget           = FMC_SDRAM_CMD_TARGET_BANK2;
 8001bb2:	4b0b      	ldr	r3, [pc, #44]	@ (8001be0 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8001bb4:	2208      	movs	r2, #8
 8001bb6:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber       = 1;
 8001bb8:	4b09      	ldr	r3, [pc, #36]	@ (8001be0 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8001bba:	2201      	movs	r2, #1
 8001bbc:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition  = tmpmrd;
 8001bbe:	68fb      	ldr	r3, [r7, #12]
 8001bc0:	4a07      	ldr	r2, [pc, #28]	@ (8001be0 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8001bc2:	60d3      	str	r3, [r2, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&SdramHandle, &Command, SDRAM_TIMEOUT);
 8001bc4:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001bc8:	4905      	ldr	r1, [pc, #20]	@ (8001be0 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8001bca:	4806      	ldr	r0, [pc, #24]	@ (8001be4 <BSP_SDRAM_Initialization_sequence+0xbc>)
 8001bcc:	f003 fc06 	bl	80053dc <HAL_SDRAM_SendCommand>
  
  /* Step 6: Set the refresh rate counter */
  /* Set the device refresh rate */
  HAL_SDRAM_ProgramRefreshRate(&SdramHandle, RefreshCount); 
 8001bd0:	6879      	ldr	r1, [r7, #4]
 8001bd2:	4804      	ldr	r0, [pc, #16]	@ (8001be4 <BSP_SDRAM_Initialization_sequence+0xbc>)
 8001bd4:	f003 fc37 	bl	8005446 <HAL_SDRAM_ProgramRefreshRate>
}
 8001bd8:	bf00      	nop
 8001bda:	3710      	adds	r7, #16
 8001bdc:	46bd      	mov	sp, r7
 8001bde:	bd80      	pop	{r7, pc}
 8001be0:	20000374 	.word	0x20000374
 8001be4:	20000324 	.word	0x20000324

08001be8 <BSP_SDRAM_MspInit>:
  * @note   This function can be surcharged by application code.
  * @param  hsdram: pointer on SDRAM handle
  * @param  Params: pointer on additional configuration parameters, can be NULL.
  */
__weak void BSP_SDRAM_MspInit(SDRAM_HandleTypeDef  *hsdram, void *Params)
{
 8001be8:	b580      	push	{r7, lr}
 8001bea:	b090      	sub	sp, #64	@ 0x40
 8001bec:	af00      	add	r7, sp, #0
 8001bee:	6078      	str	r0, [r7, #4]
 8001bf0:	6039      	str	r1, [r7, #0]
  static DMA_HandleTypeDef dmaHandle;
  GPIO_InitTypeDef GPIO_InitStructure;

  if(hsdram != (SDRAM_HandleTypeDef  *)NULL)
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	2b00      	cmp	r3, #0
 8001bf6:	f000 80ec 	beq.w	8001dd2 <BSP_SDRAM_MspInit+0x1ea>
  {
  /* Enable FMC clock */
  __HAL_RCC_FMC_CLK_ENABLE();
 8001bfa:	2300      	movs	r3, #0
 8001bfc:	62bb      	str	r3, [r7, #40]	@ 0x28
 8001bfe:	4b77      	ldr	r3, [pc, #476]	@ (8001ddc <BSP_SDRAM_MspInit+0x1f4>)
 8001c00:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001c02:	4a76      	ldr	r2, [pc, #472]	@ (8001ddc <BSP_SDRAM_MspInit+0x1f4>)
 8001c04:	f043 0301 	orr.w	r3, r3, #1
 8001c08:	6393      	str	r3, [r2, #56]	@ 0x38
 8001c0a:	4b74      	ldr	r3, [pc, #464]	@ (8001ddc <BSP_SDRAM_MspInit+0x1f4>)
 8001c0c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001c0e:	f003 0301 	and.w	r3, r3, #1
 8001c12:	62bb      	str	r3, [r7, #40]	@ 0x28
 8001c14:	6abb      	ldr	r3, [r7, #40]	@ 0x28

  /* Enable chosen DMAx clock */
  __DMAx_CLK_ENABLE();
 8001c16:	2300      	movs	r3, #0
 8001c18:	627b      	str	r3, [r7, #36]	@ 0x24
 8001c1a:	4b70      	ldr	r3, [pc, #448]	@ (8001ddc <BSP_SDRAM_MspInit+0x1f4>)
 8001c1c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c1e:	4a6f      	ldr	r2, [pc, #444]	@ (8001ddc <BSP_SDRAM_MspInit+0x1f4>)
 8001c20:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8001c24:	6313      	str	r3, [r2, #48]	@ 0x30
 8001c26:	4b6d      	ldr	r3, [pc, #436]	@ (8001ddc <BSP_SDRAM_MspInit+0x1f4>)
 8001c28:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c2a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001c2e:	627b      	str	r3, [r7, #36]	@ 0x24
 8001c30:	6a7b      	ldr	r3, [r7, #36]	@ 0x24

  /* Enable GPIOs clock */
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001c32:	2300      	movs	r3, #0
 8001c34:	623b      	str	r3, [r7, #32]
 8001c36:	4b69      	ldr	r3, [pc, #420]	@ (8001ddc <BSP_SDRAM_MspInit+0x1f4>)
 8001c38:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c3a:	4a68      	ldr	r2, [pc, #416]	@ (8001ddc <BSP_SDRAM_MspInit+0x1f4>)
 8001c3c:	f043 0302 	orr.w	r3, r3, #2
 8001c40:	6313      	str	r3, [r2, #48]	@ 0x30
 8001c42:	4b66      	ldr	r3, [pc, #408]	@ (8001ddc <BSP_SDRAM_MspInit+0x1f4>)
 8001c44:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c46:	f003 0302 	and.w	r3, r3, #2
 8001c4a:	623b      	str	r3, [r7, #32]
 8001c4c:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001c4e:	2300      	movs	r3, #0
 8001c50:	61fb      	str	r3, [r7, #28]
 8001c52:	4b62      	ldr	r3, [pc, #392]	@ (8001ddc <BSP_SDRAM_MspInit+0x1f4>)
 8001c54:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c56:	4a61      	ldr	r2, [pc, #388]	@ (8001ddc <BSP_SDRAM_MspInit+0x1f4>)
 8001c58:	f043 0304 	orr.w	r3, r3, #4
 8001c5c:	6313      	str	r3, [r2, #48]	@ 0x30
 8001c5e:	4b5f      	ldr	r3, [pc, #380]	@ (8001ddc <BSP_SDRAM_MspInit+0x1f4>)
 8001c60:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c62:	f003 0304 	and.w	r3, r3, #4
 8001c66:	61fb      	str	r3, [r7, #28]
 8001c68:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001c6a:	2300      	movs	r3, #0
 8001c6c:	61bb      	str	r3, [r7, #24]
 8001c6e:	4b5b      	ldr	r3, [pc, #364]	@ (8001ddc <BSP_SDRAM_MspInit+0x1f4>)
 8001c70:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c72:	4a5a      	ldr	r2, [pc, #360]	@ (8001ddc <BSP_SDRAM_MspInit+0x1f4>)
 8001c74:	f043 0308 	orr.w	r3, r3, #8
 8001c78:	6313      	str	r3, [r2, #48]	@ 0x30
 8001c7a:	4b58      	ldr	r3, [pc, #352]	@ (8001ddc <BSP_SDRAM_MspInit+0x1f4>)
 8001c7c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c7e:	f003 0308 	and.w	r3, r3, #8
 8001c82:	61bb      	str	r3, [r7, #24]
 8001c84:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001c86:	2300      	movs	r3, #0
 8001c88:	617b      	str	r3, [r7, #20]
 8001c8a:	4b54      	ldr	r3, [pc, #336]	@ (8001ddc <BSP_SDRAM_MspInit+0x1f4>)
 8001c8c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c8e:	4a53      	ldr	r2, [pc, #332]	@ (8001ddc <BSP_SDRAM_MspInit+0x1f4>)
 8001c90:	f043 0310 	orr.w	r3, r3, #16
 8001c94:	6313      	str	r3, [r2, #48]	@ 0x30
 8001c96:	4b51      	ldr	r3, [pc, #324]	@ (8001ddc <BSP_SDRAM_MspInit+0x1f4>)
 8001c98:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c9a:	f003 0310 	and.w	r3, r3, #16
 8001c9e:	617b      	str	r3, [r7, #20]
 8001ca0:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001ca2:	2300      	movs	r3, #0
 8001ca4:	613b      	str	r3, [r7, #16]
 8001ca6:	4b4d      	ldr	r3, [pc, #308]	@ (8001ddc <BSP_SDRAM_MspInit+0x1f4>)
 8001ca8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001caa:	4a4c      	ldr	r2, [pc, #304]	@ (8001ddc <BSP_SDRAM_MspInit+0x1f4>)
 8001cac:	f043 0320 	orr.w	r3, r3, #32
 8001cb0:	6313      	str	r3, [r2, #48]	@ 0x30
 8001cb2:	4b4a      	ldr	r3, [pc, #296]	@ (8001ddc <BSP_SDRAM_MspInit+0x1f4>)
 8001cb4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001cb6:	f003 0320 	and.w	r3, r3, #32
 8001cba:	613b      	str	r3, [r7, #16]
 8001cbc:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8001cbe:	2300      	movs	r3, #0
 8001cc0:	60fb      	str	r3, [r7, #12]
 8001cc2:	4b46      	ldr	r3, [pc, #280]	@ (8001ddc <BSP_SDRAM_MspInit+0x1f4>)
 8001cc4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001cc6:	4a45      	ldr	r2, [pc, #276]	@ (8001ddc <BSP_SDRAM_MspInit+0x1f4>)
 8001cc8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001ccc:	6313      	str	r3, [r2, #48]	@ 0x30
 8001cce:	4b43      	ldr	r3, [pc, #268]	@ (8001ddc <BSP_SDRAM_MspInit+0x1f4>)
 8001cd0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001cd2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001cd6:	60fb      	str	r3, [r7, #12]
 8001cd8:	68fb      	ldr	r3, [r7, #12]
 +-------------------+  
  
*/
  
  /* Common GPIO configuration */
  GPIO_InitStructure.Mode  = GPIO_MODE_AF_PP;
 8001cda:	2302      	movs	r3, #2
 8001cdc:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStructure.Speed = GPIO_SPEED_FAST;
 8001cde:	2302      	movs	r3, #2
 8001ce0:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStructure.Pull  = GPIO_NOPULL;
 8001ce2:	2300      	movs	r3, #0
 8001ce4:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStructure.Alternate = GPIO_AF12_FMC;
 8001ce6:	230c      	movs	r3, #12
 8001ce8:	63fb      	str	r3, [r7, #60]	@ 0x3c

  /* GPIOB configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_5 | GPIO_PIN_6;
 8001cea:	2360      	movs	r3, #96	@ 0x60
 8001cec:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStructure);  
 8001cee:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001cf2:	4619      	mov	r1, r3
 8001cf4:	483a      	ldr	r0, [pc, #232]	@ (8001de0 <BSP_SDRAM_MspInit+0x1f8>)
 8001cf6:	f001 ff43 	bl	8003b80 <HAL_GPIO_Init>

  /* GPIOC configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_0;      
 8001cfa:	2301      	movs	r3, #1
 8001cfc:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStructure);  
 8001cfe:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001d02:	4619      	mov	r1, r3
 8001d04:	4837      	ldr	r0, [pc, #220]	@ (8001de4 <BSP_SDRAM_MspInit+0x1fc>)
 8001d06:	f001 ff3b 	bl	8003b80 <HAL_GPIO_Init>
  
  /* GPIOD configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_0 | GPIO_PIN_1  | GPIO_PIN_8 |
 8001d0a:	f24c 7303 	movw	r3, #50947	@ 0xc703
 8001d0e:	62fb      	str	r3, [r7, #44]	@ 0x2c
                           GPIO_PIN_9 | GPIO_PIN_10 | GPIO_PIN_14 |
                           GPIO_PIN_15;
  HAL_GPIO_Init(GPIOD, &GPIO_InitStructure);
 8001d10:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001d14:	4619      	mov	r1, r3
 8001d16:	4834      	ldr	r0, [pc, #208]	@ (8001de8 <BSP_SDRAM_MspInit+0x200>)
 8001d18:	f001 ff32 	bl	8003b80 <HAL_GPIO_Init>

  /* GPIOE configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_0  | GPIO_PIN_1  | GPIO_PIN_7 |
 8001d1c:	f64f 7383 	movw	r3, #65411	@ 0xff83
 8001d20:	62fb      	str	r3, [r7, #44]	@ 0x2c
                           GPIO_PIN_8  | GPIO_PIN_9  | GPIO_PIN_10 |
                           GPIO_PIN_11 | GPIO_PIN_12 | GPIO_PIN_13 |
                           GPIO_PIN_14 | GPIO_PIN_15;
  HAL_GPIO_Init(GPIOE, &GPIO_InitStructure);
 8001d22:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001d26:	4619      	mov	r1, r3
 8001d28:	4830      	ldr	r0, [pc, #192]	@ (8001dec <BSP_SDRAM_MspInit+0x204>)
 8001d2a:	f001 ff29 	bl	8003b80 <HAL_GPIO_Init>

  /* GPIOF configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_0  | GPIO_PIN_1 | GPIO_PIN_2 | 
 8001d2e:	f64f 033f 	movw	r3, #63551	@ 0xf83f
 8001d32:	62fb      	str	r3, [r7, #44]	@ 0x2c
                           GPIO_PIN_3  | GPIO_PIN_4 | GPIO_PIN_5 |
                           GPIO_PIN_11 | GPIO_PIN_12 | GPIO_PIN_13 |
                           GPIO_PIN_14 | GPIO_PIN_15;
  HAL_GPIO_Init(GPIOF, &GPIO_InitStructure);
 8001d34:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001d38:	4619      	mov	r1, r3
 8001d3a:	482d      	ldr	r0, [pc, #180]	@ (8001df0 <BSP_SDRAM_MspInit+0x208>)
 8001d3c:	f001 ff20 	bl	8003b80 <HAL_GPIO_Init>

  /* GPIOG configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_4 |
 8001d40:	f248 1333 	movw	r3, #33075	@ 0x8133
 8001d44:	62fb      	str	r3, [r7, #44]	@ 0x2c
                           GPIO_PIN_5 | GPIO_PIN_8 | GPIO_PIN_15;
  HAL_GPIO_Init(GPIOG, &GPIO_InitStructure);
 8001d46:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001d4a:	4619      	mov	r1, r3
 8001d4c:	4829      	ldr	r0, [pc, #164]	@ (8001df4 <BSP_SDRAM_MspInit+0x20c>)
 8001d4e:	f001 ff17 	bl	8003b80 <HAL_GPIO_Init>

  /* Configure common DMA parameters */
  dmaHandle.Init.Channel             = SDRAM_DMAx_CHANNEL;
 8001d52:	4b29      	ldr	r3, [pc, #164]	@ (8001df8 <BSP_SDRAM_MspInit+0x210>)
 8001d54:	2200      	movs	r2, #0
 8001d56:	605a      	str	r2, [r3, #4]
  dmaHandle.Init.Direction           = DMA_MEMORY_TO_MEMORY;
 8001d58:	4b27      	ldr	r3, [pc, #156]	@ (8001df8 <BSP_SDRAM_MspInit+0x210>)
 8001d5a:	2280      	movs	r2, #128	@ 0x80
 8001d5c:	609a      	str	r2, [r3, #8]
  dmaHandle.Init.PeriphInc           = DMA_PINC_ENABLE;
 8001d5e:	4b26      	ldr	r3, [pc, #152]	@ (8001df8 <BSP_SDRAM_MspInit+0x210>)
 8001d60:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001d64:	60da      	str	r2, [r3, #12]
  dmaHandle.Init.MemInc              = DMA_MINC_ENABLE;
 8001d66:	4b24      	ldr	r3, [pc, #144]	@ (8001df8 <BSP_SDRAM_MspInit+0x210>)
 8001d68:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001d6c:	611a      	str	r2, [r3, #16]
  dmaHandle.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8001d6e:	4b22      	ldr	r3, [pc, #136]	@ (8001df8 <BSP_SDRAM_MspInit+0x210>)
 8001d70:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8001d74:	615a      	str	r2, [r3, #20]
  dmaHandle.Init.MemDataAlignment    = DMA_MDATAALIGN_WORD;
 8001d76:	4b20      	ldr	r3, [pc, #128]	@ (8001df8 <BSP_SDRAM_MspInit+0x210>)
 8001d78:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8001d7c:	619a      	str	r2, [r3, #24]
  dmaHandle.Init.Mode                = DMA_NORMAL;
 8001d7e:	4b1e      	ldr	r3, [pc, #120]	@ (8001df8 <BSP_SDRAM_MspInit+0x210>)
 8001d80:	2200      	movs	r2, #0
 8001d82:	61da      	str	r2, [r3, #28]
  dmaHandle.Init.Priority            = DMA_PRIORITY_HIGH;
 8001d84:	4b1c      	ldr	r3, [pc, #112]	@ (8001df8 <BSP_SDRAM_MspInit+0x210>)
 8001d86:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8001d8a:	621a      	str	r2, [r3, #32]
  dmaHandle.Init.FIFOMode            = DMA_FIFOMODE_DISABLE;
 8001d8c:	4b1a      	ldr	r3, [pc, #104]	@ (8001df8 <BSP_SDRAM_MspInit+0x210>)
 8001d8e:	2200      	movs	r2, #0
 8001d90:	625a      	str	r2, [r3, #36]	@ 0x24
  dmaHandle.Init.FIFOThreshold       = DMA_FIFO_THRESHOLD_FULL;
 8001d92:	4b19      	ldr	r3, [pc, #100]	@ (8001df8 <BSP_SDRAM_MspInit+0x210>)
 8001d94:	2203      	movs	r2, #3
 8001d96:	629a      	str	r2, [r3, #40]	@ 0x28
  dmaHandle.Init.MemBurst            = DMA_MBURST_SINGLE;
 8001d98:	4b17      	ldr	r3, [pc, #92]	@ (8001df8 <BSP_SDRAM_MspInit+0x210>)
 8001d9a:	2200      	movs	r2, #0
 8001d9c:	62da      	str	r2, [r3, #44]	@ 0x2c
  dmaHandle.Init.PeriphBurst         = DMA_PBURST_SINGLE; 
 8001d9e:	4b16      	ldr	r3, [pc, #88]	@ (8001df8 <BSP_SDRAM_MspInit+0x210>)
 8001da0:	2200      	movs	r2, #0
 8001da2:	631a      	str	r2, [r3, #48]	@ 0x30
  
  dmaHandle.Instance = SDRAM_DMAx_STREAM;
 8001da4:	4b14      	ldr	r3, [pc, #80]	@ (8001df8 <BSP_SDRAM_MspInit+0x210>)
 8001da6:	4a15      	ldr	r2, [pc, #84]	@ (8001dfc <BSP_SDRAM_MspInit+0x214>)
 8001da8:	601a      	str	r2, [r3, #0]
  
  /* Associate the DMA handle */
  __HAL_LINKDMA(hsdram, hdma, dmaHandle);
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	4a12      	ldr	r2, [pc, #72]	@ (8001df8 <BSP_SDRAM_MspInit+0x210>)
 8001dae:	631a      	str	r2, [r3, #48]	@ 0x30
 8001db0:	4a11      	ldr	r2, [pc, #68]	@ (8001df8 <BSP_SDRAM_MspInit+0x210>)
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	6393      	str	r3, [r2, #56]	@ 0x38
  
  /* Deinitialize the stream for new transfer */
  HAL_DMA_DeInit(&dmaHandle);
 8001db6:	4810      	ldr	r0, [pc, #64]	@ (8001df8 <BSP_SDRAM_MspInit+0x210>)
 8001db8:	f001 fa36 	bl	8003228 <HAL_DMA_DeInit>
  
  /* Configure the DMA stream */
  HAL_DMA_Init(&dmaHandle); 
 8001dbc:	480e      	ldr	r0, [pc, #56]	@ (8001df8 <BSP_SDRAM_MspInit+0x210>)
 8001dbe:	f001 f985 	bl	80030cc <HAL_DMA_Init>
  
  /* NVIC configuration for DMA transfer complete interrupt */
  HAL_NVIC_SetPriority(SDRAM_DMAx_IRQn, 0x0F, 0);
 8001dc2:	2200      	movs	r2, #0
 8001dc4:	210f      	movs	r1, #15
 8001dc6:	2038      	movs	r0, #56	@ 0x38
 8001dc8:	f001 f949 	bl	800305e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(SDRAM_DMAx_IRQn);
 8001dcc:	2038      	movs	r0, #56	@ 0x38
 8001dce:	f001 f962 	bl	8003096 <HAL_NVIC_EnableIRQ>
  } /* of if(hsdram != (SDRAM_HandleTypeDef  *)NULL) */
}
 8001dd2:	bf00      	nop
 8001dd4:	3740      	adds	r7, #64	@ 0x40
 8001dd6:	46bd      	mov	sp, r7
 8001dd8:	bd80      	pop	{r7, pc}
 8001dda:	bf00      	nop
 8001ddc:	40023800 	.word	0x40023800
 8001de0:	40020400 	.word	0x40020400
 8001de4:	40020800 	.word	0x40020800
 8001de8:	40020c00 	.word	0x40020c00
 8001dec:	40021000 	.word	0x40021000
 8001df0:	40021400 	.word	0x40021400
 8001df4:	40021800 	.word	0x40021800
 8001df8:	20000384 	.word	0x20000384
 8001dfc:	40026410 	.word	0x40026410

08001e00 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001e00:	b580      	push	{r7, lr}
 8001e02:	b082      	sub	sp, #8
 8001e04:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001e06:	2300      	movs	r3, #0
 8001e08:	607b      	str	r3, [r7, #4]
 8001e0a:	4b12      	ldr	r3, [pc, #72]	@ (8001e54 <HAL_MspInit+0x54>)
 8001e0c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001e0e:	4a11      	ldr	r2, [pc, #68]	@ (8001e54 <HAL_MspInit+0x54>)
 8001e10:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001e14:	6453      	str	r3, [r2, #68]	@ 0x44
 8001e16:	4b0f      	ldr	r3, [pc, #60]	@ (8001e54 <HAL_MspInit+0x54>)
 8001e18:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001e1a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001e1e:	607b      	str	r3, [r7, #4]
 8001e20:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001e22:	2300      	movs	r3, #0
 8001e24:	603b      	str	r3, [r7, #0]
 8001e26:	4b0b      	ldr	r3, [pc, #44]	@ (8001e54 <HAL_MspInit+0x54>)
 8001e28:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e2a:	4a0a      	ldr	r2, [pc, #40]	@ (8001e54 <HAL_MspInit+0x54>)
 8001e2c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001e30:	6413      	str	r3, [r2, #64]	@ 0x40
 8001e32:	4b08      	ldr	r3, [pc, #32]	@ (8001e54 <HAL_MspInit+0x54>)
 8001e34:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e36:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001e3a:	603b      	str	r3, [r7, #0]
 8001e3c:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8001e3e:	2200      	movs	r2, #0
 8001e40:	210f      	movs	r1, #15
 8001e42:	f06f 0001 	mvn.w	r0, #1
 8001e46:	f001 f90a 	bl	800305e <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001e4a:	bf00      	nop
 8001e4c:	3708      	adds	r7, #8
 8001e4e:	46bd      	mov	sp, r7
 8001e50:	bd80      	pop	{r7, pc}
 8001e52:	bf00      	nop
 8001e54:	40023800 	.word	0x40023800

08001e58 <HAL_ADC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hadc: ADC handle pointer
  * @retval None
  */
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001e58:	b580      	push	{r7, lr}
 8001e5a:	b08a      	sub	sp, #40	@ 0x28
 8001e5c:	af00      	add	r7, sp, #0
 8001e5e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e60:	f107 0314 	add.w	r3, r7, #20
 8001e64:	2200      	movs	r2, #0
 8001e66:	601a      	str	r2, [r3, #0]
 8001e68:	605a      	str	r2, [r3, #4]
 8001e6a:	609a      	str	r2, [r3, #8]
 8001e6c:	60da      	str	r2, [r3, #12]
 8001e6e:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	681b      	ldr	r3, [r3, #0]
 8001e74:	4a17      	ldr	r2, [pc, #92]	@ (8001ed4 <HAL_ADC_MspInit+0x7c>)
 8001e76:	4293      	cmp	r3, r2
 8001e78:	d127      	bne.n	8001eca <HAL_ADC_MspInit+0x72>
  {
    /* USER CODE BEGIN ADC1_MspInit 0 */

    /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001e7a:	2300      	movs	r3, #0
 8001e7c:	613b      	str	r3, [r7, #16]
 8001e7e:	4b16      	ldr	r3, [pc, #88]	@ (8001ed8 <HAL_ADC_MspInit+0x80>)
 8001e80:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001e82:	4a15      	ldr	r2, [pc, #84]	@ (8001ed8 <HAL_ADC_MspInit+0x80>)
 8001e84:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001e88:	6453      	str	r3, [r2, #68]	@ 0x44
 8001e8a:	4b13      	ldr	r3, [pc, #76]	@ (8001ed8 <HAL_ADC_MspInit+0x80>)
 8001e8c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001e8e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001e92:	613b      	str	r3, [r7, #16]
 8001e94:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001e96:	2300      	movs	r3, #0
 8001e98:	60fb      	str	r3, [r7, #12]
 8001e9a:	4b0f      	ldr	r3, [pc, #60]	@ (8001ed8 <HAL_ADC_MspInit+0x80>)
 8001e9c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e9e:	4a0e      	ldr	r2, [pc, #56]	@ (8001ed8 <HAL_ADC_MspInit+0x80>)
 8001ea0:	f043 0301 	orr.w	r3, r3, #1
 8001ea4:	6313      	str	r3, [r2, #48]	@ 0x30
 8001ea6:	4b0c      	ldr	r3, [pc, #48]	@ (8001ed8 <HAL_ADC_MspInit+0x80>)
 8001ea8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001eaa:	f003 0301 	and.w	r3, r3, #1
 8001eae:	60fb      	str	r3, [r7, #12]
 8001eb0:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA1     ------> ADC1_IN1
    PA2     ------> ADC1_IN2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2;
 8001eb2:	2306      	movs	r3, #6
 8001eb4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001eb6:	2303      	movs	r3, #3
 8001eb8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001eba:	2300      	movs	r3, #0
 8001ebc:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001ebe:	f107 0314 	add.w	r3, r7, #20
 8001ec2:	4619      	mov	r1, r3
 8001ec4:	4805      	ldr	r0, [pc, #20]	@ (8001edc <HAL_ADC_MspInit+0x84>)
 8001ec6:	f001 fe5b 	bl	8003b80 <HAL_GPIO_Init>

    /* USER CODE END ADC1_MspInit 1 */

  }

}
 8001eca:	bf00      	nop
 8001ecc:	3728      	adds	r7, #40	@ 0x28
 8001ece:	46bd      	mov	sp, r7
 8001ed0:	bd80      	pop	{r7, pc}
 8001ed2:	bf00      	nop
 8001ed4:	40012000 	.word	0x40012000
 8001ed8:	40023800 	.word	0x40023800
 8001edc:	40020000 	.word	0x40020000

08001ee0 <HAL_DMA2D_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hdma2d: DMA2D handle pointer
  * @retval None
  */
void HAL_DMA2D_MspInit(DMA2D_HandleTypeDef* hdma2d)
{
 8001ee0:	b580      	push	{r7, lr}
 8001ee2:	b084      	sub	sp, #16
 8001ee4:	af00      	add	r7, sp, #0
 8001ee6:	6078      	str	r0, [r7, #4]
  if(hdma2d->Instance==DMA2D)
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	681b      	ldr	r3, [r3, #0]
 8001eec:	4a0e      	ldr	r2, [pc, #56]	@ (8001f28 <HAL_DMA2D_MspInit+0x48>)
 8001eee:	4293      	cmp	r3, r2
 8001ef0:	d115      	bne.n	8001f1e <HAL_DMA2D_MspInit+0x3e>
  {
    /* USER CODE BEGIN DMA2D_MspInit 0 */

    /* USER CODE END DMA2D_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DMA2D_CLK_ENABLE();
 8001ef2:	2300      	movs	r3, #0
 8001ef4:	60fb      	str	r3, [r7, #12]
 8001ef6:	4b0d      	ldr	r3, [pc, #52]	@ (8001f2c <HAL_DMA2D_MspInit+0x4c>)
 8001ef8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001efa:	4a0c      	ldr	r2, [pc, #48]	@ (8001f2c <HAL_DMA2D_MspInit+0x4c>)
 8001efc:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8001f00:	6313      	str	r3, [r2, #48]	@ 0x30
 8001f02:	4b0a      	ldr	r3, [pc, #40]	@ (8001f2c <HAL_DMA2D_MspInit+0x4c>)
 8001f04:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001f06:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8001f0a:	60fb      	str	r3, [r7, #12]
 8001f0c:	68fb      	ldr	r3, [r7, #12]
    /* DMA2D interrupt Init */
    HAL_NVIC_SetPriority(DMA2D_IRQn, 5, 0);
 8001f0e:	2200      	movs	r2, #0
 8001f10:	2105      	movs	r1, #5
 8001f12:	205a      	movs	r0, #90	@ 0x5a
 8001f14:	f001 f8a3 	bl	800305e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DMA2D_IRQn);
 8001f18:	205a      	movs	r0, #90	@ 0x5a
 8001f1a:	f001 f8bc 	bl	8003096 <HAL_NVIC_EnableIRQ>

    /* USER CODE END DMA2D_MspInit 1 */

  }

}
 8001f1e:	bf00      	nop
 8001f20:	3710      	adds	r7, #16
 8001f22:	46bd      	mov	sp, r7
 8001f24:	bd80      	pop	{r7, pc}
 8001f26:	bf00      	nop
 8001f28:	4002b000 	.word	0x4002b000
 8001f2c:	40023800 	.word	0x40023800

08001f30 <HAL_LTDC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hltdc: LTDC handle pointer
  * @retval None
  */
void HAL_LTDC_MspInit(LTDC_HandleTypeDef* hltdc)
{
 8001f30:	b580      	push	{r7, lr}
 8001f32:	b09a      	sub	sp, #104	@ 0x68
 8001f34:	af00      	add	r7, sp, #0
 8001f36:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f38:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8001f3c:	2200      	movs	r2, #0
 8001f3e:	601a      	str	r2, [r3, #0]
 8001f40:	605a      	str	r2, [r3, #4]
 8001f42:	609a      	str	r2, [r3, #8]
 8001f44:	60da      	str	r2, [r3, #12]
 8001f46:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001f48:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001f4c:	2230      	movs	r2, #48	@ 0x30
 8001f4e:	2100      	movs	r1, #0
 8001f50:	4618      	mov	r0, r3
 8001f52:	f004 fec5 	bl	8006ce0 <memset>
  if(hltdc->Instance==LTDC)
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	681b      	ldr	r3, [r3, #0]
 8001f5a:	4a81      	ldr	r2, [pc, #516]	@ (8002160 <HAL_LTDC_MspInit+0x230>)
 8001f5c:	4293      	cmp	r3, r2
 8001f5e:	f040 80fb 	bne.w	8002158 <HAL_LTDC_MspInit+0x228>

    /* USER CODE END LTDC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 8001f62:	2308      	movs	r3, #8
 8001f64:	627b      	str	r3, [r7, #36]	@ 0x24
    PeriphClkInitStruct.PLLSAI.PLLSAIN = 192;
 8001f66:	23c0      	movs	r3, #192	@ 0xc0
 8001f68:	637b      	str	r3, [r7, #52]	@ 0x34
    PeriphClkInitStruct.PLLSAI.PLLSAIR = 4;
 8001f6a:	2304      	movs	r3, #4
 8001f6c:	63fb      	str	r3, [r7, #60]	@ 0x3c
    PeriphClkInitStruct.PLLSAIDivR = RCC_PLLSAIDIVR_8;
 8001f6e:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8001f72:	64bb      	str	r3, [r7, #72]	@ 0x48
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001f74:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001f78:	4618      	mov	r0, r3
 8001f7a:	f003 f83b 	bl	8004ff4 <HAL_RCCEx_PeriphCLKConfig>
 8001f7e:	4603      	mov	r3, r0
 8001f80:	2b00      	cmp	r3, #0
 8001f82:	d001      	beq.n	8001f88 <HAL_LTDC_MspInit+0x58>
    {
      Error_Handler();
 8001f84:	f7fe fea8 	bl	8000cd8 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LTDC_CLK_ENABLE();
 8001f88:	2300      	movs	r3, #0
 8001f8a:	623b      	str	r3, [r7, #32]
 8001f8c:	4b75      	ldr	r3, [pc, #468]	@ (8002164 <HAL_LTDC_MspInit+0x234>)
 8001f8e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001f90:	4a74      	ldr	r2, [pc, #464]	@ (8002164 <HAL_LTDC_MspInit+0x234>)
 8001f92:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8001f96:	6453      	str	r3, [r2, #68]	@ 0x44
 8001f98:	4b72      	ldr	r3, [pc, #456]	@ (8002164 <HAL_LTDC_MspInit+0x234>)
 8001f9a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001f9c:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8001fa0:	623b      	str	r3, [r7, #32]
 8001fa2:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOF_CLK_ENABLE();
 8001fa4:	2300      	movs	r3, #0
 8001fa6:	61fb      	str	r3, [r7, #28]
 8001fa8:	4b6e      	ldr	r3, [pc, #440]	@ (8002164 <HAL_LTDC_MspInit+0x234>)
 8001faa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001fac:	4a6d      	ldr	r2, [pc, #436]	@ (8002164 <HAL_LTDC_MspInit+0x234>)
 8001fae:	f043 0320 	orr.w	r3, r3, #32
 8001fb2:	6313      	str	r3, [r2, #48]	@ 0x30
 8001fb4:	4b6b      	ldr	r3, [pc, #428]	@ (8002164 <HAL_LTDC_MspInit+0x234>)
 8001fb6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001fb8:	f003 0320 	and.w	r3, r3, #32
 8001fbc:	61fb      	str	r3, [r7, #28]
 8001fbe:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001fc0:	2300      	movs	r3, #0
 8001fc2:	61bb      	str	r3, [r7, #24]
 8001fc4:	4b67      	ldr	r3, [pc, #412]	@ (8002164 <HAL_LTDC_MspInit+0x234>)
 8001fc6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001fc8:	4a66      	ldr	r2, [pc, #408]	@ (8002164 <HAL_LTDC_MspInit+0x234>)
 8001fca:	f043 0301 	orr.w	r3, r3, #1
 8001fce:	6313      	str	r3, [r2, #48]	@ 0x30
 8001fd0:	4b64      	ldr	r3, [pc, #400]	@ (8002164 <HAL_LTDC_MspInit+0x234>)
 8001fd2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001fd4:	f003 0301 	and.w	r3, r3, #1
 8001fd8:	61bb      	str	r3, [r7, #24]
 8001fda:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001fdc:	2300      	movs	r3, #0
 8001fde:	617b      	str	r3, [r7, #20]
 8001fe0:	4b60      	ldr	r3, [pc, #384]	@ (8002164 <HAL_LTDC_MspInit+0x234>)
 8001fe2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001fe4:	4a5f      	ldr	r2, [pc, #380]	@ (8002164 <HAL_LTDC_MspInit+0x234>)
 8001fe6:	f043 0302 	orr.w	r3, r3, #2
 8001fea:	6313      	str	r3, [r2, #48]	@ 0x30
 8001fec:	4b5d      	ldr	r3, [pc, #372]	@ (8002164 <HAL_LTDC_MspInit+0x234>)
 8001fee:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001ff0:	f003 0302 	and.w	r3, r3, #2
 8001ff4:	617b      	str	r3, [r7, #20]
 8001ff6:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8001ff8:	2300      	movs	r3, #0
 8001ffa:	613b      	str	r3, [r7, #16]
 8001ffc:	4b59      	ldr	r3, [pc, #356]	@ (8002164 <HAL_LTDC_MspInit+0x234>)
 8001ffe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002000:	4a58      	ldr	r2, [pc, #352]	@ (8002164 <HAL_LTDC_MspInit+0x234>)
 8002002:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8002006:	6313      	str	r3, [r2, #48]	@ 0x30
 8002008:	4b56      	ldr	r3, [pc, #344]	@ (8002164 <HAL_LTDC_MspInit+0x234>)
 800200a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800200c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002010:	613b      	str	r3, [r7, #16]
 8002012:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002014:	2300      	movs	r3, #0
 8002016:	60fb      	str	r3, [r7, #12]
 8002018:	4b52      	ldr	r3, [pc, #328]	@ (8002164 <HAL_LTDC_MspInit+0x234>)
 800201a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800201c:	4a51      	ldr	r2, [pc, #324]	@ (8002164 <HAL_LTDC_MspInit+0x234>)
 800201e:	f043 0304 	orr.w	r3, r3, #4
 8002022:	6313      	str	r3, [r2, #48]	@ 0x30
 8002024:	4b4f      	ldr	r3, [pc, #316]	@ (8002164 <HAL_LTDC_MspInit+0x234>)
 8002026:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002028:	f003 0304 	and.w	r3, r3, #4
 800202c:	60fb      	str	r3, [r7, #12]
 800202e:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002030:	2300      	movs	r3, #0
 8002032:	60bb      	str	r3, [r7, #8]
 8002034:	4b4b      	ldr	r3, [pc, #300]	@ (8002164 <HAL_LTDC_MspInit+0x234>)
 8002036:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002038:	4a4a      	ldr	r2, [pc, #296]	@ (8002164 <HAL_LTDC_MspInit+0x234>)
 800203a:	f043 0308 	orr.w	r3, r3, #8
 800203e:	6313      	str	r3, [r2, #48]	@ 0x30
 8002040:	4b48      	ldr	r3, [pc, #288]	@ (8002164 <HAL_LTDC_MspInit+0x234>)
 8002042:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002044:	f003 0308 	and.w	r3, r3, #8
 8002048:	60bb      	str	r3, [r7, #8]
 800204a:	68bb      	ldr	r3, [r7, #8]
    PG11     ------> LTDC_B3
    PG12     ------> LTDC_B4
    PB8     ------> LTDC_B6
    PB9     ------> LTDC_B7
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 800204c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8002050:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002052:	2302      	movs	r3, #2
 8002054:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002056:	2300      	movs	r3, #0
 8002058:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800205a:	2300      	movs	r3, #0
 800205c:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 800205e:	230e      	movs	r3, #14
 8002060:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8002062:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8002066:	4619      	mov	r1, r3
 8002068:	483f      	ldr	r0, [pc, #252]	@ (8002168 <HAL_LTDC_MspInit+0x238>)
 800206a:	f001 fd89 	bl	8003b80 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_6|GPIO_PIN_11
 800206e:	f641 0358 	movw	r3, #6232	@ 0x1858
 8002072:	657b      	str	r3, [r7, #84]	@ 0x54
                          |GPIO_PIN_12;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002074:	2302      	movs	r3, #2
 8002076:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002078:	2300      	movs	r3, #0
 800207a:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800207c:	2300      	movs	r3, #0
 800207e:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8002080:	230e      	movs	r3, #14
 8002082:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002084:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8002088:	4619      	mov	r1, r3
 800208a:	4838      	ldr	r0, [pc, #224]	@ (800216c <HAL_LTDC_MspInit+0x23c>)
 800208c:	f001 fd78 	bl	8003b80 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8002090:	2303      	movs	r3, #3
 8002092:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002094:	2302      	movs	r3, #2
 8002096:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002098:	2300      	movs	r3, #0
 800209a:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800209c:	2300      	movs	r3, #0
 800209e:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 80020a0:	2309      	movs	r3, #9
 80020a2:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80020a4:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 80020a8:	4619      	mov	r1, r3
 80020aa:	4831      	ldr	r0, [pc, #196]	@ (8002170 <HAL_LTDC_MspInit+0x240>)
 80020ac:	f001 fd68 	bl	8003b80 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_8|GPIO_PIN_9;
 80020b0:	f44f 6370 	mov.w	r3, #3840	@ 0xf00
 80020b4:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80020b6:	2302      	movs	r3, #2
 80020b8:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020ba:	2300      	movs	r3, #0
 80020bc:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80020be:	2300      	movs	r3, #0
 80020c0:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 80020c2:	230e      	movs	r3, #14
 80020c4:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80020c6:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 80020ca:	4619      	mov	r1, r3
 80020cc:	4828      	ldr	r0, [pc, #160]	@ (8002170 <HAL_LTDC_MspInit+0x240>)
 80020ce:	f001 fd57 	bl	8003b80 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_11;
 80020d2:	f44f 630c 	mov.w	r3, #2240	@ 0x8c0
 80020d6:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80020d8:	2302      	movs	r3, #2
 80020da:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020dc:	2300      	movs	r3, #0
 80020de:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80020e0:	2300      	movs	r3, #0
 80020e2:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 80020e4:	230e      	movs	r3, #14
 80020e6:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80020e8:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 80020ec:	4619      	mov	r1, r3
 80020ee:	4821      	ldr	r0, [pc, #132]	@ (8002174 <HAL_LTDC_MspInit+0x244>)
 80020f0:	f001 fd46 	bl	8003b80 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_10;
 80020f4:	f44f 6398 	mov.w	r3, #1216	@ 0x4c0
 80020f8:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80020fa:	2302      	movs	r3, #2
 80020fc:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020fe:	2300      	movs	r3, #0
 8002100:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002102:	2300      	movs	r3, #0
 8002104:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8002106:	230e      	movs	r3, #14
 8002108:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800210a:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 800210e:	4619      	mov	r1, r3
 8002110:	4819      	ldr	r0, [pc, #100]	@ (8002178 <HAL_LTDC_MspInit+0x248>)
 8002112:	f001 fd35 	bl	8003b80 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_6;
 8002116:	2348      	movs	r3, #72	@ 0x48
 8002118:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800211a:	2302      	movs	r3, #2
 800211c:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800211e:	2300      	movs	r3, #0
 8002120:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002122:	2300      	movs	r3, #0
 8002124:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8002126:	230e      	movs	r3, #14
 8002128:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800212a:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 800212e:	4619      	mov	r1, r3
 8002130:	4812      	ldr	r0, [pc, #72]	@ (800217c <HAL_LTDC_MspInit+0x24c>)
 8002132:	f001 fd25 	bl	8003b80 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_12;
 8002136:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 800213a:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800213c:	2302      	movs	r3, #2
 800213e:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002140:	2300      	movs	r3, #0
 8002142:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002144:	2300      	movs	r3, #0
 8002146:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 8002148:	2309      	movs	r3, #9
 800214a:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800214c:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8002150:	4619      	mov	r1, r3
 8002152:	4808      	ldr	r0, [pc, #32]	@ (8002174 <HAL_LTDC_MspInit+0x244>)
 8002154:	f001 fd14 	bl	8003b80 <HAL_GPIO_Init>

    /* USER CODE END LTDC_MspInit 1 */

  }

}
 8002158:	bf00      	nop
 800215a:	3768      	adds	r7, #104	@ 0x68
 800215c:	46bd      	mov	sp, r7
 800215e:	bd80      	pop	{r7, pc}
 8002160:	40016800 	.word	0x40016800
 8002164:	40023800 	.word	0x40023800
 8002168:	40021400 	.word	0x40021400
 800216c:	40020000 	.word	0x40020000
 8002170:	40020400 	.word	0x40020400
 8002174:	40021800 	.word	0x40021800
 8002178:	40020800 	.word	0x40020800
 800217c:	40020c00 	.word	0x40020c00

08002180 <HAL_SPI_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hspi: SPI handle pointer
  * @retval None
  */
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8002180:	b580      	push	{r7, lr}
 8002182:	b08a      	sub	sp, #40	@ 0x28
 8002184:	af00      	add	r7, sp, #0
 8002186:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002188:	f107 0314 	add.w	r3, r7, #20
 800218c:	2200      	movs	r2, #0
 800218e:	601a      	str	r2, [r3, #0]
 8002190:	605a      	str	r2, [r3, #4]
 8002192:	609a      	str	r2, [r3, #8]
 8002194:	60da      	str	r2, [r3, #12]
 8002196:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI5)
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	681b      	ldr	r3, [r3, #0]
 800219c:	4a19      	ldr	r2, [pc, #100]	@ (8002204 <HAL_SPI_MspInit+0x84>)
 800219e:	4293      	cmp	r3, r2
 80021a0:	d12c      	bne.n	80021fc <HAL_SPI_MspInit+0x7c>
  {
    /* USER CODE BEGIN SPI5_MspInit 0 */

    /* USER CODE END SPI5_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI5_CLK_ENABLE();
 80021a2:	2300      	movs	r3, #0
 80021a4:	613b      	str	r3, [r7, #16]
 80021a6:	4b18      	ldr	r3, [pc, #96]	@ (8002208 <HAL_SPI_MspInit+0x88>)
 80021a8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80021aa:	4a17      	ldr	r2, [pc, #92]	@ (8002208 <HAL_SPI_MspInit+0x88>)
 80021ac:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80021b0:	6453      	str	r3, [r2, #68]	@ 0x44
 80021b2:	4b15      	ldr	r3, [pc, #84]	@ (8002208 <HAL_SPI_MspInit+0x88>)
 80021b4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80021b6:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80021ba:	613b      	str	r3, [r7, #16]
 80021bc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOF_CLK_ENABLE();
 80021be:	2300      	movs	r3, #0
 80021c0:	60fb      	str	r3, [r7, #12]
 80021c2:	4b11      	ldr	r3, [pc, #68]	@ (8002208 <HAL_SPI_MspInit+0x88>)
 80021c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80021c6:	4a10      	ldr	r2, [pc, #64]	@ (8002208 <HAL_SPI_MspInit+0x88>)
 80021c8:	f043 0320 	orr.w	r3, r3, #32
 80021cc:	6313      	str	r3, [r2, #48]	@ 0x30
 80021ce:	4b0e      	ldr	r3, [pc, #56]	@ (8002208 <HAL_SPI_MspInit+0x88>)
 80021d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80021d2:	f003 0320 	and.w	r3, r3, #32
 80021d6:	60fb      	str	r3, [r7, #12]
 80021d8:	68fb      	ldr	r3, [r7, #12]
    /**SPI5 GPIO Configuration
    PF7     ------> SPI5_SCK
    PF8     ------> SPI5_MISO
    PF9     ------> SPI5_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9;
 80021da:	f44f 7360 	mov.w	r3, #896	@ 0x380
 80021de:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80021e0:	2302      	movs	r3, #2
 80021e2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021e4:	2300      	movs	r3, #0
 80021e6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80021e8:	2303      	movs	r3, #3
 80021ea:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI5;
 80021ec:	2305      	movs	r3, #5
 80021ee:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80021f0:	f107 0314 	add.w	r3, r7, #20
 80021f4:	4619      	mov	r1, r3
 80021f6:	4805      	ldr	r0, [pc, #20]	@ (800220c <HAL_SPI_MspInit+0x8c>)
 80021f8:	f001 fcc2 	bl	8003b80 <HAL_GPIO_Init>

    /* USER CODE END SPI5_MspInit 1 */

  }

}
 80021fc:	bf00      	nop
 80021fe:	3728      	adds	r7, #40	@ 0x28
 8002200:	46bd      	mov	sp, r7
 8002202:	bd80      	pop	{r7, pc}
 8002204:	40015000 	.word	0x40015000
 8002208:	40023800 	.word	0x40023800
 800220c:	40021400 	.word	0x40021400

08002210 <HAL_SPI_MspDeInit>:
  * This function freeze the hardware resources used in this example
  * @param hspi: SPI handle pointer
  * @retval None
  */
void HAL_SPI_MspDeInit(SPI_HandleTypeDef* hspi)
{
 8002210:	b580      	push	{r7, lr}
 8002212:	b082      	sub	sp, #8
 8002214:	af00      	add	r7, sp, #0
 8002216:	6078      	str	r0, [r7, #4]
  if(hspi->Instance==SPI5)
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	681b      	ldr	r3, [r3, #0]
 800221c:	4a08      	ldr	r2, [pc, #32]	@ (8002240 <HAL_SPI_MspDeInit+0x30>)
 800221e:	4293      	cmp	r3, r2
 8002220:	d10a      	bne.n	8002238 <HAL_SPI_MspDeInit+0x28>
  {
    /* USER CODE BEGIN SPI5_MspDeInit 0 */

    /* USER CODE END SPI5_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_SPI5_CLK_DISABLE();
 8002222:	4b08      	ldr	r3, [pc, #32]	@ (8002244 <HAL_SPI_MspDeInit+0x34>)
 8002224:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002226:	4a07      	ldr	r2, [pc, #28]	@ (8002244 <HAL_SPI_MspDeInit+0x34>)
 8002228:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 800222c:	6453      	str	r3, [r2, #68]	@ 0x44
    /**SPI5 GPIO Configuration
    PF7     ------> SPI5_SCK
    PF8     ------> SPI5_MISO
    PF9     ------> SPI5_MOSI
    */
    HAL_GPIO_DeInit(GPIOF, GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9);
 800222e:	f44f 7160 	mov.w	r1, #896	@ 0x380
 8002232:	4805      	ldr	r0, [pc, #20]	@ (8002248 <HAL_SPI_MspDeInit+0x38>)
 8002234:	f001 fe50 	bl	8003ed8 <HAL_GPIO_DeInit>
    /* USER CODE BEGIN SPI5_MspDeInit 1 */

    /* USER CODE END SPI5_MspDeInit 1 */
  }

}
 8002238:	bf00      	nop
 800223a:	3708      	adds	r7, #8
 800223c:	46bd      	mov	sp, r7
 800223e:	bd80      	pop	{r7, pc}
 8002240:	40015000 	.word	0x40015000
 8002244:	40023800 	.word	0x40023800
 8002248:	40021400 	.word	0x40021400

0800224c <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800224c:	b580      	push	{r7, lr}
 800224e:	b08a      	sub	sp, #40	@ 0x28
 8002250:	af00      	add	r7, sp, #0
 8002252:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002254:	f107 0314 	add.w	r3, r7, #20
 8002258:	2200      	movs	r2, #0
 800225a:	601a      	str	r2, [r3, #0]
 800225c:	605a      	str	r2, [r3, #4]
 800225e:	609a      	str	r2, [r3, #8]
 8002260:	60da      	str	r2, [r3, #12]
 8002262:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	681b      	ldr	r3, [r3, #0]
 8002268:	4a19      	ldr	r2, [pc, #100]	@ (80022d0 <HAL_UART_MspInit+0x84>)
 800226a:	4293      	cmp	r3, r2
 800226c:	d12c      	bne.n	80022c8 <HAL_UART_MspInit+0x7c>
  {
    /* USER CODE BEGIN USART1_MspInit 0 */

    /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800226e:	2300      	movs	r3, #0
 8002270:	613b      	str	r3, [r7, #16]
 8002272:	4b18      	ldr	r3, [pc, #96]	@ (80022d4 <HAL_UART_MspInit+0x88>)
 8002274:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002276:	4a17      	ldr	r2, [pc, #92]	@ (80022d4 <HAL_UART_MspInit+0x88>)
 8002278:	f043 0310 	orr.w	r3, r3, #16
 800227c:	6453      	str	r3, [r2, #68]	@ 0x44
 800227e:	4b15      	ldr	r3, [pc, #84]	@ (80022d4 <HAL_UART_MspInit+0x88>)
 8002280:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002282:	f003 0310 	and.w	r3, r3, #16
 8002286:	613b      	str	r3, [r7, #16]
 8002288:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800228a:	2300      	movs	r3, #0
 800228c:	60fb      	str	r3, [r7, #12]
 800228e:	4b11      	ldr	r3, [pc, #68]	@ (80022d4 <HAL_UART_MspInit+0x88>)
 8002290:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002292:	4a10      	ldr	r2, [pc, #64]	@ (80022d4 <HAL_UART_MspInit+0x88>)
 8002294:	f043 0301 	orr.w	r3, r3, #1
 8002298:	6313      	str	r3, [r2, #48]	@ 0x30
 800229a:	4b0e      	ldr	r3, [pc, #56]	@ (80022d4 <HAL_UART_MspInit+0x88>)
 800229c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800229e:	f003 0301 	and.w	r3, r3, #1
 80022a2:	60fb      	str	r3, [r7, #12]
 80022a4:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 80022a6:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 80022aa:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80022ac:	2302      	movs	r3, #2
 80022ae:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022b0:	2300      	movs	r3, #0
 80022b2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80022b4:	2303      	movs	r3, #3
 80022b6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80022b8:	2307      	movs	r3, #7
 80022ba:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80022bc:	f107 0314 	add.w	r3, r7, #20
 80022c0:	4619      	mov	r1, r3
 80022c2:	4805      	ldr	r0, [pc, #20]	@ (80022d8 <HAL_UART_MspInit+0x8c>)
 80022c4:	f001 fc5c 	bl	8003b80 <HAL_GPIO_Init>

    /* USER CODE END USART1_MspInit 1 */

  }

}
 80022c8:	bf00      	nop
 80022ca:	3728      	adds	r7, #40	@ 0x28
 80022cc:	46bd      	mov	sp, r7
 80022ce:	bd80      	pop	{r7, pc}
 80022d0:	40011000 	.word	0x40011000
 80022d4:	40023800 	.word	0x40023800
 80022d8:	40020000 	.word	0x40020000

080022dc <HAL_FMC_MspInit>:

}

static uint32_t FMC_Initialized = 0;

static void HAL_FMC_MspInit(void){
 80022dc:	b580      	push	{r7, lr}
 80022de:	b086      	sub	sp, #24
 80022e0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FMC_MspInit 0 */

  /* USER CODE END FMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct ={0};
 80022e2:	1d3b      	adds	r3, r7, #4
 80022e4:	2200      	movs	r2, #0
 80022e6:	601a      	str	r2, [r3, #0]
 80022e8:	605a      	str	r2, [r3, #4]
 80022ea:	609a      	str	r2, [r3, #8]
 80022ec:	60da      	str	r2, [r3, #12]
 80022ee:	611a      	str	r2, [r3, #16]
  if (FMC_Initialized) {
 80022f0:	4b3b      	ldr	r3, [pc, #236]	@ (80023e0 <HAL_FMC_MspInit+0x104>)
 80022f2:	681b      	ldr	r3, [r3, #0]
 80022f4:	2b00      	cmp	r3, #0
 80022f6:	d16f      	bne.n	80023d8 <HAL_FMC_MspInit+0xfc>
    return;
  }
  FMC_Initialized = 1;
 80022f8:	4b39      	ldr	r3, [pc, #228]	@ (80023e0 <HAL_FMC_MspInit+0x104>)
 80022fa:	2201      	movs	r2, #1
 80022fc:	601a      	str	r2, [r3, #0]

  /* Peripheral clock enable */
  __HAL_RCC_FMC_CLK_ENABLE();
 80022fe:	2300      	movs	r3, #0
 8002300:	603b      	str	r3, [r7, #0]
 8002302:	4b38      	ldr	r3, [pc, #224]	@ (80023e4 <HAL_FMC_MspInit+0x108>)
 8002304:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002306:	4a37      	ldr	r2, [pc, #220]	@ (80023e4 <HAL_FMC_MspInit+0x108>)
 8002308:	f043 0301 	orr.w	r3, r3, #1
 800230c:	6393      	str	r3, [r2, #56]	@ 0x38
 800230e:	4b35      	ldr	r3, [pc, #212]	@ (80023e4 <HAL_FMC_MspInit+0x108>)
 8002310:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002312:	f003 0301 	and.w	r3, r3, #1
 8002316:	603b      	str	r3, [r7, #0]
 8002318:	683b      	ldr	r3, [r7, #0]
  PB5   ------> FMC_SDCKE1
  PB6   ------> FMC_SDNE1
  PE0   ------> FMC_NBL0
  PE1   ------> FMC_NBL1
  */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 800231a:	f64f 033f 	movw	r3, #63551	@ 0xf83f
 800231e:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_11|GPIO_PIN_12
                          |GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002320:	2302      	movs	r3, #2
 8002322:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002324:	2300      	movs	r3, #0
 8002326:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002328:	2303      	movs	r3, #3
 800232a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 800232c:	230c      	movs	r3, #12
 800232e:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8002330:	1d3b      	adds	r3, r7, #4
 8002332:	4619      	mov	r1, r3
 8002334:	482c      	ldr	r0, [pc, #176]	@ (80023e8 <HAL_FMC_MspInit+0x10c>)
 8002336:	f001 fc23 	bl	8003b80 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_0;
 800233a:	2301      	movs	r3, #1
 800233c:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800233e:	2302      	movs	r3, #2
 8002340:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002342:	2300      	movs	r3, #0
 8002344:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002346:	2303      	movs	r3, #3
 8002348:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 800234a:	230c      	movs	r3, #12
 800234c:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800234e:	1d3b      	adds	r3, r7, #4
 8002350:	4619      	mov	r1, r3
 8002352:	4826      	ldr	r0, [pc, #152]	@ (80023ec <HAL_FMC_MspInit+0x110>)
 8002354:	f001 fc14 	bl	8003b80 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5
 8002358:	f248 1333 	movw	r3, #33075	@ 0x8133
 800235c:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_8|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800235e:	2302      	movs	r3, #2
 8002360:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002362:	2300      	movs	r3, #0
 8002364:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002366:	2303      	movs	r3, #3
 8002368:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 800236a:	230c      	movs	r3, #12
 800236c:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800236e:	1d3b      	adds	r3, r7, #4
 8002370:	4619      	mov	r1, r3
 8002372:	481f      	ldr	r0, [pc, #124]	@ (80023f0 <HAL_FMC_MspInit+0x114>)
 8002374:	f001 fc04 	bl	8003b80 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10
 8002378:	f64f 7383 	movw	r3, #65411	@ 0xff83
 800237c:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14
                          |GPIO_PIN_15|GPIO_PIN_0|GPIO_PIN_1;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800237e:	2302      	movs	r3, #2
 8002380:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002382:	2300      	movs	r3, #0
 8002384:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002386:	2303      	movs	r3, #3
 8002388:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 800238a:	230c      	movs	r3, #12
 800238c:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800238e:	1d3b      	adds	r3, r7, #4
 8002390:	4619      	mov	r1, r3
 8002392:	4818      	ldr	r0, [pc, #96]	@ (80023f4 <HAL_FMC_MspInit+0x118>)
 8002394:	f001 fbf4 	bl	8003b80 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_14
 8002398:	f24c 7303 	movw	r3, #50947	@ 0xc703
 800239c:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_15|GPIO_PIN_0|GPIO_PIN_1;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800239e:	2302      	movs	r3, #2
 80023a0:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023a2:	2300      	movs	r3, #0
 80023a4:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80023a6:	2303      	movs	r3, #3
 80023a8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80023aa:	230c      	movs	r3, #12
 80023ac:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80023ae:	1d3b      	adds	r3, r7, #4
 80023b0:	4619      	mov	r1, r3
 80023b2:	4811      	ldr	r0, [pc, #68]	@ (80023f8 <HAL_FMC_MspInit+0x11c>)
 80023b4:	f001 fbe4 	bl	8003b80 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 80023b8:	2360      	movs	r3, #96	@ 0x60
 80023ba:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80023bc:	2302      	movs	r3, #2
 80023be:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023c0:	2300      	movs	r3, #0
 80023c2:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80023c4:	2303      	movs	r3, #3
 80023c6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80023c8:	230c      	movs	r3, #12
 80023ca:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80023cc:	1d3b      	adds	r3, r7, #4
 80023ce:	4619      	mov	r1, r3
 80023d0:	480a      	ldr	r0, [pc, #40]	@ (80023fc <HAL_FMC_MspInit+0x120>)
 80023d2:	f001 fbd5 	bl	8003b80 <HAL_GPIO_Init>
 80023d6:	e000      	b.n	80023da <HAL_FMC_MspInit+0xfe>
    return;
 80023d8:	bf00      	nop

  /* USER CODE BEGIN FMC_MspInit 1 */

  /* USER CODE END FMC_MspInit 1 */
}
 80023da:	3718      	adds	r7, #24
 80023dc:	46bd      	mov	sp, r7
 80023de:	bd80      	pop	{r7, pc}
 80023e0:	200003e4 	.word	0x200003e4
 80023e4:	40023800 	.word	0x40023800
 80023e8:	40021400 	.word	0x40021400
 80023ec:	40020800 	.word	0x40020800
 80023f0:	40021800 	.word	0x40021800
 80023f4:	40021000 	.word	0x40021000
 80023f8:	40020c00 	.word	0x40020c00
 80023fc:	40020400 	.word	0x40020400

08002400 <HAL_SDRAM_MspInit>:

void HAL_SDRAM_MspInit(SDRAM_HandleTypeDef* hsdram){
 8002400:	b580      	push	{r7, lr}
 8002402:	b082      	sub	sp, #8
 8002404:	af00      	add	r7, sp, #0
 8002406:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SDRAM_MspInit 0 */

  /* USER CODE END SDRAM_MspInit 0 */
  HAL_FMC_MspInit();
 8002408:	f7ff ff68 	bl	80022dc <HAL_FMC_MspInit>
  /* USER CODE BEGIN SDRAM_MspInit 1 */

  /* USER CODE END SDRAM_MspInit 1 */
}
 800240c:	bf00      	nop
 800240e:	3708      	adds	r7, #8
 8002410:	46bd      	mov	sp, r7
 8002412:	bd80      	pop	{r7, pc}

08002414 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002414:	b480      	push	{r7}
 8002416:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8002418:	bf00      	nop
 800241a:	e7fd      	b.n	8002418 <NMI_Handler+0x4>

0800241c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800241c:	b480      	push	{r7}
 800241e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002420:	bf00      	nop
 8002422:	e7fd      	b.n	8002420 <HardFault_Handler+0x4>

08002424 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002424:	b480      	push	{r7}
 8002426:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002428:	bf00      	nop
 800242a:	e7fd      	b.n	8002428 <MemManage_Handler+0x4>

0800242c <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800242c:	b480      	push	{r7}
 800242e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002430:	bf00      	nop
 8002432:	e7fd      	b.n	8002430 <BusFault_Handler+0x4>

08002434 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002434:	b480      	push	{r7}
 8002436:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002438:	bf00      	nop
 800243a:	e7fd      	b.n	8002438 <UsageFault_Handler+0x4>

0800243c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800243c:	b480      	push	{r7}
 800243e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002440:	bf00      	nop
 8002442:	46bd      	mov	sp, r7
 8002444:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002448:	4770      	bx	lr

0800244a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800244a:	b580      	push	{r7, lr}
 800244c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800244e:	f000 f8d7 	bl	8002600 <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 8002452:	f004 fb93 	bl	8006b7c <xTaskGetSchedulerState>
 8002456:	4603      	mov	r3, r0
 8002458:	2b01      	cmp	r3, #1
 800245a:	d001      	beq.n	8002460 <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 800245c:	f004 fbfc 	bl	8006c58 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002460:	bf00      	nop
 8002462:	bd80      	pop	{r7, pc}

08002464 <DMA2D_IRQHandler>:

/**
  * @brief This function handles DMA2D global interrupt.
  */
void DMA2D_IRQHandler(void)
{
 8002464:	b580      	push	{r7, lr}
 8002466:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2D_IRQn 0 */

  /* USER CODE END DMA2D_IRQn 0 */
  HAL_DMA2D_IRQHandler(&hdma2d);
 8002468:	4802      	ldr	r0, [pc, #8]	@ (8002474 <DMA2D_IRQHandler+0x10>)
 800246a:	f001 f94a 	bl	8003702 <HAL_DMA2D_IRQHandler>
  /* USER CODE BEGIN DMA2D_IRQn 1 */

  /* USER CODE END DMA2D_IRQn 1 */
}
 800246e:	bf00      	nop
 8002470:	bd80      	pop	{r7, pc}
 8002472:	bf00      	nop
 8002474:	20000108 	.word	0x20000108

08002478 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002478:	b580      	push	{r7, lr}
 800247a:	b086      	sub	sp, #24
 800247c:	af00      	add	r7, sp, #0
 800247e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002480:	4a14      	ldr	r2, [pc, #80]	@ (80024d4 <_sbrk+0x5c>)
 8002482:	4b15      	ldr	r3, [pc, #84]	@ (80024d8 <_sbrk+0x60>)
 8002484:	1ad3      	subs	r3, r2, r3
 8002486:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002488:	697b      	ldr	r3, [r7, #20]
 800248a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800248c:	4b13      	ldr	r3, [pc, #76]	@ (80024dc <_sbrk+0x64>)
 800248e:	681b      	ldr	r3, [r3, #0]
 8002490:	2b00      	cmp	r3, #0
 8002492:	d102      	bne.n	800249a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002494:	4b11      	ldr	r3, [pc, #68]	@ (80024dc <_sbrk+0x64>)
 8002496:	4a12      	ldr	r2, [pc, #72]	@ (80024e0 <_sbrk+0x68>)
 8002498:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800249a:	4b10      	ldr	r3, [pc, #64]	@ (80024dc <_sbrk+0x64>)
 800249c:	681a      	ldr	r2, [r3, #0]
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	4413      	add	r3, r2
 80024a2:	693a      	ldr	r2, [r7, #16]
 80024a4:	429a      	cmp	r2, r3
 80024a6:	d207      	bcs.n	80024b8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80024a8:	f004 fc22 	bl	8006cf0 <__errno>
 80024ac:	4603      	mov	r3, r0
 80024ae:	220c      	movs	r2, #12
 80024b0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80024b2:	f04f 33ff 	mov.w	r3, #4294967295
 80024b6:	e009      	b.n	80024cc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80024b8:	4b08      	ldr	r3, [pc, #32]	@ (80024dc <_sbrk+0x64>)
 80024ba:	681b      	ldr	r3, [r3, #0]
 80024bc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80024be:	4b07      	ldr	r3, [pc, #28]	@ (80024dc <_sbrk+0x64>)
 80024c0:	681a      	ldr	r2, [r3, #0]
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	4413      	add	r3, r2
 80024c6:	4a05      	ldr	r2, [pc, #20]	@ (80024dc <_sbrk+0x64>)
 80024c8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80024ca:	68fb      	ldr	r3, [r7, #12]
}
 80024cc:	4618      	mov	r0, r3
 80024ce:	3718      	adds	r7, #24
 80024d0:	46bd      	mov	sp, r7
 80024d2:	bd80      	pop	{r7, pc}
 80024d4:	20030000 	.word	0x20030000
 80024d8:	00000400 	.word	0x00000400
 80024dc:	200003e8 	.word	0x200003e8
 80024e0:	200009c8 	.word	0x200009c8

080024e4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80024e4:	b480      	push	{r7}
 80024e6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80024e8:	4b06      	ldr	r3, [pc, #24]	@ (8002504 <SystemInit+0x20>)
 80024ea:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80024ee:	4a05      	ldr	r2, [pc, #20]	@ (8002504 <SystemInit+0x20>)
 80024f0:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80024f4:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80024f8:	bf00      	nop
 80024fa:	46bd      	mov	sp, r7
 80024fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002500:	4770      	bx	lr
 8002502:	bf00      	nop
 8002504:	e000ed00 	.word	0xe000ed00

08002508 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 8002508:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8002540 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800250c:	f7ff ffea 	bl	80024e4 <SystemInit>
 
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002510:	480c      	ldr	r0, [pc, #48]	@ (8002544 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8002512:	490d      	ldr	r1, [pc, #52]	@ (8002548 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8002514:	4a0d      	ldr	r2, [pc, #52]	@ (800254c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8002516:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002518:	e002      	b.n	8002520 <LoopCopyDataInit>

0800251a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800251a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800251c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800251e:	3304      	adds	r3, #4

08002520 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002520:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002522:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002524:	d3f9      	bcc.n	800251a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002526:	4a0a      	ldr	r2, [pc, #40]	@ (8002550 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8002528:	4c0a      	ldr	r4, [pc, #40]	@ (8002554 <LoopFillZerobss+0x22>)
  movs r3, #0
 800252a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800252c:	e001      	b.n	8002532 <LoopFillZerobss>

0800252e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800252e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002530:	3204      	adds	r2, #4

08002532 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002532:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002534:	d3fb      	bcc.n	800252e <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8002536:	f004 fbe1 	bl	8006cfc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800253a:	f7fe f9e1 	bl	8000900 <main>
  bx  lr    
 800253e:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 8002540:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 8002544:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002548:	200000a4 	.word	0x200000a4
  ldr r2, =_sidata
 800254c:	080082d0 	.word	0x080082d0
  ldr r2, =_sbss
 8002550:	200000a4 	.word	0x200000a4
  ldr r4, =_ebss
 8002554:	200009c4 	.word	0x200009c4

08002558 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002558:	e7fe      	b.n	8002558 <ADC_IRQHandler>
	...

0800255c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800255c:	b580      	push	{r7, lr}
 800255e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002560:	4b0e      	ldr	r3, [pc, #56]	@ (800259c <HAL_Init+0x40>)
 8002562:	681b      	ldr	r3, [r3, #0]
 8002564:	4a0d      	ldr	r2, [pc, #52]	@ (800259c <HAL_Init+0x40>)
 8002566:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800256a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800256c:	4b0b      	ldr	r3, [pc, #44]	@ (800259c <HAL_Init+0x40>)
 800256e:	681b      	ldr	r3, [r3, #0]
 8002570:	4a0a      	ldr	r2, [pc, #40]	@ (800259c <HAL_Init+0x40>)
 8002572:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8002576:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002578:	4b08      	ldr	r3, [pc, #32]	@ (800259c <HAL_Init+0x40>)
 800257a:	681b      	ldr	r3, [r3, #0]
 800257c:	4a07      	ldr	r2, [pc, #28]	@ (800259c <HAL_Init+0x40>)
 800257e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002582:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002584:	2003      	movs	r0, #3
 8002586:	f000 fd5f 	bl	8003048 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800258a:	200f      	movs	r0, #15
 800258c:	f000 f808 	bl	80025a0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002590:	f7ff fc36 	bl	8001e00 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002594:	2300      	movs	r3, #0
}
 8002596:	4618      	mov	r0, r3
 8002598:	bd80      	pop	{r7, pc}
 800259a:	bf00      	nop
 800259c:	40023c00 	.word	0x40023c00

080025a0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80025a0:	b580      	push	{r7, lr}
 80025a2:	b082      	sub	sp, #8
 80025a4:	af00      	add	r7, sp, #0
 80025a6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80025a8:	4b12      	ldr	r3, [pc, #72]	@ (80025f4 <HAL_InitTick+0x54>)
 80025aa:	681a      	ldr	r2, [r3, #0]
 80025ac:	4b12      	ldr	r3, [pc, #72]	@ (80025f8 <HAL_InitTick+0x58>)
 80025ae:	781b      	ldrb	r3, [r3, #0]
 80025b0:	4619      	mov	r1, r3
 80025b2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80025b6:	fbb3 f3f1 	udiv	r3, r3, r1
 80025ba:	fbb2 f3f3 	udiv	r3, r2, r3
 80025be:	4618      	mov	r0, r3
 80025c0:	f000 fd77 	bl	80030b2 <HAL_SYSTICK_Config>
 80025c4:	4603      	mov	r3, r0
 80025c6:	2b00      	cmp	r3, #0
 80025c8:	d001      	beq.n	80025ce <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80025ca:	2301      	movs	r3, #1
 80025cc:	e00e      	b.n	80025ec <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	2b0f      	cmp	r3, #15
 80025d2:	d80a      	bhi.n	80025ea <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80025d4:	2200      	movs	r2, #0
 80025d6:	6879      	ldr	r1, [r7, #4]
 80025d8:	f04f 30ff 	mov.w	r0, #4294967295
 80025dc:	f000 fd3f 	bl	800305e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80025e0:	4a06      	ldr	r2, [pc, #24]	@ (80025fc <HAL_InitTick+0x5c>)
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80025e6:	2300      	movs	r3, #0
 80025e8:	e000      	b.n	80025ec <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80025ea:	2301      	movs	r3, #1
}
 80025ec:	4618      	mov	r0, r3
 80025ee:	3708      	adds	r7, #8
 80025f0:	46bd      	mov	sp, r7
 80025f2:	bd80      	pop	{r7, pc}
 80025f4:	20000048 	.word	0x20000048
 80025f8:	20000050 	.word	0x20000050
 80025fc:	2000004c 	.word	0x2000004c

08002600 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002600:	b480      	push	{r7}
 8002602:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002604:	4b06      	ldr	r3, [pc, #24]	@ (8002620 <HAL_IncTick+0x20>)
 8002606:	781b      	ldrb	r3, [r3, #0]
 8002608:	461a      	mov	r2, r3
 800260a:	4b06      	ldr	r3, [pc, #24]	@ (8002624 <HAL_IncTick+0x24>)
 800260c:	681b      	ldr	r3, [r3, #0]
 800260e:	4413      	add	r3, r2
 8002610:	4a04      	ldr	r2, [pc, #16]	@ (8002624 <HAL_IncTick+0x24>)
 8002612:	6013      	str	r3, [r2, #0]
}
 8002614:	bf00      	nop
 8002616:	46bd      	mov	sp, r7
 8002618:	f85d 7b04 	ldr.w	r7, [sp], #4
 800261c:	4770      	bx	lr
 800261e:	bf00      	nop
 8002620:	20000050 	.word	0x20000050
 8002624:	200003ec 	.word	0x200003ec

08002628 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002628:	b480      	push	{r7}
 800262a:	af00      	add	r7, sp, #0
  return uwTick;
 800262c:	4b03      	ldr	r3, [pc, #12]	@ (800263c <HAL_GetTick+0x14>)
 800262e:	681b      	ldr	r3, [r3, #0]
}
 8002630:	4618      	mov	r0, r3
 8002632:	46bd      	mov	sp, r7
 8002634:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002638:	4770      	bx	lr
 800263a:	bf00      	nop
 800263c:	200003ec 	.word	0x200003ec

08002640 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002640:	b580      	push	{r7, lr}
 8002642:	b084      	sub	sp, #16
 8002644:	af00      	add	r7, sp, #0
 8002646:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002648:	f7ff ffee 	bl	8002628 <HAL_GetTick>
 800264c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002652:	68fb      	ldr	r3, [r7, #12]
 8002654:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002658:	d005      	beq.n	8002666 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800265a:	4b0a      	ldr	r3, [pc, #40]	@ (8002684 <HAL_Delay+0x44>)
 800265c:	781b      	ldrb	r3, [r3, #0]
 800265e:	461a      	mov	r2, r3
 8002660:	68fb      	ldr	r3, [r7, #12]
 8002662:	4413      	add	r3, r2
 8002664:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002666:	bf00      	nop
 8002668:	f7ff ffde 	bl	8002628 <HAL_GetTick>
 800266c:	4602      	mov	r2, r0
 800266e:	68bb      	ldr	r3, [r7, #8]
 8002670:	1ad3      	subs	r3, r2, r3
 8002672:	68fa      	ldr	r2, [r7, #12]
 8002674:	429a      	cmp	r2, r3
 8002676:	d8f7      	bhi.n	8002668 <HAL_Delay+0x28>
  {
  }
}
 8002678:	bf00      	nop
 800267a:	bf00      	nop
 800267c:	3710      	adds	r7, #16
 800267e:	46bd      	mov	sp, r7
 8002680:	bd80      	pop	{r7, pc}
 8002682:	bf00      	nop
 8002684:	20000050 	.word	0x20000050

08002688 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8002688:	b580      	push	{r7, lr}
 800268a:	b084      	sub	sp, #16
 800268c:	af00      	add	r7, sp, #0
 800268e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002690:	2300      	movs	r3, #0
 8002692:	73fb      	strb	r3, [r7, #15]

  /* Check ADC handle */
  if (hadc == NULL)
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	2b00      	cmp	r3, #0
 8002698:	d101      	bne.n	800269e <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 800269a:	2301      	movs	r3, #1
 800269c:	e033      	b.n	8002706 <HAL_ADC_Init+0x7e>
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if (hadc->State == HAL_ADC_STATE_RESET)
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80026a2:	2b00      	cmp	r3, #0
 80026a4:	d109      	bne.n	80026ba <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80026a6:	6878      	ldr	r0, [r7, #4]
 80026a8:	f7ff fbd6 	bl	8001e58 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	2200      	movs	r2, #0
 80026b0:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	2200      	movs	r2, #0
 80026b6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  }

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80026be:	f003 0310 	and.w	r3, r3, #16
 80026c2:	2b00      	cmp	r3, #0
 80026c4:	d118      	bne.n	80026f8 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80026ca:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 80026ce:	f023 0302 	bic.w	r3, r3, #2
 80026d2:	f043 0202 	orr.w	r2, r3, #2
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Set ADC parameters */
    ADC_Init(hadc);
 80026da:	6878      	ldr	r0, [r7, #4]
 80026dc:	f000 fae8 	bl	8002cb0 <ADC_Init>

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	2200      	movs	r2, #0
 80026e4:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80026ea:	f023 0303 	bic.w	r3, r3, #3
 80026ee:	f043 0201 	orr.w	r2, r3, #1
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	641a      	str	r2, [r3, #64]	@ 0x40
 80026f6:	e001      	b.n	80026fc <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 80026f8:	2301      	movs	r3, #1
 80026fa:	73fb      	strb	r3, [r7, #15]
  }

  /* Release Lock */
  __HAL_UNLOCK(hadc);
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	2200      	movs	r2, #0
 8002700:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 8002704:	7bfb      	ldrb	r3, [r7, #15]
}
 8002706:	4618      	mov	r0, r3
 8002708:	3710      	adds	r7, #16
 800270a:	46bd      	mov	sp, r7
 800270c:	bd80      	pop	{r7, pc}
	...

08002710 <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 8002710:	b480      	push	{r7}
 8002712:	b085      	sub	sp, #20
 8002714:	af00      	add	r7, sp, #0
 8002716:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 8002718:	2300      	movs	r3, #0
 800271a:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));

  /* Process locked */
  __HAL_LOCK(hadc);
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002722:	2b01      	cmp	r3, #1
 8002724:	d101      	bne.n	800272a <HAL_ADC_Start+0x1a>
 8002726:	2302      	movs	r3, #2
 8002728:	e0b2      	b.n	8002890 <HAL_ADC_Start+0x180>
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	2201      	movs	r2, #1
 800272e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during
  Tstab time the ADC's stabilization */
  if ((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	681b      	ldr	r3, [r3, #0]
 8002736:	689b      	ldr	r3, [r3, #8]
 8002738:	f003 0301 	and.w	r3, r3, #1
 800273c:	2b01      	cmp	r3, #1
 800273e:	d018      	beq.n	8002772 <HAL_ADC_Start+0x62>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	681b      	ldr	r3, [r3, #0]
 8002744:	689a      	ldr	r2, [r3, #8]
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	681b      	ldr	r3, [r3, #0]
 800274a:	f042 0201 	orr.w	r2, r2, #1
 800274e:	609a      	str	r2, [r3, #8]

    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8002750:	4b52      	ldr	r3, [pc, #328]	@ (800289c <HAL_ADC_Start+0x18c>)
 8002752:	681b      	ldr	r3, [r3, #0]
 8002754:	4a52      	ldr	r2, [pc, #328]	@ (80028a0 <HAL_ADC_Start+0x190>)
 8002756:	fba2 2303 	umull	r2, r3, r2, r3
 800275a:	0c9a      	lsrs	r2, r3, #18
 800275c:	4613      	mov	r3, r2
 800275e:	005b      	lsls	r3, r3, #1
 8002760:	4413      	add	r3, r2
 8002762:	60bb      	str	r3, [r7, #8]
    while (counter != 0U)
 8002764:	e002      	b.n	800276c <HAL_ADC_Start+0x5c>
    {
      counter--;
 8002766:	68bb      	ldr	r3, [r7, #8]
 8002768:	3b01      	subs	r3, #1
 800276a:	60bb      	str	r3, [r7, #8]
    while (counter != 0U)
 800276c:	68bb      	ldr	r3, [r7, #8]
 800276e:	2b00      	cmp	r3, #0
 8002770:	d1f9      	bne.n	8002766 <HAL_ADC_Start+0x56>
    }
  }

  /* Start conversion if ADC is effectively enabled */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	681b      	ldr	r3, [r3, #0]
 8002776:	689b      	ldr	r3, [r3, #8]
 8002778:	f003 0301 	and.w	r3, r3, #1
 800277c:	2b01      	cmp	r3, #1
 800277e:	d17a      	bne.n	8002876 <HAL_ADC_Start+0x166>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002784:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 8002788:	f023 0301 	bic.w	r3, r3, #1
 800278c:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);

    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	681b      	ldr	r3, [r3, #0]
 8002798:	685b      	ldr	r3, [r3, #4]
 800279a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800279e:	2b00      	cmp	r3, #0
 80027a0:	d007      	beq.n	80027b2 <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80027a6:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 80027aa:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80027b6:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80027ba:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80027be:	d106      	bne.n	80027ce <HAL_ADC_Start+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80027c4:	f023 0206 	bic.w	r2, r3, #6
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	645a      	str	r2, [r3, #68]	@ 0x44
 80027cc:	e002      	b.n	80027d4 <HAL_ADC_Start+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	2200      	movs	r2, #0
 80027d2:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	2200      	movs	r2, #0
 80027d8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80027dc:	4b31      	ldr	r3, [pc, #196]	@ (80028a4 <HAL_ADC_Start+0x194>)
 80027de:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	681b      	ldr	r3, [r3, #0]
 80027e4:	f06f 0222 	mvn.w	r2, #34	@ 0x22
 80027e8:	601a      	str	r2, [r3, #0]

    /* Check if Multimode enabled */
    if (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 80027ea:	68fb      	ldr	r3, [r7, #12]
 80027ec:	685b      	ldr	r3, [r3, #4]
 80027ee:	f003 031f 	and.w	r3, r3, #31
 80027f2:	2b00      	cmp	r3, #0
 80027f4:	d12a      	bne.n	800284c <HAL_ADC_Start+0x13c>
    {
#if defined(ADC2) && defined(ADC3)
      if ((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	681b      	ldr	r3, [r3, #0]
 80027fa:	4a2b      	ldr	r2, [pc, #172]	@ (80028a8 <HAL_ADC_Start+0x198>)
 80027fc:	4293      	cmp	r3, r2
 80027fe:	d015      	beq.n	800282c <HAL_ADC_Start+0x11c>
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	681b      	ldr	r3, [r3, #0]
 8002804:	4a29      	ldr	r2, [pc, #164]	@ (80028ac <HAL_ADC_Start+0x19c>)
 8002806:	4293      	cmp	r3, r2
 8002808:	d105      	bne.n	8002816 <HAL_ADC_Start+0x106>
 800280a:	4b26      	ldr	r3, [pc, #152]	@ (80028a4 <HAL_ADC_Start+0x194>)
 800280c:	685b      	ldr	r3, [r3, #4]
 800280e:	f003 031f 	and.w	r3, r3, #31
 8002812:	2b00      	cmp	r3, #0
 8002814:	d00a      	beq.n	800282c <HAL_ADC_Start+0x11c>
          || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	681b      	ldr	r3, [r3, #0]
 800281a:	4a25      	ldr	r2, [pc, #148]	@ (80028b0 <HAL_ADC_Start+0x1a0>)
 800281c:	4293      	cmp	r3, r2
 800281e:	d136      	bne.n	800288e <HAL_ADC_Start+0x17e>
 8002820:	4b20      	ldr	r3, [pc, #128]	@ (80028a4 <HAL_ADC_Start+0x194>)
 8002822:	685b      	ldr	r3, [r3, #4]
 8002824:	f003 0310 	and.w	r3, r3, #16
 8002828:	2b00      	cmp	r3, #0
 800282a:	d130      	bne.n	800288e <HAL_ADC_Start+0x17e>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET)
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	689b      	ldr	r3, [r3, #8]
 8002832:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8002836:	2b00      	cmp	r3, #0
 8002838:	d129      	bne.n	800288e <HAL_ADC_Start+0x17e>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	681b      	ldr	r3, [r3, #0]
 800283e:	689a      	ldr	r2, [r3, #8]
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	681b      	ldr	r3, [r3, #0]
 8002844:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8002848:	609a      	str	r2, [r3, #8]
 800284a:	e020      	b.n	800288e <HAL_ADC_Start+0x17e>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if ((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	681b      	ldr	r3, [r3, #0]
 8002850:	4a15      	ldr	r2, [pc, #84]	@ (80028a8 <HAL_ADC_Start+0x198>)
 8002852:	4293      	cmp	r3, r2
 8002854:	d11b      	bne.n	800288e <HAL_ADC_Start+0x17e>
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	681b      	ldr	r3, [r3, #0]
 800285a:	689b      	ldr	r3, [r3, #8]
 800285c:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8002860:	2b00      	cmp	r3, #0
 8002862:	d114      	bne.n	800288e <HAL_ADC_Start+0x17e>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	689a      	ldr	r2, [r3, #8]
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	681b      	ldr	r3, [r3, #0]
 800286e:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8002872:	609a      	str	r2, [r3, #8]
 8002874:	e00b      	b.n	800288e <HAL_ADC_Start+0x17e>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800287a:	f043 0210 	orr.w	r2, r3, #16
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002886:	f043 0201 	orr.w	r2, r3, #1
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Return function status */
  return HAL_OK;
 800288e:	2300      	movs	r3, #0
}
 8002890:	4618      	mov	r0, r3
 8002892:	3714      	adds	r7, #20
 8002894:	46bd      	mov	sp, r7
 8002896:	f85d 7b04 	ldr.w	r7, [sp], #4
 800289a:	4770      	bx	lr
 800289c:	20000048 	.word	0x20000048
 80028a0:	431bde83 	.word	0x431bde83
 80028a4:	40012300 	.word	0x40012300
 80028a8:	40012000 	.word	0x40012000
 80028ac:	40012100 	.word	0x40012100
 80028b0:	40012200 	.word	0x40012200

080028b4 <HAL_ADC_Stop>:
  *         the configuration information for the specified ADC.
  *
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef *hadc)
{
 80028b4:	b480      	push	{r7}
 80028b6:	b083      	sub	sp, #12
 80028b8:	af00      	add	r7, sp, #0
 80028ba:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80028c2:	2b01      	cmp	r3, #1
 80028c4:	d101      	bne.n	80028ca <HAL_ADC_Stop+0x16>
 80028c6:	2302      	movs	r3, #2
 80028c8:	e021      	b.n	800290e <HAL_ADC_Stop+0x5a>
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	2201      	movs	r2, #1
 80028ce:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  __HAL_ADC_DISABLE(hadc);
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	681b      	ldr	r3, [r3, #0]
 80028d6:	689a      	ldr	r2, [r3, #8]
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	681b      	ldr	r3, [r3, #0]
 80028dc:	f022 0201 	bic.w	r2, r2, #1
 80028e0:	609a      	str	r2, [r3, #8]

  /* Check if ADC is effectively disabled */
  if (HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_ADON))
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	681b      	ldr	r3, [r3, #0]
 80028e6:	689b      	ldr	r3, [r3, #8]
 80028e8:	f003 0301 	and.w	r3, r3, #1
 80028ec:	2b00      	cmp	r3, #0
 80028ee:	d109      	bne.n	8002904 <HAL_ADC_Stop+0x50>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80028f4:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 80028f8:	f023 0301 	bic.w	r3, r3, #1
 80028fc:	f043 0201 	orr.w	r2, r3, #1
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	2200      	movs	r2, #0
 8002908:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return HAL_OK;
 800290c:	2300      	movs	r3, #0
}
 800290e:	4618      	mov	r0, r3
 8002910:	370c      	adds	r7, #12
 8002912:	46bd      	mov	sp, r7
 8002914:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002918:	4770      	bx	lr

0800291a <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 800291a:	b580      	push	{r7, lr}
 800291c:	b084      	sub	sp, #16
 800291e:	af00      	add	r7, sp, #0
 8002920:	6078      	str	r0, [r7, #4]
 8002922:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8002924:	2300      	movs	r3, #0
 8002926:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	681b      	ldr	r3, [r3, #0]
 800292c:	689b      	ldr	r3, [r3, #8]
 800292e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002932:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002936:	d113      	bne.n	8002960 <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA))
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	681b      	ldr	r3, [r3, #0]
 800293c:	689b      	ldr	r3, [r3, #8]
 800293e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8002942:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002946:	d10b      	bne.n	8002960 <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800294c:	f043 0220 	orr.w	r2, r3, #32
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	2200      	movs	r2, #0
 8002958:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 800295c:	2301      	movs	r3, #1
 800295e:	e063      	b.n	8002a28 <HAL_ADC_PollForConversion+0x10e>
  }

  /* Get tick */
  tickstart = HAL_GetTick();
 8002960:	f7ff fe62 	bl	8002628 <HAL_GetTick>
 8002964:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while (!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8002966:	e021      	b.n	80029ac <HAL_ADC_PollForConversion+0x92>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 8002968:	683b      	ldr	r3, [r7, #0]
 800296a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800296e:	d01d      	beq.n	80029ac <HAL_ADC_PollForConversion+0x92>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 8002970:	683b      	ldr	r3, [r7, #0]
 8002972:	2b00      	cmp	r3, #0
 8002974:	d007      	beq.n	8002986 <HAL_ADC_PollForConversion+0x6c>
 8002976:	f7ff fe57 	bl	8002628 <HAL_GetTick>
 800297a:	4602      	mov	r2, r0
 800297c:	68fb      	ldr	r3, [r7, #12]
 800297e:	1ad3      	subs	r3, r2, r3
 8002980:	683a      	ldr	r2, [r7, #0]
 8002982:	429a      	cmp	r2, r3
 8002984:	d212      	bcs.n	80029ac <HAL_ADC_PollForConversion+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	681b      	ldr	r3, [r3, #0]
 800298a:	681b      	ldr	r3, [r3, #0]
 800298c:	f003 0302 	and.w	r3, r3, #2
 8002990:	2b02      	cmp	r3, #2
 8002992:	d00b      	beq.n	80029ac <HAL_ADC_PollForConversion+0x92>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002998:	f043 0204 	orr.w	r2, r3, #4
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	2200      	movs	r2, #0
 80029a4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_TIMEOUT;
 80029a8:	2303      	movs	r3, #3
 80029aa:	e03d      	b.n	8002a28 <HAL_ADC_PollForConversion+0x10e>
  while (!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	681b      	ldr	r3, [r3, #0]
 80029b0:	681b      	ldr	r3, [r3, #0]
 80029b2:	f003 0302 	and.w	r3, r3, #2
 80029b6:	2b02      	cmp	r3, #2
 80029b8:	d1d6      	bne.n	8002968 <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }

  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	681b      	ldr	r3, [r3, #0]
 80029be:	f06f 0212 	mvn.w	r2, #18
 80029c2:	601a      	str	r2, [r3, #0]

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80029c8:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	641a      	str	r2, [r3, #64]	@ 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F4, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	689b      	ldr	r3, [r3, #8]
 80029d6:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 80029da:	2b00      	cmp	r3, #0
 80029dc:	d123      	bne.n	8002a26 <HAL_ADC_PollForConversion+0x10c>
      (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	7e1b      	ldrb	r3, [r3, #24]
  if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80029e2:	2b00      	cmp	r3, #0
 80029e4:	d11f      	bne.n	8002a26 <HAL_ADC_PollForConversion+0x10c>
      (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	681b      	ldr	r3, [r3, #0]
 80029ea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80029ec:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
      (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80029f0:	2b00      	cmp	r3, #0
 80029f2:	d006      	beq.n	8002a02 <HAL_ADC_PollForConversion+0xe8>
       HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)))
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	681b      	ldr	r3, [r3, #0]
 80029f8:	689b      	ldr	r3, [r3, #8]
 80029fa:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
      (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 80029fe:	2b00      	cmp	r3, #0
 8002a00:	d111      	bne.n	8002a26 <HAL_ADC_PollForConversion+0x10c>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a06:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	641a      	str	r2, [r3, #64]	@ 0x40

    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a12:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002a16:	2b00      	cmp	r3, #0
 8002a18:	d105      	bne.n	8002a26 <HAL_ADC_PollForConversion+0x10c>
    {
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a1e:	f043 0201 	orr.w	r2, r3, #1
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	641a      	str	r2, [r3, #64]	@ 0x40
    }
  }

  /* Return ADC state */
  return HAL_OK;
 8002a26:	2300      	movs	r3, #0
}
 8002a28:	4618      	mov	r0, r3
 8002a2a:	3710      	adds	r7, #16
 8002a2c:	46bd      	mov	sp, r7
 8002a2e:	bd80      	pop	{r7, pc}

08002a30 <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 8002a30:	b480      	push	{r7}
 8002a32:	b083      	sub	sp, #12
 8002a34:	af00      	add	r7, sp, #0
 8002a36:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */
  return hadc->Instance->DR;
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	681b      	ldr	r3, [r3, #0]
 8002a3c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
}
 8002a3e:	4618      	mov	r0, r3
 8002a40:	370c      	adds	r7, #12
 8002a42:	46bd      	mov	sp, r7
 8002a44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a48:	4770      	bx	lr
	...

08002a4c <HAL_ADC_ConfigChannel>:
*         the configuration information for the specified ADC.
* @param  sConfig ADC configuration structure.
* @retval HAL status
*/
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8002a4c:	b480      	push	{r7}
 8002a4e:	b085      	sub	sp, #20
 8002a50:	af00      	add	r7, sp, #0
 8002a52:	6078      	str	r0, [r7, #4]
 8002a54:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8002a56:	2300      	movs	r3, #0
 8002a58:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));

  /* Process locked */
  __HAL_LOCK(hadc);
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002a60:	2b01      	cmp	r3, #1
 8002a62:	d101      	bne.n	8002a68 <HAL_ADC_ConfigChannel+0x1c>
 8002a64:	2302      	movs	r3, #2
 8002a66:	e113      	b.n	8002c90 <HAL_ADC_ConfigChannel+0x244>
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	2201      	movs	r2, #1
 8002a6c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8002a70:	683b      	ldr	r3, [r7, #0]
 8002a72:	681b      	ldr	r3, [r3, #0]
 8002a74:	2b09      	cmp	r3, #9
 8002a76:	d925      	bls.n	8002ac4 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	681b      	ldr	r3, [r3, #0]
 8002a7c:	68d9      	ldr	r1, [r3, #12]
 8002a7e:	683b      	ldr	r3, [r7, #0]
 8002a80:	681b      	ldr	r3, [r3, #0]
 8002a82:	b29b      	uxth	r3, r3
 8002a84:	461a      	mov	r2, r3
 8002a86:	4613      	mov	r3, r2
 8002a88:	005b      	lsls	r3, r3, #1
 8002a8a:	4413      	add	r3, r2
 8002a8c:	3b1e      	subs	r3, #30
 8002a8e:	2207      	movs	r2, #7
 8002a90:	fa02 f303 	lsl.w	r3, r2, r3
 8002a94:	43da      	mvns	r2, r3
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	681b      	ldr	r3, [r3, #0]
 8002a9a:	400a      	ands	r2, r1
 8002a9c:	60da      	str	r2, [r3, #12]

    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	681b      	ldr	r3, [r3, #0]
 8002aa2:	68d9      	ldr	r1, [r3, #12]
 8002aa4:	683b      	ldr	r3, [r7, #0]
 8002aa6:	689a      	ldr	r2, [r3, #8]
 8002aa8:	683b      	ldr	r3, [r7, #0]
 8002aaa:	681b      	ldr	r3, [r3, #0]
 8002aac:	b29b      	uxth	r3, r3
 8002aae:	4618      	mov	r0, r3
 8002ab0:	4603      	mov	r3, r0
 8002ab2:	005b      	lsls	r3, r3, #1
 8002ab4:	4403      	add	r3, r0
 8002ab6:	3b1e      	subs	r3, #30
 8002ab8:	409a      	lsls	r2, r3
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	681b      	ldr	r3, [r3, #0]
 8002abe:	430a      	orrs	r2, r1
 8002ac0:	60da      	str	r2, [r3, #12]
 8002ac2:	e022      	b.n	8002b0a <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	681b      	ldr	r3, [r3, #0]
 8002ac8:	6919      	ldr	r1, [r3, #16]
 8002aca:	683b      	ldr	r3, [r7, #0]
 8002acc:	681b      	ldr	r3, [r3, #0]
 8002ace:	b29b      	uxth	r3, r3
 8002ad0:	461a      	mov	r2, r3
 8002ad2:	4613      	mov	r3, r2
 8002ad4:	005b      	lsls	r3, r3, #1
 8002ad6:	4413      	add	r3, r2
 8002ad8:	2207      	movs	r2, #7
 8002ada:	fa02 f303 	lsl.w	r3, r2, r3
 8002ade:	43da      	mvns	r2, r3
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	681b      	ldr	r3, [r3, #0]
 8002ae4:	400a      	ands	r2, r1
 8002ae6:	611a      	str	r2, [r3, #16]

    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	6919      	ldr	r1, [r3, #16]
 8002aee:	683b      	ldr	r3, [r7, #0]
 8002af0:	689a      	ldr	r2, [r3, #8]
 8002af2:	683b      	ldr	r3, [r7, #0]
 8002af4:	681b      	ldr	r3, [r3, #0]
 8002af6:	b29b      	uxth	r3, r3
 8002af8:	4618      	mov	r0, r3
 8002afa:	4603      	mov	r3, r0
 8002afc:	005b      	lsls	r3, r3, #1
 8002afe:	4403      	add	r3, r0
 8002b00:	409a      	lsls	r2, r3
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	681b      	ldr	r3, [r3, #0]
 8002b06:	430a      	orrs	r2, r1
 8002b08:	611a      	str	r2, [r3, #16]
  }

  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8002b0a:	683b      	ldr	r3, [r7, #0]
 8002b0c:	685b      	ldr	r3, [r3, #4]
 8002b0e:	2b06      	cmp	r3, #6
 8002b10:	d824      	bhi.n	8002b5c <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	681b      	ldr	r3, [r3, #0]
 8002b16:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8002b18:	683b      	ldr	r3, [r7, #0]
 8002b1a:	685a      	ldr	r2, [r3, #4]
 8002b1c:	4613      	mov	r3, r2
 8002b1e:	009b      	lsls	r3, r3, #2
 8002b20:	4413      	add	r3, r2
 8002b22:	3b05      	subs	r3, #5
 8002b24:	221f      	movs	r2, #31
 8002b26:	fa02 f303 	lsl.w	r3, r2, r3
 8002b2a:	43da      	mvns	r2, r3
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	400a      	ands	r2, r1
 8002b32:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8002b3a:	683b      	ldr	r3, [r7, #0]
 8002b3c:	681b      	ldr	r3, [r3, #0]
 8002b3e:	b29b      	uxth	r3, r3
 8002b40:	4618      	mov	r0, r3
 8002b42:	683b      	ldr	r3, [r7, #0]
 8002b44:	685a      	ldr	r2, [r3, #4]
 8002b46:	4613      	mov	r3, r2
 8002b48:	009b      	lsls	r3, r3, #2
 8002b4a:	4413      	add	r3, r2
 8002b4c:	3b05      	subs	r3, #5
 8002b4e:	fa00 f203 	lsl.w	r2, r0, r3
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	681b      	ldr	r3, [r3, #0]
 8002b56:	430a      	orrs	r2, r1
 8002b58:	635a      	str	r2, [r3, #52]	@ 0x34
 8002b5a:	e04c      	b.n	8002bf6 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8002b5c:	683b      	ldr	r3, [r7, #0]
 8002b5e:	685b      	ldr	r3, [r3, #4]
 8002b60:	2b0c      	cmp	r3, #12
 8002b62:	d824      	bhi.n	8002bae <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	681b      	ldr	r3, [r3, #0]
 8002b68:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8002b6a:	683b      	ldr	r3, [r7, #0]
 8002b6c:	685a      	ldr	r2, [r3, #4]
 8002b6e:	4613      	mov	r3, r2
 8002b70:	009b      	lsls	r3, r3, #2
 8002b72:	4413      	add	r3, r2
 8002b74:	3b23      	subs	r3, #35	@ 0x23
 8002b76:	221f      	movs	r2, #31
 8002b78:	fa02 f303 	lsl.w	r3, r2, r3
 8002b7c:	43da      	mvns	r2, r3
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	400a      	ands	r2, r1
 8002b84:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	681b      	ldr	r3, [r3, #0]
 8002b8a:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8002b8c:	683b      	ldr	r3, [r7, #0]
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	b29b      	uxth	r3, r3
 8002b92:	4618      	mov	r0, r3
 8002b94:	683b      	ldr	r3, [r7, #0]
 8002b96:	685a      	ldr	r2, [r3, #4]
 8002b98:	4613      	mov	r3, r2
 8002b9a:	009b      	lsls	r3, r3, #2
 8002b9c:	4413      	add	r3, r2
 8002b9e:	3b23      	subs	r3, #35	@ 0x23
 8002ba0:	fa00 f203 	lsl.w	r2, r0, r3
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	681b      	ldr	r3, [r3, #0]
 8002ba8:	430a      	orrs	r2, r1
 8002baa:	631a      	str	r2, [r3, #48]	@ 0x30
 8002bac:	e023      	b.n	8002bf6 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	681b      	ldr	r3, [r3, #0]
 8002bb2:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8002bb4:	683b      	ldr	r3, [r7, #0]
 8002bb6:	685a      	ldr	r2, [r3, #4]
 8002bb8:	4613      	mov	r3, r2
 8002bba:	009b      	lsls	r3, r3, #2
 8002bbc:	4413      	add	r3, r2
 8002bbe:	3b41      	subs	r3, #65	@ 0x41
 8002bc0:	221f      	movs	r2, #31
 8002bc2:	fa02 f303 	lsl.w	r3, r2, r3
 8002bc6:	43da      	mvns	r2, r3
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	400a      	ands	r2, r1
 8002bce:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8002bd6:	683b      	ldr	r3, [r7, #0]
 8002bd8:	681b      	ldr	r3, [r3, #0]
 8002bda:	b29b      	uxth	r3, r3
 8002bdc:	4618      	mov	r0, r3
 8002bde:	683b      	ldr	r3, [r7, #0]
 8002be0:	685a      	ldr	r2, [r3, #4]
 8002be2:	4613      	mov	r3, r2
 8002be4:	009b      	lsls	r3, r3, #2
 8002be6:	4413      	add	r3, r2
 8002be8:	3b41      	subs	r3, #65	@ 0x41
 8002bea:	fa00 f203 	lsl.w	r2, r0, r3
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	681b      	ldr	r3, [r3, #0]
 8002bf2:	430a      	orrs	r2, r1
 8002bf4:	62da      	str	r2, [r3, #44]	@ 0x2c
  }

  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002bf6:	4b29      	ldr	r3, [pc, #164]	@ (8002c9c <HAL_ADC_ConfigChannel+0x250>)
 8002bf8:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	681b      	ldr	r3, [r3, #0]
 8002bfe:	4a28      	ldr	r2, [pc, #160]	@ (8002ca0 <HAL_ADC_ConfigChannel+0x254>)
 8002c00:	4293      	cmp	r3, r2
 8002c02:	d10f      	bne.n	8002c24 <HAL_ADC_ConfigChannel+0x1d8>
 8002c04:	683b      	ldr	r3, [r7, #0]
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	2b12      	cmp	r3, #18
 8002c0a:	d10b      	bne.n	8002c24 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 8002c0c:	68fb      	ldr	r3, [r7, #12]
 8002c0e:	685b      	ldr	r3, [r3, #4]
 8002c10:	f423 0200 	bic.w	r2, r3, #8388608	@ 0x800000
 8002c14:	68fb      	ldr	r3, [r7, #12]
 8002c16:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8002c18:	68fb      	ldr	r3, [r7, #12]
 8002c1a:	685b      	ldr	r3, [r3, #4]
 8002c1c:	f443 0280 	orr.w	r2, r3, #4194304	@ 0x400000
 8002c20:	68fb      	ldr	r3, [r7, #12]
 8002c22:	605a      	str	r2, [r3, #4]
  }

  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	681b      	ldr	r3, [r3, #0]
 8002c28:	4a1d      	ldr	r2, [pc, #116]	@ (8002ca0 <HAL_ADC_ConfigChannel+0x254>)
 8002c2a:	4293      	cmp	r3, r2
 8002c2c:	d12b      	bne.n	8002c86 <HAL_ADC_ConfigChannel+0x23a>
 8002c2e:	683b      	ldr	r3, [r7, #0]
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	4a1c      	ldr	r2, [pc, #112]	@ (8002ca4 <HAL_ADC_ConfigChannel+0x258>)
 8002c34:	4293      	cmp	r3, r2
 8002c36:	d003      	beq.n	8002c40 <HAL_ADC_ConfigChannel+0x1f4>
 8002c38:	683b      	ldr	r3, [r7, #0]
 8002c3a:	681b      	ldr	r3, [r3, #0]
 8002c3c:	2b11      	cmp	r3, #17
 8002c3e:	d122      	bne.n	8002c86 <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 8002c40:	68fb      	ldr	r3, [r7, #12]
 8002c42:	685b      	ldr	r3, [r3, #4]
 8002c44:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 8002c48:	68fb      	ldr	r3, [r7, #12]
 8002c4a:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8002c4c:	68fb      	ldr	r3, [r7, #12]
 8002c4e:	685b      	ldr	r3, [r3, #4]
 8002c50:	f443 0200 	orr.w	r2, r3, #8388608	@ 0x800000
 8002c54:	68fb      	ldr	r3, [r7, #12]
 8002c56:	605a      	str	r2, [r3, #4]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002c58:	683b      	ldr	r3, [r7, #0]
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	4a11      	ldr	r2, [pc, #68]	@ (8002ca4 <HAL_ADC_ConfigChannel+0x258>)
 8002c5e:	4293      	cmp	r3, r2
 8002c60:	d111      	bne.n	8002c86 <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8002c62:	4b11      	ldr	r3, [pc, #68]	@ (8002ca8 <HAL_ADC_ConfigChannel+0x25c>)
 8002c64:	681b      	ldr	r3, [r3, #0]
 8002c66:	4a11      	ldr	r2, [pc, #68]	@ (8002cac <HAL_ADC_ConfigChannel+0x260>)
 8002c68:	fba2 2303 	umull	r2, r3, r2, r3
 8002c6c:	0c9a      	lsrs	r2, r3, #18
 8002c6e:	4613      	mov	r3, r2
 8002c70:	009b      	lsls	r3, r3, #2
 8002c72:	4413      	add	r3, r2
 8002c74:	005b      	lsls	r3, r3, #1
 8002c76:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8002c78:	e002      	b.n	8002c80 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 8002c7a:	68bb      	ldr	r3, [r7, #8]
 8002c7c:	3b01      	subs	r3, #1
 8002c7e:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8002c80:	68bb      	ldr	r3, [r7, #8]
 8002c82:	2b00      	cmp	r3, #0
 8002c84:	d1f9      	bne.n	8002c7a <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	2200      	movs	r2, #0
 8002c8a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return HAL_OK;
 8002c8e:	2300      	movs	r3, #0
}
 8002c90:	4618      	mov	r0, r3
 8002c92:	3714      	adds	r7, #20
 8002c94:	46bd      	mov	sp, r7
 8002c96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c9a:	4770      	bx	lr
 8002c9c:	40012300 	.word	0x40012300
 8002ca0:	40012000 	.word	0x40012000
 8002ca4:	10000012 	.word	0x10000012
 8002ca8:	20000048 	.word	0x20000048
 8002cac:	431bde83 	.word	0x431bde83

08002cb0 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef *hadc)
{
 8002cb0:	b480      	push	{r7}
 8002cb2:	b085      	sub	sp, #20
 8002cb4:	af00      	add	r7, sp, #0
 8002cb6:	6078      	str	r0, [r7, #4]

  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002cb8:	4b79      	ldr	r3, [pc, #484]	@ (8002ea0 <ADC_Init+0x1f0>)
 8002cba:	60fb      	str	r3, [r7, #12]

  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8002cbc:	68fb      	ldr	r3, [r7, #12]
 8002cbe:	685b      	ldr	r3, [r3, #4]
 8002cc0:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8002cc4:	68fb      	ldr	r3, [r7, #12]
 8002cc6:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8002cc8:	68fb      	ldr	r3, [r7, #12]
 8002cca:	685a      	ldr	r2, [r3, #4]
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	685b      	ldr	r3, [r3, #4]
 8002cd0:	431a      	orrs	r2, r3
 8002cd2:	68fb      	ldr	r3, [r7, #12]
 8002cd4:	605a      	str	r2, [r3, #4]

  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	681b      	ldr	r3, [r3, #0]
 8002cda:	685a      	ldr	r2, [r3, #4]
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8002ce4:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	681b      	ldr	r3, [r3, #0]
 8002cea:	6859      	ldr	r1, [r3, #4]
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	691b      	ldr	r3, [r3, #16]
 8002cf0:	021a      	lsls	r2, r3, #8
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	681b      	ldr	r3, [r3, #0]
 8002cf6:	430a      	orrs	r2, r1
 8002cf8:	605a      	str	r2, [r3, #4]

  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	681b      	ldr	r3, [r3, #0]
 8002cfe:	685a      	ldr	r2, [r3, #4]
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 8002d08:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	681b      	ldr	r3, [r3, #0]
 8002d0e:	6859      	ldr	r1, [r3, #4]
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	689a      	ldr	r2, [r3, #8]
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	681b      	ldr	r3, [r3, #0]
 8002d18:	430a      	orrs	r2, r1
 8002d1a:	605a      	str	r2, [r3, #4]

  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	681b      	ldr	r3, [r3, #0]
 8002d20:	689a      	ldr	r2, [r3, #8]
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	681b      	ldr	r3, [r3, #0]
 8002d26:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002d2a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	681b      	ldr	r3, [r3, #0]
 8002d30:	6899      	ldr	r1, [r3, #8]
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	68da      	ldr	r2, [r3, #12]
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	681b      	ldr	r3, [r3, #0]
 8002d3a:	430a      	orrs	r2, r1
 8002d3c:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002d42:	4a58      	ldr	r2, [pc, #352]	@ (8002ea4 <ADC_Init+0x1f4>)
 8002d44:	4293      	cmp	r3, r2
 8002d46:	d022      	beq.n	8002d8e <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	681b      	ldr	r3, [r3, #0]
 8002d4c:	689a      	ldr	r2, [r3, #8]
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	681b      	ldr	r3, [r3, #0]
 8002d52:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8002d56:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	681b      	ldr	r3, [r3, #0]
 8002d5c:	6899      	ldr	r1, [r3, #8]
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	681b      	ldr	r3, [r3, #0]
 8002d66:	430a      	orrs	r2, r1
 8002d68:	609a      	str	r2, [r3, #8]

    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	689a      	ldr	r2, [r3, #8]
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	681b      	ldr	r3, [r3, #0]
 8002d74:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8002d78:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	681b      	ldr	r3, [r3, #0]
 8002d7e:	6899      	ldr	r1, [r3, #8]
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	681b      	ldr	r3, [r3, #0]
 8002d88:	430a      	orrs	r2, r1
 8002d8a:	609a      	str	r2, [r3, #8]
 8002d8c:	e00f      	b.n	8002dae <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	681b      	ldr	r3, [r3, #0]
 8002d92:	689a      	ldr	r2, [r3, #8]
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	681b      	ldr	r3, [r3, #0]
 8002d98:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8002d9c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	681b      	ldr	r3, [r3, #0]
 8002da2:	689a      	ldr	r2, [r3, #8]
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	681b      	ldr	r3, [r3, #0]
 8002da8:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8002dac:	609a      	str	r2, [r3, #8]
  }

  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	681b      	ldr	r3, [r3, #0]
 8002db2:	689a      	ldr	r2, [r3, #8]
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	f022 0202 	bic.w	r2, r2, #2
 8002dbc:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	681b      	ldr	r3, [r3, #0]
 8002dc2:	6899      	ldr	r1, [r3, #8]
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	7e1b      	ldrb	r3, [r3, #24]
 8002dc8:	005a      	lsls	r2, r3, #1
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	681b      	ldr	r3, [r3, #0]
 8002dce:	430a      	orrs	r2, r1
 8002dd0:	609a      	str	r2, [r3, #8]

  if (hadc->Init.DiscontinuousConvMode != DISABLE)
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002dd8:	2b00      	cmp	r3, #0
 8002dda:	d01b      	beq.n	8002e14 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));

    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	681b      	ldr	r3, [r3, #0]
 8002de0:	685a      	ldr	r2, [r3, #4]
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	681b      	ldr	r3, [r3, #0]
 8002de6:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8002dea:	605a      	str	r2, [r3, #4]

    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	681b      	ldr	r3, [r3, #0]
 8002df0:	685a      	ldr	r2, [r3, #4]
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	681b      	ldr	r3, [r3, #0]
 8002df6:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 8002dfa:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	6859      	ldr	r1, [r3, #4]
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002e06:	3b01      	subs	r3, #1
 8002e08:	035a      	lsls	r2, r3, #13
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	681b      	ldr	r3, [r3, #0]
 8002e0e:	430a      	orrs	r2, r1
 8002e10:	605a      	str	r2, [r3, #4]
 8002e12:	e007      	b.n	8002e24 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	681b      	ldr	r3, [r3, #0]
 8002e18:	685a      	ldr	r2, [r3, #4]
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	681b      	ldr	r3, [r3, #0]
 8002e1e:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002e22:	605a      	str	r2, [r3, #4]
  }

  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	681b      	ldr	r3, [r3, #0]
 8002e2e:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 8002e32:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	681b      	ldr	r3, [r3, #0]
 8002e38:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	69db      	ldr	r3, [r3, #28]
 8002e3e:	3b01      	subs	r3, #1
 8002e40:	051a      	lsls	r2, r3, #20
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	681b      	ldr	r3, [r3, #0]
 8002e46:	430a      	orrs	r2, r1
 8002e48:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	681b      	ldr	r3, [r3, #0]
 8002e4e:	689a      	ldr	r2, [r3, #8]
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8002e58:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	681b      	ldr	r3, [r3, #0]
 8002e5e:	6899      	ldr	r1, [r3, #8]
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8002e66:	025a      	lsls	r2, r3, #9
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	430a      	orrs	r2, r1
 8002e6e:	609a      	str	r2, [r3, #8]

  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	681b      	ldr	r3, [r3, #0]
 8002e74:	689a      	ldr	r2, [r3, #8]
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	681b      	ldr	r3, [r3, #0]
 8002e7a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002e7e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	6899      	ldr	r1, [r3, #8]
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	695b      	ldr	r3, [r3, #20]
 8002e8a:	029a      	lsls	r2, r3, #10
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	430a      	orrs	r2, r1
 8002e92:	609a      	str	r2, [r3, #8]
}
 8002e94:	bf00      	nop
 8002e96:	3714      	adds	r7, #20
 8002e98:	46bd      	mov	sp, r7
 8002e9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e9e:	4770      	bx	lr
 8002ea0:	40012300 	.word	0x40012300
 8002ea4:	0f000001 	.word	0x0f000001

08002ea8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002ea8:	b480      	push	{r7}
 8002eaa:	b085      	sub	sp, #20
 8002eac:	af00      	add	r7, sp, #0
 8002eae:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	f003 0307 	and.w	r3, r3, #7
 8002eb6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002eb8:	4b0c      	ldr	r3, [pc, #48]	@ (8002eec <__NVIC_SetPriorityGrouping+0x44>)
 8002eba:	68db      	ldr	r3, [r3, #12]
 8002ebc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002ebe:	68ba      	ldr	r2, [r7, #8]
 8002ec0:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002ec4:	4013      	ands	r3, r2
 8002ec6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002ec8:	68fb      	ldr	r3, [r7, #12]
 8002eca:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002ecc:	68bb      	ldr	r3, [r7, #8]
 8002ece:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002ed0:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002ed4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002ed8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002eda:	4a04      	ldr	r2, [pc, #16]	@ (8002eec <__NVIC_SetPriorityGrouping+0x44>)
 8002edc:	68bb      	ldr	r3, [r7, #8]
 8002ede:	60d3      	str	r3, [r2, #12]
}
 8002ee0:	bf00      	nop
 8002ee2:	3714      	adds	r7, #20
 8002ee4:	46bd      	mov	sp, r7
 8002ee6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eea:	4770      	bx	lr
 8002eec:	e000ed00 	.word	0xe000ed00

08002ef0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002ef0:	b480      	push	{r7}
 8002ef2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002ef4:	4b04      	ldr	r3, [pc, #16]	@ (8002f08 <__NVIC_GetPriorityGrouping+0x18>)
 8002ef6:	68db      	ldr	r3, [r3, #12]
 8002ef8:	0a1b      	lsrs	r3, r3, #8
 8002efa:	f003 0307 	and.w	r3, r3, #7
}
 8002efe:	4618      	mov	r0, r3
 8002f00:	46bd      	mov	sp, r7
 8002f02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f06:	4770      	bx	lr
 8002f08:	e000ed00 	.word	0xe000ed00

08002f0c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002f0c:	b480      	push	{r7}
 8002f0e:	b083      	sub	sp, #12
 8002f10:	af00      	add	r7, sp, #0
 8002f12:	4603      	mov	r3, r0
 8002f14:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002f16:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002f1a:	2b00      	cmp	r3, #0
 8002f1c:	db0b      	blt.n	8002f36 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002f1e:	79fb      	ldrb	r3, [r7, #7]
 8002f20:	f003 021f 	and.w	r2, r3, #31
 8002f24:	4907      	ldr	r1, [pc, #28]	@ (8002f44 <__NVIC_EnableIRQ+0x38>)
 8002f26:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002f2a:	095b      	lsrs	r3, r3, #5
 8002f2c:	2001      	movs	r0, #1
 8002f2e:	fa00 f202 	lsl.w	r2, r0, r2
 8002f32:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002f36:	bf00      	nop
 8002f38:	370c      	adds	r7, #12
 8002f3a:	46bd      	mov	sp, r7
 8002f3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f40:	4770      	bx	lr
 8002f42:	bf00      	nop
 8002f44:	e000e100 	.word	0xe000e100

08002f48 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002f48:	b480      	push	{r7}
 8002f4a:	b083      	sub	sp, #12
 8002f4c:	af00      	add	r7, sp, #0
 8002f4e:	4603      	mov	r3, r0
 8002f50:	6039      	str	r1, [r7, #0]
 8002f52:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002f54:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002f58:	2b00      	cmp	r3, #0
 8002f5a:	db0a      	blt.n	8002f72 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002f5c:	683b      	ldr	r3, [r7, #0]
 8002f5e:	b2da      	uxtb	r2, r3
 8002f60:	490c      	ldr	r1, [pc, #48]	@ (8002f94 <__NVIC_SetPriority+0x4c>)
 8002f62:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002f66:	0112      	lsls	r2, r2, #4
 8002f68:	b2d2      	uxtb	r2, r2
 8002f6a:	440b      	add	r3, r1
 8002f6c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002f70:	e00a      	b.n	8002f88 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002f72:	683b      	ldr	r3, [r7, #0]
 8002f74:	b2da      	uxtb	r2, r3
 8002f76:	4908      	ldr	r1, [pc, #32]	@ (8002f98 <__NVIC_SetPriority+0x50>)
 8002f78:	79fb      	ldrb	r3, [r7, #7]
 8002f7a:	f003 030f 	and.w	r3, r3, #15
 8002f7e:	3b04      	subs	r3, #4
 8002f80:	0112      	lsls	r2, r2, #4
 8002f82:	b2d2      	uxtb	r2, r2
 8002f84:	440b      	add	r3, r1
 8002f86:	761a      	strb	r2, [r3, #24]
}
 8002f88:	bf00      	nop
 8002f8a:	370c      	adds	r7, #12
 8002f8c:	46bd      	mov	sp, r7
 8002f8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f92:	4770      	bx	lr
 8002f94:	e000e100 	.word	0xe000e100
 8002f98:	e000ed00 	.word	0xe000ed00

08002f9c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002f9c:	b480      	push	{r7}
 8002f9e:	b089      	sub	sp, #36	@ 0x24
 8002fa0:	af00      	add	r7, sp, #0
 8002fa2:	60f8      	str	r0, [r7, #12]
 8002fa4:	60b9      	str	r1, [r7, #8]
 8002fa6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002fa8:	68fb      	ldr	r3, [r7, #12]
 8002faa:	f003 0307 	and.w	r3, r3, #7
 8002fae:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002fb0:	69fb      	ldr	r3, [r7, #28]
 8002fb2:	f1c3 0307 	rsb	r3, r3, #7
 8002fb6:	2b04      	cmp	r3, #4
 8002fb8:	bf28      	it	cs
 8002fba:	2304      	movcs	r3, #4
 8002fbc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002fbe:	69fb      	ldr	r3, [r7, #28]
 8002fc0:	3304      	adds	r3, #4
 8002fc2:	2b06      	cmp	r3, #6
 8002fc4:	d902      	bls.n	8002fcc <NVIC_EncodePriority+0x30>
 8002fc6:	69fb      	ldr	r3, [r7, #28]
 8002fc8:	3b03      	subs	r3, #3
 8002fca:	e000      	b.n	8002fce <NVIC_EncodePriority+0x32>
 8002fcc:	2300      	movs	r3, #0
 8002fce:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002fd0:	f04f 32ff 	mov.w	r2, #4294967295
 8002fd4:	69bb      	ldr	r3, [r7, #24]
 8002fd6:	fa02 f303 	lsl.w	r3, r2, r3
 8002fda:	43da      	mvns	r2, r3
 8002fdc:	68bb      	ldr	r3, [r7, #8]
 8002fde:	401a      	ands	r2, r3
 8002fe0:	697b      	ldr	r3, [r7, #20]
 8002fe2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002fe4:	f04f 31ff 	mov.w	r1, #4294967295
 8002fe8:	697b      	ldr	r3, [r7, #20]
 8002fea:	fa01 f303 	lsl.w	r3, r1, r3
 8002fee:	43d9      	mvns	r1, r3
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002ff4:	4313      	orrs	r3, r2
         );
}
 8002ff6:	4618      	mov	r0, r3
 8002ff8:	3724      	adds	r7, #36	@ 0x24
 8002ffa:	46bd      	mov	sp, r7
 8002ffc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003000:	4770      	bx	lr
	...

08003004 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003004:	b580      	push	{r7, lr}
 8003006:	b082      	sub	sp, #8
 8003008:	af00      	add	r7, sp, #0
 800300a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	3b01      	subs	r3, #1
 8003010:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8003014:	d301      	bcc.n	800301a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003016:	2301      	movs	r3, #1
 8003018:	e00f      	b.n	800303a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800301a:	4a0a      	ldr	r2, [pc, #40]	@ (8003044 <SysTick_Config+0x40>)
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	3b01      	subs	r3, #1
 8003020:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003022:	210f      	movs	r1, #15
 8003024:	f04f 30ff 	mov.w	r0, #4294967295
 8003028:	f7ff ff8e 	bl	8002f48 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800302c:	4b05      	ldr	r3, [pc, #20]	@ (8003044 <SysTick_Config+0x40>)
 800302e:	2200      	movs	r2, #0
 8003030:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003032:	4b04      	ldr	r3, [pc, #16]	@ (8003044 <SysTick_Config+0x40>)
 8003034:	2207      	movs	r2, #7
 8003036:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003038:	2300      	movs	r3, #0
}
 800303a:	4618      	mov	r0, r3
 800303c:	3708      	adds	r7, #8
 800303e:	46bd      	mov	sp, r7
 8003040:	bd80      	pop	{r7, pc}
 8003042:	bf00      	nop
 8003044:	e000e010 	.word	0xe000e010

08003048 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003048:	b580      	push	{r7, lr}
 800304a:	b082      	sub	sp, #8
 800304c:	af00      	add	r7, sp, #0
 800304e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003050:	6878      	ldr	r0, [r7, #4]
 8003052:	f7ff ff29 	bl	8002ea8 <__NVIC_SetPriorityGrouping>
}
 8003056:	bf00      	nop
 8003058:	3708      	adds	r7, #8
 800305a:	46bd      	mov	sp, r7
 800305c:	bd80      	pop	{r7, pc}

0800305e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800305e:	b580      	push	{r7, lr}
 8003060:	b086      	sub	sp, #24
 8003062:	af00      	add	r7, sp, #0
 8003064:	4603      	mov	r3, r0
 8003066:	60b9      	str	r1, [r7, #8]
 8003068:	607a      	str	r2, [r7, #4]
 800306a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800306c:	2300      	movs	r3, #0
 800306e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003070:	f7ff ff3e 	bl	8002ef0 <__NVIC_GetPriorityGrouping>
 8003074:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003076:	687a      	ldr	r2, [r7, #4]
 8003078:	68b9      	ldr	r1, [r7, #8]
 800307a:	6978      	ldr	r0, [r7, #20]
 800307c:	f7ff ff8e 	bl	8002f9c <NVIC_EncodePriority>
 8003080:	4602      	mov	r2, r0
 8003082:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003086:	4611      	mov	r1, r2
 8003088:	4618      	mov	r0, r3
 800308a:	f7ff ff5d 	bl	8002f48 <__NVIC_SetPriority>
}
 800308e:	bf00      	nop
 8003090:	3718      	adds	r7, #24
 8003092:	46bd      	mov	sp, r7
 8003094:	bd80      	pop	{r7, pc}

08003096 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003096:	b580      	push	{r7, lr}
 8003098:	b082      	sub	sp, #8
 800309a:	af00      	add	r7, sp, #0
 800309c:	4603      	mov	r3, r0
 800309e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80030a0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80030a4:	4618      	mov	r0, r3
 80030a6:	f7ff ff31 	bl	8002f0c <__NVIC_EnableIRQ>
}
 80030aa:	bf00      	nop
 80030ac:	3708      	adds	r7, #8
 80030ae:	46bd      	mov	sp, r7
 80030b0:	bd80      	pop	{r7, pc}

080030b2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80030b2:	b580      	push	{r7, lr}
 80030b4:	b082      	sub	sp, #8
 80030b6:	af00      	add	r7, sp, #0
 80030b8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80030ba:	6878      	ldr	r0, [r7, #4]
 80030bc:	f7ff ffa2 	bl	8003004 <SysTick_Config>
 80030c0:	4603      	mov	r3, r0
}
 80030c2:	4618      	mov	r0, r3
 80030c4:	3708      	adds	r7, #8
 80030c6:	46bd      	mov	sp, r7
 80030c8:	bd80      	pop	{r7, pc}
	...

080030cc <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80030cc:	b580      	push	{r7, lr}
 80030ce:	b086      	sub	sp, #24
 80030d0:	af00      	add	r7, sp, #0
 80030d2:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80030d4:	2300      	movs	r3, #0
 80030d6:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 80030d8:	f7ff faa6 	bl	8002628 <HAL_GetTick>
 80030dc:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	2b00      	cmp	r3, #0
 80030e2:	d101      	bne.n	80030e8 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 80030e4:	2301      	movs	r3, #1
 80030e6:	e099      	b.n	800321c <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	2202      	movs	r2, #2
 80030ec:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	2200      	movs	r2, #0
 80030f4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	681b      	ldr	r3, [r3, #0]
 80030fc:	681a      	ldr	r2, [r3, #0]
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	681b      	ldr	r3, [r3, #0]
 8003102:	f022 0201 	bic.w	r2, r2, #1
 8003106:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003108:	e00f      	b.n	800312a <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800310a:	f7ff fa8d 	bl	8002628 <HAL_GetTick>
 800310e:	4602      	mov	r2, r0
 8003110:	693b      	ldr	r3, [r7, #16]
 8003112:	1ad3      	subs	r3, r2, r3
 8003114:	2b05      	cmp	r3, #5
 8003116:	d908      	bls.n	800312a <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	2220      	movs	r2, #32
 800311c:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	2203      	movs	r2, #3
 8003122:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 8003126:	2303      	movs	r3, #3
 8003128:	e078      	b.n	800321c <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	681b      	ldr	r3, [r3, #0]
 800312e:	681b      	ldr	r3, [r3, #0]
 8003130:	f003 0301 	and.w	r3, r3, #1
 8003134:	2b00      	cmp	r3, #0
 8003136:	d1e8      	bne.n	800310a <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	681b      	ldr	r3, [r3, #0]
 800313c:	681b      	ldr	r3, [r3, #0]
 800313e:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8003140:	697a      	ldr	r2, [r7, #20]
 8003142:	4b38      	ldr	r3, [pc, #224]	@ (8003224 <HAL_DMA_Init+0x158>)
 8003144:	4013      	ands	r3, r2
 8003146:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	685a      	ldr	r2, [r3, #4]
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	689b      	ldr	r3, [r3, #8]
 8003150:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003156:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	691b      	ldr	r3, [r3, #16]
 800315c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003162:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	699b      	ldr	r3, [r3, #24]
 8003168:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800316e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	6a1b      	ldr	r3, [r3, #32]
 8003174:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003176:	697a      	ldr	r2, [r7, #20]
 8003178:	4313      	orrs	r3, r2
 800317a:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003180:	2b04      	cmp	r3, #4
 8003182:	d107      	bne.n	8003194 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800318c:	4313      	orrs	r3, r2
 800318e:	697a      	ldr	r2, [r7, #20]
 8003190:	4313      	orrs	r3, r2
 8003192:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	681b      	ldr	r3, [r3, #0]
 8003198:	697a      	ldr	r2, [r7, #20]
 800319a:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	681b      	ldr	r3, [r3, #0]
 80031a0:	695b      	ldr	r3, [r3, #20]
 80031a2:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80031a4:	697b      	ldr	r3, [r7, #20]
 80031a6:	f023 0307 	bic.w	r3, r3, #7
 80031aa:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80031b0:	697a      	ldr	r2, [r7, #20]
 80031b2:	4313      	orrs	r3, r2
 80031b4:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80031ba:	2b04      	cmp	r3, #4
 80031bc:	d117      	bne.n	80031ee <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80031c2:	697a      	ldr	r2, [r7, #20]
 80031c4:	4313      	orrs	r3, r2
 80031c6:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80031cc:	2b00      	cmp	r3, #0
 80031ce:	d00e      	beq.n	80031ee <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80031d0:	6878      	ldr	r0, [r7, #4]
 80031d2:	f000 f8bd 	bl	8003350 <DMA_CheckFifoParam>
 80031d6:	4603      	mov	r3, r0
 80031d8:	2b00      	cmp	r3, #0
 80031da:	d008      	beq.n	80031ee <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	2240      	movs	r2, #64	@ 0x40
 80031e0:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	2201      	movs	r2, #1
 80031e6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 80031ea:	2301      	movs	r3, #1
 80031ec:	e016      	b.n	800321c <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	681b      	ldr	r3, [r3, #0]
 80031f2:	697a      	ldr	r2, [r7, #20]
 80031f4:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80031f6:	6878      	ldr	r0, [r7, #4]
 80031f8:	f000 f874 	bl	80032e4 <DMA_CalcBaseAndBitshift>
 80031fc:	4603      	mov	r3, r0
 80031fe:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003204:	223f      	movs	r2, #63	@ 0x3f
 8003206:	409a      	lsls	r2, r3
 8003208:	68fb      	ldr	r3, [r7, #12]
 800320a:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	2200      	movs	r2, #0
 8003210:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	2201      	movs	r2, #1
 8003216:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 800321a:	2300      	movs	r3, #0
}
 800321c:	4618      	mov	r0, r3
 800321e:	3718      	adds	r7, #24
 8003220:	46bd      	mov	sp, r7
 8003222:	bd80      	pop	{r7, pc}
 8003224:	f010803f 	.word	0xf010803f

08003228 <HAL_DMA_DeInit>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_DeInit(DMA_HandleTypeDef *hdma)
{
 8003228:	b580      	push	{r7, lr}
 800322a:	b084      	sub	sp, #16
 800322c:	af00      	add	r7, sp, #0
 800322e:	6078      	str	r0, [r7, #4]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	2b00      	cmp	r3, #0
 8003234:	d101      	bne.n	800323a <HAL_DMA_DeInit+0x12>
  {
    return HAL_ERROR;
 8003236:	2301      	movs	r3, #1
 8003238:	e050      	b.n	80032dc <HAL_DMA_DeInit+0xb4>
  }
  
  /* Check the DMA peripheral state */
  if(hdma->State == HAL_DMA_STATE_BUSY)
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8003240:	b2db      	uxtb	r3, r3
 8003242:	2b02      	cmp	r3, #2
 8003244:	d101      	bne.n	800324a <HAL_DMA_DeInit+0x22>
  {
    /* Return error status */
    return HAL_BUSY;
 8003246:	2302      	movs	r3, #2
 8003248:	e048      	b.n	80032dc <HAL_DMA_DeInit+0xb4>

  /* Check the parameters */
  assert_param(IS_DMA_STREAM_ALL_INSTANCE(hdma->Instance));

  /* Disable the selected DMA Streamx */
  __HAL_DMA_DISABLE(hdma);
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	681b      	ldr	r3, [r3, #0]
 800324e:	681a      	ldr	r2, [r3, #0]
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	681b      	ldr	r3, [r3, #0]
 8003254:	f022 0201 	bic.w	r2, r2, #1
 8003258:	601a      	str	r2, [r3, #0]

  /* Reset DMA Streamx control register */
  hdma->Instance->CR   = 0U;
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	681b      	ldr	r3, [r3, #0]
 800325e:	2200      	movs	r2, #0
 8003260:	601a      	str	r2, [r3, #0]

  /* Reset DMA Streamx number of data to transfer register */
  hdma->Instance->NDTR = 0U;
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	681b      	ldr	r3, [r3, #0]
 8003266:	2200      	movs	r2, #0
 8003268:	605a      	str	r2, [r3, #4]

  /* Reset DMA Streamx peripheral address register */
  hdma->Instance->PAR  = 0U;
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	681b      	ldr	r3, [r3, #0]
 800326e:	2200      	movs	r2, #0
 8003270:	609a      	str	r2, [r3, #8]

  /* Reset DMA Streamx memory 0 address register */
  hdma->Instance->M0AR = 0U;
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	681b      	ldr	r3, [r3, #0]
 8003276:	2200      	movs	r2, #0
 8003278:	60da      	str	r2, [r3, #12]
  
  /* Reset DMA Streamx memory 1 address register */
  hdma->Instance->M1AR = 0U;
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	681b      	ldr	r3, [r3, #0]
 800327e:	2200      	movs	r2, #0
 8003280:	611a      	str	r2, [r3, #16]
  
  /* Reset DMA Streamx FIFO control register */
  hdma->Instance->FCR  = 0x00000021U;
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	681b      	ldr	r3, [r3, #0]
 8003286:	2221      	movs	r2, #33	@ 0x21
 8003288:	615a      	str	r2, [r3, #20]
  
  /* Get DMA steam Base Address */  
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800328a:	6878      	ldr	r0, [r7, #4]
 800328c:	f000 f82a 	bl	80032e4 <DMA_CalcBaseAndBitshift>
 8003290:	4603      	mov	r3, r0
 8003292:	60fb      	str	r3, [r7, #12]
  
  /* Clean all callbacks */
  hdma->XferCpltCallback = NULL;
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	2200      	movs	r2, #0
 8003298:	63da      	str	r2, [r3, #60]	@ 0x3c
  hdma->XferHalfCpltCallback = NULL;
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	2200      	movs	r2, #0
 800329e:	641a      	str	r2, [r3, #64]	@ 0x40
  hdma->XferM1CpltCallback = NULL;
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	2200      	movs	r2, #0
 80032a4:	645a      	str	r2, [r3, #68]	@ 0x44
  hdma->XferM1HalfCpltCallback = NULL;
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	2200      	movs	r2, #0
 80032aa:	649a      	str	r2, [r3, #72]	@ 0x48
  hdma->XferErrorCallback = NULL;
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	2200      	movs	r2, #0
 80032b0:	64da      	str	r2, [r3, #76]	@ 0x4c
  hdma->XferAbortCallback = NULL;
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	2200      	movs	r2, #0
 80032b6:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Clear all interrupt flags at correct offset within the register */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80032bc:	223f      	movs	r2, #63	@ 0x3f
 80032be:	409a      	lsls	r2, r3
 80032c0:	68fb      	ldr	r3, [r7, #12]
 80032c2:	609a      	str	r2, [r3, #8]

  /* Reset the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	2200      	movs	r2, #0
 80032c8:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Reset the DMA state */
  hdma->State = HAL_DMA_STATE_RESET;
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	2200      	movs	r2, #0
 80032ce:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	2200      	movs	r2, #0
 80032d6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 80032da:	2300      	movs	r3, #0
}
 80032dc:	4618      	mov	r0, r3
 80032de:	3710      	adds	r7, #16
 80032e0:	46bd      	mov	sp, r7
 80032e2:	bd80      	pop	{r7, pc}

080032e4 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80032e4:	b480      	push	{r7}
 80032e6:	b085      	sub	sp, #20
 80032e8:	af00      	add	r7, sp, #0
 80032ea:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	681b      	ldr	r3, [r3, #0]
 80032f0:	b2db      	uxtb	r3, r3
 80032f2:	3b10      	subs	r3, #16
 80032f4:	4a14      	ldr	r2, [pc, #80]	@ (8003348 <DMA_CalcBaseAndBitshift+0x64>)
 80032f6:	fba2 2303 	umull	r2, r3, r2, r3
 80032fa:	091b      	lsrs	r3, r3, #4
 80032fc:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80032fe:	4a13      	ldr	r2, [pc, #76]	@ (800334c <DMA_CalcBaseAndBitshift+0x68>)
 8003300:	68fb      	ldr	r3, [r7, #12]
 8003302:	4413      	add	r3, r2
 8003304:	781b      	ldrb	r3, [r3, #0]
 8003306:	461a      	mov	r2, r3
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 800330c:	68fb      	ldr	r3, [r7, #12]
 800330e:	2b03      	cmp	r3, #3
 8003310:	d909      	bls.n	8003326 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	681b      	ldr	r3, [r3, #0]
 8003316:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 800331a:	f023 0303 	bic.w	r3, r3, #3
 800331e:	1d1a      	adds	r2, r3, #4
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	659a      	str	r2, [r3, #88]	@ 0x58
 8003324:	e007      	b.n	8003336 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	681b      	ldr	r3, [r3, #0]
 800332a:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 800332e:	f023 0303 	bic.w	r3, r3, #3
 8003332:	687a      	ldr	r2, [r7, #4]
 8003334:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 800333a:	4618      	mov	r0, r3
 800333c:	3714      	adds	r7, #20
 800333e:	46bd      	mov	sp, r7
 8003340:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003344:	4770      	bx	lr
 8003346:	bf00      	nop
 8003348:	aaaaaaab 	.word	0xaaaaaaab
 800334c:	08008284 	.word	0x08008284

08003350 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8003350:	b480      	push	{r7}
 8003352:	b085      	sub	sp, #20
 8003354:	af00      	add	r7, sp, #0
 8003356:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003358:	2300      	movs	r3, #0
 800335a:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003360:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	699b      	ldr	r3, [r3, #24]
 8003366:	2b00      	cmp	r3, #0
 8003368:	d11f      	bne.n	80033aa <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 800336a:	68bb      	ldr	r3, [r7, #8]
 800336c:	2b03      	cmp	r3, #3
 800336e:	d856      	bhi.n	800341e <DMA_CheckFifoParam+0xce>
 8003370:	a201      	add	r2, pc, #4	@ (adr r2, 8003378 <DMA_CheckFifoParam+0x28>)
 8003372:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003376:	bf00      	nop
 8003378:	08003389 	.word	0x08003389
 800337c:	0800339b 	.word	0x0800339b
 8003380:	08003389 	.word	0x08003389
 8003384:	0800341f 	.word	0x0800341f
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800338c:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003390:	2b00      	cmp	r3, #0
 8003392:	d046      	beq.n	8003422 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8003394:	2301      	movs	r3, #1
 8003396:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003398:	e043      	b.n	8003422 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800339e:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 80033a2:	d140      	bne.n	8003426 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 80033a4:	2301      	movs	r3, #1
 80033a6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80033a8:	e03d      	b.n	8003426 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	699b      	ldr	r3, [r3, #24]
 80033ae:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80033b2:	d121      	bne.n	80033f8 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 80033b4:	68bb      	ldr	r3, [r7, #8]
 80033b6:	2b03      	cmp	r3, #3
 80033b8:	d837      	bhi.n	800342a <DMA_CheckFifoParam+0xda>
 80033ba:	a201      	add	r2, pc, #4	@ (adr r2, 80033c0 <DMA_CheckFifoParam+0x70>)
 80033bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80033c0:	080033d1 	.word	0x080033d1
 80033c4:	080033d7 	.word	0x080033d7
 80033c8:	080033d1 	.word	0x080033d1
 80033cc:	080033e9 	.word	0x080033e9
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80033d0:	2301      	movs	r3, #1
 80033d2:	73fb      	strb	r3, [r7, #15]
      break;
 80033d4:	e030      	b.n	8003438 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80033da:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80033de:	2b00      	cmp	r3, #0
 80033e0:	d025      	beq.n	800342e <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 80033e2:	2301      	movs	r3, #1
 80033e4:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80033e6:	e022      	b.n	800342e <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80033ec:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 80033f0:	d11f      	bne.n	8003432 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 80033f2:	2301      	movs	r3, #1
 80033f4:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80033f6:	e01c      	b.n	8003432 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80033f8:	68bb      	ldr	r3, [r7, #8]
 80033fa:	2b02      	cmp	r3, #2
 80033fc:	d903      	bls.n	8003406 <DMA_CheckFifoParam+0xb6>
 80033fe:	68bb      	ldr	r3, [r7, #8]
 8003400:	2b03      	cmp	r3, #3
 8003402:	d003      	beq.n	800340c <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8003404:	e018      	b.n	8003438 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8003406:	2301      	movs	r3, #1
 8003408:	73fb      	strb	r3, [r7, #15]
      break;
 800340a:	e015      	b.n	8003438 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003410:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003414:	2b00      	cmp	r3, #0
 8003416:	d00e      	beq.n	8003436 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8003418:	2301      	movs	r3, #1
 800341a:	73fb      	strb	r3, [r7, #15]
      break;
 800341c:	e00b      	b.n	8003436 <DMA_CheckFifoParam+0xe6>
      break;
 800341e:	bf00      	nop
 8003420:	e00a      	b.n	8003438 <DMA_CheckFifoParam+0xe8>
      break;
 8003422:	bf00      	nop
 8003424:	e008      	b.n	8003438 <DMA_CheckFifoParam+0xe8>
      break;
 8003426:	bf00      	nop
 8003428:	e006      	b.n	8003438 <DMA_CheckFifoParam+0xe8>
      break;
 800342a:	bf00      	nop
 800342c:	e004      	b.n	8003438 <DMA_CheckFifoParam+0xe8>
      break;
 800342e:	bf00      	nop
 8003430:	e002      	b.n	8003438 <DMA_CheckFifoParam+0xe8>
      break;   
 8003432:	bf00      	nop
 8003434:	e000      	b.n	8003438 <DMA_CheckFifoParam+0xe8>
      break;
 8003436:	bf00      	nop
    }
  } 
  
  return status; 
 8003438:	7bfb      	ldrb	r3, [r7, #15]
}
 800343a:	4618      	mov	r0, r3
 800343c:	3714      	adds	r7, #20
 800343e:	46bd      	mov	sp, r7
 8003440:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003444:	4770      	bx	lr
 8003446:	bf00      	nop

08003448 <HAL_DMA2D_Init>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Init(DMA2D_HandleTypeDef *hdma2d)
{
 8003448:	b580      	push	{r7, lr}
 800344a:	b082      	sub	sp, #8
 800344c:	af00      	add	r7, sp, #0
 800344e:	6078      	str	r0, [r7, #4]
  /* Check the DMA2D peripheral state */
  if (hdma2d == NULL)
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	2b00      	cmp	r3, #0
 8003454:	d101      	bne.n	800345a <HAL_DMA2D_Init+0x12>
  {
    return HAL_ERROR;
 8003456:	2301      	movs	r3, #1
 8003458:	e03b      	b.n	80034d2 <HAL_DMA2D_Init+0x8a>

    /* Init the low level hardware */
    hdma2d->MspInitCallback(hdma2d);
  }
#else
  if (hdma2d->State == HAL_DMA2D_STATE_RESET)
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	f893 3039 	ldrb.w	r3, [r3, #57]	@ 0x39
 8003460:	b2db      	uxtb	r3, r3
 8003462:	2b00      	cmp	r3, #0
 8003464:	d106      	bne.n	8003474 <HAL_DMA2D_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hdma2d->Lock = HAL_UNLOCKED;
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	2200      	movs	r2, #0
 800346a:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
    /* Init the low level hardware */
    HAL_DMA2D_MspInit(hdma2d);
 800346e:	6878      	ldr	r0, [r7, #4]
 8003470:	f7fe fd36 	bl	8001ee0 <HAL_DMA2D_MspInit>
  }
#endif /* (USE_HAL_DMA2D_REGISTER_CALLBACKS) */

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	2202      	movs	r2, #2
 8003478:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

  /* DMA2D CR register configuration -------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE, hdma2d->Init.Mode);
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	681b      	ldr	r3, [r3, #0]
 8003480:	681b      	ldr	r3, [r3, #0]
 8003482:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	685a      	ldr	r2, [r3, #4]
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	681b      	ldr	r3, [r3, #0]
 800348e:	430a      	orrs	r2, r1
 8003490:	601a      	str	r2, [r3, #0]

  /* DMA2D OPFCCR register configuration ---------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM, hdma2d->Init.ColorMode);
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	681b      	ldr	r3, [r3, #0]
 8003496:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003498:	f023 0107 	bic.w	r1, r3, #7
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	689a      	ldr	r2, [r3, #8]
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	681b      	ldr	r3, [r3, #0]
 80034a4:	430a      	orrs	r2, r1
 80034a6:	635a      	str	r2, [r3, #52]	@ 0x34

  /* DMA2D OOR register configuration ------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, hdma2d->Init.OutputOffset);
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	681b      	ldr	r3, [r3, #0]
 80034ac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80034ae:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 80034b2:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80034b6:	687a      	ldr	r2, [r7, #4]
 80034b8:	68d1      	ldr	r1, [r2, #12]
 80034ba:	687a      	ldr	r2, [r7, #4]
 80034bc:	6812      	ldr	r2, [r2, #0]
 80034be:	430b      	orrs	r3, r1
 80034c0:	6413      	str	r3, [r2, #64]	@ 0x40


  /* Update error code */
  hdma2d->ErrorCode = HAL_DMA2D_ERROR_NONE;
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	2200      	movs	r2, #0
 80034c6:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA2D state*/
  hdma2d->State  = HAL_DMA2D_STATE_READY;
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	2201      	movs	r2, #1
 80034cc:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

  return HAL_OK;
 80034d0:	2300      	movs	r3, #0
}
 80034d2:	4618      	mov	r0, r3
 80034d4:	3708      	adds	r7, #8
 80034d6:	46bd      	mov	sp, r7
 80034d8:	bd80      	pop	{r7, pc}

080034da <HAL_DMA2D_Start>:
  * @param  Height     The height of data to be transferred from source to destination (expressed in number of lines).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Start(DMA2D_HandleTypeDef *hdma2d, uint32_t pdata, uint32_t DstAddress, uint32_t Width,
                                  uint32_t Height)
{
 80034da:	b580      	push	{r7, lr}
 80034dc:	b086      	sub	sp, #24
 80034de:	af02      	add	r7, sp, #8
 80034e0:	60f8      	str	r0, [r7, #12]
 80034e2:	60b9      	str	r1, [r7, #8]
 80034e4:	607a      	str	r2, [r7, #4]
 80034e6:	603b      	str	r3, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DMA2D_LINE(Height));
  assert_param(IS_DMA2D_PIXEL(Width));

  /* Process locked */
  __HAL_LOCK(hdma2d);
 80034e8:	68fb      	ldr	r3, [r7, #12]
 80034ea:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 80034ee:	2b01      	cmp	r3, #1
 80034f0:	d101      	bne.n	80034f6 <HAL_DMA2D_Start+0x1c>
 80034f2:	2302      	movs	r3, #2
 80034f4:	e018      	b.n	8003528 <HAL_DMA2D_Start+0x4e>
 80034f6:	68fb      	ldr	r3, [r7, #12]
 80034f8:	2201      	movs	r2, #1
 80034fa:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 80034fe:	68fb      	ldr	r3, [r7, #12]
 8003500:	2202      	movs	r2, #2
 8003502:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

  /* Configure the source, destination address and the data size */
  DMA2D_SetConfig(hdma2d, pdata, DstAddress, Width, Height);
 8003506:	69bb      	ldr	r3, [r7, #24]
 8003508:	9300      	str	r3, [sp, #0]
 800350a:	683b      	ldr	r3, [r7, #0]
 800350c:	687a      	ldr	r2, [r7, #4]
 800350e:	68b9      	ldr	r1, [r7, #8]
 8003510:	68f8      	ldr	r0, [r7, #12]
 8003512:	f000 fa99 	bl	8003a48 <DMA2D_SetConfig>

  /* Enable the Peripheral */
  __HAL_DMA2D_ENABLE(hdma2d);
 8003516:	68fb      	ldr	r3, [r7, #12]
 8003518:	681b      	ldr	r3, [r3, #0]
 800351a:	681a      	ldr	r2, [r3, #0]
 800351c:	68fb      	ldr	r3, [r7, #12]
 800351e:	681b      	ldr	r3, [r3, #0]
 8003520:	f042 0201 	orr.w	r2, r2, #1
 8003524:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 8003526:	2300      	movs	r3, #0
}
 8003528:	4618      	mov	r0, r3
 800352a:	3710      	adds	r7, #16
 800352c:	46bd      	mov	sp, r7
 800352e:	bd80      	pop	{r7, pc}

08003530 <HAL_DMA2D_PollForTransfer>:
  *                 the configuration information for the DMA2D.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_PollForTransfer(DMA2D_HandleTypeDef *hdma2d, uint32_t Timeout)
{
 8003530:	b580      	push	{r7, lr}
 8003532:	b086      	sub	sp, #24
 8003534:	af00      	add	r7, sp, #0
 8003536:	6078      	str	r0, [r7, #4]
 8003538:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t layer_start;
  __IO uint32_t isrflags = 0x0U;
 800353a:	2300      	movs	r3, #0
 800353c:	60fb      	str	r3, [r7, #12]

  /* Polling for DMA2D transfer */
  if ((hdma2d->Instance->CR & DMA2D_CR_START) != 0U)
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	681b      	ldr	r3, [r3, #0]
 8003542:	681b      	ldr	r3, [r3, #0]
 8003544:	f003 0301 	and.w	r3, r3, #1
 8003548:	2b00      	cmp	r3, #0
 800354a:	d056      	beq.n	80035fa <HAL_DMA2D_PollForTransfer+0xca>
  {
    /* Get tick */
    tickstart = HAL_GetTick();
 800354c:	f7ff f86c 	bl	8002628 <HAL_GetTick>
 8003550:	6178      	str	r0, [r7, #20]

    while (__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_TC) == 0U)
 8003552:	e04b      	b.n	80035ec <HAL_DMA2D_PollForTransfer+0xbc>
    {
      isrflags = READ_REG(hdma2d->Instance->ISR);
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	681b      	ldr	r3, [r3, #0]
 8003558:	685b      	ldr	r3, [r3, #4]
 800355a:	60fb      	str	r3, [r7, #12]
      if ((isrflags & (DMA2D_FLAG_CE | DMA2D_FLAG_TE)) != 0U)
 800355c:	68fb      	ldr	r3, [r7, #12]
 800355e:	f003 0321 	and.w	r3, r3, #33	@ 0x21
 8003562:	2b00      	cmp	r3, #0
 8003564:	d023      	beq.n	80035ae <HAL_DMA2D_PollForTransfer+0x7e>
      {
        if ((isrflags & DMA2D_FLAG_CE) != 0U)
 8003566:	68fb      	ldr	r3, [r7, #12]
 8003568:	f003 0320 	and.w	r3, r3, #32
 800356c:	2b00      	cmp	r3, #0
 800356e:	d005      	beq.n	800357c <HAL_DMA2D_PollForTransfer+0x4c>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003574:	f043 0202 	orr.w	r2, r3, #2
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	63da      	str	r2, [r3, #60]	@ 0x3c
        }
        if ((isrflags & DMA2D_FLAG_TE) != 0U)
 800357c:	68fb      	ldr	r3, [r7, #12]
 800357e:	f003 0301 	and.w	r3, r3, #1
 8003582:	2b00      	cmp	r3, #0
 8003584:	d005      	beq.n	8003592 <HAL_DMA2D_PollForTransfer+0x62>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800358a:	f043 0201 	orr.w	r2, r3, #1
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	63da      	str	r2, [r3, #60]	@ 0x3c
        }
        /* Clear the transfer and configuration error flags */
        __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CE | DMA2D_FLAG_TE);
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	681b      	ldr	r3, [r3, #0]
 8003596:	2221      	movs	r2, #33	@ 0x21
 8003598:	609a      	str	r2, [r3, #8]

        /* Change DMA2D state */
        hdma2d->State = HAL_DMA2D_STATE_ERROR;
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	2204      	movs	r2, #4
 800359e:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

        /* Process unlocked */
        __HAL_UNLOCK(hdma2d);
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	2200      	movs	r2, #0
 80035a6:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

        return HAL_ERROR;
 80035aa:	2301      	movs	r3, #1
 80035ac:	e0a5      	b.n	80036fa <HAL_DMA2D_PollForTransfer+0x1ca>
      }
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 80035ae:	683b      	ldr	r3, [r7, #0]
 80035b0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80035b4:	d01a      	beq.n	80035ec <HAL_DMA2D_PollForTransfer+0xbc>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80035b6:	f7ff f837 	bl	8002628 <HAL_GetTick>
 80035ba:	4602      	mov	r2, r0
 80035bc:	697b      	ldr	r3, [r7, #20]
 80035be:	1ad3      	subs	r3, r2, r3
 80035c0:	683a      	ldr	r2, [r7, #0]
 80035c2:	429a      	cmp	r2, r3
 80035c4:	d302      	bcc.n	80035cc <HAL_DMA2D_PollForTransfer+0x9c>
 80035c6:	683b      	ldr	r3, [r7, #0]
 80035c8:	2b00      	cmp	r3, #0
 80035ca:	d10f      	bne.n	80035ec <HAL_DMA2D_PollForTransfer+0xbc>
        {
          /* Update error code */
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TIMEOUT;
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80035d0:	f043 0220 	orr.w	r2, r3, #32
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	63da      	str	r2, [r3, #60]	@ 0x3c

          /* Change the DMA2D state */
          hdma2d->State = HAL_DMA2D_STATE_TIMEOUT;
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	2203      	movs	r2, #3
 80035dc:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

          /* Process unlocked */
          __HAL_UNLOCK(hdma2d);
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	2200      	movs	r2, #0
 80035e4:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

          return HAL_TIMEOUT;
 80035e8:	2303      	movs	r3, #3
 80035ea:	e086      	b.n	80036fa <HAL_DMA2D_PollForTransfer+0x1ca>
    while (__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_TC) == 0U)
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	681b      	ldr	r3, [r3, #0]
 80035f0:	685b      	ldr	r3, [r3, #4]
 80035f2:	f003 0302 	and.w	r3, r3, #2
 80035f6:	2b00      	cmp	r3, #0
 80035f8:	d0ac      	beq.n	8003554 <HAL_DMA2D_PollForTransfer+0x24>
        }
      }
    }
  }
  /* Polling for CLUT loading (foreground or background) */
  layer_start = hdma2d->Instance->FGPFCCR & DMA2D_FGPFCCR_START;
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	681b      	ldr	r3, [r3, #0]
 80035fe:	69db      	ldr	r3, [r3, #28]
 8003600:	f003 0320 	and.w	r3, r3, #32
 8003604:	613b      	str	r3, [r7, #16]
  layer_start |= hdma2d->Instance->BGPFCCR & DMA2D_BGPFCCR_START;
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	681b      	ldr	r3, [r3, #0]
 800360a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800360c:	f003 0320 	and.w	r3, r3, #32
 8003610:	693a      	ldr	r2, [r7, #16]
 8003612:	4313      	orrs	r3, r2
 8003614:	613b      	str	r3, [r7, #16]
  if (layer_start != 0U)
 8003616:	693b      	ldr	r3, [r7, #16]
 8003618:	2b00      	cmp	r3, #0
 800361a:	d061      	beq.n	80036e0 <HAL_DMA2D_PollForTransfer+0x1b0>
  {
    /* Get tick */
    tickstart = HAL_GetTick();
 800361c:	f7ff f804 	bl	8002628 <HAL_GetTick>
 8003620:	6178      	str	r0, [r7, #20]

    while (__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_CTC) == 0U)
 8003622:	e056      	b.n	80036d2 <HAL_DMA2D_PollForTransfer+0x1a2>
    {
      isrflags = READ_REG(hdma2d->Instance->ISR);
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	681b      	ldr	r3, [r3, #0]
 8003628:	685b      	ldr	r3, [r3, #4]
 800362a:	60fb      	str	r3, [r7, #12]
      if ((isrflags & (DMA2D_FLAG_CAE | DMA2D_FLAG_CE | DMA2D_FLAG_TE)) != 0U)
 800362c:	68fb      	ldr	r3, [r7, #12]
 800362e:	f003 0329 	and.w	r3, r3, #41	@ 0x29
 8003632:	2b00      	cmp	r3, #0
 8003634:	d02e      	beq.n	8003694 <HAL_DMA2D_PollForTransfer+0x164>
      {
        if ((isrflags & DMA2D_FLAG_CAE) != 0U)
 8003636:	68fb      	ldr	r3, [r7, #12]
 8003638:	f003 0308 	and.w	r3, r3, #8
 800363c:	2b00      	cmp	r3, #0
 800363e:	d005      	beq.n	800364c <HAL_DMA2D_PollForTransfer+0x11c>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CAE;
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003644:	f043 0204 	orr.w	r2, r3, #4
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	63da      	str	r2, [r3, #60]	@ 0x3c
        }
        if ((isrflags & DMA2D_FLAG_CE) != 0U)
 800364c:	68fb      	ldr	r3, [r7, #12]
 800364e:	f003 0320 	and.w	r3, r3, #32
 8003652:	2b00      	cmp	r3, #0
 8003654:	d005      	beq.n	8003662 <HAL_DMA2D_PollForTransfer+0x132>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800365a:	f043 0202 	orr.w	r2, r3, #2
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	63da      	str	r2, [r3, #60]	@ 0x3c
        }
        if ((isrflags & DMA2D_FLAG_TE) != 0U)
 8003662:	68fb      	ldr	r3, [r7, #12]
 8003664:	f003 0301 	and.w	r3, r3, #1
 8003668:	2b00      	cmp	r3, #0
 800366a:	d005      	beq.n	8003678 <HAL_DMA2D_PollForTransfer+0x148>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003670:	f043 0201 	orr.w	r2, r3, #1
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	63da      	str	r2, [r3, #60]	@ 0x3c
        }
        /* Clear the CLUT Access Error, Configuration Error and Transfer Error flags */
        __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CAE | DMA2D_FLAG_CE | DMA2D_FLAG_TE);
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	681b      	ldr	r3, [r3, #0]
 800367c:	2229      	movs	r2, #41	@ 0x29
 800367e:	609a      	str	r2, [r3, #8]

        /* Change DMA2D state */
        hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	2204      	movs	r2, #4
 8003684:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

        /* Process unlocked */
        __HAL_UNLOCK(hdma2d);
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	2200      	movs	r2, #0
 800368c:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

        return HAL_ERROR;
 8003690:	2301      	movs	r3, #1
 8003692:	e032      	b.n	80036fa <HAL_DMA2D_PollForTransfer+0x1ca>
      }
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8003694:	683b      	ldr	r3, [r7, #0]
 8003696:	f1b3 3fff 	cmp.w	r3, #4294967295
 800369a:	d01a      	beq.n	80036d2 <HAL_DMA2D_PollForTransfer+0x1a2>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800369c:	f7fe ffc4 	bl	8002628 <HAL_GetTick>
 80036a0:	4602      	mov	r2, r0
 80036a2:	697b      	ldr	r3, [r7, #20]
 80036a4:	1ad3      	subs	r3, r2, r3
 80036a6:	683a      	ldr	r2, [r7, #0]
 80036a8:	429a      	cmp	r2, r3
 80036aa:	d302      	bcc.n	80036b2 <HAL_DMA2D_PollForTransfer+0x182>
 80036ac:	683b      	ldr	r3, [r7, #0]
 80036ae:	2b00      	cmp	r3, #0
 80036b0:	d10f      	bne.n	80036d2 <HAL_DMA2D_PollForTransfer+0x1a2>
        {
          /* Update error code */
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TIMEOUT;
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80036b6:	f043 0220 	orr.w	r2, r3, #32
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	63da      	str	r2, [r3, #60]	@ 0x3c

          /* Change the DMA2D state */
          hdma2d->State = HAL_DMA2D_STATE_TIMEOUT;
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	2203      	movs	r2, #3
 80036c2:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

          /* Process unlocked */
          __HAL_UNLOCK(hdma2d);
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	2200      	movs	r2, #0
 80036ca:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

          return HAL_TIMEOUT;
 80036ce:	2303      	movs	r3, #3
 80036d0:	e013      	b.n	80036fa <HAL_DMA2D_PollForTransfer+0x1ca>
    while (__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_CTC) == 0U)
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	681b      	ldr	r3, [r3, #0]
 80036d6:	685b      	ldr	r3, [r3, #4]
 80036d8:	f003 0310 	and.w	r3, r3, #16
 80036dc:	2b00      	cmp	r3, #0
 80036de:	d0a1      	beq.n	8003624 <HAL_DMA2D_PollForTransfer+0xf4>
      }
    }
  }

  /* Clear the transfer complete and CLUT loading flags */
  __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TC | DMA2D_FLAG_CTC);
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	681b      	ldr	r3, [r3, #0]
 80036e4:	2212      	movs	r2, #18
 80036e6:	609a      	str	r2, [r3, #8]

  /* Change DMA2D state */
  hdma2d->State = HAL_DMA2D_STATE_READY;
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	2201      	movs	r2, #1
 80036ec:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	2200      	movs	r2, #0
 80036f4:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

  return HAL_OK;
 80036f8:	2300      	movs	r3, #0
}
 80036fa:	4618      	mov	r0, r3
 80036fc:	3718      	adds	r7, #24
 80036fe:	46bd      	mov	sp, r7
 8003700:	bd80      	pop	{r7, pc}

08003702 <HAL_DMA2D_IRQHandler>:
  * @param  hdma2d Pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
void HAL_DMA2D_IRQHandler(DMA2D_HandleTypeDef *hdma2d)
{
 8003702:	b580      	push	{r7, lr}
 8003704:	b084      	sub	sp, #16
 8003706:	af00      	add	r7, sp, #0
 8003708:	6078      	str	r0, [r7, #4]
  uint32_t isrflags = READ_REG(hdma2d->Instance->ISR);
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	681b      	ldr	r3, [r3, #0]
 800370e:	685b      	ldr	r3, [r3, #4]
 8003710:	60fb      	str	r3, [r7, #12]
  uint32_t crflags = READ_REG(hdma2d->Instance->CR);
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	681b      	ldr	r3, [r3, #0]
 8003716:	681b      	ldr	r3, [r3, #0]
 8003718:	60bb      	str	r3, [r7, #8]

  /* Transfer Error Interrupt management ***************************************/
  if ((isrflags & DMA2D_FLAG_TE) != 0U)
 800371a:	68fb      	ldr	r3, [r7, #12]
 800371c:	f003 0301 	and.w	r3, r3, #1
 8003720:	2b00      	cmp	r3, #0
 8003722:	d026      	beq.n	8003772 <HAL_DMA2D_IRQHandler+0x70>
  {
    if ((crflags & DMA2D_IT_TE) != 0U)
 8003724:	68bb      	ldr	r3, [r7, #8]
 8003726:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800372a:	2b00      	cmp	r3, #0
 800372c:	d021      	beq.n	8003772 <HAL_DMA2D_IRQHandler+0x70>
    {
      /* Disable the transfer Error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TE);
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	681b      	ldr	r3, [r3, #0]
 8003732:	681a      	ldr	r2, [r3, #0]
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	681b      	ldr	r3, [r3, #0]
 8003738:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800373c:	601a      	str	r2, [r3, #0]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003742:	f043 0201 	orr.w	r2, r3, #1
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	63da      	str	r2, [r3, #60]	@ 0x3c

      /* Clear the transfer error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TE);
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	681b      	ldr	r3, [r3, #0]
 800374e:	2201      	movs	r2, #1
 8003750:	609a      	str	r2, [r3, #8]

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	2204      	movs	r2, #4
 8003756:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	2200      	movs	r2, #0
 800375e:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

      if (hdma2d->XferErrorCallback != NULL)
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	695b      	ldr	r3, [r3, #20]
 8003766:	2b00      	cmp	r3, #0
 8003768:	d003      	beq.n	8003772 <HAL_DMA2D_IRQHandler+0x70>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	695b      	ldr	r3, [r3, #20]
 800376e:	6878      	ldr	r0, [r7, #4]
 8003770:	4798      	blx	r3
      }
    }
  }
  /* Configuration Error Interrupt management **********************************/
  if ((isrflags & DMA2D_FLAG_CE) != 0U)
 8003772:	68fb      	ldr	r3, [r7, #12]
 8003774:	f003 0320 	and.w	r3, r3, #32
 8003778:	2b00      	cmp	r3, #0
 800377a:	d026      	beq.n	80037ca <HAL_DMA2D_IRQHandler+0xc8>
  {
    if ((crflags & DMA2D_IT_CE) != 0U)
 800377c:	68bb      	ldr	r3, [r7, #8]
 800377e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003782:	2b00      	cmp	r3, #0
 8003784:	d021      	beq.n	80037ca <HAL_DMA2D_IRQHandler+0xc8>
    {
      /* Disable the Configuration Error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CE);
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	681b      	ldr	r3, [r3, #0]
 800378a:	681a      	ldr	r2, [r3, #0]
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	681b      	ldr	r3, [r3, #0]
 8003790:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8003794:	601a      	str	r2, [r3, #0]

      /* Clear the Configuration error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CE);
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	681b      	ldr	r3, [r3, #0]
 800379a:	2220      	movs	r2, #32
 800379c:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80037a2:	f043 0202 	orr.w	r2, r3, #2
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	63da      	str	r2, [r3, #60]	@ 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	2204      	movs	r2, #4
 80037ae:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	2200      	movs	r2, #0
 80037b6:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

      if (hdma2d->XferErrorCallback != NULL)
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	695b      	ldr	r3, [r3, #20]
 80037be:	2b00      	cmp	r3, #0
 80037c0:	d003      	beq.n	80037ca <HAL_DMA2D_IRQHandler+0xc8>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	695b      	ldr	r3, [r3, #20]
 80037c6:	6878      	ldr	r0, [r7, #4]
 80037c8:	4798      	blx	r3
      }
    }
  }
  /* CLUT access Error Interrupt management ***********************************/
  if ((isrflags & DMA2D_FLAG_CAE) != 0U)
 80037ca:	68fb      	ldr	r3, [r7, #12]
 80037cc:	f003 0308 	and.w	r3, r3, #8
 80037d0:	2b00      	cmp	r3, #0
 80037d2:	d026      	beq.n	8003822 <HAL_DMA2D_IRQHandler+0x120>
  {
    if ((crflags & DMA2D_IT_CAE) != 0U)
 80037d4:	68bb      	ldr	r3, [r7, #8]
 80037d6:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80037da:	2b00      	cmp	r3, #0
 80037dc:	d021      	beq.n	8003822 <HAL_DMA2D_IRQHandler+0x120>
    {
      /* Disable the CLUT access error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CAE);
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	681b      	ldr	r3, [r3, #0]
 80037e2:	681a      	ldr	r2, [r3, #0]
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	681b      	ldr	r3, [r3, #0]
 80037e8:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80037ec:	601a      	str	r2, [r3, #0]

      /* Clear the CLUT access error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CAE);
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	681b      	ldr	r3, [r3, #0]
 80037f2:	2208      	movs	r2, #8
 80037f4:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CAE;
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80037fa:	f043 0204 	orr.w	r2, r3, #4
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	63da      	str	r2, [r3, #60]	@ 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	2204      	movs	r2, #4
 8003806:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	2200      	movs	r2, #0
 800380e:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

      if (hdma2d->XferErrorCallback != NULL)
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	695b      	ldr	r3, [r3, #20]
 8003816:	2b00      	cmp	r3, #0
 8003818:	d003      	beq.n	8003822 <HAL_DMA2D_IRQHandler+0x120>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	695b      	ldr	r3, [r3, #20]
 800381e:	6878      	ldr	r0, [r7, #4]
 8003820:	4798      	blx	r3
      }
    }
  }
  /* Transfer watermark Interrupt management **********************************/
  if ((isrflags & DMA2D_FLAG_TW) != 0U)
 8003822:	68fb      	ldr	r3, [r7, #12]
 8003824:	f003 0304 	and.w	r3, r3, #4
 8003828:	2b00      	cmp	r3, #0
 800382a:	d013      	beq.n	8003854 <HAL_DMA2D_IRQHandler+0x152>
  {
    if ((crflags & DMA2D_IT_TW) != 0U)
 800382c:	68bb      	ldr	r3, [r7, #8]
 800382e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003832:	2b00      	cmp	r3, #0
 8003834:	d00e      	beq.n	8003854 <HAL_DMA2D_IRQHandler+0x152>
    {
      /* Disable the transfer watermark interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TW);
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	681b      	ldr	r3, [r3, #0]
 800383a:	681a      	ldr	r2, [r3, #0]
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	681b      	ldr	r3, [r3, #0]
 8003840:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003844:	601a      	str	r2, [r3, #0]

      /* Clear the transfer watermark flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TW);
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	681b      	ldr	r3, [r3, #0]
 800384a:	2204      	movs	r2, #4
 800384c:	609a      	str	r2, [r3, #8]

      /* Transfer watermark Callback */
#if (USE_HAL_DMA2D_REGISTER_CALLBACKS == 1)
      hdma2d->LineEventCallback(hdma2d);
#else
      HAL_DMA2D_LineEventCallback(hdma2d);
 800384e:	6878      	ldr	r0, [r7, #4]
 8003850:	f000 f853 	bl	80038fa <HAL_DMA2D_LineEventCallback>
#endif /* USE_HAL_DMA2D_REGISTER_CALLBACKS */

    }
  }
  /* Transfer Complete Interrupt management ************************************/
  if ((isrflags & DMA2D_FLAG_TC) != 0U)
 8003854:	68fb      	ldr	r3, [r7, #12]
 8003856:	f003 0302 	and.w	r3, r3, #2
 800385a:	2b00      	cmp	r3, #0
 800385c:	d024      	beq.n	80038a8 <HAL_DMA2D_IRQHandler+0x1a6>
  {
    if ((crflags & DMA2D_IT_TC) != 0U)
 800385e:	68bb      	ldr	r3, [r7, #8]
 8003860:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003864:	2b00      	cmp	r3, #0
 8003866:	d01f      	beq.n	80038a8 <HAL_DMA2D_IRQHandler+0x1a6>
    {
      /* Disable the transfer complete interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TC);
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	681b      	ldr	r3, [r3, #0]
 800386c:	681a      	ldr	r2, [r3, #0]
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	681b      	ldr	r3, [r3, #0]
 8003872:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8003876:	601a      	str	r2, [r3, #0]

      /* Clear the transfer complete flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TC);
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	681b      	ldr	r3, [r3, #0]
 800387c:	2202      	movs	r2, #2
 800387e:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_NONE;
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	63da      	str	r2, [r3, #60]	@ 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_READY;
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	2201      	movs	r2, #1
 800388c:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	2200      	movs	r2, #0
 8003894:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

      if (hdma2d->XferCpltCallback != NULL)
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	691b      	ldr	r3, [r3, #16]
 800389c:	2b00      	cmp	r3, #0
 800389e:	d003      	beq.n	80038a8 <HAL_DMA2D_IRQHandler+0x1a6>
      {
        /* Transfer complete Callback */
        hdma2d->XferCpltCallback(hdma2d);
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	691b      	ldr	r3, [r3, #16]
 80038a4:	6878      	ldr	r0, [r7, #4]
 80038a6:	4798      	blx	r3
      }
    }
  }
  /* CLUT Transfer Complete Interrupt management ******************************/
  if ((isrflags & DMA2D_FLAG_CTC) != 0U)
 80038a8:	68fb      	ldr	r3, [r7, #12]
 80038aa:	f003 0310 	and.w	r3, r3, #16
 80038ae:	2b00      	cmp	r3, #0
 80038b0:	d01f      	beq.n	80038f2 <HAL_DMA2D_IRQHandler+0x1f0>
  {
    if ((crflags & DMA2D_IT_CTC) != 0U)
 80038b2:	68bb      	ldr	r3, [r7, #8]
 80038b4:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80038b8:	2b00      	cmp	r3, #0
 80038ba:	d01a      	beq.n	80038f2 <HAL_DMA2D_IRQHandler+0x1f0>
    {
      /* Disable the CLUT transfer complete interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CTC);
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	681b      	ldr	r3, [r3, #0]
 80038c0:	681a      	ldr	r2, [r3, #0]
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	681b      	ldr	r3, [r3, #0]
 80038c6:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 80038ca:	601a      	str	r2, [r3, #0]

      /* Clear the CLUT transfer complete flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CTC);
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	681b      	ldr	r3, [r3, #0]
 80038d0:	2210      	movs	r2, #16
 80038d2:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_NONE;
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	63da      	str	r2, [r3, #60]	@ 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_READY;
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	2201      	movs	r2, #1
 80038e0:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	2200      	movs	r2, #0
 80038e8:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

      /* CLUT Transfer complete Callback */
#if (USE_HAL_DMA2D_REGISTER_CALLBACKS == 1)
      hdma2d->CLUTLoadingCpltCallback(hdma2d);
#else
      HAL_DMA2D_CLUTLoadingCpltCallback(hdma2d);
 80038ec:	6878      	ldr	r0, [r7, #4]
 80038ee:	f000 f80e 	bl	800390e <HAL_DMA2D_CLUTLoadingCpltCallback>
#endif /* USE_HAL_DMA2D_REGISTER_CALLBACKS */
    }
  }

}
 80038f2:	bf00      	nop
 80038f4:	3710      	adds	r7, #16
 80038f6:	46bd      	mov	sp, r7
 80038f8:	bd80      	pop	{r7, pc}

080038fa <HAL_DMA2D_LineEventCallback>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval None
  */
__weak void HAL_DMA2D_LineEventCallback(DMA2D_HandleTypeDef *hdma2d)
{
 80038fa:	b480      	push	{r7}
 80038fc:	b083      	sub	sp, #12
 80038fe:	af00      	add	r7, sp, #0
 8003900:	6078      	str	r0, [r7, #4]
  UNUSED(hdma2d);

  /* NOTE : This function should not be modified; when the callback is needed,
            the HAL_DMA2D_LineEventCallback can be implemented in the user file.
   */
}
 8003902:	bf00      	nop
 8003904:	370c      	adds	r7, #12
 8003906:	46bd      	mov	sp, r7
 8003908:	f85d 7b04 	ldr.w	r7, [sp], #4
 800390c:	4770      	bx	lr

0800390e <HAL_DMA2D_CLUTLoadingCpltCallback>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval None
  */
__weak void HAL_DMA2D_CLUTLoadingCpltCallback(DMA2D_HandleTypeDef *hdma2d)
{
 800390e:	b480      	push	{r7}
 8003910:	b083      	sub	sp, #12
 8003912:	af00      	add	r7, sp, #0
 8003914:	6078      	str	r0, [r7, #4]
  UNUSED(hdma2d);

  /* NOTE : This function should not be modified; when the callback is needed,
            the HAL_DMA2D_CLUTLoadingCpltCallback can be implemented in the user file.
   */
}
 8003916:	bf00      	nop
 8003918:	370c      	adds	r7, #12
 800391a:	46bd      	mov	sp, r7
 800391c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003920:	4770      	bx	lr
	...

08003924 <HAL_DMA2D_ConfigLayer>:
  *                   This parameter can be one of the following values:
  *                   DMA2D_BACKGROUND_LAYER(0) / DMA2D_FOREGROUND_LAYER(1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_ConfigLayer(DMA2D_HandleTypeDef *hdma2d, uint32_t LayerIdx)
{
 8003924:	b480      	push	{r7}
 8003926:	b087      	sub	sp, #28
 8003928:	af00      	add	r7, sp, #0
 800392a:	6078      	str	r0, [r7, #4]
 800392c:	6039      	str	r1, [r7, #0]
  uint32_t regValue;

  /* Check the parameters */
  assert_param(IS_DMA2D_LAYER(LayerIdx));
  assert_param(IS_DMA2D_OFFSET(hdma2d->LayerCfg[LayerIdx].InputOffset));
  if (hdma2d->Init.Mode != DMA2D_R2M)
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	685b      	ldr	r3, [r3, #4]
 8003932:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
      assert_param(IS_DMA2D_ALPHA_MODE(hdma2d->LayerCfg[LayerIdx].AlphaMode));
    }
  }

  /* Process locked */
  __HAL_LOCK(hdma2d);
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 800393c:	2b01      	cmp	r3, #1
 800393e:	d101      	bne.n	8003944 <HAL_DMA2D_ConfigLayer+0x20>
 8003940:	2302      	movs	r3, #2
 8003942:	e079      	b.n	8003a38 <HAL_DMA2D_ConfigLayer+0x114>
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	2201      	movs	r2, #1
 8003948:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	2202      	movs	r2, #2
 8003950:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

  pLayerCfg = &hdma2d->LayerCfg[LayerIdx];
 8003954:	683b      	ldr	r3, [r7, #0]
 8003956:	011b      	lsls	r3, r3, #4
 8003958:	3318      	adds	r3, #24
 800395a:	687a      	ldr	r2, [r7, #4]
 800395c:	4413      	add	r3, r2
 800395e:	613b      	str	r3, [r7, #16]

  /* Prepare the value to be written to the BGPFCCR or FGPFCCR register */
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos);
 8003960:	693b      	ldr	r3, [r7, #16]
 8003962:	685a      	ldr	r2, [r3, #4]
 8003964:	693b      	ldr	r3, [r7, #16]
 8003966:	689b      	ldr	r3, [r3, #8]
 8003968:	041b      	lsls	r3, r3, #16
 800396a:	4313      	orrs	r3, r2
 800396c:	617b      	str	r3, [r7, #20]
  regMask  = DMA2D_BGPFCCR_CM | DMA2D_BGPFCCR_AM | DMA2D_BGPFCCR_ALPHA;
 800396e:	4b35      	ldr	r3, [pc, #212]	@ (8003a44 <HAL_DMA2D_ConfigLayer+0x120>)
 8003970:	60fb      	str	r3, [r7, #12]


  if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8003972:	693b      	ldr	r3, [r7, #16]
 8003974:	685b      	ldr	r3, [r3, #4]
 8003976:	2b0a      	cmp	r3, #10
 8003978:	d003      	beq.n	8003982 <HAL_DMA2D_ConfigLayer+0x5e>
 800397a:	693b      	ldr	r3, [r7, #16]
 800397c:	685b      	ldr	r3, [r3, #4]
 800397e:	2b09      	cmp	r3, #9
 8003980:	d107      	bne.n	8003992 <HAL_DMA2D_ConfigLayer+0x6e>
  {
    regValue |= (pLayerCfg->InputAlpha & DMA2D_BGPFCCR_ALPHA);
 8003982:	693b      	ldr	r3, [r7, #16]
 8003984:	68db      	ldr	r3, [r3, #12]
 8003986:	f003 437f 	and.w	r3, r3, #4278190080	@ 0xff000000
 800398a:	697a      	ldr	r2, [r7, #20]
 800398c:	4313      	orrs	r3, r2
 800398e:	617b      	str	r3, [r7, #20]
 8003990:	e005      	b.n	800399e <HAL_DMA2D_ConfigLayer+0x7a>
  }
  else
  {
    regValue |= (pLayerCfg->InputAlpha << DMA2D_BGPFCCR_ALPHA_Pos);
 8003992:	693b      	ldr	r3, [r7, #16]
 8003994:	68db      	ldr	r3, [r3, #12]
 8003996:	061b      	lsls	r3, r3, #24
 8003998:	697a      	ldr	r2, [r7, #20]
 800399a:	4313      	orrs	r3, r2
 800399c:	617b      	str	r3, [r7, #20]
  }

  /* Configure the background DMA2D layer */
  if (LayerIdx == DMA2D_BACKGROUND_LAYER)
 800399e:	683b      	ldr	r3, [r7, #0]
 80039a0:	2b00      	cmp	r3, #0
 80039a2:	d120      	bne.n	80039e6 <HAL_DMA2D_ConfigLayer+0xc2>
  {
    /* Write DMA2D BGPFCCR register */
    MODIFY_REG(hdma2d->Instance->BGPFCCR, regMask, regValue);
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	681b      	ldr	r3, [r3, #0]
 80039a8:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80039aa:	68fb      	ldr	r3, [r7, #12]
 80039ac:	43db      	mvns	r3, r3
 80039ae:	ea02 0103 	and.w	r1, r2, r3
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	681b      	ldr	r3, [r3, #0]
 80039b6:	697a      	ldr	r2, [r7, #20]
 80039b8:	430a      	orrs	r2, r1
 80039ba:	625a      	str	r2, [r3, #36]	@ 0x24

    /* DMA2D BGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->BGOR, pLayerCfg->InputOffset);
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	681b      	ldr	r3, [r3, #0]
 80039c0:	693a      	ldr	r2, [r7, #16]
 80039c2:	6812      	ldr	r2, [r2, #0]
 80039c4:	619a      	str	r2, [r3, #24]

    /* DMA2D BGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 80039c6:	693b      	ldr	r3, [r7, #16]
 80039c8:	685b      	ldr	r3, [r3, #4]
 80039ca:	2b0a      	cmp	r3, #10
 80039cc:	d003      	beq.n	80039d6 <HAL_DMA2D_ConfigLayer+0xb2>
 80039ce:	693b      	ldr	r3, [r7, #16]
 80039d0:	685b      	ldr	r3, [r3, #4]
 80039d2:	2b09      	cmp	r3, #9
 80039d4:	d127      	bne.n	8003a26 <HAL_DMA2D_ConfigLayer+0x102>
    {
      WRITE_REG(hdma2d->Instance->BGCOLR, pLayerCfg->InputAlpha & (DMA2D_BGCOLR_BLUE | DMA2D_BGCOLR_GREEN | \
 80039d6:	693b      	ldr	r3, [r7, #16]
 80039d8:	68da      	ldr	r2, [r3, #12]
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	681b      	ldr	r3, [r3, #0]
 80039de:	f022 427f 	bic.w	r2, r2, #4278190080	@ 0xff000000
 80039e2:	629a      	str	r2, [r3, #40]	@ 0x28
 80039e4:	e01f      	b.n	8003a26 <HAL_DMA2D_ConfigLayer+0x102>
  else
  {


    /* Write DMA2D FGPFCCR register */
    MODIFY_REG(hdma2d->Instance->FGPFCCR, regMask, regValue);
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	681b      	ldr	r3, [r3, #0]
 80039ea:	69da      	ldr	r2, [r3, #28]
 80039ec:	68fb      	ldr	r3, [r7, #12]
 80039ee:	43db      	mvns	r3, r3
 80039f0:	ea02 0103 	and.w	r1, r2, r3
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	681b      	ldr	r3, [r3, #0]
 80039f8:	697a      	ldr	r2, [r7, #20]
 80039fa:	430a      	orrs	r2, r1
 80039fc:	61da      	str	r2, [r3, #28]

    /* DMA2D FGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->FGOR, pLayerCfg->InputOffset);
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	681b      	ldr	r3, [r3, #0]
 8003a02:	693a      	ldr	r2, [r7, #16]
 8003a04:	6812      	ldr	r2, [r2, #0]
 8003a06:	611a      	str	r2, [r3, #16]

    /* DMA2D FGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8003a08:	693b      	ldr	r3, [r7, #16]
 8003a0a:	685b      	ldr	r3, [r3, #4]
 8003a0c:	2b0a      	cmp	r3, #10
 8003a0e:	d003      	beq.n	8003a18 <HAL_DMA2D_ConfigLayer+0xf4>
 8003a10:	693b      	ldr	r3, [r7, #16]
 8003a12:	685b      	ldr	r3, [r3, #4]
 8003a14:	2b09      	cmp	r3, #9
 8003a16:	d106      	bne.n	8003a26 <HAL_DMA2D_ConfigLayer+0x102>
    {
      WRITE_REG(hdma2d->Instance->FGCOLR, pLayerCfg->InputAlpha & (DMA2D_FGCOLR_BLUE | DMA2D_FGCOLR_GREEN | \
 8003a18:	693b      	ldr	r3, [r7, #16]
 8003a1a:	68da      	ldr	r2, [r3, #12]
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	681b      	ldr	r3, [r3, #0]
 8003a20:	f022 427f 	bic.w	r2, r2, #4278190080	@ 0xff000000
 8003a24:	621a      	str	r2, [r3, #32]
                                                                   DMA2D_FGCOLR_RED));
    }
  }
  /* Initialize the DMA2D state*/
  hdma2d->State = HAL_DMA2D_STATE_READY;
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	2201      	movs	r2, #1
 8003a2a:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	2200      	movs	r2, #0
 8003a32:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

  return HAL_OK;
 8003a36:	2300      	movs	r3, #0
}
 8003a38:	4618      	mov	r0, r3
 8003a3a:	371c      	adds	r7, #28
 8003a3c:	46bd      	mov	sp, r7
 8003a3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a42:	4770      	bx	lr
 8003a44:	ff03000f 	.word	0xff03000f

08003a48 <DMA2D_SetConfig>:
  * @param  Height     The height of data to be transferred from source to destination.
  * @retval HAL status
  */
static void DMA2D_SetConfig(DMA2D_HandleTypeDef *hdma2d, uint32_t pdata, uint32_t DstAddress, uint32_t Width,
                            uint32_t Height)
{
 8003a48:	b480      	push	{r7}
 8003a4a:	b08b      	sub	sp, #44	@ 0x2c
 8003a4c:	af00      	add	r7, sp, #0
 8003a4e:	60f8      	str	r0, [r7, #12]
 8003a50:	60b9      	str	r1, [r7, #8]
 8003a52:	607a      	str	r2, [r7, #4]
 8003a54:	603b      	str	r3, [r7, #0]
  uint32_t tmp2;
  uint32_t tmp3;
  uint32_t tmp4;

  /* Configure DMA2D data size */
  MODIFY_REG(hdma2d->Instance->NLR, (DMA2D_NLR_NL | DMA2D_NLR_PL), (Height | (Width << DMA2D_NLR_PL_Pos)));
 8003a56:	68fb      	ldr	r3, [r7, #12]
 8003a58:	681b      	ldr	r3, [r3, #0]
 8003a5a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003a5c:	f003 4140 	and.w	r1, r3, #3221225472	@ 0xc0000000
 8003a60:	683b      	ldr	r3, [r7, #0]
 8003a62:	041a      	lsls	r2, r3, #16
 8003a64:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003a66:	431a      	orrs	r2, r3
 8003a68:	68fb      	ldr	r3, [r7, #12]
 8003a6a:	681b      	ldr	r3, [r3, #0]
 8003a6c:	430a      	orrs	r2, r1
 8003a6e:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Configure DMA2D destination address */
  WRITE_REG(hdma2d->Instance->OMAR, DstAddress);
 8003a70:	68fb      	ldr	r3, [r7, #12]
 8003a72:	681b      	ldr	r3, [r3, #0]
 8003a74:	687a      	ldr	r2, [r7, #4]
 8003a76:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Register to memory DMA2D mode selected */
  if (hdma2d->Init.Mode == DMA2D_R2M)
 8003a78:	68fb      	ldr	r3, [r7, #12]
 8003a7a:	685b      	ldr	r3, [r3, #4]
 8003a7c:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8003a80:	d174      	bne.n	8003b6c <DMA2D_SetConfig+0x124>
  {
    tmp1 = pdata & DMA2D_OCOLR_ALPHA_1;
 8003a82:	68bb      	ldr	r3, [r7, #8]
 8003a84:	f003 437f 	and.w	r3, r3, #4278190080	@ 0xff000000
 8003a88:	623b      	str	r3, [r7, #32]
    tmp2 = pdata & DMA2D_OCOLR_RED_1;
 8003a8a:	68bb      	ldr	r3, [r7, #8]
 8003a8c:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8003a90:	61fb      	str	r3, [r7, #28]
    tmp3 = pdata & DMA2D_OCOLR_GREEN_1;
 8003a92:	68bb      	ldr	r3, [r7, #8]
 8003a94:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 8003a98:	61bb      	str	r3, [r7, #24]
    tmp4 = pdata & DMA2D_OCOLR_BLUE_1;
 8003a9a:	68bb      	ldr	r3, [r7, #8]
 8003a9c:	b2db      	uxtb	r3, r3
 8003a9e:	617b      	str	r3, [r7, #20]

    /* Prepare the value to be written to the OCOLR register according to the color mode */
    if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_ARGB8888)
 8003aa0:	68fb      	ldr	r3, [r7, #12]
 8003aa2:	689b      	ldr	r3, [r3, #8]
 8003aa4:	2b00      	cmp	r3, #0
 8003aa6:	d108      	bne.n	8003aba <DMA2D_SetConfig+0x72>
    {
      tmp = (tmp3 | tmp2 | tmp1 | tmp4);
 8003aa8:	69ba      	ldr	r2, [r7, #24]
 8003aaa:	69fb      	ldr	r3, [r7, #28]
 8003aac:	431a      	orrs	r2, r3
 8003aae:	6a3b      	ldr	r3, [r7, #32]
 8003ab0:	4313      	orrs	r3, r2
 8003ab2:	697a      	ldr	r2, [r7, #20]
 8003ab4:	4313      	orrs	r3, r2
 8003ab6:	627b      	str	r3, [r7, #36]	@ 0x24
 8003ab8:	e053      	b.n	8003b62 <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_RGB888)
 8003aba:	68fb      	ldr	r3, [r7, #12]
 8003abc:	689b      	ldr	r3, [r3, #8]
 8003abe:	2b01      	cmp	r3, #1
 8003ac0:	d106      	bne.n	8003ad0 <DMA2D_SetConfig+0x88>
    {
      tmp = (tmp3 | tmp2 | tmp4);
 8003ac2:	69ba      	ldr	r2, [r7, #24]
 8003ac4:	69fb      	ldr	r3, [r7, #28]
 8003ac6:	4313      	orrs	r3, r2
 8003ac8:	697a      	ldr	r2, [r7, #20]
 8003aca:	4313      	orrs	r3, r2
 8003acc:	627b      	str	r3, [r7, #36]	@ 0x24
 8003ace:	e048      	b.n	8003b62 <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_RGB565)
 8003ad0:	68fb      	ldr	r3, [r7, #12]
 8003ad2:	689b      	ldr	r3, [r3, #8]
 8003ad4:	2b02      	cmp	r3, #2
 8003ad6:	d111      	bne.n	8003afc <DMA2D_SetConfig+0xb4>
    {
      tmp2 = (tmp2 >> 19U);
 8003ad8:	69fb      	ldr	r3, [r7, #28]
 8003ada:	0cdb      	lsrs	r3, r3, #19
 8003adc:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 10U);
 8003ade:	69bb      	ldr	r3, [r7, #24]
 8003ae0:	0a9b      	lsrs	r3, r3, #10
 8003ae2:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 3U);
 8003ae4:	697b      	ldr	r3, [r7, #20]
 8003ae6:	08db      	lsrs	r3, r3, #3
 8003ae8:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 5U) | (tmp2 << 11U) | tmp4);
 8003aea:	69bb      	ldr	r3, [r7, #24]
 8003aec:	015a      	lsls	r2, r3, #5
 8003aee:	69fb      	ldr	r3, [r7, #28]
 8003af0:	02db      	lsls	r3, r3, #11
 8003af2:	4313      	orrs	r3, r2
 8003af4:	697a      	ldr	r2, [r7, #20]
 8003af6:	4313      	orrs	r3, r2
 8003af8:	627b      	str	r3, [r7, #36]	@ 0x24
 8003afa:	e032      	b.n	8003b62 <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_ARGB1555)
 8003afc:	68fb      	ldr	r3, [r7, #12]
 8003afe:	689b      	ldr	r3, [r3, #8]
 8003b00:	2b03      	cmp	r3, #3
 8003b02:	d117      	bne.n	8003b34 <DMA2D_SetConfig+0xec>
    {
      tmp1 = (tmp1 >> 31U);
 8003b04:	6a3b      	ldr	r3, [r7, #32]
 8003b06:	0fdb      	lsrs	r3, r3, #31
 8003b08:	623b      	str	r3, [r7, #32]
      tmp2 = (tmp2 >> 19U);
 8003b0a:	69fb      	ldr	r3, [r7, #28]
 8003b0c:	0cdb      	lsrs	r3, r3, #19
 8003b0e:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 11U);
 8003b10:	69bb      	ldr	r3, [r7, #24]
 8003b12:	0adb      	lsrs	r3, r3, #11
 8003b14:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 3U);
 8003b16:	697b      	ldr	r3, [r7, #20]
 8003b18:	08db      	lsrs	r3, r3, #3
 8003b1a:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 5U) | (tmp2 << 10U) | (tmp1 << 15U) | tmp4);
 8003b1c:	69bb      	ldr	r3, [r7, #24]
 8003b1e:	015a      	lsls	r2, r3, #5
 8003b20:	69fb      	ldr	r3, [r7, #28]
 8003b22:	029b      	lsls	r3, r3, #10
 8003b24:	431a      	orrs	r2, r3
 8003b26:	6a3b      	ldr	r3, [r7, #32]
 8003b28:	03db      	lsls	r3, r3, #15
 8003b2a:	4313      	orrs	r3, r2
 8003b2c:	697a      	ldr	r2, [r7, #20]
 8003b2e:	4313      	orrs	r3, r2
 8003b30:	627b      	str	r3, [r7, #36]	@ 0x24
 8003b32:	e016      	b.n	8003b62 <DMA2D_SetConfig+0x11a>
    }
    else /* Dhdma2d->Init.ColorMode = DMA2D_OUTPUT_ARGB4444 */
    {
      tmp1 = (tmp1 >> 28U);
 8003b34:	6a3b      	ldr	r3, [r7, #32]
 8003b36:	0f1b      	lsrs	r3, r3, #28
 8003b38:	623b      	str	r3, [r7, #32]
      tmp2 = (tmp2 >> 20U);
 8003b3a:	69fb      	ldr	r3, [r7, #28]
 8003b3c:	0d1b      	lsrs	r3, r3, #20
 8003b3e:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 12U);
 8003b40:	69bb      	ldr	r3, [r7, #24]
 8003b42:	0b1b      	lsrs	r3, r3, #12
 8003b44:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 4U);
 8003b46:	697b      	ldr	r3, [r7, #20]
 8003b48:	091b      	lsrs	r3, r3, #4
 8003b4a:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 4U) | (tmp2 << 8U) | (tmp1 << 12U) | tmp4);
 8003b4c:	69bb      	ldr	r3, [r7, #24]
 8003b4e:	011a      	lsls	r2, r3, #4
 8003b50:	69fb      	ldr	r3, [r7, #28]
 8003b52:	021b      	lsls	r3, r3, #8
 8003b54:	431a      	orrs	r2, r3
 8003b56:	6a3b      	ldr	r3, [r7, #32]
 8003b58:	031b      	lsls	r3, r3, #12
 8003b5a:	4313      	orrs	r3, r2
 8003b5c:	697a      	ldr	r2, [r7, #20]
 8003b5e:	4313      	orrs	r3, r2
 8003b60:	627b      	str	r3, [r7, #36]	@ 0x24
    }
    /* Write to DMA2D OCOLR register */
    WRITE_REG(hdma2d->Instance->OCOLR, tmp);
 8003b62:	68fb      	ldr	r3, [r7, #12]
 8003b64:	681b      	ldr	r3, [r3, #0]
 8003b66:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003b68:	639a      	str	r2, [r3, #56]	@ 0x38
  else /* M2M, M2M_PFC or M2M_Blending DMA2D Mode */
  {
    /* Configure DMA2D source address */
    WRITE_REG(hdma2d->Instance->FGMAR, pdata);
  }
}
 8003b6a:	e003      	b.n	8003b74 <DMA2D_SetConfig+0x12c>
    WRITE_REG(hdma2d->Instance->FGMAR, pdata);
 8003b6c:	68fb      	ldr	r3, [r7, #12]
 8003b6e:	681b      	ldr	r3, [r3, #0]
 8003b70:	68ba      	ldr	r2, [r7, #8]
 8003b72:	60da      	str	r2, [r3, #12]
}
 8003b74:	bf00      	nop
 8003b76:	372c      	adds	r7, #44	@ 0x2c
 8003b78:	46bd      	mov	sp, r7
 8003b7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b7e:	4770      	bx	lr

08003b80 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003b80:	b480      	push	{r7}
 8003b82:	b089      	sub	sp, #36	@ 0x24
 8003b84:	af00      	add	r7, sp, #0
 8003b86:	6078      	str	r0, [r7, #4]
 8003b88:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8003b8a:	2300      	movs	r3, #0
 8003b8c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8003b8e:	2300      	movs	r3, #0
 8003b90:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8003b92:	2300      	movs	r3, #0
 8003b94:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003b96:	2300      	movs	r3, #0
 8003b98:	61fb      	str	r3, [r7, #28]
 8003b9a:	e177      	b.n	8003e8c <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003b9c:	2201      	movs	r2, #1
 8003b9e:	69fb      	ldr	r3, [r7, #28]
 8003ba0:	fa02 f303 	lsl.w	r3, r2, r3
 8003ba4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003ba6:	683b      	ldr	r3, [r7, #0]
 8003ba8:	681b      	ldr	r3, [r3, #0]
 8003baa:	697a      	ldr	r2, [r7, #20]
 8003bac:	4013      	ands	r3, r2
 8003bae:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003bb0:	693a      	ldr	r2, [r7, #16]
 8003bb2:	697b      	ldr	r3, [r7, #20]
 8003bb4:	429a      	cmp	r2, r3
 8003bb6:	f040 8166 	bne.w	8003e86 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003bba:	683b      	ldr	r3, [r7, #0]
 8003bbc:	685b      	ldr	r3, [r3, #4]
 8003bbe:	f003 0303 	and.w	r3, r3, #3
 8003bc2:	2b01      	cmp	r3, #1
 8003bc4:	d005      	beq.n	8003bd2 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003bc6:	683b      	ldr	r3, [r7, #0]
 8003bc8:	685b      	ldr	r3, [r3, #4]
 8003bca:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003bce:	2b02      	cmp	r3, #2
 8003bd0:	d130      	bne.n	8003c34 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	689b      	ldr	r3, [r3, #8]
 8003bd6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003bd8:	69fb      	ldr	r3, [r7, #28]
 8003bda:	005b      	lsls	r3, r3, #1
 8003bdc:	2203      	movs	r2, #3
 8003bde:	fa02 f303 	lsl.w	r3, r2, r3
 8003be2:	43db      	mvns	r3, r3
 8003be4:	69ba      	ldr	r2, [r7, #24]
 8003be6:	4013      	ands	r3, r2
 8003be8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003bea:	683b      	ldr	r3, [r7, #0]
 8003bec:	68da      	ldr	r2, [r3, #12]
 8003bee:	69fb      	ldr	r3, [r7, #28]
 8003bf0:	005b      	lsls	r3, r3, #1
 8003bf2:	fa02 f303 	lsl.w	r3, r2, r3
 8003bf6:	69ba      	ldr	r2, [r7, #24]
 8003bf8:	4313      	orrs	r3, r2
 8003bfa:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	69ba      	ldr	r2, [r7, #24]
 8003c00:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	685b      	ldr	r3, [r3, #4]
 8003c06:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003c08:	2201      	movs	r2, #1
 8003c0a:	69fb      	ldr	r3, [r7, #28]
 8003c0c:	fa02 f303 	lsl.w	r3, r2, r3
 8003c10:	43db      	mvns	r3, r3
 8003c12:	69ba      	ldr	r2, [r7, #24]
 8003c14:	4013      	ands	r3, r2
 8003c16:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003c18:	683b      	ldr	r3, [r7, #0]
 8003c1a:	685b      	ldr	r3, [r3, #4]
 8003c1c:	091b      	lsrs	r3, r3, #4
 8003c1e:	f003 0201 	and.w	r2, r3, #1
 8003c22:	69fb      	ldr	r3, [r7, #28]
 8003c24:	fa02 f303 	lsl.w	r3, r2, r3
 8003c28:	69ba      	ldr	r2, [r7, #24]
 8003c2a:	4313      	orrs	r3, r2
 8003c2c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	69ba      	ldr	r2, [r7, #24]
 8003c32:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003c34:	683b      	ldr	r3, [r7, #0]
 8003c36:	685b      	ldr	r3, [r3, #4]
 8003c38:	f003 0303 	and.w	r3, r3, #3
 8003c3c:	2b03      	cmp	r3, #3
 8003c3e:	d017      	beq.n	8003c70 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	68db      	ldr	r3, [r3, #12]
 8003c44:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8003c46:	69fb      	ldr	r3, [r7, #28]
 8003c48:	005b      	lsls	r3, r3, #1
 8003c4a:	2203      	movs	r2, #3
 8003c4c:	fa02 f303 	lsl.w	r3, r2, r3
 8003c50:	43db      	mvns	r3, r3
 8003c52:	69ba      	ldr	r2, [r7, #24]
 8003c54:	4013      	ands	r3, r2
 8003c56:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003c58:	683b      	ldr	r3, [r7, #0]
 8003c5a:	689a      	ldr	r2, [r3, #8]
 8003c5c:	69fb      	ldr	r3, [r7, #28]
 8003c5e:	005b      	lsls	r3, r3, #1
 8003c60:	fa02 f303 	lsl.w	r3, r2, r3
 8003c64:	69ba      	ldr	r2, [r7, #24]
 8003c66:	4313      	orrs	r3, r2
 8003c68:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	69ba      	ldr	r2, [r7, #24]
 8003c6e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003c70:	683b      	ldr	r3, [r7, #0]
 8003c72:	685b      	ldr	r3, [r3, #4]
 8003c74:	f003 0303 	and.w	r3, r3, #3
 8003c78:	2b02      	cmp	r3, #2
 8003c7a:	d123      	bne.n	8003cc4 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003c7c:	69fb      	ldr	r3, [r7, #28]
 8003c7e:	08da      	lsrs	r2, r3, #3
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	3208      	adds	r2, #8
 8003c84:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003c88:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8003c8a:	69fb      	ldr	r3, [r7, #28]
 8003c8c:	f003 0307 	and.w	r3, r3, #7
 8003c90:	009b      	lsls	r3, r3, #2
 8003c92:	220f      	movs	r2, #15
 8003c94:	fa02 f303 	lsl.w	r3, r2, r3
 8003c98:	43db      	mvns	r3, r3
 8003c9a:	69ba      	ldr	r2, [r7, #24]
 8003c9c:	4013      	ands	r3, r2
 8003c9e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003ca0:	683b      	ldr	r3, [r7, #0]
 8003ca2:	691a      	ldr	r2, [r3, #16]
 8003ca4:	69fb      	ldr	r3, [r7, #28]
 8003ca6:	f003 0307 	and.w	r3, r3, #7
 8003caa:	009b      	lsls	r3, r3, #2
 8003cac:	fa02 f303 	lsl.w	r3, r2, r3
 8003cb0:	69ba      	ldr	r2, [r7, #24]
 8003cb2:	4313      	orrs	r3, r2
 8003cb4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003cb6:	69fb      	ldr	r3, [r7, #28]
 8003cb8:	08da      	lsrs	r2, r3, #3
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	3208      	adds	r2, #8
 8003cbe:	69b9      	ldr	r1, [r7, #24]
 8003cc0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	681b      	ldr	r3, [r3, #0]
 8003cc8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8003cca:	69fb      	ldr	r3, [r7, #28]
 8003ccc:	005b      	lsls	r3, r3, #1
 8003cce:	2203      	movs	r2, #3
 8003cd0:	fa02 f303 	lsl.w	r3, r2, r3
 8003cd4:	43db      	mvns	r3, r3
 8003cd6:	69ba      	ldr	r2, [r7, #24]
 8003cd8:	4013      	ands	r3, r2
 8003cda:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003cdc:	683b      	ldr	r3, [r7, #0]
 8003cde:	685b      	ldr	r3, [r3, #4]
 8003ce0:	f003 0203 	and.w	r2, r3, #3
 8003ce4:	69fb      	ldr	r3, [r7, #28]
 8003ce6:	005b      	lsls	r3, r3, #1
 8003ce8:	fa02 f303 	lsl.w	r3, r2, r3
 8003cec:	69ba      	ldr	r2, [r7, #24]
 8003cee:	4313      	orrs	r3, r2
 8003cf0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	69ba      	ldr	r2, [r7, #24]
 8003cf6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8003cf8:	683b      	ldr	r3, [r7, #0]
 8003cfa:	685b      	ldr	r3, [r3, #4]
 8003cfc:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8003d00:	2b00      	cmp	r3, #0
 8003d02:	f000 80c0 	beq.w	8003e86 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003d06:	2300      	movs	r3, #0
 8003d08:	60fb      	str	r3, [r7, #12]
 8003d0a:	4b66      	ldr	r3, [pc, #408]	@ (8003ea4 <HAL_GPIO_Init+0x324>)
 8003d0c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003d0e:	4a65      	ldr	r2, [pc, #404]	@ (8003ea4 <HAL_GPIO_Init+0x324>)
 8003d10:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8003d14:	6453      	str	r3, [r2, #68]	@ 0x44
 8003d16:	4b63      	ldr	r3, [pc, #396]	@ (8003ea4 <HAL_GPIO_Init+0x324>)
 8003d18:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003d1a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003d1e:	60fb      	str	r3, [r7, #12]
 8003d20:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003d22:	4a61      	ldr	r2, [pc, #388]	@ (8003ea8 <HAL_GPIO_Init+0x328>)
 8003d24:	69fb      	ldr	r3, [r7, #28]
 8003d26:	089b      	lsrs	r3, r3, #2
 8003d28:	3302      	adds	r3, #2
 8003d2a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003d2e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003d30:	69fb      	ldr	r3, [r7, #28]
 8003d32:	f003 0303 	and.w	r3, r3, #3
 8003d36:	009b      	lsls	r3, r3, #2
 8003d38:	220f      	movs	r2, #15
 8003d3a:	fa02 f303 	lsl.w	r3, r2, r3
 8003d3e:	43db      	mvns	r3, r3
 8003d40:	69ba      	ldr	r2, [r7, #24]
 8003d42:	4013      	ands	r3, r2
 8003d44:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	4a58      	ldr	r2, [pc, #352]	@ (8003eac <HAL_GPIO_Init+0x32c>)
 8003d4a:	4293      	cmp	r3, r2
 8003d4c:	d037      	beq.n	8003dbe <HAL_GPIO_Init+0x23e>
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	4a57      	ldr	r2, [pc, #348]	@ (8003eb0 <HAL_GPIO_Init+0x330>)
 8003d52:	4293      	cmp	r3, r2
 8003d54:	d031      	beq.n	8003dba <HAL_GPIO_Init+0x23a>
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	4a56      	ldr	r2, [pc, #344]	@ (8003eb4 <HAL_GPIO_Init+0x334>)
 8003d5a:	4293      	cmp	r3, r2
 8003d5c:	d02b      	beq.n	8003db6 <HAL_GPIO_Init+0x236>
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	4a55      	ldr	r2, [pc, #340]	@ (8003eb8 <HAL_GPIO_Init+0x338>)
 8003d62:	4293      	cmp	r3, r2
 8003d64:	d025      	beq.n	8003db2 <HAL_GPIO_Init+0x232>
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	4a54      	ldr	r2, [pc, #336]	@ (8003ebc <HAL_GPIO_Init+0x33c>)
 8003d6a:	4293      	cmp	r3, r2
 8003d6c:	d01f      	beq.n	8003dae <HAL_GPIO_Init+0x22e>
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	4a53      	ldr	r2, [pc, #332]	@ (8003ec0 <HAL_GPIO_Init+0x340>)
 8003d72:	4293      	cmp	r3, r2
 8003d74:	d019      	beq.n	8003daa <HAL_GPIO_Init+0x22a>
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	4a52      	ldr	r2, [pc, #328]	@ (8003ec4 <HAL_GPIO_Init+0x344>)
 8003d7a:	4293      	cmp	r3, r2
 8003d7c:	d013      	beq.n	8003da6 <HAL_GPIO_Init+0x226>
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	4a51      	ldr	r2, [pc, #324]	@ (8003ec8 <HAL_GPIO_Init+0x348>)
 8003d82:	4293      	cmp	r3, r2
 8003d84:	d00d      	beq.n	8003da2 <HAL_GPIO_Init+0x222>
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	4a50      	ldr	r2, [pc, #320]	@ (8003ecc <HAL_GPIO_Init+0x34c>)
 8003d8a:	4293      	cmp	r3, r2
 8003d8c:	d007      	beq.n	8003d9e <HAL_GPIO_Init+0x21e>
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	4a4f      	ldr	r2, [pc, #316]	@ (8003ed0 <HAL_GPIO_Init+0x350>)
 8003d92:	4293      	cmp	r3, r2
 8003d94:	d101      	bne.n	8003d9a <HAL_GPIO_Init+0x21a>
 8003d96:	2309      	movs	r3, #9
 8003d98:	e012      	b.n	8003dc0 <HAL_GPIO_Init+0x240>
 8003d9a:	230a      	movs	r3, #10
 8003d9c:	e010      	b.n	8003dc0 <HAL_GPIO_Init+0x240>
 8003d9e:	2308      	movs	r3, #8
 8003da0:	e00e      	b.n	8003dc0 <HAL_GPIO_Init+0x240>
 8003da2:	2307      	movs	r3, #7
 8003da4:	e00c      	b.n	8003dc0 <HAL_GPIO_Init+0x240>
 8003da6:	2306      	movs	r3, #6
 8003da8:	e00a      	b.n	8003dc0 <HAL_GPIO_Init+0x240>
 8003daa:	2305      	movs	r3, #5
 8003dac:	e008      	b.n	8003dc0 <HAL_GPIO_Init+0x240>
 8003dae:	2304      	movs	r3, #4
 8003db0:	e006      	b.n	8003dc0 <HAL_GPIO_Init+0x240>
 8003db2:	2303      	movs	r3, #3
 8003db4:	e004      	b.n	8003dc0 <HAL_GPIO_Init+0x240>
 8003db6:	2302      	movs	r3, #2
 8003db8:	e002      	b.n	8003dc0 <HAL_GPIO_Init+0x240>
 8003dba:	2301      	movs	r3, #1
 8003dbc:	e000      	b.n	8003dc0 <HAL_GPIO_Init+0x240>
 8003dbe:	2300      	movs	r3, #0
 8003dc0:	69fa      	ldr	r2, [r7, #28]
 8003dc2:	f002 0203 	and.w	r2, r2, #3
 8003dc6:	0092      	lsls	r2, r2, #2
 8003dc8:	4093      	lsls	r3, r2
 8003dca:	69ba      	ldr	r2, [r7, #24]
 8003dcc:	4313      	orrs	r3, r2
 8003dce:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003dd0:	4935      	ldr	r1, [pc, #212]	@ (8003ea8 <HAL_GPIO_Init+0x328>)
 8003dd2:	69fb      	ldr	r3, [r7, #28]
 8003dd4:	089b      	lsrs	r3, r3, #2
 8003dd6:	3302      	adds	r3, #2
 8003dd8:	69ba      	ldr	r2, [r7, #24]
 8003dda:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003dde:	4b3d      	ldr	r3, [pc, #244]	@ (8003ed4 <HAL_GPIO_Init+0x354>)
 8003de0:	689b      	ldr	r3, [r3, #8]
 8003de2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003de4:	693b      	ldr	r3, [r7, #16]
 8003de6:	43db      	mvns	r3, r3
 8003de8:	69ba      	ldr	r2, [r7, #24]
 8003dea:	4013      	ands	r3, r2
 8003dec:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003dee:	683b      	ldr	r3, [r7, #0]
 8003df0:	685b      	ldr	r3, [r3, #4]
 8003df2:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003df6:	2b00      	cmp	r3, #0
 8003df8:	d003      	beq.n	8003e02 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8003dfa:	69ba      	ldr	r2, [r7, #24]
 8003dfc:	693b      	ldr	r3, [r7, #16]
 8003dfe:	4313      	orrs	r3, r2
 8003e00:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003e02:	4a34      	ldr	r2, [pc, #208]	@ (8003ed4 <HAL_GPIO_Init+0x354>)
 8003e04:	69bb      	ldr	r3, [r7, #24]
 8003e06:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003e08:	4b32      	ldr	r3, [pc, #200]	@ (8003ed4 <HAL_GPIO_Init+0x354>)
 8003e0a:	68db      	ldr	r3, [r3, #12]
 8003e0c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003e0e:	693b      	ldr	r3, [r7, #16]
 8003e10:	43db      	mvns	r3, r3
 8003e12:	69ba      	ldr	r2, [r7, #24]
 8003e14:	4013      	ands	r3, r2
 8003e16:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003e18:	683b      	ldr	r3, [r7, #0]
 8003e1a:	685b      	ldr	r3, [r3, #4]
 8003e1c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003e20:	2b00      	cmp	r3, #0
 8003e22:	d003      	beq.n	8003e2c <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8003e24:	69ba      	ldr	r2, [r7, #24]
 8003e26:	693b      	ldr	r3, [r7, #16]
 8003e28:	4313      	orrs	r3, r2
 8003e2a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003e2c:	4a29      	ldr	r2, [pc, #164]	@ (8003ed4 <HAL_GPIO_Init+0x354>)
 8003e2e:	69bb      	ldr	r3, [r7, #24]
 8003e30:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8003e32:	4b28      	ldr	r3, [pc, #160]	@ (8003ed4 <HAL_GPIO_Init+0x354>)
 8003e34:	685b      	ldr	r3, [r3, #4]
 8003e36:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003e38:	693b      	ldr	r3, [r7, #16]
 8003e3a:	43db      	mvns	r3, r3
 8003e3c:	69ba      	ldr	r2, [r7, #24]
 8003e3e:	4013      	ands	r3, r2
 8003e40:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003e42:	683b      	ldr	r3, [r7, #0]
 8003e44:	685b      	ldr	r3, [r3, #4]
 8003e46:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003e4a:	2b00      	cmp	r3, #0
 8003e4c:	d003      	beq.n	8003e56 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8003e4e:	69ba      	ldr	r2, [r7, #24]
 8003e50:	693b      	ldr	r3, [r7, #16]
 8003e52:	4313      	orrs	r3, r2
 8003e54:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003e56:	4a1f      	ldr	r2, [pc, #124]	@ (8003ed4 <HAL_GPIO_Init+0x354>)
 8003e58:	69bb      	ldr	r3, [r7, #24]
 8003e5a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003e5c:	4b1d      	ldr	r3, [pc, #116]	@ (8003ed4 <HAL_GPIO_Init+0x354>)
 8003e5e:	681b      	ldr	r3, [r3, #0]
 8003e60:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003e62:	693b      	ldr	r3, [r7, #16]
 8003e64:	43db      	mvns	r3, r3
 8003e66:	69ba      	ldr	r2, [r7, #24]
 8003e68:	4013      	ands	r3, r2
 8003e6a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003e6c:	683b      	ldr	r3, [r7, #0]
 8003e6e:	685b      	ldr	r3, [r3, #4]
 8003e70:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003e74:	2b00      	cmp	r3, #0
 8003e76:	d003      	beq.n	8003e80 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8003e78:	69ba      	ldr	r2, [r7, #24]
 8003e7a:	693b      	ldr	r3, [r7, #16]
 8003e7c:	4313      	orrs	r3, r2
 8003e7e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003e80:	4a14      	ldr	r2, [pc, #80]	@ (8003ed4 <HAL_GPIO_Init+0x354>)
 8003e82:	69bb      	ldr	r3, [r7, #24]
 8003e84:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003e86:	69fb      	ldr	r3, [r7, #28]
 8003e88:	3301      	adds	r3, #1
 8003e8a:	61fb      	str	r3, [r7, #28]
 8003e8c:	69fb      	ldr	r3, [r7, #28]
 8003e8e:	2b0f      	cmp	r3, #15
 8003e90:	f67f ae84 	bls.w	8003b9c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003e94:	bf00      	nop
 8003e96:	bf00      	nop
 8003e98:	3724      	adds	r7, #36	@ 0x24
 8003e9a:	46bd      	mov	sp, r7
 8003e9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ea0:	4770      	bx	lr
 8003ea2:	bf00      	nop
 8003ea4:	40023800 	.word	0x40023800
 8003ea8:	40013800 	.word	0x40013800
 8003eac:	40020000 	.word	0x40020000
 8003eb0:	40020400 	.word	0x40020400
 8003eb4:	40020800 	.word	0x40020800
 8003eb8:	40020c00 	.word	0x40020c00
 8003ebc:	40021000 	.word	0x40021000
 8003ec0:	40021400 	.word	0x40021400
 8003ec4:	40021800 	.word	0x40021800
 8003ec8:	40021c00 	.word	0x40021c00
 8003ecc:	40022000 	.word	0x40022000
 8003ed0:	40022400 	.word	0x40022400
 8003ed4:	40013c00 	.word	0x40013c00

08003ed8 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8003ed8:	b480      	push	{r7}
 8003eda:	b087      	sub	sp, #28
 8003edc:	af00      	add	r7, sp, #0
 8003ede:	6078      	str	r0, [r7, #4]
 8003ee0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8003ee2:	2300      	movs	r3, #0
 8003ee4:	613b      	str	r3, [r7, #16]
  uint32_t iocurrent = 0x00U;
 8003ee6:	2300      	movs	r3, #0
 8003ee8:	60fb      	str	r3, [r7, #12]
  uint32_t tmp = 0x00U;
 8003eea:	2300      	movs	r3, #0
 8003eec:	60bb      	str	r3, [r7, #8]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  
  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003eee:	2300      	movs	r3, #0
 8003ef0:	617b      	str	r3, [r7, #20]
 8003ef2:	e0d9      	b.n	80040a8 <HAL_GPIO_DeInit+0x1d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003ef4:	2201      	movs	r2, #1
 8003ef6:	697b      	ldr	r3, [r7, #20]
 8003ef8:	fa02 f303 	lsl.w	r3, r2, r3
 8003efc:	613b      	str	r3, [r7, #16]
    /* Get the current IO position */
    iocurrent = (GPIO_Pin) & ioposition;
 8003efe:	683a      	ldr	r2, [r7, #0]
 8003f00:	693b      	ldr	r3, [r7, #16]
 8003f02:	4013      	ands	r3, r2
 8003f04:	60fb      	str	r3, [r7, #12]

    if(iocurrent == ioposition)
 8003f06:	68fa      	ldr	r2, [r7, #12]
 8003f08:	693b      	ldr	r3, [r7, #16]
 8003f0a:	429a      	cmp	r2, r3
 8003f0c:	f040 80c9 	bne.w	80040a2 <HAL_GPIO_DeInit+0x1ca>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      tmp = SYSCFG->EXTICR[position >> 2U];
 8003f10:	4a6b      	ldr	r2, [pc, #428]	@ (80040c0 <HAL_GPIO_DeInit+0x1e8>)
 8003f12:	697b      	ldr	r3, [r7, #20]
 8003f14:	089b      	lsrs	r3, r3, #2
 8003f16:	3302      	adds	r3, #2
 8003f18:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003f1c:	60bb      	str	r3, [r7, #8]
      tmp &= (0x0FU << (4U * (position & 0x03U)));
 8003f1e:	697b      	ldr	r3, [r7, #20]
 8003f20:	f003 0303 	and.w	r3, r3, #3
 8003f24:	009b      	lsls	r3, r3, #2
 8003f26:	220f      	movs	r2, #15
 8003f28:	fa02 f303 	lsl.w	r3, r2, r3
 8003f2c:	68ba      	ldr	r2, [r7, #8]
 8003f2e:	4013      	ands	r3, r2
 8003f30:	60bb      	str	r3, [r7, #8]
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U))))
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	4a63      	ldr	r2, [pc, #396]	@ (80040c4 <HAL_GPIO_DeInit+0x1ec>)
 8003f36:	4293      	cmp	r3, r2
 8003f38:	d037      	beq.n	8003faa <HAL_GPIO_DeInit+0xd2>
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	4a62      	ldr	r2, [pc, #392]	@ (80040c8 <HAL_GPIO_DeInit+0x1f0>)
 8003f3e:	4293      	cmp	r3, r2
 8003f40:	d031      	beq.n	8003fa6 <HAL_GPIO_DeInit+0xce>
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	4a61      	ldr	r2, [pc, #388]	@ (80040cc <HAL_GPIO_DeInit+0x1f4>)
 8003f46:	4293      	cmp	r3, r2
 8003f48:	d02b      	beq.n	8003fa2 <HAL_GPIO_DeInit+0xca>
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	4a60      	ldr	r2, [pc, #384]	@ (80040d0 <HAL_GPIO_DeInit+0x1f8>)
 8003f4e:	4293      	cmp	r3, r2
 8003f50:	d025      	beq.n	8003f9e <HAL_GPIO_DeInit+0xc6>
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	4a5f      	ldr	r2, [pc, #380]	@ (80040d4 <HAL_GPIO_DeInit+0x1fc>)
 8003f56:	4293      	cmp	r3, r2
 8003f58:	d01f      	beq.n	8003f9a <HAL_GPIO_DeInit+0xc2>
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	4a5e      	ldr	r2, [pc, #376]	@ (80040d8 <HAL_GPIO_DeInit+0x200>)
 8003f5e:	4293      	cmp	r3, r2
 8003f60:	d019      	beq.n	8003f96 <HAL_GPIO_DeInit+0xbe>
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	4a5d      	ldr	r2, [pc, #372]	@ (80040dc <HAL_GPIO_DeInit+0x204>)
 8003f66:	4293      	cmp	r3, r2
 8003f68:	d013      	beq.n	8003f92 <HAL_GPIO_DeInit+0xba>
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	4a5c      	ldr	r2, [pc, #368]	@ (80040e0 <HAL_GPIO_DeInit+0x208>)
 8003f6e:	4293      	cmp	r3, r2
 8003f70:	d00d      	beq.n	8003f8e <HAL_GPIO_DeInit+0xb6>
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	4a5b      	ldr	r2, [pc, #364]	@ (80040e4 <HAL_GPIO_DeInit+0x20c>)
 8003f76:	4293      	cmp	r3, r2
 8003f78:	d007      	beq.n	8003f8a <HAL_GPIO_DeInit+0xb2>
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	4a5a      	ldr	r2, [pc, #360]	@ (80040e8 <HAL_GPIO_DeInit+0x210>)
 8003f7e:	4293      	cmp	r3, r2
 8003f80:	d101      	bne.n	8003f86 <HAL_GPIO_DeInit+0xae>
 8003f82:	2309      	movs	r3, #9
 8003f84:	e012      	b.n	8003fac <HAL_GPIO_DeInit+0xd4>
 8003f86:	230a      	movs	r3, #10
 8003f88:	e010      	b.n	8003fac <HAL_GPIO_DeInit+0xd4>
 8003f8a:	2308      	movs	r3, #8
 8003f8c:	e00e      	b.n	8003fac <HAL_GPIO_DeInit+0xd4>
 8003f8e:	2307      	movs	r3, #7
 8003f90:	e00c      	b.n	8003fac <HAL_GPIO_DeInit+0xd4>
 8003f92:	2306      	movs	r3, #6
 8003f94:	e00a      	b.n	8003fac <HAL_GPIO_DeInit+0xd4>
 8003f96:	2305      	movs	r3, #5
 8003f98:	e008      	b.n	8003fac <HAL_GPIO_DeInit+0xd4>
 8003f9a:	2304      	movs	r3, #4
 8003f9c:	e006      	b.n	8003fac <HAL_GPIO_DeInit+0xd4>
 8003f9e:	2303      	movs	r3, #3
 8003fa0:	e004      	b.n	8003fac <HAL_GPIO_DeInit+0xd4>
 8003fa2:	2302      	movs	r3, #2
 8003fa4:	e002      	b.n	8003fac <HAL_GPIO_DeInit+0xd4>
 8003fa6:	2301      	movs	r3, #1
 8003fa8:	e000      	b.n	8003fac <HAL_GPIO_DeInit+0xd4>
 8003faa:	2300      	movs	r3, #0
 8003fac:	697a      	ldr	r2, [r7, #20]
 8003fae:	f002 0203 	and.w	r2, r2, #3
 8003fb2:	0092      	lsls	r2, r2, #2
 8003fb4:	4093      	lsls	r3, r2
 8003fb6:	68ba      	ldr	r2, [r7, #8]
 8003fb8:	429a      	cmp	r2, r3
 8003fba:	d132      	bne.n	8004022 <HAL_GPIO_DeInit+0x14a>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR &= ~((uint32_t)iocurrent);
 8003fbc:	4b4b      	ldr	r3, [pc, #300]	@ (80040ec <HAL_GPIO_DeInit+0x214>)
 8003fbe:	681a      	ldr	r2, [r3, #0]
 8003fc0:	68fb      	ldr	r3, [r7, #12]
 8003fc2:	43db      	mvns	r3, r3
 8003fc4:	4949      	ldr	r1, [pc, #292]	@ (80040ec <HAL_GPIO_DeInit+0x214>)
 8003fc6:	4013      	ands	r3, r2
 8003fc8:	600b      	str	r3, [r1, #0]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 8003fca:	4b48      	ldr	r3, [pc, #288]	@ (80040ec <HAL_GPIO_DeInit+0x214>)
 8003fcc:	685a      	ldr	r2, [r3, #4]
 8003fce:	68fb      	ldr	r3, [r7, #12]
 8003fd0:	43db      	mvns	r3, r3
 8003fd2:	4946      	ldr	r1, [pc, #280]	@ (80040ec <HAL_GPIO_DeInit+0x214>)
 8003fd4:	4013      	ands	r3, r2
 8003fd6:	604b      	str	r3, [r1, #4]
        
        /* Clear Rising Falling edge configuration */
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 8003fd8:	4b44      	ldr	r3, [pc, #272]	@ (80040ec <HAL_GPIO_DeInit+0x214>)
 8003fda:	68da      	ldr	r2, [r3, #12]
 8003fdc:	68fb      	ldr	r3, [r7, #12]
 8003fde:	43db      	mvns	r3, r3
 8003fe0:	4942      	ldr	r1, [pc, #264]	@ (80040ec <HAL_GPIO_DeInit+0x214>)
 8003fe2:	4013      	ands	r3, r2
 8003fe4:	60cb      	str	r3, [r1, #12]
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 8003fe6:	4b41      	ldr	r3, [pc, #260]	@ (80040ec <HAL_GPIO_DeInit+0x214>)
 8003fe8:	689a      	ldr	r2, [r3, #8]
 8003fea:	68fb      	ldr	r3, [r7, #12]
 8003fec:	43db      	mvns	r3, r3
 8003fee:	493f      	ldr	r1, [pc, #252]	@ (80040ec <HAL_GPIO_DeInit+0x214>)
 8003ff0:	4013      	ands	r3, r2
 8003ff2:	608b      	str	r3, [r1, #8]

        /* Configure the External Interrupt or event for the current IO */
        tmp = 0x0FU << (4U * (position & 0x03U));
 8003ff4:	697b      	ldr	r3, [r7, #20]
 8003ff6:	f003 0303 	and.w	r3, r3, #3
 8003ffa:	009b      	lsls	r3, r3, #2
 8003ffc:	220f      	movs	r2, #15
 8003ffe:	fa02 f303 	lsl.w	r3, r2, r3
 8004002:	60bb      	str	r3, [r7, #8]
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
 8004004:	4a2e      	ldr	r2, [pc, #184]	@ (80040c0 <HAL_GPIO_DeInit+0x1e8>)
 8004006:	697b      	ldr	r3, [r7, #20]
 8004008:	089b      	lsrs	r3, r3, #2
 800400a:	3302      	adds	r3, #2
 800400c:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8004010:	68bb      	ldr	r3, [r7, #8]
 8004012:	43da      	mvns	r2, r3
 8004014:	482a      	ldr	r0, [pc, #168]	@ (80040c0 <HAL_GPIO_DeInit+0x1e8>)
 8004016:	697b      	ldr	r3, [r7, #20]
 8004018:	089b      	lsrs	r3, r3, #2
 800401a:	400a      	ands	r2, r1
 800401c:	3302      	adds	r3, #2
 800401e:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floating Mode */
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	681a      	ldr	r2, [r3, #0]
 8004026:	697b      	ldr	r3, [r7, #20]
 8004028:	005b      	lsls	r3, r3, #1
 800402a:	2103      	movs	r1, #3
 800402c:	fa01 f303 	lsl.w	r3, r1, r3
 8004030:	43db      	mvns	r3, r3
 8004032:	401a      	ands	r2, r3
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8004038:	697b      	ldr	r3, [r7, #20]
 800403a:	08da      	lsrs	r2, r3, #3
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	3208      	adds	r2, #8
 8004040:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8004044:	697b      	ldr	r3, [r7, #20]
 8004046:	f003 0307 	and.w	r3, r3, #7
 800404a:	009b      	lsls	r3, r3, #2
 800404c:	220f      	movs	r2, #15
 800404e:	fa02 f303 	lsl.w	r3, r2, r3
 8004052:	43db      	mvns	r3, r3
 8004054:	697a      	ldr	r2, [r7, #20]
 8004056:	08d2      	lsrs	r2, r2, #3
 8004058:	4019      	ands	r1, r3
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	3208      	adds	r2, #8
 800405e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	68da      	ldr	r2, [r3, #12]
 8004066:	697b      	ldr	r3, [r7, #20]
 8004068:	005b      	lsls	r3, r3, #1
 800406a:	2103      	movs	r1, #3
 800406c:	fa01 f303 	lsl.w	r3, r1, r3
 8004070:	43db      	mvns	r3, r3
 8004072:	401a      	ands	r2, r3
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position) ;
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	685a      	ldr	r2, [r3, #4]
 800407c:	2101      	movs	r1, #1
 800407e:	697b      	ldr	r3, [r7, #20]
 8004080:	fa01 f303 	lsl.w	r3, r1, r3
 8004084:	43db      	mvns	r3, r3
 8004086:	401a      	ands	r2, r3
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	689a      	ldr	r2, [r3, #8]
 8004090:	697b      	ldr	r3, [r7, #20]
 8004092:	005b      	lsls	r3, r3, #1
 8004094:	2103      	movs	r1, #3
 8004096:	fa01 f303 	lsl.w	r3, r1, r3
 800409a:	43db      	mvns	r3, r3
 800409c:	401a      	ands	r2, r3
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	609a      	str	r2, [r3, #8]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80040a2:	697b      	ldr	r3, [r7, #20]
 80040a4:	3301      	adds	r3, #1
 80040a6:	617b      	str	r3, [r7, #20]
 80040a8:	697b      	ldr	r3, [r7, #20]
 80040aa:	2b0f      	cmp	r3, #15
 80040ac:	f67f af22 	bls.w	8003ef4 <HAL_GPIO_DeInit+0x1c>
    }
  }
}
 80040b0:	bf00      	nop
 80040b2:	bf00      	nop
 80040b4:	371c      	adds	r7, #28
 80040b6:	46bd      	mov	sp, r7
 80040b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040bc:	4770      	bx	lr
 80040be:	bf00      	nop
 80040c0:	40013800 	.word	0x40013800
 80040c4:	40020000 	.word	0x40020000
 80040c8:	40020400 	.word	0x40020400
 80040cc:	40020800 	.word	0x40020800
 80040d0:	40020c00 	.word	0x40020c00
 80040d4:	40021000 	.word	0x40021000
 80040d8:	40021400 	.word	0x40021400
 80040dc:	40021800 	.word	0x40021800
 80040e0:	40021c00 	.word	0x40021c00
 80040e4:	40022000 	.word	0x40022000
 80040e8:	40022400 	.word	0x40022400
 80040ec:	40013c00 	.word	0x40013c00

080040f0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80040f0:	b480      	push	{r7}
 80040f2:	b083      	sub	sp, #12
 80040f4:	af00      	add	r7, sp, #0
 80040f6:	6078      	str	r0, [r7, #4]
 80040f8:	460b      	mov	r3, r1
 80040fa:	807b      	strh	r3, [r7, #2]
 80040fc:	4613      	mov	r3, r2
 80040fe:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8004100:	787b      	ldrb	r3, [r7, #1]
 8004102:	2b00      	cmp	r3, #0
 8004104:	d003      	beq.n	800410e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8004106:	887a      	ldrh	r2, [r7, #2]
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800410c:	e003      	b.n	8004116 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800410e:	887b      	ldrh	r3, [r7, #2]
 8004110:	041a      	lsls	r2, r3, #16
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	619a      	str	r2, [r3, #24]
}
 8004116:	bf00      	nop
 8004118:	370c      	adds	r7, #12
 800411a:	46bd      	mov	sp, r7
 800411c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004120:	4770      	bx	lr
	...

08004124 <HAL_LTDC_Init>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_Init(LTDC_HandleTypeDef *hltdc)
{
 8004124:	b580      	push	{r7, lr}
 8004126:	b084      	sub	sp, #16
 8004128:	af00      	add	r7, sp, #0
 800412a:	6078      	str	r0, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;

  /* Check the LTDC peripheral state */
  if (hltdc == NULL)
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	2b00      	cmp	r3, #0
 8004130:	d101      	bne.n	8004136 <HAL_LTDC_Init+0x12>
  {
    return HAL_ERROR;
 8004132:	2301      	movs	r3, #1
 8004134:	e0bf      	b.n	80042b6 <HAL_LTDC_Init+0x192>
    }
    /* Init the low level hardware */
    hltdc->MspInitCallback(hltdc);
  }
#else
  if (hltdc->State == HAL_LTDC_STATE_RESET)
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	f893 30a1 	ldrb.w	r3, [r3, #161]	@ 0xa1
 800413c:	b2db      	uxtb	r3, r3
 800413e:	2b00      	cmp	r3, #0
 8004140:	d106      	bne.n	8004150 <HAL_LTDC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hltdc->Lock = HAL_UNLOCKED;
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	2200      	movs	r2, #0
 8004146:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0
    /* Init the low level hardware */
    HAL_LTDC_MspInit(hltdc);
 800414a:	6878      	ldr	r0, [r7, #4]
 800414c:	f7fd fef0 	bl	8001f30 <HAL_LTDC_MspInit>
  }
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	2202      	movs	r2, #2
 8004154:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  /* Configure the HS, VS, DE and PC polarity */
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	681b      	ldr	r3, [r3, #0]
 800415c:	699a      	ldr	r2, [r3, #24]
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	681b      	ldr	r3, [r3, #0]
 8004162:	f022 4270 	bic.w	r2, r2, #4026531840	@ 0xf0000000
 8004166:	619a      	str	r2, [r3, #24]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	681b      	ldr	r3, [r3, #0]
 800416c:	6999      	ldr	r1, [r3, #24]
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	685a      	ldr	r2, [r3, #4]
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	689b      	ldr	r3, [r3, #8]
 8004176:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	68db      	ldr	r3, [r3, #12]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 800417c:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	691b      	ldr	r3, [r3, #16]
 8004182:	431a      	orrs	r2, r3
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	681b      	ldr	r3, [r3, #0]
 8004188:	430a      	orrs	r2, r1
 800418a:	619a      	str	r2, [r3, #24]

  /* Set Synchronization size */
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	681b      	ldr	r3, [r3, #0]
 8004190:	6899      	ldr	r1, [r3, #8]
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	681a      	ldr	r2, [r3, #0]
 8004196:	4b4a      	ldr	r3, [pc, #296]	@ (80042c0 <HAL_LTDC_Init+0x19c>)
 8004198:	400b      	ands	r3, r1
 800419a:	6093      	str	r3, [r2, #8]
  tmp = (hltdc->Init.HorizontalSync << 16U);
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	695b      	ldr	r3, [r3, #20]
 80041a0:	041b      	lsls	r3, r3, #16
 80041a2:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	681b      	ldr	r3, [r3, #0]
 80041a8:	6899      	ldr	r1, [r3, #8]
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	699a      	ldr	r2, [r3, #24]
 80041ae:	68fb      	ldr	r3, [r7, #12]
 80041b0:	431a      	orrs	r2, r3
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	681b      	ldr	r3, [r3, #0]
 80041b6:	430a      	orrs	r2, r1
 80041b8:	609a      	str	r2, [r3, #8]

  /* Set Accumulated Back porch */
  hltdc->Instance->BPCR &= ~(LTDC_BPCR_AVBP | LTDC_BPCR_AHBP);
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	681b      	ldr	r3, [r3, #0]
 80041be:	68d9      	ldr	r1, [r3, #12]
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	681a      	ldr	r2, [r3, #0]
 80041c4:	4b3e      	ldr	r3, [pc, #248]	@ (80042c0 <HAL_LTDC_Init+0x19c>)
 80041c6:	400b      	ands	r3, r1
 80041c8:	60d3      	str	r3, [r2, #12]
  tmp = (hltdc->Init.AccumulatedHBP << 16U);
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	69db      	ldr	r3, [r3, #28]
 80041ce:	041b      	lsls	r3, r3, #16
 80041d0:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	681b      	ldr	r3, [r3, #0]
 80041d6:	68d9      	ldr	r1, [r3, #12]
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	6a1a      	ldr	r2, [r3, #32]
 80041dc:	68fb      	ldr	r3, [r7, #12]
 80041de:	431a      	orrs	r2, r3
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	681b      	ldr	r3, [r3, #0]
 80041e4:	430a      	orrs	r2, r1
 80041e6:	60da      	str	r2, [r3, #12]

  /* Set Accumulated Active Width */
  hltdc->Instance->AWCR &= ~(LTDC_AWCR_AAH | LTDC_AWCR_AAW);
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	681b      	ldr	r3, [r3, #0]
 80041ec:	6919      	ldr	r1, [r3, #16]
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	681a      	ldr	r2, [r3, #0]
 80041f2:	4b33      	ldr	r3, [pc, #204]	@ (80042c0 <HAL_LTDC_Init+0x19c>)
 80041f4:	400b      	ands	r3, r1
 80041f6:	6113      	str	r3, [r2, #16]
  tmp = (hltdc->Init.AccumulatedActiveW << 16U);
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80041fc:	041b      	lsls	r3, r3, #16
 80041fe:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->AWCR |= (tmp | hltdc->Init.AccumulatedActiveH);
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	681b      	ldr	r3, [r3, #0]
 8004204:	6919      	ldr	r1, [r3, #16]
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800420a:	68fb      	ldr	r3, [r7, #12]
 800420c:	431a      	orrs	r2, r3
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	681b      	ldr	r3, [r3, #0]
 8004212:	430a      	orrs	r2, r1
 8004214:	611a      	str	r2, [r3, #16]

  /* Set Total Width */
  hltdc->Instance->TWCR &= ~(LTDC_TWCR_TOTALH | LTDC_TWCR_TOTALW);
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	681b      	ldr	r3, [r3, #0]
 800421a:	6959      	ldr	r1, [r3, #20]
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	681a      	ldr	r2, [r3, #0]
 8004220:	4b27      	ldr	r3, [pc, #156]	@ (80042c0 <HAL_LTDC_Init+0x19c>)
 8004222:	400b      	ands	r3, r1
 8004224:	6153      	str	r3, [r2, #20]
  tmp = (hltdc->Init.TotalWidth << 16U);
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800422a:	041b      	lsls	r3, r3, #16
 800422c:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->TWCR |= (tmp | hltdc->Init.TotalHeigh);
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	681b      	ldr	r3, [r3, #0]
 8004232:	6959      	ldr	r1, [r3, #20]
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004238:	68fb      	ldr	r3, [r7, #12]
 800423a:	431a      	orrs	r2, r3
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	681b      	ldr	r3, [r3, #0]
 8004240:	430a      	orrs	r2, r1
 8004242:	615a      	str	r2, [r3, #20]

  /* Set the background color value */
  tmp = ((uint32_t)(hltdc->Init.Backcolor.Green) << 8U);
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800424a:	021b      	lsls	r3, r3, #8
 800424c:	60fb      	str	r3, [r7, #12]
  tmp1 = ((uint32_t)(hltdc->Init.Backcolor.Red) << 16U);
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	f893 3036 	ldrb.w	r3, [r3, #54]	@ 0x36
 8004254:	041b      	lsls	r3, r3, #16
 8004256:	60bb      	str	r3, [r7, #8]
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	681b      	ldr	r3, [r3, #0]
 800425c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	681b      	ldr	r3, [r3, #0]
 8004262:	f002 427f 	and.w	r2, r2, #4278190080	@ 0xff000000
 8004266:	62da      	str	r2, [r3, #44]	@ 0x2c
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	681b      	ldr	r3, [r3, #0]
 800426c:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 800426e:	68ba      	ldr	r2, [r7, #8]
 8004270:	68fb      	ldr	r3, [r7, #12]
 8004272:	4313      	orrs	r3, r2
 8004274:	687a      	ldr	r2, [r7, #4]
 8004276:	f892 2034 	ldrb.w	r2, [r2, #52]	@ 0x34
 800427a:	431a      	orrs	r2, r3
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	681b      	ldr	r3, [r3, #0]
 8004280:	430a      	orrs	r2, r1
 8004282:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable the Transfer Error and FIFO underrun interrupts */
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_TE | LTDC_IT_FU);
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	681b      	ldr	r3, [r3, #0]
 8004288:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	681b      	ldr	r3, [r3, #0]
 800428e:	f042 0206 	orr.w	r2, r2, #6
 8004292:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Enable LTDC by setting LTDCEN bit */
  __HAL_LTDC_ENABLE(hltdc);
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	681b      	ldr	r3, [r3, #0]
 8004298:	699a      	ldr	r2, [r3, #24]
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	681b      	ldr	r3, [r3, #0]
 800429e:	f042 0201 	orr.w	r2, r2, #1
 80042a2:	619a      	str	r2, [r3, #24]

  /* Initialize the error code */
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	2200      	movs	r2, #0
 80042a8:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4

  /* Initialize the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	2201      	movs	r2, #1
 80042b0:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  return HAL_OK;
 80042b4:	2300      	movs	r3, #0
}
 80042b6:	4618      	mov	r0, r3
 80042b8:	3710      	adds	r7, #16
 80042ba:	46bd      	mov	sp, r7
 80042bc:	bd80      	pop	{r7, pc}
 80042be:	bf00      	nop
 80042c0:	f000f800 	.word	0xf000f800

080042c4 <HAL_LTDC_ConfigLayer>:
  *                    This parameter can be one of the following values:
  *                    LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_ConfigLayer(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 80042c4:	b5b0      	push	{r4, r5, r7, lr}
 80042c6:	b084      	sub	sp, #16
 80042c8:	af00      	add	r7, sp, #0
 80042ca:	60f8      	str	r0, [r7, #12]
 80042cc:	60b9      	str	r1, [r7, #8]
 80042ce:	607a      	str	r2, [r7, #4]
  assert_param(IS_LTDC_BLENDING_FACTOR2(pLayerCfg->BlendingFactor2));
  assert_param(IS_LTDC_CFBLL(pLayerCfg->ImageWidth));
  assert_param(IS_LTDC_CFBLNBR(pLayerCfg->ImageHeight));

  /* Process locked */
  __HAL_LOCK(hltdc);
 80042d0:	68fb      	ldr	r3, [r7, #12]
 80042d2:	f893 30a0 	ldrb.w	r3, [r3, #160]	@ 0xa0
 80042d6:	2b01      	cmp	r3, #1
 80042d8:	d101      	bne.n	80042de <HAL_LTDC_ConfigLayer+0x1a>
 80042da:	2302      	movs	r3, #2
 80042dc:	e02c      	b.n	8004338 <HAL_LTDC_ConfigLayer+0x74>
 80042de:	68fb      	ldr	r3, [r7, #12]
 80042e0:	2201      	movs	r2, #1
 80042e2:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 80042e6:	68fb      	ldr	r3, [r7, #12]
 80042e8:	2202      	movs	r2, #2
 80042ea:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  /* Copy new layer configuration into handle structure */
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 80042ee:	68fa      	ldr	r2, [r7, #12]
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	2134      	movs	r1, #52	@ 0x34
 80042f4:	fb01 f303 	mul.w	r3, r1, r3
 80042f8:	4413      	add	r3, r2
 80042fa:	f103 0238 	add.w	r2, r3, #56	@ 0x38
 80042fe:	68bb      	ldr	r3, [r7, #8]
 8004300:	4614      	mov	r4, r2
 8004302:	461d      	mov	r5, r3
 8004304:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8004306:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8004308:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800430a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800430c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800430e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8004310:	682b      	ldr	r3, [r5, #0]
 8004312:	6023      	str	r3, [r4, #0]

  /* Configure the LTDC Layer */
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 8004314:	687a      	ldr	r2, [r7, #4]
 8004316:	68b9      	ldr	r1, [r7, #8]
 8004318:	68f8      	ldr	r0, [r7, #12]
 800431a:	f000 f83b 	bl	8004394 <LTDC_SetConfig>

  /* Set the Immediate Reload type */
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 800431e:	68fb      	ldr	r3, [r7, #12]
 8004320:	681b      	ldr	r3, [r3, #0]
 8004322:	2201      	movs	r2, #1
 8004324:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Initialize the LTDC state*/
  hltdc->State  = HAL_LTDC_STATE_READY;
 8004326:	68fb      	ldr	r3, [r7, #12]
 8004328:	2201      	movs	r2, #1
 800432a:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 800432e:	68fb      	ldr	r3, [r7, #12]
 8004330:	2200      	movs	r2, #0
 8004332:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0

  return HAL_OK;
 8004336:	2300      	movs	r3, #0
}
 8004338:	4618      	mov	r0, r3
 800433a:	3710      	adds	r7, #16
 800433c:	46bd      	mov	sp, r7
 800433e:	bdb0      	pop	{r4, r5, r7, pc}

08004340 <HAL_LTDC_EnableDither>:
  *                the configuration information for the LTDC.
  * @retval  HAL status
  */

HAL_StatusTypeDef HAL_LTDC_EnableDither(LTDC_HandleTypeDef *hltdc)
{
 8004340:	b480      	push	{r7}
 8004342:	b083      	sub	sp, #12
 8004344:	af00      	add	r7, sp, #0
 8004346:	6078      	str	r0, [r7, #4]
  /* Process locked */
  __HAL_LOCK(hltdc);
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	f893 30a0 	ldrb.w	r3, [r3, #160]	@ 0xa0
 800434e:	2b01      	cmp	r3, #1
 8004350:	d101      	bne.n	8004356 <HAL_LTDC_EnableDither+0x16>
 8004352:	2302      	movs	r3, #2
 8004354:	e016      	b.n	8004384 <HAL_LTDC_EnableDither+0x44>
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	2201      	movs	r2, #1
 800435a:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	2202      	movs	r2, #2
 8004362:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  /* Enable Dither by setting DTEN bit */
  LTDC->GCR |= (uint32_t)LTDC_GCR_DEN;
 8004366:	4b0a      	ldr	r3, [pc, #40]	@ (8004390 <HAL_LTDC_EnableDither+0x50>)
 8004368:	699b      	ldr	r3, [r3, #24]
 800436a:	4a09      	ldr	r2, [pc, #36]	@ (8004390 <HAL_LTDC_EnableDither+0x50>)
 800436c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004370:	6193      	str	r3, [r2, #24]

  /* Change the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	2201      	movs	r2, #1
 8004376:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	2200      	movs	r2, #0
 800437e:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0

  return HAL_OK;
 8004382:	2300      	movs	r3, #0
}
 8004384:	4618      	mov	r0, r3
 8004386:	370c      	adds	r7, #12
 8004388:	46bd      	mov	sp, r7
 800438a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800438e:	4770      	bx	lr
 8004390:	40016800 	.word	0x40016800

08004394 <LTDC_SetConfig>:
  * @param  LayerIdx  LTDC Layer index.
  *                   This parameter can be one of the following values: LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval None
  */
static void LTDC_SetConfig(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 8004394:	b480      	push	{r7}
 8004396:	b089      	sub	sp, #36	@ 0x24
 8004398:	af00      	add	r7, sp, #0
 800439a:	60f8      	str	r0, [r7, #12]
 800439c:	60b9      	str	r1, [r7, #8]
 800439e:	607a      	str	r2, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;
  uint32_t tmp2;

  /* Configure the horizontal start and stop position */
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 80043a0:	68bb      	ldr	r3, [r7, #8]
 80043a2:	685a      	ldr	r2, [r3, #4]
 80043a4:	68fb      	ldr	r3, [r7, #12]
 80043a6:	681b      	ldr	r3, [r3, #0]
 80043a8:	68db      	ldr	r3, [r3, #12]
 80043aa:	0c1b      	lsrs	r3, r3, #16
 80043ac:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80043b0:	4413      	add	r3, r2
 80043b2:	041b      	lsls	r3, r3, #16
 80043b4:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 80043b6:	68fb      	ldr	r3, [r7, #12]
 80043b8:	681b      	ldr	r3, [r3, #0]
 80043ba:	461a      	mov	r2, r3
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	01db      	lsls	r3, r3, #7
 80043c0:	4413      	add	r3, r2
 80043c2:	3384      	adds	r3, #132	@ 0x84
 80043c4:	685b      	ldr	r3, [r3, #4]
 80043c6:	68fa      	ldr	r2, [r7, #12]
 80043c8:	6812      	ldr	r2, [r2, #0]
 80043ca:	4611      	mov	r1, r2
 80043cc:	687a      	ldr	r2, [r7, #4]
 80043ce:	01d2      	lsls	r2, r2, #7
 80043d0:	440a      	add	r2, r1
 80043d2:	3284      	adds	r2, #132	@ 0x84
 80043d4:	f403 4370 	and.w	r3, r3, #61440	@ 0xf000
 80043d8:	6053      	str	r3, [r2, #4]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 80043da:	68bb      	ldr	r3, [r7, #8]
 80043dc:	681a      	ldr	r2, [r3, #0]
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 80043de:	68fb      	ldr	r3, [r7, #12]
 80043e0:	681b      	ldr	r3, [r3, #0]
 80043e2:	68db      	ldr	r3, [r3, #12]
 80043e4:	0c1b      	lsrs	r3, r3, #16
 80043e6:	f3c3 030b 	ubfx	r3, r3, #0, #12
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 80043ea:	4413      	add	r3, r2
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 80043ec:	1c5a      	adds	r2, r3, #1
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 80043ee:	68fb      	ldr	r3, [r7, #12]
 80043f0:	681b      	ldr	r3, [r3, #0]
 80043f2:	4619      	mov	r1, r3
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	01db      	lsls	r3, r3, #7
 80043f8:	440b      	add	r3, r1
 80043fa:	3384      	adds	r3, #132	@ 0x84
 80043fc:	4619      	mov	r1, r3
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 80043fe:	69fb      	ldr	r3, [r7, #28]
 8004400:	4313      	orrs	r3, r2
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8004402:	604b      	str	r3, [r1, #4]

  /* Configure the vertical start and stop position */
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
 8004404:	68bb      	ldr	r3, [r7, #8]
 8004406:	68da      	ldr	r2, [r3, #12]
 8004408:	68fb      	ldr	r3, [r7, #12]
 800440a:	681b      	ldr	r3, [r3, #0]
 800440c:	68db      	ldr	r3, [r3, #12]
 800440e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8004412:	4413      	add	r3, r2
 8004414:	041b      	lsls	r3, r3, #16
 8004416:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
 8004418:	68fb      	ldr	r3, [r7, #12]
 800441a:	681b      	ldr	r3, [r3, #0]
 800441c:	461a      	mov	r2, r3
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	01db      	lsls	r3, r3, #7
 8004422:	4413      	add	r3, r2
 8004424:	3384      	adds	r3, #132	@ 0x84
 8004426:	689b      	ldr	r3, [r3, #8]
 8004428:	68fa      	ldr	r2, [r7, #12]
 800442a:	6812      	ldr	r2, [r2, #0]
 800442c:	4611      	mov	r1, r2
 800442e:	687a      	ldr	r2, [r7, #4]
 8004430:	01d2      	lsls	r2, r2, #7
 8004432:	440a      	add	r2, r1
 8004434:	3284      	adds	r2, #132	@ 0x84
 8004436:	f403 4370 	and.w	r3, r3, #61440	@ 0xf000
 800443a:	6093      	str	r3, [r2, #8]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
 800443c:	68bb      	ldr	r3, [r7, #8]
 800443e:	689a      	ldr	r2, [r3, #8]
 8004440:	68fb      	ldr	r3, [r7, #12]
 8004442:	681b      	ldr	r3, [r3, #0]
 8004444:	68db      	ldr	r3, [r3, #12]
 8004446:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800444a:	4413      	add	r3, r2
 800444c:	1c5a      	adds	r2, r3, #1
 800444e:	68fb      	ldr	r3, [r7, #12]
 8004450:	681b      	ldr	r3, [r3, #0]
 8004452:	4619      	mov	r1, r3
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	01db      	lsls	r3, r3, #7
 8004458:	440b      	add	r3, r1
 800445a:	3384      	adds	r3, #132	@ 0x84
 800445c:	4619      	mov	r1, r3
 800445e:	69fb      	ldr	r3, [r7, #28]
 8004460:	4313      	orrs	r3, r2
 8004462:	608b      	str	r3, [r1, #8]

  /* Specifies the pixel format */
  LTDC_LAYER(hltdc, LayerIdx)->PFCR &= ~(LTDC_LxPFCR_PF);
 8004464:	68fb      	ldr	r3, [r7, #12]
 8004466:	681b      	ldr	r3, [r3, #0]
 8004468:	461a      	mov	r2, r3
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	01db      	lsls	r3, r3, #7
 800446e:	4413      	add	r3, r2
 8004470:	3384      	adds	r3, #132	@ 0x84
 8004472:	691b      	ldr	r3, [r3, #16]
 8004474:	68fa      	ldr	r2, [r7, #12]
 8004476:	6812      	ldr	r2, [r2, #0]
 8004478:	4611      	mov	r1, r2
 800447a:	687a      	ldr	r2, [r7, #4]
 800447c:	01d2      	lsls	r2, r2, #7
 800447e:	440a      	add	r2, r1
 8004480:	3284      	adds	r2, #132	@ 0x84
 8004482:	f023 0307 	bic.w	r3, r3, #7
 8004486:	6113      	str	r3, [r2, #16]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 8004488:	68fb      	ldr	r3, [r7, #12]
 800448a:	681b      	ldr	r3, [r3, #0]
 800448c:	461a      	mov	r2, r3
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	01db      	lsls	r3, r3, #7
 8004492:	4413      	add	r3, r2
 8004494:	3384      	adds	r3, #132	@ 0x84
 8004496:	461a      	mov	r2, r3
 8004498:	68bb      	ldr	r3, [r7, #8]
 800449a:	691b      	ldr	r3, [r3, #16]
 800449c:	6113      	str	r3, [r2, #16]

  /* Configure the default color values */
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8U);
 800449e:	68bb      	ldr	r3, [r7, #8]
 80044a0:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 80044a4:	021b      	lsls	r3, r3, #8
 80044a6:	61fb      	str	r3, [r7, #28]
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16U);
 80044a8:	68bb      	ldr	r3, [r7, #8]
 80044aa:	f893 3032 	ldrb.w	r3, [r3, #50]	@ 0x32
 80044ae:	041b      	lsls	r3, r3, #16
 80044b0:	61bb      	str	r3, [r7, #24]
  tmp2 = (pLayerCfg->Alpha0 << 24U);
 80044b2:	68bb      	ldr	r3, [r7, #8]
 80044b4:	699b      	ldr	r3, [r3, #24]
 80044b6:	061b      	lsls	r3, r3, #24
 80044b8:	617b      	str	r3, [r7, #20]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED |
 80044ba:	68fb      	ldr	r3, [r7, #12]
 80044bc:	681b      	ldr	r3, [r3, #0]
 80044be:	461a      	mov	r2, r3
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	01db      	lsls	r3, r3, #7
 80044c4:	4413      	add	r3, r2
 80044c6:	3384      	adds	r3, #132	@ 0x84
 80044c8:	699b      	ldr	r3, [r3, #24]
 80044ca:	68fb      	ldr	r3, [r7, #12]
 80044cc:	681b      	ldr	r3, [r3, #0]
 80044ce:	461a      	mov	r2, r3
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	01db      	lsls	r3, r3, #7
 80044d4:	4413      	add	r3, r2
 80044d6:	3384      	adds	r3, #132	@ 0x84
 80044d8:	461a      	mov	r2, r3
 80044da:	2300      	movs	r3, #0
 80044dc:	6193      	str	r3, [r2, #24]
                                         LTDC_LxDCCR_DCALPHA);
  LTDC_LAYER(hltdc, LayerIdx)->DCCR = (pLayerCfg->Backcolor.Blue | tmp | tmp1 | tmp2);
 80044de:	68bb      	ldr	r3, [r7, #8]
 80044e0:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 80044e4:	461a      	mov	r2, r3
 80044e6:	69fb      	ldr	r3, [r7, #28]
 80044e8:	431a      	orrs	r2, r3
 80044ea:	69bb      	ldr	r3, [r7, #24]
 80044ec:	431a      	orrs	r2, r3
 80044ee:	68fb      	ldr	r3, [r7, #12]
 80044f0:	681b      	ldr	r3, [r3, #0]
 80044f2:	4619      	mov	r1, r3
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	01db      	lsls	r3, r3, #7
 80044f8:	440b      	add	r3, r1
 80044fa:	3384      	adds	r3, #132	@ 0x84
 80044fc:	4619      	mov	r1, r3
 80044fe:	697b      	ldr	r3, [r7, #20]
 8004500:	4313      	orrs	r3, r2
 8004502:	618b      	str	r3, [r1, #24]

  /* Specifies the constant alpha value */
  LTDC_LAYER(hltdc, LayerIdx)->CACR &= ~(LTDC_LxCACR_CONSTA);
 8004504:	68fb      	ldr	r3, [r7, #12]
 8004506:	681b      	ldr	r3, [r3, #0]
 8004508:	461a      	mov	r2, r3
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	01db      	lsls	r3, r3, #7
 800450e:	4413      	add	r3, r2
 8004510:	3384      	adds	r3, #132	@ 0x84
 8004512:	695b      	ldr	r3, [r3, #20]
 8004514:	68fa      	ldr	r2, [r7, #12]
 8004516:	6812      	ldr	r2, [r2, #0]
 8004518:	4611      	mov	r1, r2
 800451a:	687a      	ldr	r2, [r7, #4]
 800451c:	01d2      	lsls	r2, r2, #7
 800451e:	440a      	add	r2, r1
 8004520:	3284      	adds	r2, #132	@ 0x84
 8004522:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8004526:	6153      	str	r3, [r2, #20]
  LTDC_LAYER(hltdc, LayerIdx)->CACR = (pLayerCfg->Alpha);
 8004528:	68fb      	ldr	r3, [r7, #12]
 800452a:	681b      	ldr	r3, [r3, #0]
 800452c:	461a      	mov	r2, r3
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	01db      	lsls	r3, r3, #7
 8004532:	4413      	add	r3, r2
 8004534:	3384      	adds	r3, #132	@ 0x84
 8004536:	461a      	mov	r2, r3
 8004538:	68bb      	ldr	r3, [r7, #8]
 800453a:	695b      	ldr	r3, [r3, #20]
 800453c:	6153      	str	r3, [r2, #20]

  /* Specifies the blending factors */
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
 800453e:	68fb      	ldr	r3, [r7, #12]
 8004540:	681b      	ldr	r3, [r3, #0]
 8004542:	461a      	mov	r2, r3
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	01db      	lsls	r3, r3, #7
 8004548:	4413      	add	r3, r2
 800454a:	3384      	adds	r3, #132	@ 0x84
 800454c:	69db      	ldr	r3, [r3, #28]
 800454e:	68fa      	ldr	r2, [r7, #12]
 8004550:	6812      	ldr	r2, [r2, #0]
 8004552:	4611      	mov	r1, r2
 8004554:	687a      	ldr	r2, [r7, #4]
 8004556:	01d2      	lsls	r2, r2, #7
 8004558:	440a      	add	r2, r1
 800455a:	3284      	adds	r2, #132	@ 0x84
 800455c:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 8004560:	f023 0307 	bic.w	r3, r3, #7
 8004564:	61d3      	str	r3, [r2, #28]
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);
 8004566:	68bb      	ldr	r3, [r7, #8]
 8004568:	69da      	ldr	r2, [r3, #28]
 800456a:	68bb      	ldr	r3, [r7, #8]
 800456c:	6a1b      	ldr	r3, [r3, #32]
 800456e:	68f9      	ldr	r1, [r7, #12]
 8004570:	6809      	ldr	r1, [r1, #0]
 8004572:	4608      	mov	r0, r1
 8004574:	6879      	ldr	r1, [r7, #4]
 8004576:	01c9      	lsls	r1, r1, #7
 8004578:	4401      	add	r1, r0
 800457a:	3184      	adds	r1, #132	@ 0x84
 800457c:	4313      	orrs	r3, r2
 800457e:	61cb      	str	r3, [r1, #28]

  /* Configure the color frame buffer start address */
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR &= ~(LTDC_LxCFBAR_CFBADD);
 8004580:	68fb      	ldr	r3, [r7, #12]
 8004582:	681b      	ldr	r3, [r3, #0]
 8004584:	461a      	mov	r2, r3
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	01db      	lsls	r3, r3, #7
 800458a:	4413      	add	r3, r2
 800458c:	3384      	adds	r3, #132	@ 0x84
 800458e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004590:	68fb      	ldr	r3, [r7, #12]
 8004592:	681b      	ldr	r3, [r3, #0]
 8004594:	461a      	mov	r2, r3
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	01db      	lsls	r3, r3, #7
 800459a:	4413      	add	r3, r2
 800459c:	3384      	adds	r3, #132	@ 0x84
 800459e:	461a      	mov	r2, r3
 80045a0:	2300      	movs	r3, #0
 80045a2:	6293      	str	r3, [r2, #40]	@ 0x28
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR = (pLayerCfg->FBStartAdress);
 80045a4:	68fb      	ldr	r3, [r7, #12]
 80045a6:	681b      	ldr	r3, [r3, #0]
 80045a8:	461a      	mov	r2, r3
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	01db      	lsls	r3, r3, #7
 80045ae:	4413      	add	r3, r2
 80045b0:	3384      	adds	r3, #132	@ 0x84
 80045b2:	461a      	mov	r2, r3
 80045b4:	68bb      	ldr	r3, [r7, #8]
 80045b6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80045b8:	6293      	str	r3, [r2, #40]	@ 0x28

  if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 80045ba:	68bb      	ldr	r3, [r7, #8]
 80045bc:	691b      	ldr	r3, [r3, #16]
 80045be:	2b00      	cmp	r3, #0
 80045c0:	d102      	bne.n	80045c8 <LTDC_SetConfig+0x234>
  {
    tmp = 4U;
 80045c2:	2304      	movs	r3, #4
 80045c4:	61fb      	str	r3, [r7, #28]
 80045c6:	e01b      	b.n	8004600 <LTDC_SetConfig+0x26c>
  }
  else if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB888)
 80045c8:	68bb      	ldr	r3, [r7, #8]
 80045ca:	691b      	ldr	r3, [r3, #16]
 80045cc:	2b01      	cmp	r3, #1
 80045ce:	d102      	bne.n	80045d6 <LTDC_SetConfig+0x242>
  {
    tmp = 3U;
 80045d0:	2303      	movs	r3, #3
 80045d2:	61fb      	str	r3, [r7, #28]
 80045d4:	e014      	b.n	8004600 <LTDC_SetConfig+0x26c>
  }
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 80045d6:	68bb      	ldr	r3, [r7, #8]
 80045d8:	691b      	ldr	r3, [r3, #16]
 80045da:	2b04      	cmp	r3, #4
 80045dc:	d00b      	beq.n	80045f6 <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 80045de:	68bb      	ldr	r3, [r7, #8]
 80045e0:	691b      	ldr	r3, [r3, #16]
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 80045e2:	2b02      	cmp	r3, #2
 80045e4:	d007      	beq.n	80045f6 <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 80045e6:	68bb      	ldr	r3, [r7, #8]
 80045e8:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 80045ea:	2b03      	cmp	r3, #3
 80045ec:	d003      	beq.n	80045f6 <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_AL88))
 80045ee:	68bb      	ldr	r3, [r7, #8]
 80045f0:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 80045f2:	2b07      	cmp	r3, #7
 80045f4:	d102      	bne.n	80045fc <LTDC_SetConfig+0x268>
  {
    tmp = 2U;
 80045f6:	2302      	movs	r3, #2
 80045f8:	61fb      	str	r3, [r7, #28]
 80045fa:	e001      	b.n	8004600 <LTDC_SetConfig+0x26c>
  }
  else
  {
    tmp = 1U;
 80045fc:	2301      	movs	r3, #1
 80045fe:	61fb      	str	r3, [r7, #28]
  }

  /* Configure the color frame buffer pitch in byte */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 8004600:	68fb      	ldr	r3, [r7, #12]
 8004602:	681b      	ldr	r3, [r3, #0]
 8004604:	461a      	mov	r2, r3
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	01db      	lsls	r3, r3, #7
 800460a:	4413      	add	r3, r2
 800460c:	3384      	adds	r3, #132	@ 0x84
 800460e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004610:	68fa      	ldr	r2, [r7, #12]
 8004612:	6812      	ldr	r2, [r2, #0]
 8004614:	4611      	mov	r1, r2
 8004616:	687a      	ldr	r2, [r7, #4]
 8004618:	01d2      	lsls	r2, r2, #7
 800461a:	440a      	add	r2, r1
 800461c:	3284      	adds	r2, #132	@ 0x84
 800461e:	f003 23e0 	and.w	r3, r3, #3758153728	@ 0xe000e000
 8004622:	62d3      	str	r3, [r2, #44]	@ 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | \
 8004624:	68bb      	ldr	r3, [r7, #8]
 8004626:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004628:	69fa      	ldr	r2, [r7, #28]
 800462a:	fb02 f303 	mul.w	r3, r2, r3
 800462e:	041a      	lsls	r2, r3, #16
                                         (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 3U));
 8004630:	68bb      	ldr	r3, [r7, #8]
 8004632:	6859      	ldr	r1, [r3, #4]
 8004634:	68bb      	ldr	r3, [r7, #8]
 8004636:	681b      	ldr	r3, [r3, #0]
 8004638:	1acb      	subs	r3, r1, r3
 800463a:	69f9      	ldr	r1, [r7, #28]
 800463c:	fb01 f303 	mul.w	r3, r1, r3
 8004640:	3303      	adds	r3, #3
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | \
 8004642:	68f9      	ldr	r1, [r7, #12]
 8004644:	6809      	ldr	r1, [r1, #0]
 8004646:	4608      	mov	r0, r1
 8004648:	6879      	ldr	r1, [r7, #4]
 800464a:	01c9      	lsls	r1, r1, #7
 800464c:	4401      	add	r1, r0
 800464e:	3184      	adds	r1, #132	@ 0x84
 8004650:	4313      	orrs	r3, r2
 8004652:	62cb      	str	r3, [r1, #44]	@ 0x2c
  /* Configure the frame buffer line number */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
 8004654:	68fb      	ldr	r3, [r7, #12]
 8004656:	681b      	ldr	r3, [r3, #0]
 8004658:	461a      	mov	r2, r3
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	01db      	lsls	r3, r3, #7
 800465e:	4413      	add	r3, r2
 8004660:	3384      	adds	r3, #132	@ 0x84
 8004662:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004664:	68fa      	ldr	r2, [r7, #12]
 8004666:	6812      	ldr	r2, [r2, #0]
 8004668:	4611      	mov	r1, r2
 800466a:	687a      	ldr	r2, [r7, #4]
 800466c:	01d2      	lsls	r2, r2, #7
 800466e:	440a      	add	r2, r1
 8004670:	3284      	adds	r2, #132	@ 0x84
 8004672:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 8004676:	f023 0307 	bic.w	r3, r3, #7
 800467a:	6313      	str	r3, [r2, #48]	@ 0x30
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 800467c:	68fb      	ldr	r3, [r7, #12]
 800467e:	681b      	ldr	r3, [r3, #0]
 8004680:	461a      	mov	r2, r3
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	01db      	lsls	r3, r3, #7
 8004686:	4413      	add	r3, r2
 8004688:	3384      	adds	r3, #132	@ 0x84
 800468a:	461a      	mov	r2, r3
 800468c:	68bb      	ldr	r3, [r7, #8]
 800468e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004690:	6313      	str	r3, [r2, #48]	@ 0x30

  /* Enable LTDC_Layer by setting LEN bit */
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_LEN;
 8004692:	68fb      	ldr	r3, [r7, #12]
 8004694:	681b      	ldr	r3, [r3, #0]
 8004696:	461a      	mov	r2, r3
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	01db      	lsls	r3, r3, #7
 800469c:	4413      	add	r3, r2
 800469e:	3384      	adds	r3, #132	@ 0x84
 80046a0:	681b      	ldr	r3, [r3, #0]
 80046a2:	68fa      	ldr	r2, [r7, #12]
 80046a4:	6812      	ldr	r2, [r2, #0]
 80046a6:	4611      	mov	r1, r2
 80046a8:	687a      	ldr	r2, [r7, #4]
 80046aa:	01d2      	lsls	r2, r2, #7
 80046ac:	440a      	add	r2, r1
 80046ae:	3284      	adds	r2, #132	@ 0x84
 80046b0:	f043 0301 	orr.w	r3, r3, #1
 80046b4:	6013      	str	r3, [r2, #0]
}
 80046b6:	bf00      	nop
 80046b8:	3724      	adds	r7, #36	@ 0x24
 80046ba:	46bd      	mov	sp, r7
 80046bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046c0:	4770      	bx	lr
	...

080046c4 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80046c4:	b580      	push	{r7, lr}
 80046c6:	b086      	sub	sp, #24
 80046c8:	af00      	add	r7, sp, #0
 80046ca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	2b00      	cmp	r3, #0
 80046d0:	d101      	bne.n	80046d6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80046d2:	2301      	movs	r3, #1
 80046d4:	e267      	b.n	8004ba6 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	681b      	ldr	r3, [r3, #0]
 80046da:	f003 0301 	and.w	r3, r3, #1
 80046de:	2b00      	cmp	r3, #0
 80046e0:	d075      	beq.n	80047ce <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 80046e2:	4b88      	ldr	r3, [pc, #544]	@ (8004904 <HAL_RCC_OscConfig+0x240>)
 80046e4:	689b      	ldr	r3, [r3, #8]
 80046e6:	f003 030c 	and.w	r3, r3, #12
 80046ea:	2b04      	cmp	r3, #4
 80046ec:	d00c      	beq.n	8004708 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80046ee:	4b85      	ldr	r3, [pc, #532]	@ (8004904 <HAL_RCC_OscConfig+0x240>)
 80046f0:	689b      	ldr	r3, [r3, #8]
 80046f2:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 80046f6:	2b08      	cmp	r3, #8
 80046f8:	d112      	bne.n	8004720 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80046fa:	4b82      	ldr	r3, [pc, #520]	@ (8004904 <HAL_RCC_OscConfig+0x240>)
 80046fc:	685b      	ldr	r3, [r3, #4]
 80046fe:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004702:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8004706:	d10b      	bne.n	8004720 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004708:	4b7e      	ldr	r3, [pc, #504]	@ (8004904 <HAL_RCC_OscConfig+0x240>)
 800470a:	681b      	ldr	r3, [r3, #0]
 800470c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004710:	2b00      	cmp	r3, #0
 8004712:	d05b      	beq.n	80047cc <HAL_RCC_OscConfig+0x108>
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	685b      	ldr	r3, [r3, #4]
 8004718:	2b00      	cmp	r3, #0
 800471a:	d157      	bne.n	80047cc <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800471c:	2301      	movs	r3, #1
 800471e:	e242      	b.n	8004ba6 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	685b      	ldr	r3, [r3, #4]
 8004724:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004728:	d106      	bne.n	8004738 <HAL_RCC_OscConfig+0x74>
 800472a:	4b76      	ldr	r3, [pc, #472]	@ (8004904 <HAL_RCC_OscConfig+0x240>)
 800472c:	681b      	ldr	r3, [r3, #0]
 800472e:	4a75      	ldr	r2, [pc, #468]	@ (8004904 <HAL_RCC_OscConfig+0x240>)
 8004730:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004734:	6013      	str	r3, [r2, #0]
 8004736:	e01d      	b.n	8004774 <HAL_RCC_OscConfig+0xb0>
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	685b      	ldr	r3, [r3, #4]
 800473c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8004740:	d10c      	bne.n	800475c <HAL_RCC_OscConfig+0x98>
 8004742:	4b70      	ldr	r3, [pc, #448]	@ (8004904 <HAL_RCC_OscConfig+0x240>)
 8004744:	681b      	ldr	r3, [r3, #0]
 8004746:	4a6f      	ldr	r2, [pc, #444]	@ (8004904 <HAL_RCC_OscConfig+0x240>)
 8004748:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800474c:	6013      	str	r3, [r2, #0]
 800474e:	4b6d      	ldr	r3, [pc, #436]	@ (8004904 <HAL_RCC_OscConfig+0x240>)
 8004750:	681b      	ldr	r3, [r3, #0]
 8004752:	4a6c      	ldr	r2, [pc, #432]	@ (8004904 <HAL_RCC_OscConfig+0x240>)
 8004754:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004758:	6013      	str	r3, [r2, #0]
 800475a:	e00b      	b.n	8004774 <HAL_RCC_OscConfig+0xb0>
 800475c:	4b69      	ldr	r3, [pc, #420]	@ (8004904 <HAL_RCC_OscConfig+0x240>)
 800475e:	681b      	ldr	r3, [r3, #0]
 8004760:	4a68      	ldr	r2, [pc, #416]	@ (8004904 <HAL_RCC_OscConfig+0x240>)
 8004762:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004766:	6013      	str	r3, [r2, #0]
 8004768:	4b66      	ldr	r3, [pc, #408]	@ (8004904 <HAL_RCC_OscConfig+0x240>)
 800476a:	681b      	ldr	r3, [r3, #0]
 800476c:	4a65      	ldr	r2, [pc, #404]	@ (8004904 <HAL_RCC_OscConfig+0x240>)
 800476e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004772:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	685b      	ldr	r3, [r3, #4]
 8004778:	2b00      	cmp	r3, #0
 800477a:	d013      	beq.n	80047a4 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800477c:	f7fd ff54 	bl	8002628 <HAL_GetTick>
 8004780:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004782:	e008      	b.n	8004796 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004784:	f7fd ff50 	bl	8002628 <HAL_GetTick>
 8004788:	4602      	mov	r2, r0
 800478a:	693b      	ldr	r3, [r7, #16]
 800478c:	1ad3      	subs	r3, r2, r3
 800478e:	2b64      	cmp	r3, #100	@ 0x64
 8004790:	d901      	bls.n	8004796 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8004792:	2303      	movs	r3, #3
 8004794:	e207      	b.n	8004ba6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004796:	4b5b      	ldr	r3, [pc, #364]	@ (8004904 <HAL_RCC_OscConfig+0x240>)
 8004798:	681b      	ldr	r3, [r3, #0]
 800479a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800479e:	2b00      	cmp	r3, #0
 80047a0:	d0f0      	beq.n	8004784 <HAL_RCC_OscConfig+0xc0>
 80047a2:	e014      	b.n	80047ce <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80047a4:	f7fd ff40 	bl	8002628 <HAL_GetTick>
 80047a8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80047aa:	e008      	b.n	80047be <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80047ac:	f7fd ff3c 	bl	8002628 <HAL_GetTick>
 80047b0:	4602      	mov	r2, r0
 80047b2:	693b      	ldr	r3, [r7, #16]
 80047b4:	1ad3      	subs	r3, r2, r3
 80047b6:	2b64      	cmp	r3, #100	@ 0x64
 80047b8:	d901      	bls.n	80047be <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80047ba:	2303      	movs	r3, #3
 80047bc:	e1f3      	b.n	8004ba6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80047be:	4b51      	ldr	r3, [pc, #324]	@ (8004904 <HAL_RCC_OscConfig+0x240>)
 80047c0:	681b      	ldr	r3, [r3, #0]
 80047c2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80047c6:	2b00      	cmp	r3, #0
 80047c8:	d1f0      	bne.n	80047ac <HAL_RCC_OscConfig+0xe8>
 80047ca:	e000      	b.n	80047ce <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80047cc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	681b      	ldr	r3, [r3, #0]
 80047d2:	f003 0302 	and.w	r3, r3, #2
 80047d6:	2b00      	cmp	r3, #0
 80047d8:	d063      	beq.n	80048a2 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 80047da:	4b4a      	ldr	r3, [pc, #296]	@ (8004904 <HAL_RCC_OscConfig+0x240>)
 80047dc:	689b      	ldr	r3, [r3, #8]
 80047de:	f003 030c 	and.w	r3, r3, #12
 80047e2:	2b00      	cmp	r3, #0
 80047e4:	d00b      	beq.n	80047fe <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80047e6:	4b47      	ldr	r3, [pc, #284]	@ (8004904 <HAL_RCC_OscConfig+0x240>)
 80047e8:	689b      	ldr	r3, [r3, #8]
 80047ea:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 80047ee:	2b08      	cmp	r3, #8
 80047f0:	d11c      	bne.n	800482c <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80047f2:	4b44      	ldr	r3, [pc, #272]	@ (8004904 <HAL_RCC_OscConfig+0x240>)
 80047f4:	685b      	ldr	r3, [r3, #4]
 80047f6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80047fa:	2b00      	cmp	r3, #0
 80047fc:	d116      	bne.n	800482c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80047fe:	4b41      	ldr	r3, [pc, #260]	@ (8004904 <HAL_RCC_OscConfig+0x240>)
 8004800:	681b      	ldr	r3, [r3, #0]
 8004802:	f003 0302 	and.w	r3, r3, #2
 8004806:	2b00      	cmp	r3, #0
 8004808:	d005      	beq.n	8004816 <HAL_RCC_OscConfig+0x152>
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	68db      	ldr	r3, [r3, #12]
 800480e:	2b01      	cmp	r3, #1
 8004810:	d001      	beq.n	8004816 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8004812:	2301      	movs	r3, #1
 8004814:	e1c7      	b.n	8004ba6 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004816:	4b3b      	ldr	r3, [pc, #236]	@ (8004904 <HAL_RCC_OscConfig+0x240>)
 8004818:	681b      	ldr	r3, [r3, #0]
 800481a:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	691b      	ldr	r3, [r3, #16]
 8004822:	00db      	lsls	r3, r3, #3
 8004824:	4937      	ldr	r1, [pc, #220]	@ (8004904 <HAL_RCC_OscConfig+0x240>)
 8004826:	4313      	orrs	r3, r2
 8004828:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800482a:	e03a      	b.n	80048a2 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	68db      	ldr	r3, [r3, #12]
 8004830:	2b00      	cmp	r3, #0
 8004832:	d020      	beq.n	8004876 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004834:	4b34      	ldr	r3, [pc, #208]	@ (8004908 <HAL_RCC_OscConfig+0x244>)
 8004836:	2201      	movs	r2, #1
 8004838:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800483a:	f7fd fef5 	bl	8002628 <HAL_GetTick>
 800483e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004840:	e008      	b.n	8004854 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004842:	f7fd fef1 	bl	8002628 <HAL_GetTick>
 8004846:	4602      	mov	r2, r0
 8004848:	693b      	ldr	r3, [r7, #16]
 800484a:	1ad3      	subs	r3, r2, r3
 800484c:	2b02      	cmp	r3, #2
 800484e:	d901      	bls.n	8004854 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8004850:	2303      	movs	r3, #3
 8004852:	e1a8      	b.n	8004ba6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004854:	4b2b      	ldr	r3, [pc, #172]	@ (8004904 <HAL_RCC_OscConfig+0x240>)
 8004856:	681b      	ldr	r3, [r3, #0]
 8004858:	f003 0302 	and.w	r3, r3, #2
 800485c:	2b00      	cmp	r3, #0
 800485e:	d0f0      	beq.n	8004842 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004860:	4b28      	ldr	r3, [pc, #160]	@ (8004904 <HAL_RCC_OscConfig+0x240>)
 8004862:	681b      	ldr	r3, [r3, #0]
 8004864:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	691b      	ldr	r3, [r3, #16]
 800486c:	00db      	lsls	r3, r3, #3
 800486e:	4925      	ldr	r1, [pc, #148]	@ (8004904 <HAL_RCC_OscConfig+0x240>)
 8004870:	4313      	orrs	r3, r2
 8004872:	600b      	str	r3, [r1, #0]
 8004874:	e015      	b.n	80048a2 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004876:	4b24      	ldr	r3, [pc, #144]	@ (8004908 <HAL_RCC_OscConfig+0x244>)
 8004878:	2200      	movs	r2, #0
 800487a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800487c:	f7fd fed4 	bl	8002628 <HAL_GetTick>
 8004880:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004882:	e008      	b.n	8004896 <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004884:	f7fd fed0 	bl	8002628 <HAL_GetTick>
 8004888:	4602      	mov	r2, r0
 800488a:	693b      	ldr	r3, [r7, #16]
 800488c:	1ad3      	subs	r3, r2, r3
 800488e:	2b02      	cmp	r3, #2
 8004890:	d901      	bls.n	8004896 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8004892:	2303      	movs	r3, #3
 8004894:	e187      	b.n	8004ba6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004896:	4b1b      	ldr	r3, [pc, #108]	@ (8004904 <HAL_RCC_OscConfig+0x240>)
 8004898:	681b      	ldr	r3, [r3, #0]
 800489a:	f003 0302 	and.w	r3, r3, #2
 800489e:	2b00      	cmp	r3, #0
 80048a0:	d1f0      	bne.n	8004884 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	681b      	ldr	r3, [r3, #0]
 80048a6:	f003 0308 	and.w	r3, r3, #8
 80048aa:	2b00      	cmp	r3, #0
 80048ac:	d036      	beq.n	800491c <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	695b      	ldr	r3, [r3, #20]
 80048b2:	2b00      	cmp	r3, #0
 80048b4:	d016      	beq.n	80048e4 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80048b6:	4b15      	ldr	r3, [pc, #84]	@ (800490c <HAL_RCC_OscConfig+0x248>)
 80048b8:	2201      	movs	r2, #1
 80048ba:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80048bc:	f7fd feb4 	bl	8002628 <HAL_GetTick>
 80048c0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80048c2:	e008      	b.n	80048d6 <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80048c4:	f7fd feb0 	bl	8002628 <HAL_GetTick>
 80048c8:	4602      	mov	r2, r0
 80048ca:	693b      	ldr	r3, [r7, #16]
 80048cc:	1ad3      	subs	r3, r2, r3
 80048ce:	2b02      	cmp	r3, #2
 80048d0:	d901      	bls.n	80048d6 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80048d2:	2303      	movs	r3, #3
 80048d4:	e167      	b.n	8004ba6 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80048d6:	4b0b      	ldr	r3, [pc, #44]	@ (8004904 <HAL_RCC_OscConfig+0x240>)
 80048d8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80048da:	f003 0302 	and.w	r3, r3, #2
 80048de:	2b00      	cmp	r3, #0
 80048e0:	d0f0      	beq.n	80048c4 <HAL_RCC_OscConfig+0x200>
 80048e2:	e01b      	b.n	800491c <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80048e4:	4b09      	ldr	r3, [pc, #36]	@ (800490c <HAL_RCC_OscConfig+0x248>)
 80048e6:	2200      	movs	r2, #0
 80048e8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80048ea:	f7fd fe9d 	bl	8002628 <HAL_GetTick>
 80048ee:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80048f0:	e00e      	b.n	8004910 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80048f2:	f7fd fe99 	bl	8002628 <HAL_GetTick>
 80048f6:	4602      	mov	r2, r0
 80048f8:	693b      	ldr	r3, [r7, #16]
 80048fa:	1ad3      	subs	r3, r2, r3
 80048fc:	2b02      	cmp	r3, #2
 80048fe:	d907      	bls.n	8004910 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8004900:	2303      	movs	r3, #3
 8004902:	e150      	b.n	8004ba6 <HAL_RCC_OscConfig+0x4e2>
 8004904:	40023800 	.word	0x40023800
 8004908:	42470000 	.word	0x42470000
 800490c:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004910:	4b88      	ldr	r3, [pc, #544]	@ (8004b34 <HAL_RCC_OscConfig+0x470>)
 8004912:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004914:	f003 0302 	and.w	r3, r3, #2
 8004918:	2b00      	cmp	r3, #0
 800491a:	d1ea      	bne.n	80048f2 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	681b      	ldr	r3, [r3, #0]
 8004920:	f003 0304 	and.w	r3, r3, #4
 8004924:	2b00      	cmp	r3, #0
 8004926:	f000 8097 	beq.w	8004a58 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800492a:	2300      	movs	r3, #0
 800492c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800492e:	4b81      	ldr	r3, [pc, #516]	@ (8004b34 <HAL_RCC_OscConfig+0x470>)
 8004930:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004932:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004936:	2b00      	cmp	r3, #0
 8004938:	d10f      	bne.n	800495a <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800493a:	2300      	movs	r3, #0
 800493c:	60bb      	str	r3, [r7, #8]
 800493e:	4b7d      	ldr	r3, [pc, #500]	@ (8004b34 <HAL_RCC_OscConfig+0x470>)
 8004940:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004942:	4a7c      	ldr	r2, [pc, #496]	@ (8004b34 <HAL_RCC_OscConfig+0x470>)
 8004944:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004948:	6413      	str	r3, [r2, #64]	@ 0x40
 800494a:	4b7a      	ldr	r3, [pc, #488]	@ (8004b34 <HAL_RCC_OscConfig+0x470>)
 800494c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800494e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004952:	60bb      	str	r3, [r7, #8]
 8004954:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004956:	2301      	movs	r3, #1
 8004958:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800495a:	4b77      	ldr	r3, [pc, #476]	@ (8004b38 <HAL_RCC_OscConfig+0x474>)
 800495c:	681b      	ldr	r3, [r3, #0]
 800495e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004962:	2b00      	cmp	r3, #0
 8004964:	d118      	bne.n	8004998 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004966:	4b74      	ldr	r3, [pc, #464]	@ (8004b38 <HAL_RCC_OscConfig+0x474>)
 8004968:	681b      	ldr	r3, [r3, #0]
 800496a:	4a73      	ldr	r2, [pc, #460]	@ (8004b38 <HAL_RCC_OscConfig+0x474>)
 800496c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004970:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004972:	f7fd fe59 	bl	8002628 <HAL_GetTick>
 8004976:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004978:	e008      	b.n	800498c <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800497a:	f7fd fe55 	bl	8002628 <HAL_GetTick>
 800497e:	4602      	mov	r2, r0
 8004980:	693b      	ldr	r3, [r7, #16]
 8004982:	1ad3      	subs	r3, r2, r3
 8004984:	2b02      	cmp	r3, #2
 8004986:	d901      	bls.n	800498c <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8004988:	2303      	movs	r3, #3
 800498a:	e10c      	b.n	8004ba6 <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800498c:	4b6a      	ldr	r3, [pc, #424]	@ (8004b38 <HAL_RCC_OscConfig+0x474>)
 800498e:	681b      	ldr	r3, [r3, #0]
 8004990:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004994:	2b00      	cmp	r3, #0
 8004996:	d0f0      	beq.n	800497a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	689b      	ldr	r3, [r3, #8]
 800499c:	2b01      	cmp	r3, #1
 800499e:	d106      	bne.n	80049ae <HAL_RCC_OscConfig+0x2ea>
 80049a0:	4b64      	ldr	r3, [pc, #400]	@ (8004b34 <HAL_RCC_OscConfig+0x470>)
 80049a2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80049a4:	4a63      	ldr	r2, [pc, #396]	@ (8004b34 <HAL_RCC_OscConfig+0x470>)
 80049a6:	f043 0301 	orr.w	r3, r3, #1
 80049aa:	6713      	str	r3, [r2, #112]	@ 0x70
 80049ac:	e01c      	b.n	80049e8 <HAL_RCC_OscConfig+0x324>
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	689b      	ldr	r3, [r3, #8]
 80049b2:	2b05      	cmp	r3, #5
 80049b4:	d10c      	bne.n	80049d0 <HAL_RCC_OscConfig+0x30c>
 80049b6:	4b5f      	ldr	r3, [pc, #380]	@ (8004b34 <HAL_RCC_OscConfig+0x470>)
 80049b8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80049ba:	4a5e      	ldr	r2, [pc, #376]	@ (8004b34 <HAL_RCC_OscConfig+0x470>)
 80049bc:	f043 0304 	orr.w	r3, r3, #4
 80049c0:	6713      	str	r3, [r2, #112]	@ 0x70
 80049c2:	4b5c      	ldr	r3, [pc, #368]	@ (8004b34 <HAL_RCC_OscConfig+0x470>)
 80049c4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80049c6:	4a5b      	ldr	r2, [pc, #364]	@ (8004b34 <HAL_RCC_OscConfig+0x470>)
 80049c8:	f043 0301 	orr.w	r3, r3, #1
 80049cc:	6713      	str	r3, [r2, #112]	@ 0x70
 80049ce:	e00b      	b.n	80049e8 <HAL_RCC_OscConfig+0x324>
 80049d0:	4b58      	ldr	r3, [pc, #352]	@ (8004b34 <HAL_RCC_OscConfig+0x470>)
 80049d2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80049d4:	4a57      	ldr	r2, [pc, #348]	@ (8004b34 <HAL_RCC_OscConfig+0x470>)
 80049d6:	f023 0301 	bic.w	r3, r3, #1
 80049da:	6713      	str	r3, [r2, #112]	@ 0x70
 80049dc:	4b55      	ldr	r3, [pc, #340]	@ (8004b34 <HAL_RCC_OscConfig+0x470>)
 80049de:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80049e0:	4a54      	ldr	r2, [pc, #336]	@ (8004b34 <HAL_RCC_OscConfig+0x470>)
 80049e2:	f023 0304 	bic.w	r3, r3, #4
 80049e6:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	689b      	ldr	r3, [r3, #8]
 80049ec:	2b00      	cmp	r3, #0
 80049ee:	d015      	beq.n	8004a1c <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80049f0:	f7fd fe1a 	bl	8002628 <HAL_GetTick>
 80049f4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80049f6:	e00a      	b.n	8004a0e <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80049f8:	f7fd fe16 	bl	8002628 <HAL_GetTick>
 80049fc:	4602      	mov	r2, r0
 80049fe:	693b      	ldr	r3, [r7, #16]
 8004a00:	1ad3      	subs	r3, r2, r3
 8004a02:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004a06:	4293      	cmp	r3, r2
 8004a08:	d901      	bls.n	8004a0e <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8004a0a:	2303      	movs	r3, #3
 8004a0c:	e0cb      	b.n	8004ba6 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004a0e:	4b49      	ldr	r3, [pc, #292]	@ (8004b34 <HAL_RCC_OscConfig+0x470>)
 8004a10:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004a12:	f003 0302 	and.w	r3, r3, #2
 8004a16:	2b00      	cmp	r3, #0
 8004a18:	d0ee      	beq.n	80049f8 <HAL_RCC_OscConfig+0x334>
 8004a1a:	e014      	b.n	8004a46 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004a1c:	f7fd fe04 	bl	8002628 <HAL_GetTick>
 8004a20:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004a22:	e00a      	b.n	8004a3a <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004a24:	f7fd fe00 	bl	8002628 <HAL_GetTick>
 8004a28:	4602      	mov	r2, r0
 8004a2a:	693b      	ldr	r3, [r7, #16]
 8004a2c:	1ad3      	subs	r3, r2, r3
 8004a2e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004a32:	4293      	cmp	r3, r2
 8004a34:	d901      	bls.n	8004a3a <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8004a36:	2303      	movs	r3, #3
 8004a38:	e0b5      	b.n	8004ba6 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004a3a:	4b3e      	ldr	r3, [pc, #248]	@ (8004b34 <HAL_RCC_OscConfig+0x470>)
 8004a3c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004a3e:	f003 0302 	and.w	r3, r3, #2
 8004a42:	2b00      	cmp	r3, #0
 8004a44:	d1ee      	bne.n	8004a24 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8004a46:	7dfb      	ldrb	r3, [r7, #23]
 8004a48:	2b01      	cmp	r3, #1
 8004a4a:	d105      	bne.n	8004a58 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004a4c:	4b39      	ldr	r3, [pc, #228]	@ (8004b34 <HAL_RCC_OscConfig+0x470>)
 8004a4e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004a50:	4a38      	ldr	r2, [pc, #224]	@ (8004b34 <HAL_RCC_OscConfig+0x470>)
 8004a52:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004a56:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	699b      	ldr	r3, [r3, #24]
 8004a5c:	2b00      	cmp	r3, #0
 8004a5e:	f000 80a1 	beq.w	8004ba4 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004a62:	4b34      	ldr	r3, [pc, #208]	@ (8004b34 <HAL_RCC_OscConfig+0x470>)
 8004a64:	689b      	ldr	r3, [r3, #8]
 8004a66:	f003 030c 	and.w	r3, r3, #12
 8004a6a:	2b08      	cmp	r3, #8
 8004a6c:	d05c      	beq.n	8004b28 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	699b      	ldr	r3, [r3, #24]
 8004a72:	2b02      	cmp	r3, #2
 8004a74:	d141      	bne.n	8004afa <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004a76:	4b31      	ldr	r3, [pc, #196]	@ (8004b3c <HAL_RCC_OscConfig+0x478>)
 8004a78:	2200      	movs	r2, #0
 8004a7a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004a7c:	f7fd fdd4 	bl	8002628 <HAL_GetTick>
 8004a80:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004a82:	e008      	b.n	8004a96 <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004a84:	f7fd fdd0 	bl	8002628 <HAL_GetTick>
 8004a88:	4602      	mov	r2, r0
 8004a8a:	693b      	ldr	r3, [r7, #16]
 8004a8c:	1ad3      	subs	r3, r2, r3
 8004a8e:	2b02      	cmp	r3, #2
 8004a90:	d901      	bls.n	8004a96 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8004a92:	2303      	movs	r3, #3
 8004a94:	e087      	b.n	8004ba6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004a96:	4b27      	ldr	r3, [pc, #156]	@ (8004b34 <HAL_RCC_OscConfig+0x470>)
 8004a98:	681b      	ldr	r3, [r3, #0]
 8004a9a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004a9e:	2b00      	cmp	r3, #0
 8004aa0:	d1f0      	bne.n	8004a84 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	69da      	ldr	r2, [r3, #28]
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	6a1b      	ldr	r3, [r3, #32]
 8004aaa:	431a      	orrs	r2, r3
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004ab0:	019b      	lsls	r3, r3, #6
 8004ab2:	431a      	orrs	r2, r3
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004ab8:	085b      	lsrs	r3, r3, #1
 8004aba:	3b01      	subs	r3, #1
 8004abc:	041b      	lsls	r3, r3, #16
 8004abe:	431a      	orrs	r2, r3
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004ac4:	061b      	lsls	r3, r3, #24
 8004ac6:	491b      	ldr	r1, [pc, #108]	@ (8004b34 <HAL_RCC_OscConfig+0x470>)
 8004ac8:	4313      	orrs	r3, r2
 8004aca:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004acc:	4b1b      	ldr	r3, [pc, #108]	@ (8004b3c <HAL_RCC_OscConfig+0x478>)
 8004ace:	2201      	movs	r2, #1
 8004ad0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004ad2:	f7fd fda9 	bl	8002628 <HAL_GetTick>
 8004ad6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004ad8:	e008      	b.n	8004aec <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004ada:	f7fd fda5 	bl	8002628 <HAL_GetTick>
 8004ade:	4602      	mov	r2, r0
 8004ae0:	693b      	ldr	r3, [r7, #16]
 8004ae2:	1ad3      	subs	r3, r2, r3
 8004ae4:	2b02      	cmp	r3, #2
 8004ae6:	d901      	bls.n	8004aec <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8004ae8:	2303      	movs	r3, #3
 8004aea:	e05c      	b.n	8004ba6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004aec:	4b11      	ldr	r3, [pc, #68]	@ (8004b34 <HAL_RCC_OscConfig+0x470>)
 8004aee:	681b      	ldr	r3, [r3, #0]
 8004af0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004af4:	2b00      	cmp	r3, #0
 8004af6:	d0f0      	beq.n	8004ada <HAL_RCC_OscConfig+0x416>
 8004af8:	e054      	b.n	8004ba4 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004afa:	4b10      	ldr	r3, [pc, #64]	@ (8004b3c <HAL_RCC_OscConfig+0x478>)
 8004afc:	2200      	movs	r2, #0
 8004afe:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004b00:	f7fd fd92 	bl	8002628 <HAL_GetTick>
 8004b04:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004b06:	e008      	b.n	8004b1a <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004b08:	f7fd fd8e 	bl	8002628 <HAL_GetTick>
 8004b0c:	4602      	mov	r2, r0
 8004b0e:	693b      	ldr	r3, [r7, #16]
 8004b10:	1ad3      	subs	r3, r2, r3
 8004b12:	2b02      	cmp	r3, #2
 8004b14:	d901      	bls.n	8004b1a <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8004b16:	2303      	movs	r3, #3
 8004b18:	e045      	b.n	8004ba6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004b1a:	4b06      	ldr	r3, [pc, #24]	@ (8004b34 <HAL_RCC_OscConfig+0x470>)
 8004b1c:	681b      	ldr	r3, [r3, #0]
 8004b1e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004b22:	2b00      	cmp	r3, #0
 8004b24:	d1f0      	bne.n	8004b08 <HAL_RCC_OscConfig+0x444>
 8004b26:	e03d      	b.n	8004ba4 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	699b      	ldr	r3, [r3, #24]
 8004b2c:	2b01      	cmp	r3, #1
 8004b2e:	d107      	bne.n	8004b40 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8004b30:	2301      	movs	r3, #1
 8004b32:	e038      	b.n	8004ba6 <HAL_RCC_OscConfig+0x4e2>
 8004b34:	40023800 	.word	0x40023800
 8004b38:	40007000 	.word	0x40007000
 8004b3c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8004b40:	4b1b      	ldr	r3, [pc, #108]	@ (8004bb0 <HAL_RCC_OscConfig+0x4ec>)
 8004b42:	685b      	ldr	r3, [r3, #4]
 8004b44:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	699b      	ldr	r3, [r3, #24]
 8004b4a:	2b01      	cmp	r3, #1
 8004b4c:	d028      	beq.n	8004ba0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004b4e:	68fb      	ldr	r3, [r7, #12]
 8004b50:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004b58:	429a      	cmp	r2, r3
 8004b5a:	d121      	bne.n	8004ba0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004b5c:	68fb      	ldr	r3, [r7, #12]
 8004b5e:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004b66:	429a      	cmp	r2, r3
 8004b68:	d11a      	bne.n	8004ba0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004b6a:	68fa      	ldr	r2, [r7, #12]
 8004b6c:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8004b70:	4013      	ands	r3, r2
 8004b72:	687a      	ldr	r2, [r7, #4]
 8004b74:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8004b76:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004b78:	4293      	cmp	r3, r2
 8004b7a:	d111      	bne.n	8004ba0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004b7c:	68fb      	ldr	r3, [r7, #12]
 8004b7e:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004b86:	085b      	lsrs	r3, r3, #1
 8004b88:	3b01      	subs	r3, #1
 8004b8a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004b8c:	429a      	cmp	r2, r3
 8004b8e:	d107      	bne.n	8004ba0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8004b90:	68fb      	ldr	r3, [r7, #12]
 8004b92:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004b9a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004b9c:	429a      	cmp	r2, r3
 8004b9e:	d001      	beq.n	8004ba4 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8004ba0:	2301      	movs	r3, #1
 8004ba2:	e000      	b.n	8004ba6 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8004ba4:	2300      	movs	r3, #0
}
 8004ba6:	4618      	mov	r0, r3
 8004ba8:	3718      	adds	r7, #24
 8004baa:	46bd      	mov	sp, r7
 8004bac:	bd80      	pop	{r7, pc}
 8004bae:	bf00      	nop
 8004bb0:	40023800 	.word	0x40023800

08004bb4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004bb4:	b580      	push	{r7, lr}
 8004bb6:	b084      	sub	sp, #16
 8004bb8:	af00      	add	r7, sp, #0
 8004bba:	6078      	str	r0, [r7, #4]
 8004bbc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	2b00      	cmp	r3, #0
 8004bc2:	d101      	bne.n	8004bc8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004bc4:	2301      	movs	r3, #1
 8004bc6:	e0cc      	b.n	8004d62 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004bc8:	4b68      	ldr	r3, [pc, #416]	@ (8004d6c <HAL_RCC_ClockConfig+0x1b8>)
 8004bca:	681b      	ldr	r3, [r3, #0]
 8004bcc:	f003 030f 	and.w	r3, r3, #15
 8004bd0:	683a      	ldr	r2, [r7, #0]
 8004bd2:	429a      	cmp	r2, r3
 8004bd4:	d90c      	bls.n	8004bf0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004bd6:	4b65      	ldr	r3, [pc, #404]	@ (8004d6c <HAL_RCC_ClockConfig+0x1b8>)
 8004bd8:	683a      	ldr	r2, [r7, #0]
 8004bda:	b2d2      	uxtb	r2, r2
 8004bdc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004bde:	4b63      	ldr	r3, [pc, #396]	@ (8004d6c <HAL_RCC_ClockConfig+0x1b8>)
 8004be0:	681b      	ldr	r3, [r3, #0]
 8004be2:	f003 030f 	and.w	r3, r3, #15
 8004be6:	683a      	ldr	r2, [r7, #0]
 8004be8:	429a      	cmp	r2, r3
 8004bea:	d001      	beq.n	8004bf0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004bec:	2301      	movs	r3, #1
 8004bee:	e0b8      	b.n	8004d62 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	681b      	ldr	r3, [r3, #0]
 8004bf4:	f003 0302 	and.w	r3, r3, #2
 8004bf8:	2b00      	cmp	r3, #0
 8004bfa:	d020      	beq.n	8004c3e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	681b      	ldr	r3, [r3, #0]
 8004c00:	f003 0304 	and.w	r3, r3, #4
 8004c04:	2b00      	cmp	r3, #0
 8004c06:	d005      	beq.n	8004c14 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004c08:	4b59      	ldr	r3, [pc, #356]	@ (8004d70 <HAL_RCC_ClockConfig+0x1bc>)
 8004c0a:	689b      	ldr	r3, [r3, #8]
 8004c0c:	4a58      	ldr	r2, [pc, #352]	@ (8004d70 <HAL_RCC_ClockConfig+0x1bc>)
 8004c0e:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8004c12:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	681b      	ldr	r3, [r3, #0]
 8004c18:	f003 0308 	and.w	r3, r3, #8
 8004c1c:	2b00      	cmp	r3, #0
 8004c1e:	d005      	beq.n	8004c2c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004c20:	4b53      	ldr	r3, [pc, #332]	@ (8004d70 <HAL_RCC_ClockConfig+0x1bc>)
 8004c22:	689b      	ldr	r3, [r3, #8]
 8004c24:	4a52      	ldr	r2, [pc, #328]	@ (8004d70 <HAL_RCC_ClockConfig+0x1bc>)
 8004c26:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8004c2a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004c2c:	4b50      	ldr	r3, [pc, #320]	@ (8004d70 <HAL_RCC_ClockConfig+0x1bc>)
 8004c2e:	689b      	ldr	r3, [r3, #8]
 8004c30:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	689b      	ldr	r3, [r3, #8]
 8004c38:	494d      	ldr	r1, [pc, #308]	@ (8004d70 <HAL_RCC_ClockConfig+0x1bc>)
 8004c3a:	4313      	orrs	r3, r2
 8004c3c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	681b      	ldr	r3, [r3, #0]
 8004c42:	f003 0301 	and.w	r3, r3, #1
 8004c46:	2b00      	cmp	r3, #0
 8004c48:	d044      	beq.n	8004cd4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	685b      	ldr	r3, [r3, #4]
 8004c4e:	2b01      	cmp	r3, #1
 8004c50:	d107      	bne.n	8004c62 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004c52:	4b47      	ldr	r3, [pc, #284]	@ (8004d70 <HAL_RCC_ClockConfig+0x1bc>)
 8004c54:	681b      	ldr	r3, [r3, #0]
 8004c56:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004c5a:	2b00      	cmp	r3, #0
 8004c5c:	d119      	bne.n	8004c92 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004c5e:	2301      	movs	r3, #1
 8004c60:	e07f      	b.n	8004d62 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	685b      	ldr	r3, [r3, #4]
 8004c66:	2b02      	cmp	r3, #2
 8004c68:	d003      	beq.n	8004c72 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004c6e:	2b03      	cmp	r3, #3
 8004c70:	d107      	bne.n	8004c82 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004c72:	4b3f      	ldr	r3, [pc, #252]	@ (8004d70 <HAL_RCC_ClockConfig+0x1bc>)
 8004c74:	681b      	ldr	r3, [r3, #0]
 8004c76:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004c7a:	2b00      	cmp	r3, #0
 8004c7c:	d109      	bne.n	8004c92 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004c7e:	2301      	movs	r3, #1
 8004c80:	e06f      	b.n	8004d62 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004c82:	4b3b      	ldr	r3, [pc, #236]	@ (8004d70 <HAL_RCC_ClockConfig+0x1bc>)
 8004c84:	681b      	ldr	r3, [r3, #0]
 8004c86:	f003 0302 	and.w	r3, r3, #2
 8004c8a:	2b00      	cmp	r3, #0
 8004c8c:	d101      	bne.n	8004c92 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004c8e:	2301      	movs	r3, #1
 8004c90:	e067      	b.n	8004d62 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004c92:	4b37      	ldr	r3, [pc, #220]	@ (8004d70 <HAL_RCC_ClockConfig+0x1bc>)
 8004c94:	689b      	ldr	r3, [r3, #8]
 8004c96:	f023 0203 	bic.w	r2, r3, #3
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	685b      	ldr	r3, [r3, #4]
 8004c9e:	4934      	ldr	r1, [pc, #208]	@ (8004d70 <HAL_RCC_ClockConfig+0x1bc>)
 8004ca0:	4313      	orrs	r3, r2
 8004ca2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004ca4:	f7fd fcc0 	bl	8002628 <HAL_GetTick>
 8004ca8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004caa:	e00a      	b.n	8004cc2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004cac:	f7fd fcbc 	bl	8002628 <HAL_GetTick>
 8004cb0:	4602      	mov	r2, r0
 8004cb2:	68fb      	ldr	r3, [r7, #12]
 8004cb4:	1ad3      	subs	r3, r2, r3
 8004cb6:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004cba:	4293      	cmp	r3, r2
 8004cbc:	d901      	bls.n	8004cc2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004cbe:	2303      	movs	r3, #3
 8004cc0:	e04f      	b.n	8004d62 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004cc2:	4b2b      	ldr	r3, [pc, #172]	@ (8004d70 <HAL_RCC_ClockConfig+0x1bc>)
 8004cc4:	689b      	ldr	r3, [r3, #8]
 8004cc6:	f003 020c 	and.w	r2, r3, #12
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	685b      	ldr	r3, [r3, #4]
 8004cce:	009b      	lsls	r3, r3, #2
 8004cd0:	429a      	cmp	r2, r3
 8004cd2:	d1eb      	bne.n	8004cac <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004cd4:	4b25      	ldr	r3, [pc, #148]	@ (8004d6c <HAL_RCC_ClockConfig+0x1b8>)
 8004cd6:	681b      	ldr	r3, [r3, #0]
 8004cd8:	f003 030f 	and.w	r3, r3, #15
 8004cdc:	683a      	ldr	r2, [r7, #0]
 8004cde:	429a      	cmp	r2, r3
 8004ce0:	d20c      	bcs.n	8004cfc <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004ce2:	4b22      	ldr	r3, [pc, #136]	@ (8004d6c <HAL_RCC_ClockConfig+0x1b8>)
 8004ce4:	683a      	ldr	r2, [r7, #0]
 8004ce6:	b2d2      	uxtb	r2, r2
 8004ce8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004cea:	4b20      	ldr	r3, [pc, #128]	@ (8004d6c <HAL_RCC_ClockConfig+0x1b8>)
 8004cec:	681b      	ldr	r3, [r3, #0]
 8004cee:	f003 030f 	and.w	r3, r3, #15
 8004cf2:	683a      	ldr	r2, [r7, #0]
 8004cf4:	429a      	cmp	r2, r3
 8004cf6:	d001      	beq.n	8004cfc <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004cf8:	2301      	movs	r3, #1
 8004cfa:	e032      	b.n	8004d62 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	681b      	ldr	r3, [r3, #0]
 8004d00:	f003 0304 	and.w	r3, r3, #4
 8004d04:	2b00      	cmp	r3, #0
 8004d06:	d008      	beq.n	8004d1a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004d08:	4b19      	ldr	r3, [pc, #100]	@ (8004d70 <HAL_RCC_ClockConfig+0x1bc>)
 8004d0a:	689b      	ldr	r3, [r3, #8]
 8004d0c:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	68db      	ldr	r3, [r3, #12]
 8004d14:	4916      	ldr	r1, [pc, #88]	@ (8004d70 <HAL_RCC_ClockConfig+0x1bc>)
 8004d16:	4313      	orrs	r3, r2
 8004d18:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	681b      	ldr	r3, [r3, #0]
 8004d1e:	f003 0308 	and.w	r3, r3, #8
 8004d22:	2b00      	cmp	r3, #0
 8004d24:	d009      	beq.n	8004d3a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004d26:	4b12      	ldr	r3, [pc, #72]	@ (8004d70 <HAL_RCC_ClockConfig+0x1bc>)
 8004d28:	689b      	ldr	r3, [r3, #8]
 8004d2a:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	691b      	ldr	r3, [r3, #16]
 8004d32:	00db      	lsls	r3, r3, #3
 8004d34:	490e      	ldr	r1, [pc, #56]	@ (8004d70 <HAL_RCC_ClockConfig+0x1bc>)
 8004d36:	4313      	orrs	r3, r2
 8004d38:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8004d3a:	f000 f821 	bl	8004d80 <HAL_RCC_GetSysClockFreq>
 8004d3e:	4602      	mov	r2, r0
 8004d40:	4b0b      	ldr	r3, [pc, #44]	@ (8004d70 <HAL_RCC_ClockConfig+0x1bc>)
 8004d42:	689b      	ldr	r3, [r3, #8]
 8004d44:	091b      	lsrs	r3, r3, #4
 8004d46:	f003 030f 	and.w	r3, r3, #15
 8004d4a:	490a      	ldr	r1, [pc, #40]	@ (8004d74 <HAL_RCC_ClockConfig+0x1c0>)
 8004d4c:	5ccb      	ldrb	r3, [r1, r3]
 8004d4e:	fa22 f303 	lsr.w	r3, r2, r3
 8004d52:	4a09      	ldr	r2, [pc, #36]	@ (8004d78 <HAL_RCC_ClockConfig+0x1c4>)
 8004d54:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8004d56:	4b09      	ldr	r3, [pc, #36]	@ (8004d7c <HAL_RCC_ClockConfig+0x1c8>)
 8004d58:	681b      	ldr	r3, [r3, #0]
 8004d5a:	4618      	mov	r0, r3
 8004d5c:	f7fd fc20 	bl	80025a0 <HAL_InitTick>

  return HAL_OK;
 8004d60:	2300      	movs	r3, #0
}
 8004d62:	4618      	mov	r0, r3
 8004d64:	3710      	adds	r7, #16
 8004d66:	46bd      	mov	sp, r7
 8004d68:	bd80      	pop	{r7, pc}
 8004d6a:	bf00      	nop
 8004d6c:	40023c00 	.word	0x40023c00
 8004d70:	40023800 	.word	0x40023800
 8004d74:	0800826c 	.word	0x0800826c
 8004d78:	20000048 	.word	0x20000048
 8004d7c:	2000004c 	.word	0x2000004c

08004d80 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004d80:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004d84:	b094      	sub	sp, #80	@ 0x50
 8004d86:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8004d88:	2300      	movs	r3, #0
 8004d8a:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 8004d8c:	2300      	movs	r3, #0
 8004d8e:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 8004d90:	2300      	movs	r3, #0
 8004d92:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8004d94:	2300      	movs	r3, #0
 8004d96:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004d98:	4b79      	ldr	r3, [pc, #484]	@ (8004f80 <HAL_RCC_GetSysClockFreq+0x200>)
 8004d9a:	689b      	ldr	r3, [r3, #8]
 8004d9c:	f003 030c 	and.w	r3, r3, #12
 8004da0:	2b08      	cmp	r3, #8
 8004da2:	d00d      	beq.n	8004dc0 <HAL_RCC_GetSysClockFreq+0x40>
 8004da4:	2b08      	cmp	r3, #8
 8004da6:	f200 80e1 	bhi.w	8004f6c <HAL_RCC_GetSysClockFreq+0x1ec>
 8004daa:	2b00      	cmp	r3, #0
 8004dac:	d002      	beq.n	8004db4 <HAL_RCC_GetSysClockFreq+0x34>
 8004dae:	2b04      	cmp	r3, #4
 8004db0:	d003      	beq.n	8004dba <HAL_RCC_GetSysClockFreq+0x3a>
 8004db2:	e0db      	b.n	8004f6c <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004db4:	4b73      	ldr	r3, [pc, #460]	@ (8004f84 <HAL_RCC_GetSysClockFreq+0x204>)
 8004db6:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8004db8:	e0db      	b.n	8004f72 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004dba:	4b73      	ldr	r3, [pc, #460]	@ (8004f88 <HAL_RCC_GetSysClockFreq+0x208>)
 8004dbc:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8004dbe:	e0d8      	b.n	8004f72 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004dc0:	4b6f      	ldr	r3, [pc, #444]	@ (8004f80 <HAL_RCC_GetSysClockFreq+0x200>)
 8004dc2:	685b      	ldr	r3, [r3, #4]
 8004dc4:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8004dc8:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004dca:	4b6d      	ldr	r3, [pc, #436]	@ (8004f80 <HAL_RCC_GetSysClockFreq+0x200>)
 8004dcc:	685b      	ldr	r3, [r3, #4]
 8004dce:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004dd2:	2b00      	cmp	r3, #0
 8004dd4:	d063      	beq.n	8004e9e <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004dd6:	4b6a      	ldr	r3, [pc, #424]	@ (8004f80 <HAL_RCC_GetSysClockFreq+0x200>)
 8004dd8:	685b      	ldr	r3, [r3, #4]
 8004dda:	099b      	lsrs	r3, r3, #6
 8004ddc:	2200      	movs	r2, #0
 8004dde:	63bb      	str	r3, [r7, #56]	@ 0x38
 8004de0:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8004de2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004de4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004de8:	633b      	str	r3, [r7, #48]	@ 0x30
 8004dea:	2300      	movs	r3, #0
 8004dec:	637b      	str	r3, [r7, #52]	@ 0x34
 8004dee:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8004df2:	4622      	mov	r2, r4
 8004df4:	462b      	mov	r3, r5
 8004df6:	f04f 0000 	mov.w	r0, #0
 8004dfa:	f04f 0100 	mov.w	r1, #0
 8004dfe:	0159      	lsls	r1, r3, #5
 8004e00:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004e04:	0150      	lsls	r0, r2, #5
 8004e06:	4602      	mov	r2, r0
 8004e08:	460b      	mov	r3, r1
 8004e0a:	4621      	mov	r1, r4
 8004e0c:	1a51      	subs	r1, r2, r1
 8004e0e:	6139      	str	r1, [r7, #16]
 8004e10:	4629      	mov	r1, r5
 8004e12:	eb63 0301 	sbc.w	r3, r3, r1
 8004e16:	617b      	str	r3, [r7, #20]
 8004e18:	f04f 0200 	mov.w	r2, #0
 8004e1c:	f04f 0300 	mov.w	r3, #0
 8004e20:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004e24:	4659      	mov	r1, fp
 8004e26:	018b      	lsls	r3, r1, #6
 8004e28:	4651      	mov	r1, sl
 8004e2a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8004e2e:	4651      	mov	r1, sl
 8004e30:	018a      	lsls	r2, r1, #6
 8004e32:	4651      	mov	r1, sl
 8004e34:	ebb2 0801 	subs.w	r8, r2, r1
 8004e38:	4659      	mov	r1, fp
 8004e3a:	eb63 0901 	sbc.w	r9, r3, r1
 8004e3e:	f04f 0200 	mov.w	r2, #0
 8004e42:	f04f 0300 	mov.w	r3, #0
 8004e46:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004e4a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004e4e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004e52:	4690      	mov	r8, r2
 8004e54:	4699      	mov	r9, r3
 8004e56:	4623      	mov	r3, r4
 8004e58:	eb18 0303 	adds.w	r3, r8, r3
 8004e5c:	60bb      	str	r3, [r7, #8]
 8004e5e:	462b      	mov	r3, r5
 8004e60:	eb49 0303 	adc.w	r3, r9, r3
 8004e64:	60fb      	str	r3, [r7, #12]
 8004e66:	f04f 0200 	mov.w	r2, #0
 8004e6a:	f04f 0300 	mov.w	r3, #0
 8004e6e:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8004e72:	4629      	mov	r1, r5
 8004e74:	024b      	lsls	r3, r1, #9
 8004e76:	4621      	mov	r1, r4
 8004e78:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8004e7c:	4621      	mov	r1, r4
 8004e7e:	024a      	lsls	r2, r1, #9
 8004e80:	4610      	mov	r0, r2
 8004e82:	4619      	mov	r1, r3
 8004e84:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004e86:	2200      	movs	r2, #0
 8004e88:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004e8a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8004e8c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8004e90:	f7fb f9fe 	bl	8000290 <__aeabi_uldivmod>
 8004e94:	4602      	mov	r2, r0
 8004e96:	460b      	mov	r3, r1
 8004e98:	4613      	mov	r3, r2
 8004e9a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004e9c:	e058      	b.n	8004f50 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004e9e:	4b38      	ldr	r3, [pc, #224]	@ (8004f80 <HAL_RCC_GetSysClockFreq+0x200>)
 8004ea0:	685b      	ldr	r3, [r3, #4]
 8004ea2:	099b      	lsrs	r3, r3, #6
 8004ea4:	2200      	movs	r2, #0
 8004ea6:	4618      	mov	r0, r3
 8004ea8:	4611      	mov	r1, r2
 8004eaa:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8004eae:	623b      	str	r3, [r7, #32]
 8004eb0:	2300      	movs	r3, #0
 8004eb2:	627b      	str	r3, [r7, #36]	@ 0x24
 8004eb4:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8004eb8:	4642      	mov	r2, r8
 8004eba:	464b      	mov	r3, r9
 8004ebc:	f04f 0000 	mov.w	r0, #0
 8004ec0:	f04f 0100 	mov.w	r1, #0
 8004ec4:	0159      	lsls	r1, r3, #5
 8004ec6:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004eca:	0150      	lsls	r0, r2, #5
 8004ecc:	4602      	mov	r2, r0
 8004ece:	460b      	mov	r3, r1
 8004ed0:	4641      	mov	r1, r8
 8004ed2:	ebb2 0a01 	subs.w	sl, r2, r1
 8004ed6:	4649      	mov	r1, r9
 8004ed8:	eb63 0b01 	sbc.w	fp, r3, r1
 8004edc:	f04f 0200 	mov.w	r2, #0
 8004ee0:	f04f 0300 	mov.w	r3, #0
 8004ee4:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8004ee8:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8004eec:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8004ef0:	ebb2 040a 	subs.w	r4, r2, sl
 8004ef4:	eb63 050b 	sbc.w	r5, r3, fp
 8004ef8:	f04f 0200 	mov.w	r2, #0
 8004efc:	f04f 0300 	mov.w	r3, #0
 8004f00:	00eb      	lsls	r3, r5, #3
 8004f02:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004f06:	00e2      	lsls	r2, r4, #3
 8004f08:	4614      	mov	r4, r2
 8004f0a:	461d      	mov	r5, r3
 8004f0c:	4643      	mov	r3, r8
 8004f0e:	18e3      	adds	r3, r4, r3
 8004f10:	603b      	str	r3, [r7, #0]
 8004f12:	464b      	mov	r3, r9
 8004f14:	eb45 0303 	adc.w	r3, r5, r3
 8004f18:	607b      	str	r3, [r7, #4]
 8004f1a:	f04f 0200 	mov.w	r2, #0
 8004f1e:	f04f 0300 	mov.w	r3, #0
 8004f22:	e9d7 4500 	ldrd	r4, r5, [r7]
 8004f26:	4629      	mov	r1, r5
 8004f28:	028b      	lsls	r3, r1, #10
 8004f2a:	4621      	mov	r1, r4
 8004f2c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004f30:	4621      	mov	r1, r4
 8004f32:	028a      	lsls	r2, r1, #10
 8004f34:	4610      	mov	r0, r2
 8004f36:	4619      	mov	r1, r3
 8004f38:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004f3a:	2200      	movs	r2, #0
 8004f3c:	61bb      	str	r3, [r7, #24]
 8004f3e:	61fa      	str	r2, [r7, #28]
 8004f40:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004f44:	f7fb f9a4 	bl	8000290 <__aeabi_uldivmod>
 8004f48:	4602      	mov	r2, r0
 8004f4a:	460b      	mov	r3, r1
 8004f4c:	4613      	mov	r3, r2
 8004f4e:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8004f50:	4b0b      	ldr	r3, [pc, #44]	@ (8004f80 <HAL_RCC_GetSysClockFreq+0x200>)
 8004f52:	685b      	ldr	r3, [r3, #4]
 8004f54:	0c1b      	lsrs	r3, r3, #16
 8004f56:	f003 0303 	and.w	r3, r3, #3
 8004f5a:	3301      	adds	r3, #1
 8004f5c:	005b      	lsls	r3, r3, #1
 8004f5e:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 8004f60:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8004f62:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004f64:	fbb2 f3f3 	udiv	r3, r2, r3
 8004f68:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8004f6a:	e002      	b.n	8004f72 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004f6c:	4b05      	ldr	r3, [pc, #20]	@ (8004f84 <HAL_RCC_GetSysClockFreq+0x204>)
 8004f6e:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8004f70:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004f72:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8004f74:	4618      	mov	r0, r3
 8004f76:	3750      	adds	r7, #80	@ 0x50
 8004f78:	46bd      	mov	sp, r7
 8004f7a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004f7e:	bf00      	nop
 8004f80:	40023800 	.word	0x40023800
 8004f84:	00f42400 	.word	0x00f42400
 8004f88:	007a1200 	.word	0x007a1200

08004f8c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004f8c:	b480      	push	{r7}
 8004f8e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004f90:	4b03      	ldr	r3, [pc, #12]	@ (8004fa0 <HAL_RCC_GetHCLKFreq+0x14>)
 8004f92:	681b      	ldr	r3, [r3, #0]
}
 8004f94:	4618      	mov	r0, r3
 8004f96:	46bd      	mov	sp, r7
 8004f98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f9c:	4770      	bx	lr
 8004f9e:	bf00      	nop
 8004fa0:	20000048 	.word	0x20000048

08004fa4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004fa4:	b580      	push	{r7, lr}
 8004fa6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8004fa8:	f7ff fff0 	bl	8004f8c <HAL_RCC_GetHCLKFreq>
 8004fac:	4602      	mov	r2, r0
 8004fae:	4b05      	ldr	r3, [pc, #20]	@ (8004fc4 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004fb0:	689b      	ldr	r3, [r3, #8]
 8004fb2:	0a9b      	lsrs	r3, r3, #10
 8004fb4:	f003 0307 	and.w	r3, r3, #7
 8004fb8:	4903      	ldr	r1, [pc, #12]	@ (8004fc8 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004fba:	5ccb      	ldrb	r3, [r1, r3]
 8004fbc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004fc0:	4618      	mov	r0, r3
 8004fc2:	bd80      	pop	{r7, pc}
 8004fc4:	40023800 	.word	0x40023800
 8004fc8:	0800827c 	.word	0x0800827c

08004fcc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004fcc:	b580      	push	{r7, lr}
 8004fce:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8004fd0:	f7ff ffdc 	bl	8004f8c <HAL_RCC_GetHCLKFreq>
 8004fd4:	4602      	mov	r2, r0
 8004fd6:	4b05      	ldr	r3, [pc, #20]	@ (8004fec <HAL_RCC_GetPCLK2Freq+0x20>)
 8004fd8:	689b      	ldr	r3, [r3, #8]
 8004fda:	0b5b      	lsrs	r3, r3, #13
 8004fdc:	f003 0307 	and.w	r3, r3, #7
 8004fe0:	4903      	ldr	r1, [pc, #12]	@ (8004ff0 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004fe2:	5ccb      	ldrb	r3, [r1, r3]
 8004fe4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004fe8:	4618      	mov	r0, r3
 8004fea:	bd80      	pop	{r7, pc}
 8004fec:	40023800 	.word	0x40023800
 8004ff0:	0800827c 	.word	0x0800827c

08004ff4 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004ff4:	b580      	push	{r7, lr}
 8004ff6:	b086      	sub	sp, #24
 8004ff8:	af00      	add	r7, sp, #0
 8004ffa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004ffc:	2300      	movs	r3, #0
 8004ffe:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8005000:	2300      	movs	r3, #0
 8005002:	613b      	str	r3, [r7, #16]

  /*----------------------- SAI/I2S Configuration (PLLI2S) -------------------*/
  /*----------------------- Common configuration SAI/I2S ---------------------*/
  /* In Case of SAI or I2S Clock Configuration through PLLI2S, PLLI2SN division
     factor is common parameters for both peripherals */
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	681b      	ldr	r3, [r3, #0]
 8005008:	f003 0301 	and.w	r3, r3, #1
 800500c:	2b00      	cmp	r3, #0
 800500e:	d10b      	bne.n	8005028 <HAL_RCCEx_PeriphCLKConfig+0x34>
      (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	681b      	ldr	r3, [r3, #0]
 8005014:	f003 0302 	and.w	r3, r3, #2
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8005018:	2b00      	cmp	r3, #0
 800501a:	d105      	bne.n	8005028 <HAL_RCCEx_PeriphCLKConfig+0x34>
      (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	681b      	ldr	r3, [r3, #0]
 8005020:	f003 0340 	and.w	r3, r3, #64	@ 0x40
      (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 8005024:	2b00      	cmp	r3, #0
 8005026:	d075      	beq.n	8005114 <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    /* check for Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8005028:	4b91      	ldr	r3, [pc, #580]	@ (8005270 <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 800502a:	2200      	movs	r2, #0
 800502c:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800502e:	f7fd fafb 	bl	8002628 <HAL_GetTick>
 8005032:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8005034:	e008      	b.n	8005048 <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
      if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8005036:	f7fd faf7 	bl	8002628 <HAL_GetTick>
 800503a:	4602      	mov	r2, r0
 800503c:	697b      	ldr	r3, [r7, #20]
 800503e:	1ad3      	subs	r3, r2, r3
 8005040:	2b02      	cmp	r3, #2
 8005042:	d901      	bls.n	8005048 <HAL_RCCEx_PeriphCLKConfig+0x54>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005044:	2303      	movs	r3, #3
 8005046:	e189      	b.n	800535c <HAL_RCCEx_PeriphCLKConfig+0x368>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8005048:	4b8a      	ldr	r3, [pc, #552]	@ (8005274 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800504a:	681b      	ldr	r3, [r3, #0]
 800504c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8005050:	2b00      	cmp	r3, #0
 8005052:	d1f0      	bne.n	8005036 <HAL_RCCEx_PeriphCLKConfig+0x42>
    }

    /*---------------------------- I2S configuration -------------------------*/
    /* In Case of I2S Clock Configuration through PLLI2S, PLLI2SR must be added
      only for I2S configuration */
    if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	681b      	ldr	r3, [r3, #0]
 8005058:	f003 0301 	and.w	r3, r3, #1
 800505c:	2b00      	cmp	r3, #0
 800505e:	d009      	beq.n	8005074 <HAL_RCCEx_PeriphCLKConfig+0x80>
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	685b      	ldr	r3, [r3, #4]
 8005064:	019a      	lsls	r2, r3, #6
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	689b      	ldr	r3, [r3, #8]
 800506a:	071b      	lsls	r3, r3, #28
 800506c:	4981      	ldr	r1, [pc, #516]	@ (8005274 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800506e:	4313      	orrs	r3, r2
 8005070:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLI2S, PLLI2SQ and PLLI2S_DIVQ must
       be added only for SAI configuration */
    if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == (RCC_PERIPHCLK_SAI_PLLI2S))
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	681b      	ldr	r3, [r3, #0]
 8005078:	f003 0302 	and.w	r3, r3, #2
 800507c:	2b00      	cmp	r3, #0
 800507e:	d01f      	beq.n	80050c0 <HAL_RCCEx_PeriphCLKConfig+0xcc>
      /* Check the PLLI2S division factors */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SR value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8005080:	4b7c      	ldr	r3, [pc, #496]	@ (8005274 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005082:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005086:	0f1b      	lsrs	r3, r3, #28
 8005088:	f003 0307 	and.w	r3, r3, #7
 800508c:	613b      	str	r3, [r7, #16]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	685b      	ldr	r3, [r3, #4]
 8005092:	019a      	lsls	r2, r3, #6
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	68db      	ldr	r3, [r3, #12]
 8005098:	061b      	lsls	r3, r3, #24
 800509a:	431a      	orrs	r2, r3
 800509c:	693b      	ldr	r3, [r7, #16]
 800509e:	071b      	lsls	r3, r3, #28
 80050a0:	4974      	ldr	r1, [pc, #464]	@ (8005274 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80050a2:	4313      	orrs	r3, r2
 80050a4:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 80050a8:	4b72      	ldr	r3, [pc, #456]	@ (8005274 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80050aa:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80050ae:	f023 021f 	bic.w	r2, r3, #31
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	69db      	ldr	r3, [r3, #28]
 80050b6:	3b01      	subs	r3, #1
 80050b8:	496e      	ldr	r1, [pc, #440]	@ (8005274 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80050ba:	4313      	orrs	r3, r2
 80050bc:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	681b      	ldr	r3, [r3, #0]
 80050c4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80050c8:	2b00      	cmp	r3, #0
 80050ca:	d00d      	beq.n	80050e8 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      /* Check for Parameters */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Configure the PLLI2S multiplication and division factors */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SQ,
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	685b      	ldr	r3, [r3, #4]
 80050d0:	019a      	lsls	r2, r3, #6
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	68db      	ldr	r3, [r3, #12]
 80050d6:	061b      	lsls	r3, r3, #24
 80050d8:	431a      	orrs	r2, r3
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	689b      	ldr	r3, [r3, #8]
 80050de:	071b      	lsls	r3, r3, #28
 80050e0:	4964      	ldr	r1, [pc, #400]	@ (8005274 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80050e2:	4313      	orrs	r3, r2
 80050e4:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
                                     PeriphClkInit->PLLI2S.PLLI2SR);
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 80050e8:	4b61      	ldr	r3, [pc, #388]	@ (8005270 <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 80050ea:	2201      	movs	r2, #1
 80050ec:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80050ee:	f7fd fa9b 	bl	8002628 <HAL_GetTick>
 80050f2:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80050f4:	e008      	b.n	8005108 <HAL_RCCEx_PeriphCLKConfig+0x114>
    {
      if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80050f6:	f7fd fa97 	bl	8002628 <HAL_GetTick>
 80050fa:	4602      	mov	r2, r0
 80050fc:	697b      	ldr	r3, [r7, #20]
 80050fe:	1ad3      	subs	r3, r2, r3
 8005100:	2b02      	cmp	r3, #2
 8005102:	d901      	bls.n	8005108 <HAL_RCCEx_PeriphCLKConfig+0x114>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005104:	2303      	movs	r3, #3
 8005106:	e129      	b.n	800535c <HAL_RCCEx_PeriphCLKConfig+0x368>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8005108:	4b5a      	ldr	r3, [pc, #360]	@ (8005274 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800510a:	681b      	ldr	r3, [r3, #0]
 800510c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8005110:	2b00      	cmp	r3, #0
 8005112:	d0f0      	beq.n	80050f6 <HAL_RCCEx_PeriphCLKConfig+0x102>

  /*----------------------- SAI/LTDC Configuration (PLLSAI) ------------------*/
  /*----------------------- Common configuration SAI/LTDC --------------------*/
  /* In Case of SAI or LTDC Clock Configuration through PLLSAI, PLLSAIN division
     factor is common parameters for both peripherals */
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	681b      	ldr	r3, [r3, #0]
 8005118:	f003 0304 	and.w	r3, r3, #4
 800511c:	2b00      	cmp	r3, #0
 800511e:	d105      	bne.n	800512c <HAL_RCCEx_PeriphCLKConfig+0x138>
      (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC))
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	681b      	ldr	r3, [r3, #0]
 8005124:	f003 0308 	and.w	r3, r3, #8
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 8005128:	2b00      	cmp	r3, #0
 800512a:	d079      	beq.n	8005220 <HAL_RCCEx_PeriphCLKConfig+0x22c>
  {
    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 800512c:	4b52      	ldr	r3, [pc, #328]	@ (8005278 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 800512e:	2200      	movs	r2, #0
 8005130:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8005132:	f7fd fa79 	bl	8002628 <HAL_GetTick>
 8005136:	6178      	str	r0, [r7, #20]
    /* Wait till PLLSAI is disabled */
    while (__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8005138:	e008      	b.n	800514c <HAL_RCCEx_PeriphCLKConfig+0x158>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 800513a:	f7fd fa75 	bl	8002628 <HAL_GetTick>
 800513e:	4602      	mov	r2, r0
 8005140:	697b      	ldr	r3, [r7, #20]
 8005142:	1ad3      	subs	r3, r2, r3
 8005144:	2b02      	cmp	r3, #2
 8005146:	d901      	bls.n	800514c <HAL_RCCEx_PeriphCLKConfig+0x158>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005148:	2303      	movs	r3, #3
 800514a:	e107      	b.n	800535c <HAL_RCCEx_PeriphCLKConfig+0x368>
    while (__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800514c:	4b49      	ldr	r3, [pc, #292]	@ (8005274 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800514e:	681b      	ldr	r3, [r3, #0]
 8005150:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8005154:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005158:	d0ef      	beq.n	800513a <HAL_RCCEx_PeriphCLKConfig+0x146>
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLSAI, PLLSAIQ and PLLSAI_DIVQ must
       be added only for SAI configuration */
    if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == (RCC_PERIPHCLK_SAI_PLLSAI))
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	681b      	ldr	r3, [r3, #0]
 800515e:	f003 0304 	and.w	r3, r3, #4
 8005162:	2b00      	cmp	r3, #0
 8005164:	d020      	beq.n	80051a8 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8005166:	4b43      	ldr	r3, [pc, #268]	@ (8005274 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005168:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800516c:	0f1b      	lsrs	r3, r3, #28
 800516e:	f003 0307 	and.w	r3, r3, #7
 8005172:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	691b      	ldr	r3, [r3, #16]
 8005178:	019a      	lsls	r2, r3, #6
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	695b      	ldr	r3, [r3, #20]
 800517e:	061b      	lsls	r3, r3, #24
 8005180:	431a      	orrs	r2, r3
 8005182:	693b      	ldr	r3, [r7, #16]
 8005184:	071b      	lsls	r3, r3, #28
 8005186:	493b      	ldr	r1, [pc, #236]	@ (8005274 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005188:	4313      	orrs	r3, r2
 800518a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 800518e:	4b39      	ldr	r3, [pc, #228]	@ (8005274 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005190:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8005194:	f423 52f8 	bic.w	r2, r3, #7936	@ 0x1f00
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	6a1b      	ldr	r3, [r3, #32]
 800519c:	3b01      	subs	r3, #1
 800519e:	021b      	lsls	r3, r3, #8
 80051a0:	4934      	ldr	r1, [pc, #208]	@ (8005274 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80051a2:	4313      	orrs	r3, r2
 80051a4:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*---------------------------- LTDC configuration ------------------------*/
    if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	681b      	ldr	r3, [r3, #0]
 80051ac:	f003 0308 	and.w	r3, r3, #8
 80051b0:	2b00      	cmp	r3, #0
 80051b2:	d01e      	beq.n	80051f2 <HAL_RCCEx_PeriphCLKConfig+0x1fe>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80051b4:	4b2f      	ldr	r3, [pc, #188]	@ (8005274 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80051b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80051ba:	0e1b      	lsrs	r3, r3, #24
 80051bc:	f003 030f 	and.w	r3, r3, #15
 80051c0:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN, tmpreg1, PeriphClkInit->PLLSAI.PLLSAIR);
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	691b      	ldr	r3, [r3, #16]
 80051c6:	019a      	lsls	r2, r3, #6
 80051c8:	693b      	ldr	r3, [r7, #16]
 80051ca:	061b      	lsls	r3, r3, #24
 80051cc:	431a      	orrs	r2, r3
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	699b      	ldr	r3, [r3, #24]
 80051d2:	071b      	lsls	r3, r3, #28
 80051d4:	4927      	ldr	r1, [pc, #156]	@ (8005274 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80051d6:	4313      	orrs	r3, r2
 80051d8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 80051dc:	4b25      	ldr	r3, [pc, #148]	@ (8005274 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80051de:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80051e2:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80051ea:	4922      	ldr	r1, [pc, #136]	@ (8005274 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80051ec:	4313      	orrs	r3, r2
 80051ee:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }
    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 80051f2:	4b21      	ldr	r3, [pc, #132]	@ (8005278 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 80051f4:	2201      	movs	r2, #1
 80051f6:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80051f8:	f7fd fa16 	bl	8002628 <HAL_GetTick>
 80051fc:	6178      	str	r0, [r7, #20]
    /* Wait till PLLSAI is ready */
    while (__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80051fe:	e008      	b.n	8005212 <HAL_RCCEx_PeriphCLKConfig+0x21e>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8005200:	f7fd fa12 	bl	8002628 <HAL_GetTick>
 8005204:	4602      	mov	r2, r0
 8005206:	697b      	ldr	r3, [r7, #20]
 8005208:	1ad3      	subs	r3, r2, r3
 800520a:	2b02      	cmp	r3, #2
 800520c:	d901      	bls.n	8005212 <HAL_RCCEx_PeriphCLKConfig+0x21e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800520e:	2303      	movs	r3, #3
 8005210:	e0a4      	b.n	800535c <HAL_RCCEx_PeriphCLKConfig+0x368>
    while (__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8005212:	4b18      	ldr	r3, [pc, #96]	@ (8005274 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005214:	681b      	ldr	r3, [r3, #0]
 8005216:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800521a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800521e:	d1ef      	bne.n	8005200 <HAL_RCCEx_PeriphCLKConfig+0x20c>
    }
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- RTC configuration ---------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	681b      	ldr	r3, [r3, #0]
 8005224:	f003 0320 	and.w	r3, r3, #32
 8005228:	2b00      	cmp	r3, #0
 800522a:	f000 808b 	beq.w	8005344 <HAL_RCCEx_PeriphCLKConfig+0x350>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 800522e:	2300      	movs	r3, #0
 8005230:	60fb      	str	r3, [r7, #12]
 8005232:	4b10      	ldr	r3, [pc, #64]	@ (8005274 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005234:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005236:	4a0f      	ldr	r2, [pc, #60]	@ (8005274 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005238:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800523c:	6413      	str	r3, [r2, #64]	@ 0x40
 800523e:	4b0d      	ldr	r3, [pc, #52]	@ (8005274 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005240:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005242:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005246:	60fb      	str	r3, [r7, #12]
 8005248:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 800524a:	4b0c      	ldr	r3, [pc, #48]	@ (800527c <HAL_RCCEx_PeriphCLKConfig+0x288>)
 800524c:	681b      	ldr	r3, [r3, #0]
 800524e:	4a0b      	ldr	r2, [pc, #44]	@ (800527c <HAL_RCCEx_PeriphCLKConfig+0x288>)
 8005250:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005254:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8005256:	f7fd f9e7 	bl	8002628 <HAL_GetTick>
 800525a:	6178      	str	r0, [r7, #20]

    while ((PWR->CR & PWR_CR_DBP) == RESET)
 800525c:	e010      	b.n	8005280 <HAL_RCCEx_PeriphCLKConfig+0x28c>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800525e:	f7fd f9e3 	bl	8002628 <HAL_GetTick>
 8005262:	4602      	mov	r2, r0
 8005264:	697b      	ldr	r3, [r7, #20]
 8005266:	1ad3      	subs	r3, r2, r3
 8005268:	2b02      	cmp	r3, #2
 800526a:	d909      	bls.n	8005280 <HAL_RCCEx_PeriphCLKConfig+0x28c>
      {
        return HAL_TIMEOUT;
 800526c:	2303      	movs	r3, #3
 800526e:	e075      	b.n	800535c <HAL_RCCEx_PeriphCLKConfig+0x368>
 8005270:	42470068 	.word	0x42470068
 8005274:	40023800 	.word	0x40023800
 8005278:	42470070 	.word	0x42470070
 800527c:	40007000 	.word	0x40007000
    while ((PWR->CR & PWR_CR_DBP) == RESET)
 8005280:	4b38      	ldr	r3, [pc, #224]	@ (8005364 <HAL_RCCEx_PeriphCLKConfig+0x370>)
 8005282:	681b      	ldr	r3, [r3, #0]
 8005284:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005288:	2b00      	cmp	r3, #0
 800528a:	d0e8      	beq.n	800525e <HAL_RCCEx_PeriphCLKConfig+0x26a>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800528c:	4b36      	ldr	r3, [pc, #216]	@ (8005368 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 800528e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005290:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005294:	613b      	str	r3, [r7, #16]
    if ((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8005296:	693b      	ldr	r3, [r7, #16]
 8005298:	2b00      	cmp	r3, #0
 800529a:	d02f      	beq.n	80052fc <HAL_RCCEx_PeriphCLKConfig+0x308>
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80052a0:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80052a4:	693a      	ldr	r2, [r7, #16]
 80052a6:	429a      	cmp	r2, r3
 80052a8:	d028      	beq.n	80052fc <HAL_RCCEx_PeriphCLKConfig+0x308>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80052aa:	4b2f      	ldr	r3, [pc, #188]	@ (8005368 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 80052ac:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80052ae:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80052b2:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80052b4:	4b2d      	ldr	r3, [pc, #180]	@ (800536c <HAL_RCCEx_PeriphCLKConfig+0x378>)
 80052b6:	2201      	movs	r2, #1
 80052b8:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80052ba:	4b2c      	ldr	r3, [pc, #176]	@ (800536c <HAL_RCCEx_PeriphCLKConfig+0x378>)
 80052bc:	2200      	movs	r2, #0
 80052be:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 80052c0:	4a29      	ldr	r2, [pc, #164]	@ (8005368 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 80052c2:	693b      	ldr	r3, [r7, #16]
 80052c4:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 80052c6:	4b28      	ldr	r3, [pc, #160]	@ (8005368 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 80052c8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80052ca:	f003 0301 	and.w	r3, r3, #1
 80052ce:	2b01      	cmp	r3, #1
 80052d0:	d114      	bne.n	80052fc <HAL_RCCEx_PeriphCLKConfig+0x308>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 80052d2:	f7fd f9a9 	bl	8002628 <HAL_GetTick>
 80052d6:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80052d8:	e00a      	b.n	80052f0 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80052da:	f7fd f9a5 	bl	8002628 <HAL_GetTick>
 80052de:	4602      	mov	r2, r0
 80052e0:	697b      	ldr	r3, [r7, #20]
 80052e2:	1ad3      	subs	r3, r2, r3
 80052e4:	f241 3288 	movw	r2, #5000	@ 0x1388
 80052e8:	4293      	cmp	r3, r2
 80052ea:	d901      	bls.n	80052f0 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
          {
            return HAL_TIMEOUT;
 80052ec:	2303      	movs	r3, #3
 80052ee:	e035      	b.n	800535c <HAL_RCCEx_PeriphCLKConfig+0x368>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80052f0:	4b1d      	ldr	r3, [pc, #116]	@ (8005368 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 80052f2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80052f4:	f003 0302 	and.w	r3, r3, #2
 80052f8:	2b00      	cmp	r3, #0
 80052fa:	d0ee      	beq.n	80052da <HAL_RCCEx_PeriphCLKConfig+0x2e6>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005300:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005304:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8005308:	d10d      	bne.n	8005326 <HAL_RCCEx_PeriphCLKConfig+0x332>
 800530a:	4b17      	ldr	r3, [pc, #92]	@ (8005368 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 800530c:	689b      	ldr	r3, [r3, #8]
 800530e:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005316:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 800531a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800531e:	4912      	ldr	r1, [pc, #72]	@ (8005368 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8005320:	4313      	orrs	r3, r2
 8005322:	608b      	str	r3, [r1, #8]
 8005324:	e005      	b.n	8005332 <HAL_RCCEx_PeriphCLKConfig+0x33e>
 8005326:	4b10      	ldr	r3, [pc, #64]	@ (8005368 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8005328:	689b      	ldr	r3, [r3, #8]
 800532a:	4a0f      	ldr	r2, [pc, #60]	@ (8005368 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 800532c:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 8005330:	6093      	str	r3, [r2, #8]
 8005332:	4b0d      	ldr	r3, [pc, #52]	@ (8005368 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8005334:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800533a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800533e:	490a      	ldr	r1, [pc, #40]	@ (8005368 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8005340:	4313      	orrs	r3, r2
 8005342:	670b      	str	r3, [r1, #112]	@ 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- TIM configuration ---------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	681b      	ldr	r3, [r3, #0]
 8005348:	f003 0310 	and.w	r3, r3, #16
 800534c:	2b00      	cmp	r3, #0
 800534e:	d004      	beq.n	800535a <HAL_RCCEx_PeriphCLKConfig+0x366>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	f893 202c 	ldrb.w	r2, [r3, #44]	@ 0x2c
 8005356:	4b06      	ldr	r3, [pc, #24]	@ (8005370 <HAL_RCCEx_PeriphCLKConfig+0x37c>)
 8005358:	601a      	str	r2, [r3, #0]
  }
  return HAL_OK;
 800535a:	2300      	movs	r3, #0
}
 800535c:	4618      	mov	r0, r3
 800535e:	3718      	adds	r7, #24
 8005360:	46bd      	mov	sp, r7
 8005362:	bd80      	pop	{r7, pc}
 8005364:	40007000 	.word	0x40007000
 8005368:	40023800 	.word	0x40023800
 800536c:	42470e40 	.word	0x42470e40
 8005370:	424711e0 	.word	0x424711e0

08005374 <HAL_SDRAM_Init>:
  *                the configuration information for SDRAM module.
  * @param  Timing Pointer to SDRAM control timing structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_Init(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_TimingTypeDef *Timing)
{
 8005374:	b580      	push	{r7, lr}
 8005376:	b082      	sub	sp, #8
 8005378:	af00      	add	r7, sp, #0
 800537a:	6078      	str	r0, [r7, #4]
 800537c:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM handle parameter */
  if (hsdram == NULL)
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	2b00      	cmp	r3, #0
 8005382:	d101      	bne.n	8005388 <HAL_SDRAM_Init+0x14>
  {
    return HAL_ERROR;
 8005384:	2301      	movs	r3, #1
 8005386:	e025      	b.n	80053d4 <HAL_SDRAM_Init+0x60>
  }

  if (hsdram->State == HAL_SDRAM_STATE_RESET)
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 800538e:	b2db      	uxtb	r3, r3
 8005390:	2b00      	cmp	r3, #0
 8005392:	d106      	bne.n	80053a2 <HAL_SDRAM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hsdram->Lock = HAL_UNLOCKED;
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	2200      	movs	r2, #0
 8005398:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d

    /* Init the low level hardware */
    hsdram->MspInitCallback(hsdram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SDRAM_MspInit(hsdram);
 800539c:	6878      	ldr	r0, [r7, #4]
 800539e:	f7fd f82f 	bl	8002400 <HAL_SDRAM_MspInit>
#endif /* USE_HAL_SDRAM_REGISTER_CALLBACKS */
  }

  /* Initialize the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	2202      	movs	r2, #2
 80053a6:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

  /* Initialize SDRAM control Interface */
  (void)FMC_SDRAM_Init(hsdram->Instance, &(hsdram->Init));
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	681a      	ldr	r2, [r3, #0]
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	3304      	adds	r3, #4
 80053b2:	4619      	mov	r1, r3
 80053b4:	4610      	mov	r0, r2
 80053b6:	f001 f939 	bl	800662c <FMC_SDRAM_Init>

  /* Initialize SDRAM timing Interface */
  (void)FMC_SDRAM_Timing_Init(hsdram->Instance, Timing, hsdram->Init.SDBank);
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	6818      	ldr	r0, [r3, #0]
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	685b      	ldr	r3, [r3, #4]
 80053c2:	461a      	mov	r2, r3
 80053c4:	6839      	ldr	r1, [r7, #0]
 80053c6:	f001 f98e 	bl	80066e6 <FMC_SDRAM_Timing_Init>
  /* Update the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 80053ca:	687b      	ldr	r3, [r7, #4]
 80053cc:	2201      	movs	r2, #1
 80053ce:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

  return HAL_OK;
 80053d2:	2300      	movs	r3, #0
}
 80053d4:	4618      	mov	r0, r3
 80053d6:	3708      	adds	r7, #8
 80053d8:	46bd      	mov	sp, r7
 80053da:	bd80      	pop	{r7, pc}

080053dc <HAL_SDRAM_SendCommand>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_SendCommand(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_CommandTypeDef *Command,
                                        uint32_t Timeout)
{
 80053dc:	b580      	push	{r7, lr}
 80053de:	b086      	sub	sp, #24
 80053e0:	af00      	add	r7, sp, #0
 80053e2:	60f8      	str	r0, [r7, #12]
 80053e4:	60b9      	str	r1, [r7, #8]
 80053e6:	607a      	str	r2, [r7, #4]
  HAL_SDRAM_StateTypeDef state = hsdram->State;
 80053e8:	68fb      	ldr	r3, [r7, #12]
 80053ea:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 80053ee:	75fb      	strb	r3, [r7, #23]

  /* Check the SDRAM controller state */
  if (state == HAL_SDRAM_STATE_BUSY)
 80053f0:	7dfb      	ldrb	r3, [r7, #23]
 80053f2:	2b02      	cmp	r3, #2
 80053f4:	d101      	bne.n	80053fa <HAL_SDRAM_SendCommand+0x1e>
  {
    return HAL_BUSY;
 80053f6:	2302      	movs	r3, #2
 80053f8:	e021      	b.n	800543e <HAL_SDRAM_SendCommand+0x62>
  }
  else if ((state == HAL_SDRAM_STATE_READY) || (state == HAL_SDRAM_STATE_PRECHARGED))
 80053fa:	7dfb      	ldrb	r3, [r7, #23]
 80053fc:	2b01      	cmp	r3, #1
 80053fe:	d002      	beq.n	8005406 <HAL_SDRAM_SendCommand+0x2a>
 8005400:	7dfb      	ldrb	r3, [r7, #23]
 8005402:	2b05      	cmp	r3, #5
 8005404:	d118      	bne.n	8005438 <HAL_SDRAM_SendCommand+0x5c>
  {
    /* Update the SDRAM state */
    hsdram->State = HAL_SDRAM_STATE_BUSY;
 8005406:	68fb      	ldr	r3, [r7, #12]
 8005408:	2202      	movs	r2, #2
 800540a:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

    /* Send SDRAM command */
    (void)FMC_SDRAM_SendCommand(hsdram->Instance, Command, Timeout);
 800540e:	68fb      	ldr	r3, [r7, #12]
 8005410:	681b      	ldr	r3, [r3, #0]
 8005412:	687a      	ldr	r2, [r7, #4]
 8005414:	68b9      	ldr	r1, [r7, #8]
 8005416:	4618      	mov	r0, r3
 8005418:	f001 f9ce 	bl	80067b8 <FMC_SDRAM_SendCommand>

    /* Update the SDRAM controller state state */
    if (Command->CommandMode == FMC_SDRAM_CMD_PALL)
 800541c:	68bb      	ldr	r3, [r7, #8]
 800541e:	681b      	ldr	r3, [r3, #0]
 8005420:	2b02      	cmp	r3, #2
 8005422:	d104      	bne.n	800542e <HAL_SDRAM_SendCommand+0x52>
    {
      hsdram->State = HAL_SDRAM_STATE_PRECHARGED;
 8005424:	68fb      	ldr	r3, [r7, #12]
 8005426:	2205      	movs	r2, #5
 8005428:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c
    if (Command->CommandMode == FMC_SDRAM_CMD_PALL)
 800542c:	e006      	b.n	800543c <HAL_SDRAM_SendCommand+0x60>
    }
    else
    {
      hsdram->State = HAL_SDRAM_STATE_READY;
 800542e:	68fb      	ldr	r3, [r7, #12]
 8005430:	2201      	movs	r2, #1
 8005432:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c
    if (Command->CommandMode == FMC_SDRAM_CMD_PALL)
 8005436:	e001      	b.n	800543c <HAL_SDRAM_SendCommand+0x60>
    }
  }
  else
  {
    return HAL_ERROR;
 8005438:	2301      	movs	r3, #1
 800543a:	e000      	b.n	800543e <HAL_SDRAM_SendCommand+0x62>
  }

  return HAL_OK;
 800543c:	2300      	movs	r3, #0
}
 800543e:	4618      	mov	r0, r3
 8005440:	3718      	adds	r7, #24
 8005442:	46bd      	mov	sp, r7
 8005444:	bd80      	pop	{r7, pc}

08005446 <HAL_SDRAM_ProgramRefreshRate>:
  *                the configuration information for SDRAM module.
  * @param  RefreshRate The SDRAM refresh rate value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_ProgramRefreshRate(SDRAM_HandleTypeDef *hsdram, uint32_t RefreshRate)
{
 8005446:	b580      	push	{r7, lr}
 8005448:	b082      	sub	sp, #8
 800544a:	af00      	add	r7, sp, #0
 800544c:	6078      	str	r0, [r7, #4]
 800544e:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM controller state */
  if (hsdram->State == HAL_SDRAM_STATE_BUSY)
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 8005456:	b2db      	uxtb	r3, r3
 8005458:	2b02      	cmp	r3, #2
 800545a:	d101      	bne.n	8005460 <HAL_SDRAM_ProgramRefreshRate+0x1a>
  {
    return HAL_BUSY;
 800545c:	2302      	movs	r3, #2
 800545e:	e016      	b.n	800548e <HAL_SDRAM_ProgramRefreshRate+0x48>
  }
  else if (hsdram->State == HAL_SDRAM_STATE_READY)
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 8005466:	b2db      	uxtb	r3, r3
 8005468:	2b01      	cmp	r3, #1
 800546a:	d10f      	bne.n	800548c <HAL_SDRAM_ProgramRefreshRate+0x46>
  {
    /* Update the SDRAM state */
    hsdram->State = HAL_SDRAM_STATE_BUSY;
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	2202      	movs	r2, #2
 8005470:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

    /* Program the refresh rate */
    (void)FMC_SDRAM_ProgramRefreshRate(hsdram->Instance, RefreshRate);
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	681b      	ldr	r3, [r3, #0]
 8005478:	6839      	ldr	r1, [r7, #0]
 800547a:	4618      	mov	r0, r3
 800547c:	f001 f9d9 	bl	8006832 <FMC_SDRAM_ProgramRefreshRate>

    /* Update the SDRAM state */
    hsdram->State = HAL_SDRAM_STATE_READY;
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	2201      	movs	r2, #1
 8005484:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c
  else
  {
    return HAL_ERROR;
  }

  return HAL_OK;
 8005488:	2300      	movs	r3, #0
 800548a:	e000      	b.n	800548e <HAL_SDRAM_ProgramRefreshRate+0x48>
    return HAL_ERROR;
 800548c:	2301      	movs	r3, #1
}
 800548e:	4618      	mov	r0, r3
 8005490:	3708      	adds	r7, #8
 8005492:	46bd      	mov	sp, r7
 8005494:	bd80      	pop	{r7, pc}

08005496 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8005496:	b580      	push	{r7, lr}
 8005498:	b082      	sub	sp, #8
 800549a:	af00      	add	r7, sp, #0
 800549c:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	2b00      	cmp	r3, #0
 80054a2:	d101      	bne.n	80054a8 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80054a4:	2301      	movs	r3, #1
 80054a6:	e07b      	b.n	80055a0 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80054ac:	2b00      	cmp	r3, #0
 80054ae:	d108      	bne.n	80054c2 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	685b      	ldr	r3, [r3, #4]
 80054b4:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80054b8:	d009      	beq.n	80054ce <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	2200      	movs	r2, #0
 80054be:	61da      	str	r2, [r3, #28]
 80054c0:	e005      	b.n	80054ce <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80054c2:	687b      	ldr	r3, [r7, #4]
 80054c4:	2200      	movs	r2, #0
 80054c6:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	2200      	movs	r2, #0
 80054cc:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	2200      	movs	r2, #0
 80054d2:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80054da:	b2db      	uxtb	r3, r3
 80054dc:	2b00      	cmp	r3, #0
 80054de:	d106      	bne.n	80054ee <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	2200      	movs	r2, #0
 80054e4:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80054e8:	6878      	ldr	r0, [r7, #4]
 80054ea:	f7fc fe49 	bl	8002180 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	2202      	movs	r2, #2
 80054f2:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80054f6:	687b      	ldr	r3, [r7, #4]
 80054f8:	681b      	ldr	r3, [r3, #0]
 80054fa:	681a      	ldr	r2, [r3, #0]
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	681b      	ldr	r3, [r3, #0]
 8005500:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8005504:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8005506:	687b      	ldr	r3, [r7, #4]
 8005508:	685b      	ldr	r3, [r3, #4]
 800550a:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	689b      	ldr	r3, [r3, #8]
 8005512:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8005516:	431a      	orrs	r2, r3
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	68db      	ldr	r3, [r3, #12]
 800551c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005520:	431a      	orrs	r2, r3
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	691b      	ldr	r3, [r3, #16]
 8005526:	f003 0302 	and.w	r3, r3, #2
 800552a:	431a      	orrs	r2, r3
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	695b      	ldr	r3, [r3, #20]
 8005530:	f003 0301 	and.w	r3, r3, #1
 8005534:	431a      	orrs	r2, r3
 8005536:	687b      	ldr	r3, [r7, #4]
 8005538:	699b      	ldr	r3, [r3, #24]
 800553a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800553e:	431a      	orrs	r2, r3
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	69db      	ldr	r3, [r3, #28]
 8005544:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8005548:	431a      	orrs	r2, r3
 800554a:	687b      	ldr	r3, [r7, #4]
 800554c:	6a1b      	ldr	r3, [r3, #32]
 800554e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005552:	ea42 0103 	orr.w	r1, r2, r3
 8005556:	687b      	ldr	r3, [r7, #4]
 8005558:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800555a:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 800555e:	687b      	ldr	r3, [r7, #4]
 8005560:	681b      	ldr	r3, [r3, #0]
 8005562:	430a      	orrs	r2, r1
 8005564:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	699b      	ldr	r3, [r3, #24]
 800556a:	0c1b      	lsrs	r3, r3, #16
 800556c:	f003 0104 	and.w	r1, r3, #4
 8005570:	687b      	ldr	r3, [r7, #4]
 8005572:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005574:	f003 0210 	and.w	r2, r3, #16
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	681b      	ldr	r3, [r3, #0]
 800557c:	430a      	orrs	r2, r1
 800557e:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	681b      	ldr	r3, [r3, #0]
 8005584:	69da      	ldr	r2, [r3, #28]
 8005586:	687b      	ldr	r3, [r7, #4]
 8005588:	681b      	ldr	r3, [r3, #0]
 800558a:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800558e:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	2200      	movs	r2, #0
 8005594:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	2201      	movs	r2, #1
 800559a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 800559e:	2300      	movs	r3, #0
}
 80055a0:	4618      	mov	r0, r3
 80055a2:	3708      	adds	r7, #8
 80055a4:	46bd      	mov	sp, r7
 80055a6:	bd80      	pop	{r7, pc}

080055a8 <HAL_SPI_DeInit>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_DeInit(SPI_HandleTypeDef *hspi)
{
 80055a8:	b580      	push	{r7, lr}
 80055aa:	b082      	sub	sp, #8
 80055ac:	af00      	add	r7, sp, #0
 80055ae:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	2b00      	cmp	r3, #0
 80055b4:	d101      	bne.n	80055ba <HAL_SPI_DeInit+0x12>
  {
    return HAL_ERROR;
 80055b6:	2301      	movs	r3, #1
 80055b8:	e01a      	b.n	80055f0 <HAL_SPI_DeInit+0x48>
  }

  /* Check SPI Instance parameter */
  assert_param(IS_SPI_ALL_INSTANCE(hspi->Instance));

  hspi->State = HAL_SPI_STATE_BUSY;
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	2202      	movs	r2, #2
 80055be:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the SPI Peripheral Clock */
  __HAL_SPI_DISABLE(hspi);
 80055c2:	687b      	ldr	r3, [r7, #4]
 80055c4:	681b      	ldr	r3, [r3, #0]
 80055c6:	681a      	ldr	r2, [r3, #0]
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	681b      	ldr	r3, [r3, #0]
 80055cc:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80055d0:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC... */
  hspi->MspDeInitCallback(hspi);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC... */
  HAL_SPI_MspDeInit(hspi);
 80055d2:	6878      	ldr	r0, [r7, #4]
 80055d4:	f7fc fe1c 	bl	8002210 <HAL_SPI_MspDeInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	2200      	movs	r2, #0
 80055dc:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State = HAL_SPI_STATE_RESET;
 80055de:	687b      	ldr	r3, [r7, #4]
 80055e0:	2200      	movs	r2, #0
 80055e2:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Release Lock */
  __HAL_UNLOCK(hspi);
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	2200      	movs	r2, #0
 80055ea:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  return HAL_OK;
 80055ee:	2300      	movs	r3, #0
}
 80055f0:	4618      	mov	r0, r3
 80055f2:	3708      	adds	r7, #8
 80055f4:	46bd      	mov	sp, r7
 80055f6:	bd80      	pop	{r7, pc}

080055f8 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80055f8:	b580      	push	{r7, lr}
 80055fa:	b088      	sub	sp, #32
 80055fc:	af00      	add	r7, sp, #0
 80055fe:	60f8      	str	r0, [r7, #12]
 8005600:	60b9      	str	r1, [r7, #8]
 8005602:	603b      	str	r3, [r7, #0]
 8005604:	4613      	mov	r3, r2
 8005606:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005608:	f7fd f80e 	bl	8002628 <HAL_GetTick>
 800560c:	61f8      	str	r0, [r7, #28]
  initial_TxXferCount = Size;
 800560e:	88fb      	ldrh	r3, [r7, #6]
 8005610:	837b      	strh	r3, [r7, #26]

  if (hspi->State != HAL_SPI_STATE_READY)
 8005612:	68fb      	ldr	r3, [r7, #12]
 8005614:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8005618:	b2db      	uxtb	r3, r3
 800561a:	2b01      	cmp	r3, #1
 800561c:	d001      	beq.n	8005622 <HAL_SPI_Transmit+0x2a>
  {
    return HAL_BUSY;
 800561e:	2302      	movs	r3, #2
 8005620:	e12a      	b.n	8005878 <HAL_SPI_Transmit+0x280>
  }

  if ((pData == NULL) || (Size == 0U))
 8005622:	68bb      	ldr	r3, [r7, #8]
 8005624:	2b00      	cmp	r3, #0
 8005626:	d002      	beq.n	800562e <HAL_SPI_Transmit+0x36>
 8005628:	88fb      	ldrh	r3, [r7, #6]
 800562a:	2b00      	cmp	r3, #0
 800562c:	d101      	bne.n	8005632 <HAL_SPI_Transmit+0x3a>
  {
    return HAL_ERROR;
 800562e:	2301      	movs	r3, #1
 8005630:	e122      	b.n	8005878 <HAL_SPI_Transmit+0x280>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8005632:	68fb      	ldr	r3, [r7, #12]
 8005634:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8005638:	2b01      	cmp	r3, #1
 800563a:	d101      	bne.n	8005640 <HAL_SPI_Transmit+0x48>
 800563c:	2302      	movs	r3, #2
 800563e:	e11b      	b.n	8005878 <HAL_SPI_Transmit+0x280>
 8005640:	68fb      	ldr	r3, [r7, #12]
 8005642:	2201      	movs	r2, #1
 8005644:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8005648:	68fb      	ldr	r3, [r7, #12]
 800564a:	2203      	movs	r2, #3
 800564c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005650:	68fb      	ldr	r3, [r7, #12]
 8005652:	2200      	movs	r2, #0
 8005654:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 8005656:	68fb      	ldr	r3, [r7, #12]
 8005658:	68ba      	ldr	r2, [r7, #8]
 800565a:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 800565c:	68fb      	ldr	r3, [r7, #12]
 800565e:	88fa      	ldrh	r2, [r7, #6]
 8005660:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 8005662:	68fb      	ldr	r3, [r7, #12]
 8005664:	88fa      	ldrh	r2, [r7, #6]
 8005666:	86da      	strh	r2, [r3, #54]	@ 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8005668:	68fb      	ldr	r3, [r7, #12]
 800566a:	2200      	movs	r2, #0
 800566c:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = 0U;
 800566e:	68fb      	ldr	r3, [r7, #12]
 8005670:	2200      	movs	r2, #0
 8005672:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 8005674:	68fb      	ldr	r3, [r7, #12]
 8005676:	2200      	movs	r2, #0
 8005678:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxISR       = NULL;
 800567a:	68fb      	ldr	r3, [r7, #12]
 800567c:	2200      	movs	r2, #0
 800567e:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->RxISR       = NULL;
 8005680:	68fb      	ldr	r3, [r7, #12]
 8005682:	2200      	movs	r2, #0
 8005684:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005686:	68fb      	ldr	r3, [r7, #12]
 8005688:	689b      	ldr	r3, [r3, #8]
 800568a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800568e:	d10f      	bne.n	80056b0 <HAL_SPI_Transmit+0xb8>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8005690:	68fb      	ldr	r3, [r7, #12]
 8005692:	681b      	ldr	r3, [r3, #0]
 8005694:	681a      	ldr	r2, [r3, #0]
 8005696:	68fb      	ldr	r3, [r7, #12]
 8005698:	681b      	ldr	r3, [r3, #0]
 800569a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800569e:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80056a0:	68fb      	ldr	r3, [r7, #12]
 80056a2:	681b      	ldr	r3, [r3, #0]
 80056a4:	681a      	ldr	r2, [r3, #0]
 80056a6:	68fb      	ldr	r3, [r7, #12]
 80056a8:	681b      	ldr	r3, [r3, #0]
 80056aa:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80056ae:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80056b0:	68fb      	ldr	r3, [r7, #12]
 80056b2:	681b      	ldr	r3, [r3, #0]
 80056b4:	681b      	ldr	r3, [r3, #0]
 80056b6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80056ba:	2b40      	cmp	r3, #64	@ 0x40
 80056bc:	d007      	beq.n	80056ce <HAL_SPI_Transmit+0xd6>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80056be:	68fb      	ldr	r3, [r7, #12]
 80056c0:	681b      	ldr	r3, [r3, #0]
 80056c2:	681a      	ldr	r2, [r3, #0]
 80056c4:	68fb      	ldr	r3, [r7, #12]
 80056c6:	681b      	ldr	r3, [r3, #0]
 80056c8:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80056cc:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80056ce:	68fb      	ldr	r3, [r7, #12]
 80056d0:	68db      	ldr	r3, [r3, #12]
 80056d2:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80056d6:	d152      	bne.n	800577e <HAL_SPI_Transmit+0x186>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80056d8:	68fb      	ldr	r3, [r7, #12]
 80056da:	685b      	ldr	r3, [r3, #4]
 80056dc:	2b00      	cmp	r3, #0
 80056de:	d002      	beq.n	80056e6 <HAL_SPI_Transmit+0xee>
 80056e0:	8b7b      	ldrh	r3, [r7, #26]
 80056e2:	2b01      	cmp	r3, #1
 80056e4:	d145      	bne.n	8005772 <HAL_SPI_Transmit+0x17a>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 80056e6:	68fb      	ldr	r3, [r7, #12]
 80056e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80056ea:	881a      	ldrh	r2, [r3, #0]
 80056ec:	68fb      	ldr	r3, [r7, #12]
 80056ee:	681b      	ldr	r3, [r3, #0]
 80056f0:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80056f2:	68fb      	ldr	r3, [r7, #12]
 80056f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80056f6:	1c9a      	adds	r2, r3, #2
 80056f8:	68fb      	ldr	r3, [r7, #12]
 80056fa:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 80056fc:	68fb      	ldr	r3, [r7, #12]
 80056fe:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005700:	b29b      	uxth	r3, r3
 8005702:	3b01      	subs	r3, #1
 8005704:	b29a      	uxth	r2, r3
 8005706:	68fb      	ldr	r3, [r7, #12]
 8005708:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 800570a:	e032      	b.n	8005772 <HAL_SPI_Transmit+0x17a>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800570c:	68fb      	ldr	r3, [r7, #12]
 800570e:	681b      	ldr	r3, [r3, #0]
 8005710:	689b      	ldr	r3, [r3, #8]
 8005712:	f003 0302 	and.w	r3, r3, #2
 8005716:	2b02      	cmp	r3, #2
 8005718:	d112      	bne.n	8005740 <HAL_SPI_Transmit+0x148>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 800571a:	68fb      	ldr	r3, [r7, #12]
 800571c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800571e:	881a      	ldrh	r2, [r3, #0]
 8005720:	68fb      	ldr	r3, [r7, #12]
 8005722:	681b      	ldr	r3, [r3, #0]
 8005724:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005726:	68fb      	ldr	r3, [r7, #12]
 8005728:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800572a:	1c9a      	adds	r2, r3, #2
 800572c:	68fb      	ldr	r3, [r7, #12]
 800572e:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8005730:	68fb      	ldr	r3, [r7, #12]
 8005732:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005734:	b29b      	uxth	r3, r3
 8005736:	3b01      	subs	r3, #1
 8005738:	b29a      	uxth	r2, r3
 800573a:	68fb      	ldr	r3, [r7, #12]
 800573c:	86da      	strh	r2, [r3, #54]	@ 0x36
 800573e:	e018      	b.n	8005772 <HAL_SPI_Transmit+0x17a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005740:	f7fc ff72 	bl	8002628 <HAL_GetTick>
 8005744:	4602      	mov	r2, r0
 8005746:	69fb      	ldr	r3, [r7, #28]
 8005748:	1ad3      	subs	r3, r2, r3
 800574a:	683a      	ldr	r2, [r7, #0]
 800574c:	429a      	cmp	r2, r3
 800574e:	d803      	bhi.n	8005758 <HAL_SPI_Transmit+0x160>
 8005750:	683b      	ldr	r3, [r7, #0]
 8005752:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005756:	d102      	bne.n	800575e <HAL_SPI_Transmit+0x166>
 8005758:	683b      	ldr	r3, [r7, #0]
 800575a:	2b00      	cmp	r3, #0
 800575c:	d109      	bne.n	8005772 <HAL_SPI_Transmit+0x17a>
        {
          hspi->State = HAL_SPI_STATE_READY;
 800575e:	68fb      	ldr	r3, [r7, #12]
 8005760:	2201      	movs	r2, #1
 8005762:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8005766:	68fb      	ldr	r3, [r7, #12]
 8005768:	2200      	movs	r2, #0
 800576a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 800576e:	2303      	movs	r3, #3
 8005770:	e082      	b.n	8005878 <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 8005772:	68fb      	ldr	r3, [r7, #12]
 8005774:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005776:	b29b      	uxth	r3, r3
 8005778:	2b00      	cmp	r3, #0
 800577a:	d1c7      	bne.n	800570c <HAL_SPI_Transmit+0x114>
 800577c:	e053      	b.n	8005826 <HAL_SPI_Transmit+0x22e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800577e:	68fb      	ldr	r3, [r7, #12]
 8005780:	685b      	ldr	r3, [r3, #4]
 8005782:	2b00      	cmp	r3, #0
 8005784:	d002      	beq.n	800578c <HAL_SPI_Transmit+0x194>
 8005786:	8b7b      	ldrh	r3, [r7, #26]
 8005788:	2b01      	cmp	r3, #1
 800578a:	d147      	bne.n	800581c <HAL_SPI_Transmit+0x224>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 800578c:	68fb      	ldr	r3, [r7, #12]
 800578e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8005790:	68fb      	ldr	r3, [r7, #12]
 8005792:	681b      	ldr	r3, [r3, #0]
 8005794:	330c      	adds	r3, #12
 8005796:	7812      	ldrb	r2, [r2, #0]
 8005798:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800579a:	68fb      	ldr	r3, [r7, #12]
 800579c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800579e:	1c5a      	adds	r2, r3, #1
 80057a0:	68fb      	ldr	r3, [r7, #12]
 80057a2:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 80057a4:	68fb      	ldr	r3, [r7, #12]
 80057a6:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80057a8:	b29b      	uxth	r3, r3
 80057aa:	3b01      	subs	r3, #1
 80057ac:	b29a      	uxth	r2, r3
 80057ae:	68fb      	ldr	r3, [r7, #12]
 80057b0:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while (hspi->TxXferCount > 0U)
 80057b2:	e033      	b.n	800581c <HAL_SPI_Transmit+0x224>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80057b4:	68fb      	ldr	r3, [r7, #12]
 80057b6:	681b      	ldr	r3, [r3, #0]
 80057b8:	689b      	ldr	r3, [r3, #8]
 80057ba:	f003 0302 	and.w	r3, r3, #2
 80057be:	2b02      	cmp	r3, #2
 80057c0:	d113      	bne.n	80057ea <HAL_SPI_Transmit+0x1f2>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 80057c2:	68fb      	ldr	r3, [r7, #12]
 80057c4:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80057c6:	68fb      	ldr	r3, [r7, #12]
 80057c8:	681b      	ldr	r3, [r3, #0]
 80057ca:	330c      	adds	r3, #12
 80057cc:	7812      	ldrb	r2, [r2, #0]
 80057ce:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 80057d0:	68fb      	ldr	r3, [r7, #12]
 80057d2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80057d4:	1c5a      	adds	r2, r3, #1
 80057d6:	68fb      	ldr	r3, [r7, #12]
 80057d8:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 80057da:	68fb      	ldr	r3, [r7, #12]
 80057dc:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80057de:	b29b      	uxth	r3, r3
 80057e0:	3b01      	subs	r3, #1
 80057e2:	b29a      	uxth	r2, r3
 80057e4:	68fb      	ldr	r3, [r7, #12]
 80057e6:	86da      	strh	r2, [r3, #54]	@ 0x36
 80057e8:	e018      	b.n	800581c <HAL_SPI_Transmit+0x224>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80057ea:	f7fc ff1d 	bl	8002628 <HAL_GetTick>
 80057ee:	4602      	mov	r2, r0
 80057f0:	69fb      	ldr	r3, [r7, #28]
 80057f2:	1ad3      	subs	r3, r2, r3
 80057f4:	683a      	ldr	r2, [r7, #0]
 80057f6:	429a      	cmp	r2, r3
 80057f8:	d803      	bhi.n	8005802 <HAL_SPI_Transmit+0x20a>
 80057fa:	683b      	ldr	r3, [r7, #0]
 80057fc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005800:	d102      	bne.n	8005808 <HAL_SPI_Transmit+0x210>
 8005802:	683b      	ldr	r3, [r7, #0]
 8005804:	2b00      	cmp	r3, #0
 8005806:	d109      	bne.n	800581c <HAL_SPI_Transmit+0x224>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8005808:	68fb      	ldr	r3, [r7, #12]
 800580a:	2201      	movs	r2, #1
 800580c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8005810:	68fb      	ldr	r3, [r7, #12]
 8005812:	2200      	movs	r2, #0
 8005814:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8005818:	2303      	movs	r3, #3
 800581a:	e02d      	b.n	8005878 <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 800581c:	68fb      	ldr	r3, [r7, #12]
 800581e:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005820:	b29b      	uxth	r3, r3
 8005822:	2b00      	cmp	r3, #0
 8005824:	d1c6      	bne.n	80057b4 <HAL_SPI_Transmit+0x1bc>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8005826:	69fa      	ldr	r2, [r7, #28]
 8005828:	6839      	ldr	r1, [r7, #0]
 800582a:	68f8      	ldr	r0, [r7, #12]
 800582c:	f000 fbe6 	bl	8005ffc <SPI_EndRxTxTransaction>
 8005830:	4603      	mov	r3, r0
 8005832:	2b00      	cmp	r3, #0
 8005834:	d002      	beq.n	800583c <HAL_SPI_Transmit+0x244>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005836:	68fb      	ldr	r3, [r7, #12]
 8005838:	2220      	movs	r2, #32
 800583a:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800583c:	68fb      	ldr	r3, [r7, #12]
 800583e:	689b      	ldr	r3, [r3, #8]
 8005840:	2b00      	cmp	r3, #0
 8005842:	d10a      	bne.n	800585a <HAL_SPI_Transmit+0x262>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8005844:	2300      	movs	r3, #0
 8005846:	617b      	str	r3, [r7, #20]
 8005848:	68fb      	ldr	r3, [r7, #12]
 800584a:	681b      	ldr	r3, [r3, #0]
 800584c:	68db      	ldr	r3, [r3, #12]
 800584e:	617b      	str	r3, [r7, #20]
 8005850:	68fb      	ldr	r3, [r7, #12]
 8005852:	681b      	ldr	r3, [r3, #0]
 8005854:	689b      	ldr	r3, [r3, #8]
 8005856:	617b      	str	r3, [r7, #20]
 8005858:	697b      	ldr	r3, [r7, #20]
  }

  hspi->State = HAL_SPI_STATE_READY;
 800585a:	68fb      	ldr	r3, [r7, #12]
 800585c:	2201      	movs	r2, #1
 800585e:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8005862:	68fb      	ldr	r3, [r7, #12]
 8005864:	2200      	movs	r2, #0
 8005866:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800586a:	68fb      	ldr	r3, [r7, #12]
 800586c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800586e:	2b00      	cmp	r3, #0
 8005870:	d001      	beq.n	8005876 <HAL_SPI_Transmit+0x27e>
  {
    return HAL_ERROR;
 8005872:	2301      	movs	r3, #1
 8005874:	e000      	b.n	8005878 <HAL_SPI_Transmit+0x280>
  }
  else
  {
    return HAL_OK;
 8005876:	2300      	movs	r3, #0
  }
}
 8005878:	4618      	mov	r0, r3
 800587a:	3720      	adds	r7, #32
 800587c:	46bd      	mov	sp, r7
 800587e:	bd80      	pop	{r7, pc}

08005880 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005880:	b580      	push	{r7, lr}
 8005882:	b088      	sub	sp, #32
 8005884:	af02      	add	r7, sp, #8
 8005886:	60f8      	str	r0, [r7, #12]
 8005888:	60b9      	str	r1, [r7, #8]
 800588a:	603b      	str	r3, [r7, #0]
 800588c:	4613      	mov	r3, r2
 800588e:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;

  if (hspi->State != HAL_SPI_STATE_READY)
 8005890:	68fb      	ldr	r3, [r7, #12]
 8005892:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8005896:	b2db      	uxtb	r3, r3
 8005898:	2b01      	cmp	r3, #1
 800589a:	d001      	beq.n	80058a0 <HAL_SPI_Receive+0x20>
  {
    return HAL_BUSY;
 800589c:	2302      	movs	r3, #2
 800589e:	e104      	b.n	8005aaa <HAL_SPI_Receive+0x22a>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 80058a0:	68fb      	ldr	r3, [r7, #12]
 80058a2:	685b      	ldr	r3, [r3, #4]
 80058a4:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80058a8:	d112      	bne.n	80058d0 <HAL_SPI_Receive+0x50>
 80058aa:	68fb      	ldr	r3, [r7, #12]
 80058ac:	689b      	ldr	r3, [r3, #8]
 80058ae:	2b00      	cmp	r3, #0
 80058b0:	d10e      	bne.n	80058d0 <HAL_SPI_Receive+0x50>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 80058b2:	68fb      	ldr	r3, [r7, #12]
 80058b4:	2204      	movs	r2, #4
 80058b6:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 80058ba:	88fa      	ldrh	r2, [r7, #6]
 80058bc:	683b      	ldr	r3, [r7, #0]
 80058be:	9300      	str	r3, [sp, #0]
 80058c0:	4613      	mov	r3, r2
 80058c2:	68ba      	ldr	r2, [r7, #8]
 80058c4:	68b9      	ldr	r1, [r7, #8]
 80058c6:	68f8      	ldr	r0, [r7, #12]
 80058c8:	f000 f8f3 	bl	8005ab2 <HAL_SPI_TransmitReceive>
 80058cc:	4603      	mov	r3, r0
 80058ce:	e0ec      	b.n	8005aaa <HAL_SPI_Receive+0x22a>
  }

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80058d0:	f7fc feaa 	bl	8002628 <HAL_GetTick>
 80058d4:	6178      	str	r0, [r7, #20]

  if ((pData == NULL) || (Size == 0U))
 80058d6:	68bb      	ldr	r3, [r7, #8]
 80058d8:	2b00      	cmp	r3, #0
 80058da:	d002      	beq.n	80058e2 <HAL_SPI_Receive+0x62>
 80058dc:	88fb      	ldrh	r3, [r7, #6]
 80058de:	2b00      	cmp	r3, #0
 80058e0:	d101      	bne.n	80058e6 <HAL_SPI_Receive+0x66>
  {
    return HAL_ERROR;
 80058e2:	2301      	movs	r3, #1
 80058e4:	e0e1      	b.n	8005aaa <HAL_SPI_Receive+0x22a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 80058e6:	68fb      	ldr	r3, [r7, #12]
 80058e8:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 80058ec:	2b01      	cmp	r3, #1
 80058ee:	d101      	bne.n	80058f4 <HAL_SPI_Receive+0x74>
 80058f0:	2302      	movs	r3, #2
 80058f2:	e0da      	b.n	8005aaa <HAL_SPI_Receive+0x22a>
 80058f4:	68fb      	ldr	r3, [r7, #12]
 80058f6:	2201      	movs	r2, #1
 80058f8:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 80058fc:	68fb      	ldr	r3, [r7, #12]
 80058fe:	2204      	movs	r2, #4
 8005900:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005904:	68fb      	ldr	r3, [r7, #12]
 8005906:	2200      	movs	r2, #0
 8005908:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 800590a:	68fb      	ldr	r3, [r7, #12]
 800590c:	68ba      	ldr	r2, [r7, #8]
 800590e:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = Size;
 8005910:	68fb      	ldr	r3, [r7, #12]
 8005912:	88fa      	ldrh	r2, [r7, #6]
 8005914:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = Size;
 8005916:	68fb      	ldr	r3, [r7, #12]
 8005918:	88fa      	ldrh	r2, [r7, #6]
 800591a:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 800591c:	68fb      	ldr	r3, [r7, #12]
 800591e:	2200      	movs	r2, #0
 8005920:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = 0U;
 8005922:	68fb      	ldr	r3, [r7, #12]
 8005924:	2200      	movs	r2, #0
 8005926:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = 0U;
 8005928:	68fb      	ldr	r3, [r7, #12]
 800592a:	2200      	movs	r2, #0
 800592c:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->RxISR       = NULL;
 800592e:	68fb      	ldr	r3, [r7, #12]
 8005930:	2200      	movs	r2, #0
 8005932:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 8005934:	68fb      	ldr	r3, [r7, #12]
 8005936:	2200      	movs	r2, #0
 8005938:	645a      	str	r2, [r3, #68]	@ 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800593a:	68fb      	ldr	r3, [r7, #12]
 800593c:	689b      	ldr	r3, [r3, #8]
 800593e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005942:	d10f      	bne.n	8005964 <HAL_SPI_Receive+0xe4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8005944:	68fb      	ldr	r3, [r7, #12]
 8005946:	681b      	ldr	r3, [r3, #0]
 8005948:	681a      	ldr	r2, [r3, #0]
 800594a:	68fb      	ldr	r3, [r7, #12]
 800594c:	681b      	ldr	r3, [r3, #0]
 800594e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8005952:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8005954:	68fb      	ldr	r3, [r7, #12]
 8005956:	681b      	ldr	r3, [r3, #0]
 8005958:	681a      	ldr	r2, [r3, #0]
 800595a:	68fb      	ldr	r3, [r7, #12]
 800595c:	681b      	ldr	r3, [r3, #0]
 800595e:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8005962:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005964:	68fb      	ldr	r3, [r7, #12]
 8005966:	681b      	ldr	r3, [r3, #0]
 8005968:	681b      	ldr	r3, [r3, #0]
 800596a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800596e:	2b40      	cmp	r3, #64	@ 0x40
 8005970:	d007      	beq.n	8005982 <HAL_SPI_Receive+0x102>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005972:	68fb      	ldr	r3, [r7, #12]
 8005974:	681b      	ldr	r3, [r3, #0]
 8005976:	681a      	ldr	r2, [r3, #0]
 8005978:	68fb      	ldr	r3, [r7, #12]
 800597a:	681b      	ldr	r3, [r3, #0]
 800597c:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8005980:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8005982:	68fb      	ldr	r3, [r7, #12]
 8005984:	68db      	ldr	r3, [r3, #12]
 8005986:	2b00      	cmp	r3, #0
 8005988:	d170      	bne.n	8005a6c <HAL_SPI_Receive+0x1ec>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 800598a:	e035      	b.n	80059f8 <HAL_SPI_Receive+0x178>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800598c:	68fb      	ldr	r3, [r7, #12]
 800598e:	681b      	ldr	r3, [r3, #0]
 8005990:	689b      	ldr	r3, [r3, #8]
 8005992:	f003 0301 	and.w	r3, r3, #1
 8005996:	2b01      	cmp	r3, #1
 8005998:	d115      	bne.n	80059c6 <HAL_SPI_Receive+0x146>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 800599a:	68fb      	ldr	r3, [r7, #12]
 800599c:	681b      	ldr	r3, [r3, #0]
 800599e:	f103 020c 	add.w	r2, r3, #12
 80059a2:	68fb      	ldr	r3, [r7, #12]
 80059a4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80059a6:	7812      	ldrb	r2, [r2, #0]
 80059a8:	b2d2      	uxtb	r2, r2
 80059aa:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 80059ac:	68fb      	ldr	r3, [r7, #12]
 80059ae:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80059b0:	1c5a      	adds	r2, r3, #1
 80059b2:	68fb      	ldr	r3, [r7, #12]
 80059b4:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 80059b6:	68fb      	ldr	r3, [r7, #12]
 80059b8:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80059ba:	b29b      	uxth	r3, r3
 80059bc:	3b01      	subs	r3, #1
 80059be:	b29a      	uxth	r2, r3
 80059c0:	68fb      	ldr	r3, [r7, #12]
 80059c2:	87da      	strh	r2, [r3, #62]	@ 0x3e
 80059c4:	e018      	b.n	80059f8 <HAL_SPI_Receive+0x178>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80059c6:	f7fc fe2f 	bl	8002628 <HAL_GetTick>
 80059ca:	4602      	mov	r2, r0
 80059cc:	697b      	ldr	r3, [r7, #20]
 80059ce:	1ad3      	subs	r3, r2, r3
 80059d0:	683a      	ldr	r2, [r7, #0]
 80059d2:	429a      	cmp	r2, r3
 80059d4:	d803      	bhi.n	80059de <HAL_SPI_Receive+0x15e>
 80059d6:	683b      	ldr	r3, [r7, #0]
 80059d8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80059dc:	d102      	bne.n	80059e4 <HAL_SPI_Receive+0x164>
 80059de:	683b      	ldr	r3, [r7, #0]
 80059e0:	2b00      	cmp	r3, #0
 80059e2:	d109      	bne.n	80059f8 <HAL_SPI_Receive+0x178>
        {
          hspi->State = HAL_SPI_STATE_READY;
 80059e4:	68fb      	ldr	r3, [r7, #12]
 80059e6:	2201      	movs	r2, #1
 80059e8:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 80059ec:	68fb      	ldr	r3, [r7, #12]
 80059ee:	2200      	movs	r2, #0
 80059f0:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 80059f4:	2303      	movs	r3, #3
 80059f6:	e058      	b.n	8005aaa <HAL_SPI_Receive+0x22a>
    while (hspi->RxXferCount > 0U)
 80059f8:	68fb      	ldr	r3, [r7, #12]
 80059fa:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80059fc:	b29b      	uxth	r3, r3
 80059fe:	2b00      	cmp	r3, #0
 8005a00:	d1c4      	bne.n	800598c <HAL_SPI_Receive+0x10c>
 8005a02:	e038      	b.n	8005a76 <HAL_SPI_Receive+0x1f6>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8005a04:	68fb      	ldr	r3, [r7, #12]
 8005a06:	681b      	ldr	r3, [r3, #0]
 8005a08:	689b      	ldr	r3, [r3, #8]
 8005a0a:	f003 0301 	and.w	r3, r3, #1
 8005a0e:	2b01      	cmp	r3, #1
 8005a10:	d113      	bne.n	8005a3a <HAL_SPI_Receive+0x1ba>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8005a12:	68fb      	ldr	r3, [r7, #12]
 8005a14:	681b      	ldr	r3, [r3, #0]
 8005a16:	68da      	ldr	r2, [r3, #12]
 8005a18:	68fb      	ldr	r3, [r7, #12]
 8005a1a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005a1c:	b292      	uxth	r2, r2
 8005a1e:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8005a20:	68fb      	ldr	r3, [r7, #12]
 8005a22:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005a24:	1c9a      	adds	r2, r3, #2
 8005a26:	68fb      	ldr	r3, [r7, #12]
 8005a28:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8005a2a:	68fb      	ldr	r3, [r7, #12]
 8005a2c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005a2e:	b29b      	uxth	r3, r3
 8005a30:	3b01      	subs	r3, #1
 8005a32:	b29a      	uxth	r2, r3
 8005a34:	68fb      	ldr	r3, [r7, #12]
 8005a36:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8005a38:	e018      	b.n	8005a6c <HAL_SPI_Receive+0x1ec>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005a3a:	f7fc fdf5 	bl	8002628 <HAL_GetTick>
 8005a3e:	4602      	mov	r2, r0
 8005a40:	697b      	ldr	r3, [r7, #20]
 8005a42:	1ad3      	subs	r3, r2, r3
 8005a44:	683a      	ldr	r2, [r7, #0]
 8005a46:	429a      	cmp	r2, r3
 8005a48:	d803      	bhi.n	8005a52 <HAL_SPI_Receive+0x1d2>
 8005a4a:	683b      	ldr	r3, [r7, #0]
 8005a4c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005a50:	d102      	bne.n	8005a58 <HAL_SPI_Receive+0x1d8>
 8005a52:	683b      	ldr	r3, [r7, #0]
 8005a54:	2b00      	cmp	r3, #0
 8005a56:	d109      	bne.n	8005a6c <HAL_SPI_Receive+0x1ec>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8005a58:	68fb      	ldr	r3, [r7, #12]
 8005a5a:	2201      	movs	r2, #1
 8005a5c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8005a60:	68fb      	ldr	r3, [r7, #12]
 8005a62:	2200      	movs	r2, #0
 8005a64:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8005a68:	2303      	movs	r3, #3
 8005a6a:	e01e      	b.n	8005aaa <HAL_SPI_Receive+0x22a>
    while (hspi->RxXferCount > 0U)
 8005a6c:	68fb      	ldr	r3, [r7, #12]
 8005a6e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005a70:	b29b      	uxth	r3, r3
 8005a72:	2b00      	cmp	r3, #0
 8005a74:	d1c6      	bne.n	8005a04 <HAL_SPI_Receive+0x184>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8005a76:	697a      	ldr	r2, [r7, #20]
 8005a78:	6839      	ldr	r1, [r7, #0]
 8005a7a:	68f8      	ldr	r0, [r7, #12]
 8005a7c:	f000 fa58 	bl	8005f30 <SPI_EndRxTransaction>
 8005a80:	4603      	mov	r3, r0
 8005a82:	2b00      	cmp	r3, #0
 8005a84:	d002      	beq.n	8005a8c <HAL_SPI_Receive+0x20c>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005a86:	68fb      	ldr	r3, [r7, #12]
 8005a88:	2220      	movs	r2, #32
 8005a8a:	655a      	str	r2, [r3, #84]	@ 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  hspi->State = HAL_SPI_STATE_READY;
 8005a8c:	68fb      	ldr	r3, [r7, #12]
 8005a8e:	2201      	movs	r2, #1
 8005a90:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8005a94:	68fb      	ldr	r3, [r7, #12]
 8005a96:	2200      	movs	r2, #0
 8005a98:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005a9c:	68fb      	ldr	r3, [r7, #12]
 8005a9e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005aa0:	2b00      	cmp	r3, #0
 8005aa2:	d001      	beq.n	8005aa8 <HAL_SPI_Receive+0x228>
  {
    return HAL_ERROR;
 8005aa4:	2301      	movs	r3, #1
 8005aa6:	e000      	b.n	8005aaa <HAL_SPI_Receive+0x22a>
  }
  else
  {
    return HAL_OK;
 8005aa8:	2300      	movs	r3, #0
  }
}
 8005aaa:	4618      	mov	r0, r3
 8005aac:	3718      	adds	r7, #24
 8005aae:	46bd      	mov	sp, r7
 8005ab0:	bd80      	pop	{r7, pc}

08005ab2 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                          uint16_t Size, uint32_t Timeout)
{
 8005ab2:	b580      	push	{r7, lr}
 8005ab4:	b08a      	sub	sp, #40	@ 0x28
 8005ab6:	af00      	add	r7, sp, #0
 8005ab8:	60f8      	str	r0, [r7, #12]
 8005aba:	60b9      	str	r1, [r7, #8]
 8005abc:	607a      	str	r2, [r7, #4]
 8005abe:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8005ac0:	2301      	movs	r3, #1
 8005ac2:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005ac4:	f7fc fdb0 	bl	8002628 <HAL_GetTick>
 8005ac8:	6238      	str	r0, [r7, #32]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8005aca:	68fb      	ldr	r3, [r7, #12]
 8005acc:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8005ad0:	77fb      	strb	r3, [r7, #31]
  tmp_mode            = hspi->Init.Mode;
 8005ad2:	68fb      	ldr	r3, [r7, #12]
 8005ad4:	685b      	ldr	r3, [r3, #4]
 8005ad6:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 8005ad8:	887b      	ldrh	r3, [r7, #2]
 8005ada:	82fb      	strh	r3, [r7, #22]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8005adc:	7ffb      	ldrb	r3, [r7, #31]
 8005ade:	2b01      	cmp	r3, #1
 8005ae0:	d00c      	beq.n	8005afc <HAL_SPI_TransmitReceive+0x4a>
 8005ae2:	69bb      	ldr	r3, [r7, #24]
 8005ae4:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8005ae8:	d106      	bne.n	8005af8 <HAL_SPI_TransmitReceive+0x46>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8005aea:	68fb      	ldr	r3, [r7, #12]
 8005aec:	689b      	ldr	r3, [r3, #8]
 8005aee:	2b00      	cmp	r3, #0
 8005af0:	d102      	bne.n	8005af8 <HAL_SPI_TransmitReceive+0x46>
 8005af2:	7ffb      	ldrb	r3, [r7, #31]
 8005af4:	2b04      	cmp	r3, #4
 8005af6:	d001      	beq.n	8005afc <HAL_SPI_TransmitReceive+0x4a>
  {
    return HAL_BUSY;
 8005af8:	2302      	movs	r3, #2
 8005afa:	e17f      	b.n	8005dfc <HAL_SPI_TransmitReceive+0x34a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8005afc:	68bb      	ldr	r3, [r7, #8]
 8005afe:	2b00      	cmp	r3, #0
 8005b00:	d005      	beq.n	8005b0e <HAL_SPI_TransmitReceive+0x5c>
 8005b02:	687b      	ldr	r3, [r7, #4]
 8005b04:	2b00      	cmp	r3, #0
 8005b06:	d002      	beq.n	8005b0e <HAL_SPI_TransmitReceive+0x5c>
 8005b08:	887b      	ldrh	r3, [r7, #2]
 8005b0a:	2b00      	cmp	r3, #0
 8005b0c:	d101      	bne.n	8005b12 <HAL_SPI_TransmitReceive+0x60>
  {
    return HAL_ERROR;
 8005b0e:	2301      	movs	r3, #1
 8005b10:	e174      	b.n	8005dfc <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8005b12:	68fb      	ldr	r3, [r7, #12]
 8005b14:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8005b18:	2b01      	cmp	r3, #1
 8005b1a:	d101      	bne.n	8005b20 <HAL_SPI_TransmitReceive+0x6e>
 8005b1c:	2302      	movs	r3, #2
 8005b1e:	e16d      	b.n	8005dfc <HAL_SPI_TransmitReceive+0x34a>
 8005b20:	68fb      	ldr	r3, [r7, #12]
 8005b22:	2201      	movs	r2, #1
 8005b24:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8005b28:	68fb      	ldr	r3, [r7, #12]
 8005b2a:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8005b2e:	b2db      	uxtb	r3, r3
 8005b30:	2b04      	cmp	r3, #4
 8005b32:	d003      	beq.n	8005b3c <HAL_SPI_TransmitReceive+0x8a>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8005b34:	68fb      	ldr	r3, [r7, #12]
 8005b36:	2205      	movs	r2, #5
 8005b38:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005b3c:	68fb      	ldr	r3, [r7, #12]
 8005b3e:	2200      	movs	r2, #0
 8005b40:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8005b42:	68fb      	ldr	r3, [r7, #12]
 8005b44:	687a      	ldr	r2, [r7, #4]
 8005b46:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferCount = Size;
 8005b48:	68fb      	ldr	r3, [r7, #12]
 8005b4a:	887a      	ldrh	r2, [r7, #2]
 8005b4c:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->RxXferSize  = Size;
 8005b4e:	68fb      	ldr	r3, [r7, #12]
 8005b50:	887a      	ldrh	r2, [r7, #2]
 8005b52:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 8005b54:	68fb      	ldr	r3, [r7, #12]
 8005b56:	68ba      	ldr	r2, [r7, #8]
 8005b58:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferCount = Size;
 8005b5a:	68fb      	ldr	r3, [r7, #12]
 8005b5c:	887a      	ldrh	r2, [r7, #2]
 8005b5e:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->TxXferSize  = Size;
 8005b60:	68fb      	ldr	r3, [r7, #12]
 8005b62:	887a      	ldrh	r2, [r7, #2]
 8005b64:	869a      	strh	r2, [r3, #52]	@ 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8005b66:	68fb      	ldr	r3, [r7, #12]
 8005b68:	2200      	movs	r2, #0
 8005b6a:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 8005b6c:	68fb      	ldr	r3, [r7, #12]
 8005b6e:	2200      	movs	r2, #0
 8005b70:	645a      	str	r2, [r3, #68]	@ 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005b72:	68fb      	ldr	r3, [r7, #12]
 8005b74:	681b      	ldr	r3, [r3, #0]
 8005b76:	681b      	ldr	r3, [r3, #0]
 8005b78:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005b7c:	2b40      	cmp	r3, #64	@ 0x40
 8005b7e:	d007      	beq.n	8005b90 <HAL_SPI_TransmitReceive+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005b80:	68fb      	ldr	r3, [r7, #12]
 8005b82:	681b      	ldr	r3, [r3, #0]
 8005b84:	681a      	ldr	r2, [r3, #0]
 8005b86:	68fb      	ldr	r3, [r7, #12]
 8005b88:	681b      	ldr	r3, [r3, #0]
 8005b8a:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8005b8e:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8005b90:	68fb      	ldr	r3, [r7, #12]
 8005b92:	68db      	ldr	r3, [r3, #12]
 8005b94:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005b98:	d17e      	bne.n	8005c98 <HAL_SPI_TransmitReceive+0x1e6>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005b9a:	68fb      	ldr	r3, [r7, #12]
 8005b9c:	685b      	ldr	r3, [r3, #4]
 8005b9e:	2b00      	cmp	r3, #0
 8005ba0:	d002      	beq.n	8005ba8 <HAL_SPI_TransmitReceive+0xf6>
 8005ba2:	8afb      	ldrh	r3, [r7, #22]
 8005ba4:	2b01      	cmp	r3, #1
 8005ba6:	d16c      	bne.n	8005c82 <HAL_SPI_TransmitReceive+0x1d0>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8005ba8:	68fb      	ldr	r3, [r7, #12]
 8005baa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005bac:	881a      	ldrh	r2, [r3, #0]
 8005bae:	68fb      	ldr	r3, [r7, #12]
 8005bb0:	681b      	ldr	r3, [r3, #0]
 8005bb2:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8005bb4:	68fb      	ldr	r3, [r7, #12]
 8005bb6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005bb8:	1c9a      	adds	r2, r3, #2
 8005bba:	68fb      	ldr	r3, [r7, #12]
 8005bbc:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8005bbe:	68fb      	ldr	r3, [r7, #12]
 8005bc0:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005bc2:	b29b      	uxth	r3, r3
 8005bc4:	3b01      	subs	r3, #1
 8005bc6:	b29a      	uxth	r2, r3
 8005bc8:	68fb      	ldr	r3, [r7, #12]
 8005bca:	86da      	strh	r2, [r3, #54]	@ 0x36
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005bcc:	e059      	b.n	8005c82 <HAL_SPI_TransmitReceive+0x1d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8005bce:	68fb      	ldr	r3, [r7, #12]
 8005bd0:	681b      	ldr	r3, [r3, #0]
 8005bd2:	689b      	ldr	r3, [r3, #8]
 8005bd4:	f003 0302 	and.w	r3, r3, #2
 8005bd8:	2b02      	cmp	r3, #2
 8005bda:	d11b      	bne.n	8005c14 <HAL_SPI_TransmitReceive+0x162>
 8005bdc:	68fb      	ldr	r3, [r7, #12]
 8005bde:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005be0:	b29b      	uxth	r3, r3
 8005be2:	2b00      	cmp	r3, #0
 8005be4:	d016      	beq.n	8005c14 <HAL_SPI_TransmitReceive+0x162>
 8005be6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005be8:	2b01      	cmp	r3, #1
 8005bea:	d113      	bne.n	8005c14 <HAL_SPI_TransmitReceive+0x162>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8005bec:	68fb      	ldr	r3, [r7, #12]
 8005bee:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005bf0:	881a      	ldrh	r2, [r3, #0]
 8005bf2:	68fb      	ldr	r3, [r7, #12]
 8005bf4:	681b      	ldr	r3, [r3, #0]
 8005bf6:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005bf8:	68fb      	ldr	r3, [r7, #12]
 8005bfa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005bfc:	1c9a      	adds	r2, r3, #2
 8005bfe:	68fb      	ldr	r3, [r7, #12]
 8005c00:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8005c02:	68fb      	ldr	r3, [r7, #12]
 8005c04:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005c06:	b29b      	uxth	r3, r3
 8005c08:	3b01      	subs	r3, #1
 8005c0a:	b29a      	uxth	r2, r3
 8005c0c:	68fb      	ldr	r3, [r7, #12]
 8005c0e:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8005c10:	2300      	movs	r3, #0
 8005c12:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8005c14:	68fb      	ldr	r3, [r7, #12]
 8005c16:	681b      	ldr	r3, [r3, #0]
 8005c18:	689b      	ldr	r3, [r3, #8]
 8005c1a:	f003 0301 	and.w	r3, r3, #1
 8005c1e:	2b01      	cmp	r3, #1
 8005c20:	d119      	bne.n	8005c56 <HAL_SPI_TransmitReceive+0x1a4>
 8005c22:	68fb      	ldr	r3, [r7, #12]
 8005c24:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005c26:	b29b      	uxth	r3, r3
 8005c28:	2b00      	cmp	r3, #0
 8005c2a:	d014      	beq.n	8005c56 <HAL_SPI_TransmitReceive+0x1a4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8005c2c:	68fb      	ldr	r3, [r7, #12]
 8005c2e:	681b      	ldr	r3, [r3, #0]
 8005c30:	68da      	ldr	r2, [r3, #12]
 8005c32:	68fb      	ldr	r3, [r7, #12]
 8005c34:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005c36:	b292      	uxth	r2, r2
 8005c38:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8005c3a:	68fb      	ldr	r3, [r7, #12]
 8005c3c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005c3e:	1c9a      	adds	r2, r3, #2
 8005c40:	68fb      	ldr	r3, [r7, #12]
 8005c42:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8005c44:	68fb      	ldr	r3, [r7, #12]
 8005c46:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005c48:	b29b      	uxth	r3, r3
 8005c4a:	3b01      	subs	r3, #1
 8005c4c:	b29a      	uxth	r2, r3
 8005c4e:	68fb      	ldr	r3, [r7, #12]
 8005c50:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8005c52:	2301      	movs	r3, #1
 8005c54:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8005c56:	f7fc fce7 	bl	8002628 <HAL_GetTick>
 8005c5a:	4602      	mov	r2, r0
 8005c5c:	6a3b      	ldr	r3, [r7, #32]
 8005c5e:	1ad3      	subs	r3, r2, r3
 8005c60:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005c62:	429a      	cmp	r2, r3
 8005c64:	d80d      	bhi.n	8005c82 <HAL_SPI_TransmitReceive+0x1d0>
 8005c66:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005c68:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005c6c:	d009      	beq.n	8005c82 <HAL_SPI_TransmitReceive+0x1d0>
      {
        hspi->State = HAL_SPI_STATE_READY;
 8005c6e:	68fb      	ldr	r3, [r7, #12]
 8005c70:	2201      	movs	r2, #1
 8005c72:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 8005c76:	68fb      	ldr	r3, [r7, #12]
 8005c78:	2200      	movs	r2, #0
 8005c7a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 8005c7e:	2303      	movs	r3, #3
 8005c80:	e0bc      	b.n	8005dfc <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005c82:	68fb      	ldr	r3, [r7, #12]
 8005c84:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005c86:	b29b      	uxth	r3, r3
 8005c88:	2b00      	cmp	r3, #0
 8005c8a:	d1a0      	bne.n	8005bce <HAL_SPI_TransmitReceive+0x11c>
 8005c8c:	68fb      	ldr	r3, [r7, #12]
 8005c8e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005c90:	b29b      	uxth	r3, r3
 8005c92:	2b00      	cmp	r3, #0
 8005c94:	d19b      	bne.n	8005bce <HAL_SPI_TransmitReceive+0x11c>
 8005c96:	e082      	b.n	8005d9e <HAL_SPI_TransmitReceive+0x2ec>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005c98:	68fb      	ldr	r3, [r7, #12]
 8005c9a:	685b      	ldr	r3, [r3, #4]
 8005c9c:	2b00      	cmp	r3, #0
 8005c9e:	d002      	beq.n	8005ca6 <HAL_SPI_TransmitReceive+0x1f4>
 8005ca0:	8afb      	ldrh	r3, [r7, #22]
 8005ca2:	2b01      	cmp	r3, #1
 8005ca4:	d171      	bne.n	8005d8a <HAL_SPI_TransmitReceive+0x2d8>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8005ca6:	68fb      	ldr	r3, [r7, #12]
 8005ca8:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8005caa:	68fb      	ldr	r3, [r7, #12]
 8005cac:	681b      	ldr	r3, [r3, #0]
 8005cae:	330c      	adds	r3, #12
 8005cb0:	7812      	ldrb	r2, [r2, #0]
 8005cb2:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8005cb4:	68fb      	ldr	r3, [r7, #12]
 8005cb6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005cb8:	1c5a      	adds	r2, r3, #1
 8005cba:	68fb      	ldr	r3, [r7, #12]
 8005cbc:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8005cbe:	68fb      	ldr	r3, [r7, #12]
 8005cc0:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005cc2:	b29b      	uxth	r3, r3
 8005cc4:	3b01      	subs	r3, #1
 8005cc6:	b29a      	uxth	r2, r3
 8005cc8:	68fb      	ldr	r3, [r7, #12]
 8005cca:	86da      	strh	r2, [r3, #54]	@ 0x36
      {
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005ccc:	e05d      	b.n	8005d8a <HAL_SPI_TransmitReceive+0x2d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8005cce:	68fb      	ldr	r3, [r7, #12]
 8005cd0:	681b      	ldr	r3, [r3, #0]
 8005cd2:	689b      	ldr	r3, [r3, #8]
 8005cd4:	f003 0302 	and.w	r3, r3, #2
 8005cd8:	2b02      	cmp	r3, #2
 8005cda:	d11c      	bne.n	8005d16 <HAL_SPI_TransmitReceive+0x264>
 8005cdc:	68fb      	ldr	r3, [r7, #12]
 8005cde:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005ce0:	b29b      	uxth	r3, r3
 8005ce2:	2b00      	cmp	r3, #0
 8005ce4:	d017      	beq.n	8005d16 <HAL_SPI_TransmitReceive+0x264>
 8005ce6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005ce8:	2b01      	cmp	r3, #1
 8005cea:	d114      	bne.n	8005d16 <HAL_SPI_TransmitReceive+0x264>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 8005cec:	68fb      	ldr	r3, [r7, #12]
 8005cee:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8005cf0:	68fb      	ldr	r3, [r7, #12]
 8005cf2:	681b      	ldr	r3, [r3, #0]
 8005cf4:	330c      	adds	r3, #12
 8005cf6:	7812      	ldrb	r2, [r2, #0]
 8005cf8:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8005cfa:	68fb      	ldr	r3, [r7, #12]
 8005cfc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005cfe:	1c5a      	adds	r2, r3, #1
 8005d00:	68fb      	ldr	r3, [r7, #12]
 8005d02:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8005d04:	68fb      	ldr	r3, [r7, #12]
 8005d06:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005d08:	b29b      	uxth	r3, r3
 8005d0a:	3b01      	subs	r3, #1
 8005d0c:	b29a      	uxth	r2, r3
 8005d0e:	68fb      	ldr	r3, [r7, #12]
 8005d10:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8005d12:	2300      	movs	r3, #0
 8005d14:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8005d16:	68fb      	ldr	r3, [r7, #12]
 8005d18:	681b      	ldr	r3, [r3, #0]
 8005d1a:	689b      	ldr	r3, [r3, #8]
 8005d1c:	f003 0301 	and.w	r3, r3, #1
 8005d20:	2b01      	cmp	r3, #1
 8005d22:	d119      	bne.n	8005d58 <HAL_SPI_TransmitReceive+0x2a6>
 8005d24:	68fb      	ldr	r3, [r7, #12]
 8005d26:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005d28:	b29b      	uxth	r3, r3
 8005d2a:	2b00      	cmp	r3, #0
 8005d2c:	d014      	beq.n	8005d58 <HAL_SPI_TransmitReceive+0x2a6>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8005d2e:	68fb      	ldr	r3, [r7, #12]
 8005d30:	681b      	ldr	r3, [r3, #0]
 8005d32:	68da      	ldr	r2, [r3, #12]
 8005d34:	68fb      	ldr	r3, [r7, #12]
 8005d36:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005d38:	b2d2      	uxtb	r2, r2
 8005d3a:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8005d3c:	68fb      	ldr	r3, [r7, #12]
 8005d3e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005d40:	1c5a      	adds	r2, r3, #1
 8005d42:	68fb      	ldr	r3, [r7, #12]
 8005d44:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8005d46:	68fb      	ldr	r3, [r7, #12]
 8005d48:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005d4a:	b29b      	uxth	r3, r3
 8005d4c:	3b01      	subs	r3, #1
 8005d4e:	b29a      	uxth	r2, r3
 8005d50:	68fb      	ldr	r3, [r7, #12]
 8005d52:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8005d54:	2301      	movs	r3, #1
 8005d56:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8005d58:	f7fc fc66 	bl	8002628 <HAL_GetTick>
 8005d5c:	4602      	mov	r2, r0
 8005d5e:	6a3b      	ldr	r3, [r7, #32]
 8005d60:	1ad3      	subs	r3, r2, r3
 8005d62:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005d64:	429a      	cmp	r2, r3
 8005d66:	d803      	bhi.n	8005d70 <HAL_SPI_TransmitReceive+0x2be>
 8005d68:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005d6a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005d6e:	d102      	bne.n	8005d76 <HAL_SPI_TransmitReceive+0x2c4>
 8005d70:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005d72:	2b00      	cmp	r3, #0
 8005d74:	d109      	bne.n	8005d8a <HAL_SPI_TransmitReceive+0x2d8>
      {
        hspi->State = HAL_SPI_STATE_READY;
 8005d76:	68fb      	ldr	r3, [r7, #12]
 8005d78:	2201      	movs	r2, #1
 8005d7a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 8005d7e:	68fb      	ldr	r3, [r7, #12]
 8005d80:	2200      	movs	r2, #0
 8005d82:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 8005d86:	2303      	movs	r3, #3
 8005d88:	e038      	b.n	8005dfc <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005d8a:	68fb      	ldr	r3, [r7, #12]
 8005d8c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005d8e:	b29b      	uxth	r3, r3
 8005d90:	2b00      	cmp	r3, #0
 8005d92:	d19c      	bne.n	8005cce <HAL_SPI_TransmitReceive+0x21c>
 8005d94:	68fb      	ldr	r3, [r7, #12]
 8005d96:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005d98:	b29b      	uxth	r3, r3
 8005d9a:	2b00      	cmp	r3, #0
 8005d9c:	d197      	bne.n	8005cce <HAL_SPI_TransmitReceive+0x21c>
    return HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8005d9e:	6a3a      	ldr	r2, [r7, #32]
 8005da0:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8005da2:	68f8      	ldr	r0, [r7, #12]
 8005da4:	f000 f92a 	bl	8005ffc <SPI_EndRxTxTransaction>
 8005da8:	4603      	mov	r3, r0
 8005daa:	2b00      	cmp	r3, #0
 8005dac:	d008      	beq.n	8005dc0 <HAL_SPI_TransmitReceive+0x30e>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005dae:	68fb      	ldr	r3, [r7, #12]
 8005db0:	2220      	movs	r2, #32
 8005db2:	655a      	str	r2, [r3, #84]	@ 0x54
    __HAL_UNLOCK(hspi);
 8005db4:	68fb      	ldr	r3, [r7, #12]
 8005db6:	2200      	movs	r2, #0
 8005db8:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
    return HAL_ERROR;
 8005dbc:	2301      	movs	r3, #1
 8005dbe:	e01d      	b.n	8005dfc <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8005dc0:	68fb      	ldr	r3, [r7, #12]
 8005dc2:	689b      	ldr	r3, [r3, #8]
 8005dc4:	2b00      	cmp	r3, #0
 8005dc6:	d10a      	bne.n	8005dde <HAL_SPI_TransmitReceive+0x32c>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8005dc8:	2300      	movs	r3, #0
 8005dca:	613b      	str	r3, [r7, #16]
 8005dcc:	68fb      	ldr	r3, [r7, #12]
 8005dce:	681b      	ldr	r3, [r3, #0]
 8005dd0:	68db      	ldr	r3, [r3, #12]
 8005dd2:	613b      	str	r3, [r7, #16]
 8005dd4:	68fb      	ldr	r3, [r7, #12]
 8005dd6:	681b      	ldr	r3, [r3, #0]
 8005dd8:	689b      	ldr	r3, [r3, #8]
 8005dda:	613b      	str	r3, [r7, #16]
 8005ddc:	693b      	ldr	r3, [r7, #16]
  }


  hspi->State = HAL_SPI_STATE_READY;
 8005dde:	68fb      	ldr	r3, [r7, #12]
 8005de0:	2201      	movs	r2, #1
 8005de2:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8005de6:	68fb      	ldr	r3, [r7, #12]
 8005de8:	2200      	movs	r2, #0
 8005dea:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005dee:	68fb      	ldr	r3, [r7, #12]
 8005df0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005df2:	2b00      	cmp	r3, #0
 8005df4:	d001      	beq.n	8005dfa <HAL_SPI_TransmitReceive+0x348>
  {
    return HAL_ERROR;
 8005df6:	2301      	movs	r3, #1
 8005df8:	e000      	b.n	8005dfc <HAL_SPI_TransmitReceive+0x34a>
  }
  else
  {
    return HAL_OK;
 8005dfa:	2300      	movs	r3, #0
  }
}
 8005dfc:	4618      	mov	r0, r3
 8005dfe:	3728      	adds	r7, #40	@ 0x28
 8005e00:	46bd      	mov	sp, r7
 8005e02:	bd80      	pop	{r7, pc}

08005e04 <HAL_SPI_GetState>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI state
  */
HAL_SPI_StateTypeDef HAL_SPI_GetState(const SPI_HandleTypeDef *hspi)
{
 8005e04:	b480      	push	{r7}
 8005e06:	b083      	sub	sp, #12
 8005e08:	af00      	add	r7, sp, #0
 8005e0a:	6078      	str	r0, [r7, #4]
  /* Return SPI handle state */
  return hspi->State;
 8005e0c:	687b      	ldr	r3, [r7, #4]
 8005e0e:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8005e12:	b2db      	uxtb	r3, r3
}
 8005e14:	4618      	mov	r0, r3
 8005e16:	370c      	adds	r7, #12
 8005e18:	46bd      	mov	sp, r7
 8005e1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e1e:	4770      	bx	lr

08005e20 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8005e20:	b580      	push	{r7, lr}
 8005e22:	b088      	sub	sp, #32
 8005e24:	af00      	add	r7, sp, #0
 8005e26:	60f8      	str	r0, [r7, #12]
 8005e28:	60b9      	str	r1, [r7, #8]
 8005e2a:	603b      	str	r3, [r7, #0]
 8005e2c:	4613      	mov	r3, r2
 8005e2e:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8005e30:	f7fc fbfa 	bl	8002628 <HAL_GetTick>
 8005e34:	4602      	mov	r2, r0
 8005e36:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005e38:	1a9b      	subs	r3, r3, r2
 8005e3a:	683a      	ldr	r2, [r7, #0]
 8005e3c:	4413      	add	r3, r2
 8005e3e:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8005e40:	f7fc fbf2 	bl	8002628 <HAL_GetTick>
 8005e44:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8005e46:	4b39      	ldr	r3, [pc, #228]	@ (8005f2c <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8005e48:	681b      	ldr	r3, [r3, #0]
 8005e4a:	015b      	lsls	r3, r3, #5
 8005e4c:	0d1b      	lsrs	r3, r3, #20
 8005e4e:	69fa      	ldr	r2, [r7, #28]
 8005e50:	fb02 f303 	mul.w	r3, r2, r3
 8005e54:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005e56:	e054      	b.n	8005f02 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8005e58:	683b      	ldr	r3, [r7, #0]
 8005e5a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005e5e:	d050      	beq.n	8005f02 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8005e60:	f7fc fbe2 	bl	8002628 <HAL_GetTick>
 8005e64:	4602      	mov	r2, r0
 8005e66:	69bb      	ldr	r3, [r7, #24]
 8005e68:	1ad3      	subs	r3, r2, r3
 8005e6a:	69fa      	ldr	r2, [r7, #28]
 8005e6c:	429a      	cmp	r2, r3
 8005e6e:	d902      	bls.n	8005e76 <SPI_WaitFlagStateUntilTimeout+0x56>
 8005e70:	69fb      	ldr	r3, [r7, #28]
 8005e72:	2b00      	cmp	r3, #0
 8005e74:	d13d      	bne.n	8005ef2 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8005e76:	68fb      	ldr	r3, [r7, #12]
 8005e78:	681b      	ldr	r3, [r3, #0]
 8005e7a:	685a      	ldr	r2, [r3, #4]
 8005e7c:	68fb      	ldr	r3, [r7, #12]
 8005e7e:	681b      	ldr	r3, [r3, #0]
 8005e80:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8005e84:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005e86:	68fb      	ldr	r3, [r7, #12]
 8005e88:	685b      	ldr	r3, [r3, #4]
 8005e8a:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8005e8e:	d111      	bne.n	8005eb4 <SPI_WaitFlagStateUntilTimeout+0x94>
 8005e90:	68fb      	ldr	r3, [r7, #12]
 8005e92:	689b      	ldr	r3, [r3, #8]
 8005e94:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005e98:	d004      	beq.n	8005ea4 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005e9a:	68fb      	ldr	r3, [r7, #12]
 8005e9c:	689b      	ldr	r3, [r3, #8]
 8005e9e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005ea2:	d107      	bne.n	8005eb4 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8005ea4:	68fb      	ldr	r3, [r7, #12]
 8005ea6:	681b      	ldr	r3, [r3, #0]
 8005ea8:	681a      	ldr	r2, [r3, #0]
 8005eaa:	68fb      	ldr	r3, [r7, #12]
 8005eac:	681b      	ldr	r3, [r3, #0]
 8005eae:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8005eb2:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8005eb4:	68fb      	ldr	r3, [r7, #12]
 8005eb6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005eb8:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005ebc:	d10f      	bne.n	8005ede <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8005ebe:	68fb      	ldr	r3, [r7, #12]
 8005ec0:	681b      	ldr	r3, [r3, #0]
 8005ec2:	681a      	ldr	r2, [r3, #0]
 8005ec4:	68fb      	ldr	r3, [r7, #12]
 8005ec6:	681b      	ldr	r3, [r3, #0]
 8005ec8:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8005ecc:	601a      	str	r2, [r3, #0]
 8005ece:	68fb      	ldr	r3, [r7, #12]
 8005ed0:	681b      	ldr	r3, [r3, #0]
 8005ed2:	681a      	ldr	r2, [r3, #0]
 8005ed4:	68fb      	ldr	r3, [r7, #12]
 8005ed6:	681b      	ldr	r3, [r3, #0]
 8005ed8:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8005edc:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8005ede:	68fb      	ldr	r3, [r7, #12]
 8005ee0:	2201      	movs	r2, #1
 8005ee2:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8005ee6:	68fb      	ldr	r3, [r7, #12]
 8005ee8:	2200      	movs	r2, #0
 8005eea:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 8005eee:	2303      	movs	r3, #3
 8005ef0:	e017      	b.n	8005f22 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8005ef2:	697b      	ldr	r3, [r7, #20]
 8005ef4:	2b00      	cmp	r3, #0
 8005ef6:	d101      	bne.n	8005efc <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8005ef8:	2300      	movs	r3, #0
 8005efa:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8005efc:	697b      	ldr	r3, [r7, #20]
 8005efe:	3b01      	subs	r3, #1
 8005f00:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005f02:	68fb      	ldr	r3, [r7, #12]
 8005f04:	681b      	ldr	r3, [r3, #0]
 8005f06:	689a      	ldr	r2, [r3, #8]
 8005f08:	68bb      	ldr	r3, [r7, #8]
 8005f0a:	4013      	ands	r3, r2
 8005f0c:	68ba      	ldr	r2, [r7, #8]
 8005f0e:	429a      	cmp	r2, r3
 8005f10:	bf0c      	ite	eq
 8005f12:	2301      	moveq	r3, #1
 8005f14:	2300      	movne	r3, #0
 8005f16:	b2db      	uxtb	r3, r3
 8005f18:	461a      	mov	r2, r3
 8005f1a:	79fb      	ldrb	r3, [r7, #7]
 8005f1c:	429a      	cmp	r2, r3
 8005f1e:	d19b      	bne.n	8005e58 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8005f20:	2300      	movs	r3, #0
}
 8005f22:	4618      	mov	r0, r3
 8005f24:	3720      	adds	r7, #32
 8005f26:	46bd      	mov	sp, r7
 8005f28:	bd80      	pop	{r7, pc}
 8005f2a:	bf00      	nop
 8005f2c:	20000048 	.word	0x20000048

08005f30 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8005f30:	b580      	push	{r7, lr}
 8005f32:	b086      	sub	sp, #24
 8005f34:	af02      	add	r7, sp, #8
 8005f36:	60f8      	str	r0, [r7, #12]
 8005f38:	60b9      	str	r1, [r7, #8]
 8005f3a:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005f3c:	68fb      	ldr	r3, [r7, #12]
 8005f3e:	685b      	ldr	r3, [r3, #4]
 8005f40:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8005f44:	d111      	bne.n	8005f6a <SPI_EndRxTransaction+0x3a>
 8005f46:	68fb      	ldr	r3, [r7, #12]
 8005f48:	689b      	ldr	r3, [r3, #8]
 8005f4a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005f4e:	d004      	beq.n	8005f5a <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005f50:	68fb      	ldr	r3, [r7, #12]
 8005f52:	689b      	ldr	r3, [r3, #8]
 8005f54:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005f58:	d107      	bne.n	8005f6a <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8005f5a:	68fb      	ldr	r3, [r7, #12]
 8005f5c:	681b      	ldr	r3, [r3, #0]
 8005f5e:	681a      	ldr	r2, [r3, #0]
 8005f60:	68fb      	ldr	r3, [r7, #12]
 8005f62:	681b      	ldr	r3, [r3, #0]
 8005f64:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8005f68:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005f6a:	68fb      	ldr	r3, [r7, #12]
 8005f6c:	685b      	ldr	r3, [r3, #4]
 8005f6e:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8005f72:	d12a      	bne.n	8005fca <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 8005f74:	68fb      	ldr	r3, [r7, #12]
 8005f76:	689b      	ldr	r3, [r3, #8]
 8005f78:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005f7c:	d012      	beq.n	8005fa4 <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8005f7e:	687b      	ldr	r3, [r7, #4]
 8005f80:	9300      	str	r3, [sp, #0]
 8005f82:	68bb      	ldr	r3, [r7, #8]
 8005f84:	2200      	movs	r2, #0
 8005f86:	2180      	movs	r1, #128	@ 0x80
 8005f88:	68f8      	ldr	r0, [r7, #12]
 8005f8a:	f7ff ff49 	bl	8005e20 <SPI_WaitFlagStateUntilTimeout>
 8005f8e:	4603      	mov	r3, r0
 8005f90:	2b00      	cmp	r3, #0
 8005f92:	d02d      	beq.n	8005ff0 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005f94:	68fb      	ldr	r3, [r7, #12]
 8005f96:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005f98:	f043 0220 	orr.w	r2, r3, #32
 8005f9c:	68fb      	ldr	r3, [r7, #12]
 8005f9e:	655a      	str	r2, [r3, #84]	@ 0x54
        return HAL_TIMEOUT;
 8005fa0:	2303      	movs	r3, #3
 8005fa2:	e026      	b.n	8005ff2 <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8005fa4:	687b      	ldr	r3, [r7, #4]
 8005fa6:	9300      	str	r3, [sp, #0]
 8005fa8:	68bb      	ldr	r3, [r7, #8]
 8005faa:	2200      	movs	r2, #0
 8005fac:	2101      	movs	r1, #1
 8005fae:	68f8      	ldr	r0, [r7, #12]
 8005fb0:	f7ff ff36 	bl	8005e20 <SPI_WaitFlagStateUntilTimeout>
 8005fb4:	4603      	mov	r3, r0
 8005fb6:	2b00      	cmp	r3, #0
 8005fb8:	d01a      	beq.n	8005ff0 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005fba:	68fb      	ldr	r3, [r7, #12]
 8005fbc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005fbe:	f043 0220 	orr.w	r2, r3, #32
 8005fc2:	68fb      	ldr	r3, [r7, #12]
 8005fc4:	655a      	str	r2, [r3, #84]	@ 0x54
        return HAL_TIMEOUT;
 8005fc6:	2303      	movs	r3, #3
 8005fc8:	e013      	b.n	8005ff2 <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8005fca:	687b      	ldr	r3, [r7, #4]
 8005fcc:	9300      	str	r3, [sp, #0]
 8005fce:	68bb      	ldr	r3, [r7, #8]
 8005fd0:	2200      	movs	r2, #0
 8005fd2:	2101      	movs	r1, #1
 8005fd4:	68f8      	ldr	r0, [r7, #12]
 8005fd6:	f7ff ff23 	bl	8005e20 <SPI_WaitFlagStateUntilTimeout>
 8005fda:	4603      	mov	r3, r0
 8005fdc:	2b00      	cmp	r3, #0
 8005fde:	d007      	beq.n	8005ff0 <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005fe0:	68fb      	ldr	r3, [r7, #12]
 8005fe2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005fe4:	f043 0220 	orr.w	r2, r3, #32
 8005fe8:	68fb      	ldr	r3, [r7, #12]
 8005fea:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 8005fec:	2303      	movs	r3, #3
 8005fee:	e000      	b.n	8005ff2 <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 8005ff0:	2300      	movs	r3, #0
}
 8005ff2:	4618      	mov	r0, r3
 8005ff4:	3710      	adds	r7, #16
 8005ff6:	46bd      	mov	sp, r7
 8005ff8:	bd80      	pop	{r7, pc}
	...

08005ffc <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8005ffc:	b580      	push	{r7, lr}
 8005ffe:	b088      	sub	sp, #32
 8006000:	af02      	add	r7, sp, #8
 8006002:	60f8      	str	r0, [r7, #12]
 8006004:	60b9      	str	r1, [r7, #8]
 8006006:	607a      	str	r2, [r7, #4]
  /* Wait until TXE flag */
  if(SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 8006008:	687b      	ldr	r3, [r7, #4]
 800600a:	9300      	str	r3, [sp, #0]
 800600c:	68bb      	ldr	r3, [r7, #8]
 800600e:	2201      	movs	r2, #1
 8006010:	2102      	movs	r1, #2
 8006012:	68f8      	ldr	r0, [r7, #12]
 8006014:	f7ff ff04 	bl	8005e20 <SPI_WaitFlagStateUntilTimeout>
 8006018:	4603      	mov	r3, r0
 800601a:	2b00      	cmp	r3, #0
 800601c:	d007      	beq.n	800602e <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800601e:	68fb      	ldr	r3, [r7, #12]
 8006020:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006022:	f043 0220 	orr.w	r2, r3, #32
 8006026:	68fb      	ldr	r3, [r7, #12]
 8006028:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 800602a:	2303      	movs	r3, #3
 800602c:	e032      	b.n	8006094 <SPI_EndRxTxTransaction+0x98>
  }

  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 800602e:	4b1b      	ldr	r3, [pc, #108]	@ (800609c <SPI_EndRxTxTransaction+0xa0>)
 8006030:	681b      	ldr	r3, [r3, #0]
 8006032:	4a1b      	ldr	r2, [pc, #108]	@ (80060a0 <SPI_EndRxTxTransaction+0xa4>)
 8006034:	fba2 2303 	umull	r2, r3, r2, r3
 8006038:	0d5b      	lsrs	r3, r3, #21
 800603a:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800603e:	fb02 f303 	mul.w	r3, r2, r3
 8006042:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8006044:	68fb      	ldr	r3, [r7, #12]
 8006046:	685b      	ldr	r3, [r3, #4]
 8006048:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800604c:	d112      	bne.n	8006074 <SPI_EndRxTxTransaction+0x78>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800604e:	687b      	ldr	r3, [r7, #4]
 8006050:	9300      	str	r3, [sp, #0]
 8006052:	68bb      	ldr	r3, [r7, #8]
 8006054:	2200      	movs	r2, #0
 8006056:	2180      	movs	r1, #128	@ 0x80
 8006058:	68f8      	ldr	r0, [r7, #12]
 800605a:	f7ff fee1 	bl	8005e20 <SPI_WaitFlagStateUntilTimeout>
 800605e:	4603      	mov	r3, r0
 8006060:	2b00      	cmp	r3, #0
 8006062:	d016      	beq.n	8006092 <SPI_EndRxTxTransaction+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006064:	68fb      	ldr	r3, [r7, #12]
 8006066:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006068:	f043 0220 	orr.w	r2, r3, #32
 800606c:	68fb      	ldr	r3, [r7, #12]
 800606e:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 8006070:	2303      	movs	r3, #3
 8006072:	e00f      	b.n	8006094 <SPI_EndRxTxTransaction+0x98>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8006074:	697b      	ldr	r3, [r7, #20]
 8006076:	2b00      	cmp	r3, #0
 8006078:	d00a      	beq.n	8006090 <SPI_EndRxTxTransaction+0x94>
      {
        break;
      }
      count--;
 800607a:	697b      	ldr	r3, [r7, #20]
 800607c:	3b01      	subs	r3, #1
 800607e:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8006080:	68fb      	ldr	r3, [r7, #12]
 8006082:	681b      	ldr	r3, [r3, #0]
 8006084:	689b      	ldr	r3, [r3, #8]
 8006086:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800608a:	2b80      	cmp	r3, #128	@ 0x80
 800608c:	d0f2      	beq.n	8006074 <SPI_EndRxTxTransaction+0x78>
 800608e:	e000      	b.n	8006092 <SPI_EndRxTxTransaction+0x96>
        break;
 8006090:	bf00      	nop
  }

  return HAL_OK;
 8006092:	2300      	movs	r3, #0
}
 8006094:	4618      	mov	r0, r3
 8006096:	3718      	adds	r7, #24
 8006098:	46bd      	mov	sp, r7
 800609a:	bd80      	pop	{r7, pc}
 800609c:	20000048 	.word	0x20000048
 80060a0:	165e9f81 	.word	0x165e9f81

080060a4 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80060a4:	b580      	push	{r7, lr}
 80060a6:	b082      	sub	sp, #8
 80060a8:	af00      	add	r7, sp, #0
 80060aa:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80060ac:	687b      	ldr	r3, [r7, #4]
 80060ae:	2b00      	cmp	r3, #0
 80060b0:	d101      	bne.n	80060b6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80060b2:	2301      	movs	r3, #1
 80060b4:	e042      	b.n	800613c <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80060b6:	687b      	ldr	r3, [r7, #4]
 80060b8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80060bc:	b2db      	uxtb	r3, r3
 80060be:	2b00      	cmp	r3, #0
 80060c0:	d106      	bne.n	80060d0 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80060c2:	687b      	ldr	r3, [r7, #4]
 80060c4:	2200      	movs	r2, #0
 80060c6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80060ca:	6878      	ldr	r0, [r7, #4]
 80060cc:	f7fc f8be 	bl	800224c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80060d0:	687b      	ldr	r3, [r7, #4]
 80060d2:	2224      	movs	r2, #36	@ 0x24
 80060d4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80060d8:	687b      	ldr	r3, [r7, #4]
 80060da:	681b      	ldr	r3, [r3, #0]
 80060dc:	68da      	ldr	r2, [r3, #12]
 80060de:	687b      	ldr	r3, [r7, #4]
 80060e0:	681b      	ldr	r3, [r3, #0]
 80060e2:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80060e6:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80060e8:	6878      	ldr	r0, [r7, #4]
 80060ea:	f000 f82b 	bl	8006144 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80060ee:	687b      	ldr	r3, [r7, #4]
 80060f0:	681b      	ldr	r3, [r3, #0]
 80060f2:	691a      	ldr	r2, [r3, #16]
 80060f4:	687b      	ldr	r3, [r7, #4]
 80060f6:	681b      	ldr	r3, [r3, #0]
 80060f8:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80060fc:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80060fe:	687b      	ldr	r3, [r7, #4]
 8006100:	681b      	ldr	r3, [r3, #0]
 8006102:	695a      	ldr	r2, [r3, #20]
 8006104:	687b      	ldr	r3, [r7, #4]
 8006106:	681b      	ldr	r3, [r3, #0]
 8006108:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800610c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800610e:	687b      	ldr	r3, [r7, #4]
 8006110:	681b      	ldr	r3, [r3, #0]
 8006112:	68da      	ldr	r2, [r3, #12]
 8006114:	687b      	ldr	r3, [r7, #4]
 8006116:	681b      	ldr	r3, [r3, #0]
 8006118:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800611c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800611e:	687b      	ldr	r3, [r7, #4]
 8006120:	2200      	movs	r2, #0
 8006122:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8006124:	687b      	ldr	r3, [r7, #4]
 8006126:	2220      	movs	r2, #32
 8006128:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 800612c:	687b      	ldr	r3, [r7, #4]
 800612e:	2220      	movs	r2, #32
 8006130:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006134:	687b      	ldr	r3, [r7, #4]
 8006136:	2200      	movs	r2, #0
 8006138:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 800613a:	2300      	movs	r3, #0
}
 800613c:	4618      	mov	r0, r3
 800613e:	3708      	adds	r7, #8
 8006140:	46bd      	mov	sp, r7
 8006142:	bd80      	pop	{r7, pc}

08006144 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006144:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006148:	b0c0      	sub	sp, #256	@ 0x100
 800614a:	af00      	add	r7, sp, #0
 800614c:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006150:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006154:	681b      	ldr	r3, [r3, #0]
 8006156:	691b      	ldr	r3, [r3, #16]
 8006158:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 800615c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006160:	68d9      	ldr	r1, [r3, #12]
 8006162:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006166:	681a      	ldr	r2, [r3, #0]
 8006168:	ea40 0301 	orr.w	r3, r0, r1
 800616c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800616e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006172:	689a      	ldr	r2, [r3, #8]
 8006174:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006178:	691b      	ldr	r3, [r3, #16]
 800617a:	431a      	orrs	r2, r3
 800617c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006180:	695b      	ldr	r3, [r3, #20]
 8006182:	431a      	orrs	r2, r3
 8006184:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006188:	69db      	ldr	r3, [r3, #28]
 800618a:	4313      	orrs	r3, r2
 800618c:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8006190:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006194:	681b      	ldr	r3, [r3, #0]
 8006196:	68db      	ldr	r3, [r3, #12]
 8006198:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 800619c:	f021 010c 	bic.w	r1, r1, #12
 80061a0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80061a4:	681a      	ldr	r2, [r3, #0]
 80061a6:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 80061aa:	430b      	orrs	r3, r1
 80061ac:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80061ae:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80061b2:	681b      	ldr	r3, [r3, #0]
 80061b4:	695b      	ldr	r3, [r3, #20]
 80061b6:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 80061ba:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80061be:	6999      	ldr	r1, [r3, #24]
 80061c0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80061c4:	681a      	ldr	r2, [r3, #0]
 80061c6:	ea40 0301 	orr.w	r3, r0, r1
 80061ca:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80061cc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80061d0:	681a      	ldr	r2, [r3, #0]
 80061d2:	4b8f      	ldr	r3, [pc, #572]	@ (8006410 <UART_SetConfig+0x2cc>)
 80061d4:	429a      	cmp	r2, r3
 80061d6:	d005      	beq.n	80061e4 <UART_SetConfig+0xa0>
 80061d8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80061dc:	681a      	ldr	r2, [r3, #0]
 80061de:	4b8d      	ldr	r3, [pc, #564]	@ (8006414 <UART_SetConfig+0x2d0>)
 80061e0:	429a      	cmp	r2, r3
 80061e2:	d104      	bne.n	80061ee <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80061e4:	f7fe fef2 	bl	8004fcc <HAL_RCC_GetPCLK2Freq>
 80061e8:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 80061ec:	e003      	b.n	80061f6 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80061ee:	f7fe fed9 	bl	8004fa4 <HAL_RCC_GetPCLK1Freq>
 80061f2:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80061f6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80061fa:	69db      	ldr	r3, [r3, #28]
 80061fc:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006200:	f040 810c 	bne.w	800641c <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8006204:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006208:	2200      	movs	r2, #0
 800620a:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800620e:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8006212:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8006216:	4622      	mov	r2, r4
 8006218:	462b      	mov	r3, r5
 800621a:	1891      	adds	r1, r2, r2
 800621c:	65b9      	str	r1, [r7, #88]	@ 0x58
 800621e:	415b      	adcs	r3, r3
 8006220:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8006222:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8006226:	4621      	mov	r1, r4
 8006228:	eb12 0801 	adds.w	r8, r2, r1
 800622c:	4629      	mov	r1, r5
 800622e:	eb43 0901 	adc.w	r9, r3, r1
 8006232:	f04f 0200 	mov.w	r2, #0
 8006236:	f04f 0300 	mov.w	r3, #0
 800623a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800623e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8006242:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8006246:	4690      	mov	r8, r2
 8006248:	4699      	mov	r9, r3
 800624a:	4623      	mov	r3, r4
 800624c:	eb18 0303 	adds.w	r3, r8, r3
 8006250:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8006254:	462b      	mov	r3, r5
 8006256:	eb49 0303 	adc.w	r3, r9, r3
 800625a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800625e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006262:	685b      	ldr	r3, [r3, #4]
 8006264:	2200      	movs	r2, #0
 8006266:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800626a:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 800626e:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8006272:	460b      	mov	r3, r1
 8006274:	18db      	adds	r3, r3, r3
 8006276:	653b      	str	r3, [r7, #80]	@ 0x50
 8006278:	4613      	mov	r3, r2
 800627a:	eb42 0303 	adc.w	r3, r2, r3
 800627e:	657b      	str	r3, [r7, #84]	@ 0x54
 8006280:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8006284:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8006288:	f7fa f802 	bl	8000290 <__aeabi_uldivmod>
 800628c:	4602      	mov	r2, r0
 800628e:	460b      	mov	r3, r1
 8006290:	4b61      	ldr	r3, [pc, #388]	@ (8006418 <UART_SetConfig+0x2d4>)
 8006292:	fba3 2302 	umull	r2, r3, r3, r2
 8006296:	095b      	lsrs	r3, r3, #5
 8006298:	011c      	lsls	r4, r3, #4
 800629a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800629e:	2200      	movs	r2, #0
 80062a0:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80062a4:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 80062a8:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 80062ac:	4642      	mov	r2, r8
 80062ae:	464b      	mov	r3, r9
 80062b0:	1891      	adds	r1, r2, r2
 80062b2:	64b9      	str	r1, [r7, #72]	@ 0x48
 80062b4:	415b      	adcs	r3, r3
 80062b6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80062b8:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 80062bc:	4641      	mov	r1, r8
 80062be:	eb12 0a01 	adds.w	sl, r2, r1
 80062c2:	4649      	mov	r1, r9
 80062c4:	eb43 0b01 	adc.w	fp, r3, r1
 80062c8:	f04f 0200 	mov.w	r2, #0
 80062cc:	f04f 0300 	mov.w	r3, #0
 80062d0:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80062d4:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80062d8:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80062dc:	4692      	mov	sl, r2
 80062de:	469b      	mov	fp, r3
 80062e0:	4643      	mov	r3, r8
 80062e2:	eb1a 0303 	adds.w	r3, sl, r3
 80062e6:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80062ea:	464b      	mov	r3, r9
 80062ec:	eb4b 0303 	adc.w	r3, fp, r3
 80062f0:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 80062f4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80062f8:	685b      	ldr	r3, [r3, #4]
 80062fa:	2200      	movs	r2, #0
 80062fc:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8006300:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8006304:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8006308:	460b      	mov	r3, r1
 800630a:	18db      	adds	r3, r3, r3
 800630c:	643b      	str	r3, [r7, #64]	@ 0x40
 800630e:	4613      	mov	r3, r2
 8006310:	eb42 0303 	adc.w	r3, r2, r3
 8006314:	647b      	str	r3, [r7, #68]	@ 0x44
 8006316:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 800631a:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 800631e:	f7f9 ffb7 	bl	8000290 <__aeabi_uldivmod>
 8006322:	4602      	mov	r2, r0
 8006324:	460b      	mov	r3, r1
 8006326:	4611      	mov	r1, r2
 8006328:	4b3b      	ldr	r3, [pc, #236]	@ (8006418 <UART_SetConfig+0x2d4>)
 800632a:	fba3 2301 	umull	r2, r3, r3, r1
 800632e:	095b      	lsrs	r3, r3, #5
 8006330:	2264      	movs	r2, #100	@ 0x64
 8006332:	fb02 f303 	mul.w	r3, r2, r3
 8006336:	1acb      	subs	r3, r1, r3
 8006338:	00db      	lsls	r3, r3, #3
 800633a:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 800633e:	4b36      	ldr	r3, [pc, #216]	@ (8006418 <UART_SetConfig+0x2d4>)
 8006340:	fba3 2302 	umull	r2, r3, r3, r2
 8006344:	095b      	lsrs	r3, r3, #5
 8006346:	005b      	lsls	r3, r3, #1
 8006348:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 800634c:	441c      	add	r4, r3
 800634e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006352:	2200      	movs	r2, #0
 8006354:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8006358:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 800635c:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8006360:	4642      	mov	r2, r8
 8006362:	464b      	mov	r3, r9
 8006364:	1891      	adds	r1, r2, r2
 8006366:	63b9      	str	r1, [r7, #56]	@ 0x38
 8006368:	415b      	adcs	r3, r3
 800636a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800636c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8006370:	4641      	mov	r1, r8
 8006372:	1851      	adds	r1, r2, r1
 8006374:	6339      	str	r1, [r7, #48]	@ 0x30
 8006376:	4649      	mov	r1, r9
 8006378:	414b      	adcs	r3, r1
 800637a:	637b      	str	r3, [r7, #52]	@ 0x34
 800637c:	f04f 0200 	mov.w	r2, #0
 8006380:	f04f 0300 	mov.w	r3, #0
 8006384:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8006388:	4659      	mov	r1, fp
 800638a:	00cb      	lsls	r3, r1, #3
 800638c:	4651      	mov	r1, sl
 800638e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006392:	4651      	mov	r1, sl
 8006394:	00ca      	lsls	r2, r1, #3
 8006396:	4610      	mov	r0, r2
 8006398:	4619      	mov	r1, r3
 800639a:	4603      	mov	r3, r0
 800639c:	4642      	mov	r2, r8
 800639e:	189b      	adds	r3, r3, r2
 80063a0:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80063a4:	464b      	mov	r3, r9
 80063a6:	460a      	mov	r2, r1
 80063a8:	eb42 0303 	adc.w	r3, r2, r3
 80063ac:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80063b0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80063b4:	685b      	ldr	r3, [r3, #4]
 80063b6:	2200      	movs	r2, #0
 80063b8:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 80063bc:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 80063c0:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 80063c4:	460b      	mov	r3, r1
 80063c6:	18db      	adds	r3, r3, r3
 80063c8:	62bb      	str	r3, [r7, #40]	@ 0x28
 80063ca:	4613      	mov	r3, r2
 80063cc:	eb42 0303 	adc.w	r3, r2, r3
 80063d0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80063d2:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80063d6:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 80063da:	f7f9 ff59 	bl	8000290 <__aeabi_uldivmod>
 80063de:	4602      	mov	r2, r0
 80063e0:	460b      	mov	r3, r1
 80063e2:	4b0d      	ldr	r3, [pc, #52]	@ (8006418 <UART_SetConfig+0x2d4>)
 80063e4:	fba3 1302 	umull	r1, r3, r3, r2
 80063e8:	095b      	lsrs	r3, r3, #5
 80063ea:	2164      	movs	r1, #100	@ 0x64
 80063ec:	fb01 f303 	mul.w	r3, r1, r3
 80063f0:	1ad3      	subs	r3, r2, r3
 80063f2:	00db      	lsls	r3, r3, #3
 80063f4:	3332      	adds	r3, #50	@ 0x32
 80063f6:	4a08      	ldr	r2, [pc, #32]	@ (8006418 <UART_SetConfig+0x2d4>)
 80063f8:	fba2 2303 	umull	r2, r3, r2, r3
 80063fc:	095b      	lsrs	r3, r3, #5
 80063fe:	f003 0207 	and.w	r2, r3, #7
 8006402:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006406:	681b      	ldr	r3, [r3, #0]
 8006408:	4422      	add	r2, r4
 800640a:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800640c:	e106      	b.n	800661c <UART_SetConfig+0x4d8>
 800640e:	bf00      	nop
 8006410:	40011000 	.word	0x40011000
 8006414:	40011400 	.word	0x40011400
 8006418:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800641c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006420:	2200      	movs	r2, #0
 8006422:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8006426:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 800642a:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 800642e:	4642      	mov	r2, r8
 8006430:	464b      	mov	r3, r9
 8006432:	1891      	adds	r1, r2, r2
 8006434:	6239      	str	r1, [r7, #32]
 8006436:	415b      	adcs	r3, r3
 8006438:	627b      	str	r3, [r7, #36]	@ 0x24
 800643a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800643e:	4641      	mov	r1, r8
 8006440:	1854      	adds	r4, r2, r1
 8006442:	4649      	mov	r1, r9
 8006444:	eb43 0501 	adc.w	r5, r3, r1
 8006448:	f04f 0200 	mov.w	r2, #0
 800644c:	f04f 0300 	mov.w	r3, #0
 8006450:	00eb      	lsls	r3, r5, #3
 8006452:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8006456:	00e2      	lsls	r2, r4, #3
 8006458:	4614      	mov	r4, r2
 800645a:	461d      	mov	r5, r3
 800645c:	4643      	mov	r3, r8
 800645e:	18e3      	adds	r3, r4, r3
 8006460:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8006464:	464b      	mov	r3, r9
 8006466:	eb45 0303 	adc.w	r3, r5, r3
 800646a:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800646e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006472:	685b      	ldr	r3, [r3, #4]
 8006474:	2200      	movs	r2, #0
 8006476:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800647a:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 800647e:	f04f 0200 	mov.w	r2, #0
 8006482:	f04f 0300 	mov.w	r3, #0
 8006486:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 800648a:	4629      	mov	r1, r5
 800648c:	008b      	lsls	r3, r1, #2
 800648e:	4621      	mov	r1, r4
 8006490:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006494:	4621      	mov	r1, r4
 8006496:	008a      	lsls	r2, r1, #2
 8006498:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 800649c:	f7f9 fef8 	bl	8000290 <__aeabi_uldivmod>
 80064a0:	4602      	mov	r2, r0
 80064a2:	460b      	mov	r3, r1
 80064a4:	4b60      	ldr	r3, [pc, #384]	@ (8006628 <UART_SetConfig+0x4e4>)
 80064a6:	fba3 2302 	umull	r2, r3, r3, r2
 80064aa:	095b      	lsrs	r3, r3, #5
 80064ac:	011c      	lsls	r4, r3, #4
 80064ae:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80064b2:	2200      	movs	r2, #0
 80064b4:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80064b8:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 80064bc:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 80064c0:	4642      	mov	r2, r8
 80064c2:	464b      	mov	r3, r9
 80064c4:	1891      	adds	r1, r2, r2
 80064c6:	61b9      	str	r1, [r7, #24]
 80064c8:	415b      	adcs	r3, r3
 80064ca:	61fb      	str	r3, [r7, #28]
 80064cc:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80064d0:	4641      	mov	r1, r8
 80064d2:	1851      	adds	r1, r2, r1
 80064d4:	6139      	str	r1, [r7, #16]
 80064d6:	4649      	mov	r1, r9
 80064d8:	414b      	adcs	r3, r1
 80064da:	617b      	str	r3, [r7, #20]
 80064dc:	f04f 0200 	mov.w	r2, #0
 80064e0:	f04f 0300 	mov.w	r3, #0
 80064e4:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80064e8:	4659      	mov	r1, fp
 80064ea:	00cb      	lsls	r3, r1, #3
 80064ec:	4651      	mov	r1, sl
 80064ee:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80064f2:	4651      	mov	r1, sl
 80064f4:	00ca      	lsls	r2, r1, #3
 80064f6:	4610      	mov	r0, r2
 80064f8:	4619      	mov	r1, r3
 80064fa:	4603      	mov	r3, r0
 80064fc:	4642      	mov	r2, r8
 80064fe:	189b      	adds	r3, r3, r2
 8006500:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8006504:	464b      	mov	r3, r9
 8006506:	460a      	mov	r2, r1
 8006508:	eb42 0303 	adc.w	r3, r2, r3
 800650c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8006510:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006514:	685b      	ldr	r3, [r3, #4]
 8006516:	2200      	movs	r2, #0
 8006518:	67bb      	str	r3, [r7, #120]	@ 0x78
 800651a:	67fa      	str	r2, [r7, #124]	@ 0x7c
 800651c:	f04f 0200 	mov.w	r2, #0
 8006520:	f04f 0300 	mov.w	r3, #0
 8006524:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8006528:	4649      	mov	r1, r9
 800652a:	008b      	lsls	r3, r1, #2
 800652c:	4641      	mov	r1, r8
 800652e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006532:	4641      	mov	r1, r8
 8006534:	008a      	lsls	r2, r1, #2
 8006536:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 800653a:	f7f9 fea9 	bl	8000290 <__aeabi_uldivmod>
 800653e:	4602      	mov	r2, r0
 8006540:	460b      	mov	r3, r1
 8006542:	4611      	mov	r1, r2
 8006544:	4b38      	ldr	r3, [pc, #224]	@ (8006628 <UART_SetConfig+0x4e4>)
 8006546:	fba3 2301 	umull	r2, r3, r3, r1
 800654a:	095b      	lsrs	r3, r3, #5
 800654c:	2264      	movs	r2, #100	@ 0x64
 800654e:	fb02 f303 	mul.w	r3, r2, r3
 8006552:	1acb      	subs	r3, r1, r3
 8006554:	011b      	lsls	r3, r3, #4
 8006556:	3332      	adds	r3, #50	@ 0x32
 8006558:	4a33      	ldr	r2, [pc, #204]	@ (8006628 <UART_SetConfig+0x4e4>)
 800655a:	fba2 2303 	umull	r2, r3, r2, r3
 800655e:	095b      	lsrs	r3, r3, #5
 8006560:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8006564:	441c      	add	r4, r3
 8006566:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800656a:	2200      	movs	r2, #0
 800656c:	673b      	str	r3, [r7, #112]	@ 0x70
 800656e:	677a      	str	r2, [r7, #116]	@ 0x74
 8006570:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8006574:	4642      	mov	r2, r8
 8006576:	464b      	mov	r3, r9
 8006578:	1891      	adds	r1, r2, r2
 800657a:	60b9      	str	r1, [r7, #8]
 800657c:	415b      	adcs	r3, r3
 800657e:	60fb      	str	r3, [r7, #12]
 8006580:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8006584:	4641      	mov	r1, r8
 8006586:	1851      	adds	r1, r2, r1
 8006588:	6039      	str	r1, [r7, #0]
 800658a:	4649      	mov	r1, r9
 800658c:	414b      	adcs	r3, r1
 800658e:	607b      	str	r3, [r7, #4]
 8006590:	f04f 0200 	mov.w	r2, #0
 8006594:	f04f 0300 	mov.w	r3, #0
 8006598:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800659c:	4659      	mov	r1, fp
 800659e:	00cb      	lsls	r3, r1, #3
 80065a0:	4651      	mov	r1, sl
 80065a2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80065a6:	4651      	mov	r1, sl
 80065a8:	00ca      	lsls	r2, r1, #3
 80065aa:	4610      	mov	r0, r2
 80065ac:	4619      	mov	r1, r3
 80065ae:	4603      	mov	r3, r0
 80065b0:	4642      	mov	r2, r8
 80065b2:	189b      	adds	r3, r3, r2
 80065b4:	66bb      	str	r3, [r7, #104]	@ 0x68
 80065b6:	464b      	mov	r3, r9
 80065b8:	460a      	mov	r2, r1
 80065ba:	eb42 0303 	adc.w	r3, r2, r3
 80065be:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80065c0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80065c4:	685b      	ldr	r3, [r3, #4]
 80065c6:	2200      	movs	r2, #0
 80065c8:	663b      	str	r3, [r7, #96]	@ 0x60
 80065ca:	667a      	str	r2, [r7, #100]	@ 0x64
 80065cc:	f04f 0200 	mov.w	r2, #0
 80065d0:	f04f 0300 	mov.w	r3, #0
 80065d4:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 80065d8:	4649      	mov	r1, r9
 80065da:	008b      	lsls	r3, r1, #2
 80065dc:	4641      	mov	r1, r8
 80065de:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80065e2:	4641      	mov	r1, r8
 80065e4:	008a      	lsls	r2, r1, #2
 80065e6:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 80065ea:	f7f9 fe51 	bl	8000290 <__aeabi_uldivmod>
 80065ee:	4602      	mov	r2, r0
 80065f0:	460b      	mov	r3, r1
 80065f2:	4b0d      	ldr	r3, [pc, #52]	@ (8006628 <UART_SetConfig+0x4e4>)
 80065f4:	fba3 1302 	umull	r1, r3, r3, r2
 80065f8:	095b      	lsrs	r3, r3, #5
 80065fa:	2164      	movs	r1, #100	@ 0x64
 80065fc:	fb01 f303 	mul.w	r3, r1, r3
 8006600:	1ad3      	subs	r3, r2, r3
 8006602:	011b      	lsls	r3, r3, #4
 8006604:	3332      	adds	r3, #50	@ 0x32
 8006606:	4a08      	ldr	r2, [pc, #32]	@ (8006628 <UART_SetConfig+0x4e4>)
 8006608:	fba2 2303 	umull	r2, r3, r2, r3
 800660c:	095b      	lsrs	r3, r3, #5
 800660e:	f003 020f 	and.w	r2, r3, #15
 8006612:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006616:	681b      	ldr	r3, [r3, #0]
 8006618:	4422      	add	r2, r4
 800661a:	609a      	str	r2, [r3, #8]
}
 800661c:	bf00      	nop
 800661e:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8006622:	46bd      	mov	sp, r7
 8006624:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006628:	51eb851f 	.word	0x51eb851f

0800662c <FMC_SDRAM_Init>:
  * @param  Device Pointer to SDRAM device instance
  * @param  Init Pointer to SDRAM Initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_InitTypeDef *Init)
{
 800662c:	b480      	push	{r7}
 800662e:	b083      	sub	sp, #12
 8006630:	af00      	add	r7, sp, #0
 8006632:	6078      	str	r0, [r7, #4]
 8006634:	6039      	str	r1, [r7, #0]
  assert_param(IS_FMC_SDCLOCK_PERIOD(Init->SDClockPeriod));
  assert_param(IS_FMC_READ_BURST(Init->ReadBurst));
  assert_param(IS_FMC_READPIPE_DELAY(Init->ReadPipeDelay));

  /* Set SDRAM bank configuration parameters */
  if (Init->SDBank == FMC_SDRAM_BANK1)
 8006636:	683b      	ldr	r3, [r7, #0]
 8006638:	681b      	ldr	r3, [r3, #0]
 800663a:	2b00      	cmp	r3, #0
 800663c:	d123      	bne.n	8006686 <FMC_SDRAM_Init+0x5a>
  {
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 800663e:	687b      	ldr	r3, [r7, #4]
 8006640:	681b      	ldr	r3, [r3, #0]
 8006642:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 8006646:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 800664a:	683a      	ldr	r2, [r7, #0]
 800664c:	6851      	ldr	r1, [r2, #4]
 800664e:	683a      	ldr	r2, [r7, #0]
 8006650:	6892      	ldr	r2, [r2, #8]
 8006652:	4311      	orrs	r1, r2
 8006654:	683a      	ldr	r2, [r7, #0]
 8006656:	68d2      	ldr	r2, [r2, #12]
 8006658:	4311      	orrs	r1, r2
 800665a:	683a      	ldr	r2, [r7, #0]
 800665c:	6912      	ldr	r2, [r2, #16]
 800665e:	4311      	orrs	r1, r2
 8006660:	683a      	ldr	r2, [r7, #0]
 8006662:	6952      	ldr	r2, [r2, #20]
 8006664:	4311      	orrs	r1, r2
 8006666:	683a      	ldr	r2, [r7, #0]
 8006668:	6992      	ldr	r2, [r2, #24]
 800666a:	4311      	orrs	r1, r2
 800666c:	683a      	ldr	r2, [r7, #0]
 800666e:	69d2      	ldr	r2, [r2, #28]
 8006670:	4311      	orrs	r1, r2
 8006672:	683a      	ldr	r2, [r7, #0]
 8006674:	6a12      	ldr	r2, [r2, #32]
 8006676:	4311      	orrs	r1, r2
 8006678:	683a      	ldr	r2, [r7, #0]
 800667a:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800667c:	430a      	orrs	r2, r1
 800667e:	431a      	orrs	r2, r3
 8006680:	687b      	ldr	r3, [r7, #4]
 8006682:	601a      	str	r2, [r3, #0]
 8006684:	e028      	b.n	80066d8 <FMC_SDRAM_Init+0xac>
                Init->ReadBurst          |
                Init->ReadPipeDelay));
  }
  else /* FMC_Bank2_SDRAM */
  {
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 8006686:	687b      	ldr	r3, [r7, #4]
 8006688:	681b      	ldr	r3, [r3, #0]
 800668a:	f423 42f8 	bic.w	r2, r3, #31744	@ 0x7c00
 800668e:	683b      	ldr	r3, [r7, #0]
 8006690:	69d9      	ldr	r1, [r3, #28]
 8006692:	683b      	ldr	r3, [r7, #0]
 8006694:	6a1b      	ldr	r3, [r3, #32]
 8006696:	4319      	orrs	r1, r3
 8006698:	683b      	ldr	r3, [r7, #0]
 800669a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800669c:	430b      	orrs	r3, r1
 800669e:	431a      	orrs	r2, r3
 80066a0:	687b      	ldr	r3, [r7, #4]
 80066a2:	601a      	str	r2, [r3, #0]
               FMC_SDCR1_RPIPE,
               (Init->SDClockPeriod      |
                Init->ReadBurst          |
                Init->ReadPipeDelay));

    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK2],
 80066a4:	687b      	ldr	r3, [r7, #4]
 80066a6:	685b      	ldr	r3, [r3, #4]
 80066a8:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 80066ac:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 80066b0:	683a      	ldr	r2, [r7, #0]
 80066b2:	6851      	ldr	r1, [r2, #4]
 80066b4:	683a      	ldr	r2, [r7, #0]
 80066b6:	6892      	ldr	r2, [r2, #8]
 80066b8:	4311      	orrs	r1, r2
 80066ba:	683a      	ldr	r2, [r7, #0]
 80066bc:	68d2      	ldr	r2, [r2, #12]
 80066be:	4311      	orrs	r1, r2
 80066c0:	683a      	ldr	r2, [r7, #0]
 80066c2:	6912      	ldr	r2, [r2, #16]
 80066c4:	4311      	orrs	r1, r2
 80066c6:	683a      	ldr	r2, [r7, #0]
 80066c8:	6952      	ldr	r2, [r2, #20]
 80066ca:	4311      	orrs	r1, r2
 80066cc:	683a      	ldr	r2, [r7, #0]
 80066ce:	6992      	ldr	r2, [r2, #24]
 80066d0:	430a      	orrs	r2, r1
 80066d2:	431a      	orrs	r2, r3
 80066d4:	687b      	ldr	r3, [r7, #4]
 80066d6:	605a      	str	r2, [r3, #4]
                Init->InternalBankNumber |
                Init->CASLatency         |
                Init->WriteProtection));
  }

  return HAL_OK;
 80066d8:	2300      	movs	r3, #0
}
 80066da:	4618      	mov	r0, r3
 80066dc:	370c      	adds	r7, #12
 80066de:	46bd      	mov	sp, r7
 80066e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066e4:	4770      	bx	lr

080066e6 <FMC_SDRAM_Timing_Init>:
  * @param  Bank SDRAM bank number
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Timing_Init(FMC_SDRAM_TypeDef *Device,
                                        FMC_SDRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 80066e6:	b480      	push	{r7}
 80066e8:	b085      	sub	sp, #20
 80066ea:	af00      	add	r7, sp, #0
 80066ec:	60f8      	str	r0, [r7, #12]
 80066ee:	60b9      	str	r1, [r7, #8]
 80066f0:	607a      	str	r2, [r7, #4]
  assert_param(IS_FMC_RP_DELAY(Timing->RPDelay));
  assert_param(IS_FMC_RCD_DELAY(Timing->RCDDelay));
  assert_param(IS_FMC_SDRAM_BANK(Bank));

  /* Set SDRAM device timing parameters */
  if (Bank == FMC_SDRAM_BANK1)
 80066f2:	687b      	ldr	r3, [r7, #4]
 80066f4:	2b00      	cmp	r3, #0
 80066f6:	d128      	bne.n	800674a <FMC_SDRAM_Timing_Init+0x64>
  {
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 80066f8:	68fb      	ldr	r3, [r7, #12]
 80066fa:	689b      	ldr	r3, [r3, #8]
 80066fc:	f003 4270 	and.w	r2, r3, #4026531840	@ 0xf0000000
 8006700:	68bb      	ldr	r3, [r7, #8]
 8006702:	681b      	ldr	r3, [r3, #0]
 8006704:	1e59      	subs	r1, r3, #1
 8006706:	68bb      	ldr	r3, [r7, #8]
 8006708:	685b      	ldr	r3, [r3, #4]
 800670a:	3b01      	subs	r3, #1
 800670c:	011b      	lsls	r3, r3, #4
 800670e:	4319      	orrs	r1, r3
 8006710:	68bb      	ldr	r3, [r7, #8]
 8006712:	689b      	ldr	r3, [r3, #8]
 8006714:	3b01      	subs	r3, #1
 8006716:	021b      	lsls	r3, r3, #8
 8006718:	4319      	orrs	r1, r3
 800671a:	68bb      	ldr	r3, [r7, #8]
 800671c:	68db      	ldr	r3, [r3, #12]
 800671e:	3b01      	subs	r3, #1
 8006720:	031b      	lsls	r3, r3, #12
 8006722:	4319      	orrs	r1, r3
 8006724:	68bb      	ldr	r3, [r7, #8]
 8006726:	691b      	ldr	r3, [r3, #16]
 8006728:	3b01      	subs	r3, #1
 800672a:	041b      	lsls	r3, r3, #16
 800672c:	4319      	orrs	r1, r3
 800672e:	68bb      	ldr	r3, [r7, #8]
 8006730:	695b      	ldr	r3, [r3, #20]
 8006732:	3b01      	subs	r3, #1
 8006734:	051b      	lsls	r3, r3, #20
 8006736:	4319      	orrs	r1, r3
 8006738:	68bb      	ldr	r3, [r7, #8]
 800673a:	699b      	ldr	r3, [r3, #24]
 800673c:	3b01      	subs	r3, #1
 800673e:	061b      	lsls	r3, r3, #24
 8006740:	430b      	orrs	r3, r1
 8006742:	431a      	orrs	r2, r3
 8006744:	68fb      	ldr	r3, [r7, #12]
 8006746:	609a      	str	r2, [r3, #8]
 8006748:	e02f      	b.n	80067aa <FMC_SDRAM_Timing_Init+0xc4>
                (((Timing->RPDelay) - 1U)              << FMC_SDTR1_TRP_Pos)  |
                (((Timing->RCDDelay) - 1U)             << FMC_SDTR1_TRCD_Pos)));
  }
  else /* FMC_Bank2_SDRAM */
  {
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 800674a:	68fb      	ldr	r3, [r7, #12]
 800674c:	689b      	ldr	r3, [r3, #8]
 800674e:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8006752:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8006756:	68ba      	ldr	r2, [r7, #8]
 8006758:	68d2      	ldr	r2, [r2, #12]
 800675a:	3a01      	subs	r2, #1
 800675c:	0311      	lsls	r1, r2, #12
 800675e:	68ba      	ldr	r2, [r7, #8]
 8006760:	6952      	ldr	r2, [r2, #20]
 8006762:	3a01      	subs	r2, #1
 8006764:	0512      	lsls	r2, r2, #20
 8006766:	430a      	orrs	r2, r1
 8006768:	431a      	orrs	r2, r3
 800676a:	68fb      	ldr	r3, [r7, #12]
 800676c:	609a      	str	r2, [r3, #8]
               FMC_SDTR1_TRC |
               FMC_SDTR1_TRP,
               (((Timing->RowCycleDelay) - 1U)         << FMC_SDTR1_TRC_Pos)  |
               (((Timing->RPDelay) - 1U)               << FMC_SDTR1_TRP_Pos));

    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK2],
 800676e:	68fb      	ldr	r3, [r7, #12]
 8006770:	68db      	ldr	r3, [r3, #12]
 8006772:	f003 4270 	and.w	r2, r3, #4026531840	@ 0xf0000000
 8006776:	68bb      	ldr	r3, [r7, #8]
 8006778:	681b      	ldr	r3, [r3, #0]
 800677a:	1e59      	subs	r1, r3, #1
 800677c:	68bb      	ldr	r3, [r7, #8]
 800677e:	685b      	ldr	r3, [r3, #4]
 8006780:	3b01      	subs	r3, #1
 8006782:	011b      	lsls	r3, r3, #4
 8006784:	4319      	orrs	r1, r3
 8006786:	68bb      	ldr	r3, [r7, #8]
 8006788:	689b      	ldr	r3, [r3, #8]
 800678a:	3b01      	subs	r3, #1
 800678c:	021b      	lsls	r3, r3, #8
 800678e:	4319      	orrs	r1, r3
 8006790:	68bb      	ldr	r3, [r7, #8]
 8006792:	691b      	ldr	r3, [r3, #16]
 8006794:	3b01      	subs	r3, #1
 8006796:	041b      	lsls	r3, r3, #16
 8006798:	4319      	orrs	r1, r3
 800679a:	68bb      	ldr	r3, [r7, #8]
 800679c:	699b      	ldr	r3, [r3, #24]
 800679e:	3b01      	subs	r3, #1
 80067a0:	061b      	lsls	r3, r3, #24
 80067a2:	430b      	orrs	r3, r1
 80067a4:	431a      	orrs	r2, r3
 80067a6:	68fb      	ldr	r3, [r7, #12]
 80067a8:	60da      	str	r2, [r3, #12]
                (((Timing->SelfRefreshTime) - 1U)      << FMC_SDTR1_TRAS_Pos) |
                (((Timing->WriteRecoveryTime) - 1U)    << FMC_SDTR1_TWR_Pos)  |
                (((Timing->RCDDelay) - 1U)             << FMC_SDTR1_TRCD_Pos)));
  }

  return HAL_OK;
 80067aa:	2300      	movs	r3, #0
}
 80067ac:	4618      	mov	r0, r3
 80067ae:	3714      	adds	r7, #20
 80067b0:	46bd      	mov	sp, r7
 80067b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067b6:	4770      	bx	lr

080067b8 <FMC_SDRAM_SendCommand>:
  * @param  Timeout Timeout wait value
  * @retval HAL state
  */
HAL_StatusTypeDef FMC_SDRAM_SendCommand(FMC_SDRAM_TypeDef *Device,
                                        FMC_SDRAM_CommandTypeDef *Command, uint32_t Timeout)
{
 80067b8:	b580      	push	{r7, lr}
 80067ba:	b086      	sub	sp, #24
 80067bc:	af00      	add	r7, sp, #0
 80067be:	60f8      	str	r0, [r7, #12]
 80067c0:	60b9      	str	r1, [r7, #8]
 80067c2:	607a      	str	r2, [r7, #4]
  uint32_t tickstart = 0U;
 80067c4:	2300      	movs	r3, #0
 80067c6:	617b      	str	r3, [r7, #20]
  assert_param(IS_FMC_COMMAND_TARGET(Command->CommandTarget));
  assert_param(IS_FMC_AUTOREFRESH_NUMBER(Command->AutoRefreshNumber));
  assert_param(IS_FMC_MODE_REGISTER(Command->ModeRegisterDefinition));

  /* Set command register */
  MODIFY_REG(Device->SDCMR, (FMC_SDCMR_MODE | FMC_SDCMR_CTB2 | FMC_SDCMR_CTB1 | FMC_SDCMR_NRFS | FMC_SDCMR_MRD),
 80067c8:	68fb      	ldr	r3, [r7, #12]
 80067ca:	691b      	ldr	r3, [r3, #16]
 80067cc:	0d9b      	lsrs	r3, r3, #22
 80067ce:	059b      	lsls	r3, r3, #22
 80067d0:	68ba      	ldr	r2, [r7, #8]
 80067d2:	6811      	ldr	r1, [r2, #0]
 80067d4:	68ba      	ldr	r2, [r7, #8]
 80067d6:	6852      	ldr	r2, [r2, #4]
 80067d8:	4311      	orrs	r1, r2
 80067da:	68ba      	ldr	r2, [r7, #8]
 80067dc:	6892      	ldr	r2, [r2, #8]
 80067de:	3a01      	subs	r2, #1
 80067e0:	0152      	lsls	r2, r2, #5
 80067e2:	4311      	orrs	r1, r2
 80067e4:	68ba      	ldr	r2, [r7, #8]
 80067e6:	68d2      	ldr	r2, [r2, #12]
 80067e8:	0252      	lsls	r2, r2, #9
 80067ea:	430a      	orrs	r2, r1
 80067ec:	431a      	orrs	r2, r3
 80067ee:	68fb      	ldr	r3, [r7, #12]
 80067f0:	611a      	str	r2, [r3, #16]
             ((Command->CommandMode) | (Command->CommandTarget) |
              (((Command->AutoRefreshNumber) - 1U) << FMC_SDCMR_NRFS_Pos) |
              ((Command->ModeRegisterDefinition) << FMC_SDCMR_MRD_Pos)));
  /* Get tick */
  tickstart = HAL_GetTick();
 80067f2:	f7fb ff19 	bl	8002628 <HAL_GetTick>
 80067f6:	6178      	str	r0, [r7, #20]

  /* wait until command is send */
  while (HAL_IS_BIT_SET(Device->SDSR, FMC_SDSR_BUSY))
 80067f8:	e010      	b.n	800681c <FMC_SDRAM_SendCommand+0x64>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80067fa:	687b      	ldr	r3, [r7, #4]
 80067fc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006800:	d00c      	beq.n	800681c <FMC_SDRAM_SendCommand+0x64>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 8006802:	687b      	ldr	r3, [r7, #4]
 8006804:	2b00      	cmp	r3, #0
 8006806:	d007      	beq.n	8006818 <FMC_SDRAM_SendCommand+0x60>
 8006808:	f7fb ff0e 	bl	8002628 <HAL_GetTick>
 800680c:	4602      	mov	r2, r0
 800680e:	697b      	ldr	r3, [r7, #20]
 8006810:	1ad3      	subs	r3, r2, r3
 8006812:	687a      	ldr	r2, [r7, #4]
 8006814:	429a      	cmp	r2, r3
 8006816:	d201      	bcs.n	800681c <FMC_SDRAM_SendCommand+0x64>
      {
        return HAL_TIMEOUT;
 8006818:	2303      	movs	r3, #3
 800681a:	e006      	b.n	800682a <FMC_SDRAM_SendCommand+0x72>
  while (HAL_IS_BIT_SET(Device->SDSR, FMC_SDSR_BUSY))
 800681c:	68fb      	ldr	r3, [r7, #12]
 800681e:	699b      	ldr	r3, [r3, #24]
 8006820:	f003 0320 	and.w	r3, r3, #32
 8006824:	2b20      	cmp	r3, #32
 8006826:	d0e8      	beq.n	80067fa <FMC_SDRAM_SendCommand+0x42>
      }
    }
  }
  return HAL_OK;
 8006828:	2300      	movs	r3, #0
}
 800682a:	4618      	mov	r0, r3
 800682c:	3718      	adds	r7, #24
 800682e:	46bd      	mov	sp, r7
 8006830:	bd80      	pop	{r7, pc}

08006832 <FMC_SDRAM_ProgramRefreshRate>:
  * @param  Device Pointer to SDRAM device instance
  * @param  RefreshRate The SDRAM refresh rate value.
  * @retval HAL state
  */
HAL_StatusTypeDef FMC_SDRAM_ProgramRefreshRate(FMC_SDRAM_TypeDef *Device, uint32_t RefreshRate)
{
 8006832:	b480      	push	{r7}
 8006834:	b083      	sub	sp, #12
 8006836:	af00      	add	r7, sp, #0
 8006838:	6078      	str	r0, [r7, #4]
 800683a:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FMC_SDRAM_DEVICE(Device));
  assert_param(IS_FMC_REFRESH_RATE(RefreshRate));

  /* Set the refresh rate in command register */
  MODIFY_REG(Device->SDRTR, FMC_SDRTR_COUNT, (RefreshRate << FMC_SDRTR_COUNT_Pos));
 800683c:	687b      	ldr	r3, [r7, #4]
 800683e:	695b      	ldr	r3, [r3, #20]
 8006840:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 8006844:	f023 033e 	bic.w	r3, r3, #62	@ 0x3e
 8006848:	683a      	ldr	r2, [r7, #0]
 800684a:	0052      	lsls	r2, r2, #1
 800684c:	431a      	orrs	r2, r3
 800684e:	687b      	ldr	r3, [r7, #4]
 8006850:	615a      	str	r2, [r3, #20]

  return HAL_OK;
 8006852:	2300      	movs	r3, #0
}
 8006854:	4618      	mov	r0, r3
 8006856:	370c      	adds	r7, #12
 8006858:	46bd      	mov	sp, r7
 800685a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800685e:	4770      	bx	lr

08006860 <vListInsertEnd>:
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8006860:	b480      	push	{r7}
 8006862:	b085      	sub	sp, #20
 8006864:	af00      	add	r7, sp, #0
 8006866:	6078      	str	r0, [r7, #4]
 8006868:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800686a:	687b      	ldr	r3, [r7, #4]
 800686c:	685b      	ldr	r3, [r3, #4]
 800686e:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8006870:	683b      	ldr	r3, [r7, #0]
 8006872:	68fa      	ldr	r2, [r7, #12]
 8006874:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8006876:	68fb      	ldr	r3, [r7, #12]
 8006878:	689a      	ldr	r2, [r3, #8]
 800687a:	683b      	ldr	r3, [r7, #0]
 800687c:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800687e:	68fb      	ldr	r3, [r7, #12]
 8006880:	689b      	ldr	r3, [r3, #8]
 8006882:	683a      	ldr	r2, [r7, #0]
 8006884:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8006886:	68fb      	ldr	r3, [r7, #12]
 8006888:	683a      	ldr	r2, [r7, #0]
 800688a:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800688c:	683b      	ldr	r3, [r7, #0]
 800688e:	687a      	ldr	r2, [r7, #4]
 8006890:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8006892:	687b      	ldr	r3, [r7, #4]
 8006894:	681b      	ldr	r3, [r3, #0]
 8006896:	1c5a      	adds	r2, r3, #1
 8006898:	687b      	ldr	r3, [r7, #4]
 800689a:	601a      	str	r2, [r3, #0]
}
 800689c:	bf00      	nop
 800689e:	3714      	adds	r7, #20
 80068a0:	46bd      	mov	sp, r7
 80068a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068a6:	4770      	bx	lr

080068a8 <uxListRemove>:
	( pxList->uxNumberOfItems )++;
}
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80068a8:	b480      	push	{r7}
 80068aa:	b085      	sub	sp, #20
 80068ac:	af00      	add	r7, sp, #0
 80068ae:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 80068b0:	687b      	ldr	r3, [r7, #4]
 80068b2:	691b      	ldr	r3, [r3, #16]
 80068b4:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80068b6:	687b      	ldr	r3, [r7, #4]
 80068b8:	685b      	ldr	r3, [r3, #4]
 80068ba:	687a      	ldr	r2, [r7, #4]
 80068bc:	6892      	ldr	r2, [r2, #8]
 80068be:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80068c0:	687b      	ldr	r3, [r7, #4]
 80068c2:	689b      	ldr	r3, [r3, #8]
 80068c4:	687a      	ldr	r2, [r7, #4]
 80068c6:	6852      	ldr	r2, [r2, #4]
 80068c8:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80068ca:	68fb      	ldr	r3, [r7, #12]
 80068cc:	685b      	ldr	r3, [r3, #4]
 80068ce:	687a      	ldr	r2, [r7, #4]
 80068d0:	429a      	cmp	r2, r3
 80068d2:	d103      	bne.n	80068dc <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80068d4:	687b      	ldr	r3, [r7, #4]
 80068d6:	689a      	ldr	r2, [r3, #8]
 80068d8:	68fb      	ldr	r3, [r7, #12]
 80068da:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 80068dc:	687b      	ldr	r3, [r7, #4]
 80068de:	2200      	movs	r2, #0
 80068e0:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80068e2:	68fb      	ldr	r3, [r7, #12]
 80068e4:	681b      	ldr	r3, [r3, #0]
 80068e6:	1e5a      	subs	r2, r3, #1
 80068e8:	68fb      	ldr	r3, [r7, #12]
 80068ea:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80068ec:	68fb      	ldr	r3, [r7, #12]
 80068ee:	681b      	ldr	r3, [r3, #0]
}
 80068f0:	4618      	mov	r0, r3
 80068f2:	3714      	adds	r7, #20
 80068f4:	46bd      	mov	sp, r7
 80068f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068fa:	4770      	bx	lr

080068fc <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80068fc:	b580      	push	{r7, lr}
 80068fe:	b086      	sub	sp, #24
 8006900:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8006902:	2300      	movs	r3, #0
 8006904:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006906:	4b4f      	ldr	r3, [pc, #316]	@ (8006a44 <xTaskIncrementTick+0x148>)
 8006908:	681b      	ldr	r3, [r3, #0]
 800690a:	2b00      	cmp	r3, #0
 800690c:	f040 8090 	bne.w	8006a30 <xTaskIncrementTick+0x134>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8006910:	4b4d      	ldr	r3, [pc, #308]	@ (8006a48 <xTaskIncrementTick+0x14c>)
 8006912:	681b      	ldr	r3, [r3, #0]
 8006914:	3301      	adds	r3, #1
 8006916:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8006918:	4a4b      	ldr	r2, [pc, #300]	@ (8006a48 <xTaskIncrementTick+0x14c>)
 800691a:	693b      	ldr	r3, [r7, #16]
 800691c:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800691e:	693b      	ldr	r3, [r7, #16]
 8006920:	2b00      	cmp	r3, #0
 8006922:	d121      	bne.n	8006968 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 8006924:	4b49      	ldr	r3, [pc, #292]	@ (8006a4c <xTaskIncrementTick+0x150>)
 8006926:	681b      	ldr	r3, [r3, #0]
 8006928:	681b      	ldr	r3, [r3, #0]
 800692a:	2b00      	cmp	r3, #0
 800692c:	d00b      	beq.n	8006946 <xTaskIncrementTick+0x4a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800692e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006932:	f383 8811 	msr	BASEPRI, r3
 8006936:	f3bf 8f6f 	isb	sy
 800693a:	f3bf 8f4f 	dsb	sy
 800693e:	603b      	str	r3, [r7, #0]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8006940:	bf00      	nop
 8006942:	bf00      	nop
 8006944:	e7fd      	b.n	8006942 <xTaskIncrementTick+0x46>
 8006946:	4b41      	ldr	r3, [pc, #260]	@ (8006a4c <xTaskIncrementTick+0x150>)
 8006948:	681b      	ldr	r3, [r3, #0]
 800694a:	60fb      	str	r3, [r7, #12]
 800694c:	4b40      	ldr	r3, [pc, #256]	@ (8006a50 <xTaskIncrementTick+0x154>)
 800694e:	681b      	ldr	r3, [r3, #0]
 8006950:	4a3e      	ldr	r2, [pc, #248]	@ (8006a4c <xTaskIncrementTick+0x150>)
 8006952:	6013      	str	r3, [r2, #0]
 8006954:	4a3e      	ldr	r2, [pc, #248]	@ (8006a50 <xTaskIncrementTick+0x154>)
 8006956:	68fb      	ldr	r3, [r7, #12]
 8006958:	6013      	str	r3, [r2, #0]
 800695a:	4b3e      	ldr	r3, [pc, #248]	@ (8006a54 <xTaskIncrementTick+0x158>)
 800695c:	681b      	ldr	r3, [r3, #0]
 800695e:	3301      	adds	r3, #1
 8006960:	4a3c      	ldr	r2, [pc, #240]	@ (8006a54 <xTaskIncrementTick+0x158>)
 8006962:	6013      	str	r3, [r2, #0]
 8006964:	f000 f8ea 	bl	8006b3c <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8006968:	4b3b      	ldr	r3, [pc, #236]	@ (8006a58 <xTaskIncrementTick+0x15c>)
 800696a:	681b      	ldr	r3, [r3, #0]
 800696c:	693a      	ldr	r2, [r7, #16]
 800696e:	429a      	cmp	r2, r3
 8006970:	d349      	bcc.n	8006a06 <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006972:	4b36      	ldr	r3, [pc, #216]	@ (8006a4c <xTaskIncrementTick+0x150>)
 8006974:	681b      	ldr	r3, [r3, #0]
 8006976:	681b      	ldr	r3, [r3, #0]
 8006978:	2b00      	cmp	r3, #0
 800697a:	d104      	bne.n	8006986 <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800697c:	4b36      	ldr	r3, [pc, #216]	@ (8006a58 <xTaskIncrementTick+0x15c>)
 800697e:	f04f 32ff 	mov.w	r2, #4294967295
 8006982:	601a      	str	r2, [r3, #0]
					break;
 8006984:	e03f      	b.n	8006a06 <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006986:	4b31      	ldr	r3, [pc, #196]	@ (8006a4c <xTaskIncrementTick+0x150>)
 8006988:	681b      	ldr	r3, [r3, #0]
 800698a:	68db      	ldr	r3, [r3, #12]
 800698c:	68db      	ldr	r3, [r3, #12]
 800698e:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8006990:	68bb      	ldr	r3, [r7, #8]
 8006992:	685b      	ldr	r3, [r3, #4]
 8006994:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8006996:	693a      	ldr	r2, [r7, #16]
 8006998:	687b      	ldr	r3, [r7, #4]
 800699a:	429a      	cmp	r2, r3
 800699c:	d203      	bcs.n	80069a6 <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800699e:	4a2e      	ldr	r2, [pc, #184]	@ (8006a58 <xTaskIncrementTick+0x15c>)
 80069a0:	687b      	ldr	r3, [r7, #4]
 80069a2:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 80069a4:	e02f      	b.n	8006a06 <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80069a6:	68bb      	ldr	r3, [r7, #8]
 80069a8:	3304      	adds	r3, #4
 80069aa:	4618      	mov	r0, r3
 80069ac:	f7ff ff7c 	bl	80068a8 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80069b0:	68bb      	ldr	r3, [r7, #8]
 80069b2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80069b4:	2b00      	cmp	r3, #0
 80069b6:	d004      	beq.n	80069c2 <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80069b8:	68bb      	ldr	r3, [r7, #8]
 80069ba:	3318      	adds	r3, #24
 80069bc:	4618      	mov	r0, r3
 80069be:	f7ff ff73 	bl	80068a8 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80069c2:	68bb      	ldr	r3, [r7, #8]
 80069c4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80069c6:	4b25      	ldr	r3, [pc, #148]	@ (8006a5c <xTaskIncrementTick+0x160>)
 80069c8:	681b      	ldr	r3, [r3, #0]
 80069ca:	429a      	cmp	r2, r3
 80069cc:	d903      	bls.n	80069d6 <xTaskIncrementTick+0xda>
 80069ce:	68bb      	ldr	r3, [r7, #8]
 80069d0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80069d2:	4a22      	ldr	r2, [pc, #136]	@ (8006a5c <xTaskIncrementTick+0x160>)
 80069d4:	6013      	str	r3, [r2, #0]
 80069d6:	68bb      	ldr	r3, [r7, #8]
 80069d8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80069da:	4613      	mov	r3, r2
 80069dc:	009b      	lsls	r3, r3, #2
 80069de:	4413      	add	r3, r2
 80069e0:	009b      	lsls	r3, r3, #2
 80069e2:	4a1f      	ldr	r2, [pc, #124]	@ (8006a60 <xTaskIncrementTick+0x164>)
 80069e4:	441a      	add	r2, r3
 80069e6:	68bb      	ldr	r3, [r7, #8]
 80069e8:	3304      	adds	r3, #4
 80069ea:	4619      	mov	r1, r3
 80069ec:	4610      	mov	r0, r2
 80069ee:	f7ff ff37 	bl	8006860 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80069f2:	68bb      	ldr	r3, [r7, #8]
 80069f4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80069f6:	4b1b      	ldr	r3, [pc, #108]	@ (8006a64 <xTaskIncrementTick+0x168>)
 80069f8:	681b      	ldr	r3, [r3, #0]
 80069fa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80069fc:	429a      	cmp	r2, r3
 80069fe:	d3b8      	bcc.n	8006972 <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 8006a00:	2301      	movs	r3, #1
 8006a02:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006a04:	e7b5      	b.n	8006972 <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8006a06:	4b17      	ldr	r3, [pc, #92]	@ (8006a64 <xTaskIncrementTick+0x168>)
 8006a08:	681b      	ldr	r3, [r3, #0]
 8006a0a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006a0c:	4914      	ldr	r1, [pc, #80]	@ (8006a60 <xTaskIncrementTick+0x164>)
 8006a0e:	4613      	mov	r3, r2
 8006a10:	009b      	lsls	r3, r3, #2
 8006a12:	4413      	add	r3, r2
 8006a14:	009b      	lsls	r3, r3, #2
 8006a16:	440b      	add	r3, r1
 8006a18:	681b      	ldr	r3, [r3, #0]
 8006a1a:	2b01      	cmp	r3, #1
 8006a1c:	d901      	bls.n	8006a22 <xTaskIncrementTick+0x126>
			{
				xSwitchRequired = pdTRUE;
 8006a1e:	2301      	movs	r3, #1
 8006a20:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8006a22:	4b11      	ldr	r3, [pc, #68]	@ (8006a68 <xTaskIncrementTick+0x16c>)
 8006a24:	681b      	ldr	r3, [r3, #0]
 8006a26:	2b00      	cmp	r3, #0
 8006a28:	d007      	beq.n	8006a3a <xTaskIncrementTick+0x13e>
			{
				xSwitchRequired = pdTRUE;
 8006a2a:	2301      	movs	r3, #1
 8006a2c:	617b      	str	r3, [r7, #20]
 8006a2e:	e004      	b.n	8006a3a <xTaskIncrementTick+0x13e>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8006a30:	4b0e      	ldr	r3, [pc, #56]	@ (8006a6c <xTaskIncrementTick+0x170>)
 8006a32:	681b      	ldr	r3, [r3, #0]
 8006a34:	3301      	adds	r3, #1
 8006a36:	4a0d      	ldr	r2, [pc, #52]	@ (8006a6c <xTaskIncrementTick+0x170>)
 8006a38:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8006a3a:	697b      	ldr	r3, [r7, #20]
}
 8006a3c:	4618      	mov	r0, r3
 8006a3e:	3718      	adds	r7, #24
 8006a40:	46bd      	mov	sp, r7
 8006a42:	bd80      	pop	{r7, pc}
 8006a44:	20000878 	.word	0x20000878
 8006a48:	2000085c 	.word	0x2000085c
 8006a4c:	20000854 	.word	0x20000854
 8006a50:	20000858 	.word	0x20000858
 8006a54:	20000870 	.word	0x20000870
 8006a58:	20000874 	.word	0x20000874
 8006a5c:	20000860 	.word	0x20000860
 8006a60:	200003f4 	.word	0x200003f4
 8006a64:	200003f0 	.word	0x200003f0
 8006a68:	2000086c 	.word	0x2000086c
 8006a6c:	20000868 	.word	0x20000868

08006a70 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8006a70:	b480      	push	{r7}
 8006a72:	b085      	sub	sp, #20
 8006a74:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8006a76:	4b2b      	ldr	r3, [pc, #172]	@ (8006b24 <vTaskSwitchContext+0xb4>)
 8006a78:	681b      	ldr	r3, [r3, #0]
 8006a7a:	2b00      	cmp	r3, #0
 8006a7c:	d003      	beq.n	8006a86 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8006a7e:	4b2a      	ldr	r3, [pc, #168]	@ (8006b28 <vTaskSwitchContext+0xb8>)
 8006a80:	2201      	movs	r2, #1
 8006a82:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8006a84:	e047      	b.n	8006b16 <vTaskSwitchContext+0xa6>
		xYieldPending = pdFALSE;
 8006a86:	4b28      	ldr	r3, [pc, #160]	@ (8006b28 <vTaskSwitchContext+0xb8>)
 8006a88:	2200      	movs	r2, #0
 8006a8a:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006a8c:	4b27      	ldr	r3, [pc, #156]	@ (8006b2c <vTaskSwitchContext+0xbc>)
 8006a8e:	681b      	ldr	r3, [r3, #0]
 8006a90:	60fb      	str	r3, [r7, #12]
 8006a92:	e011      	b.n	8006ab8 <vTaskSwitchContext+0x48>
 8006a94:	68fb      	ldr	r3, [r7, #12]
 8006a96:	2b00      	cmp	r3, #0
 8006a98:	d10b      	bne.n	8006ab2 <vTaskSwitchContext+0x42>
	__asm volatile
 8006a9a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006a9e:	f383 8811 	msr	BASEPRI, r3
 8006aa2:	f3bf 8f6f 	isb	sy
 8006aa6:	f3bf 8f4f 	dsb	sy
 8006aaa:	607b      	str	r3, [r7, #4]
}
 8006aac:	bf00      	nop
 8006aae:	bf00      	nop
 8006ab0:	e7fd      	b.n	8006aae <vTaskSwitchContext+0x3e>
 8006ab2:	68fb      	ldr	r3, [r7, #12]
 8006ab4:	3b01      	subs	r3, #1
 8006ab6:	60fb      	str	r3, [r7, #12]
 8006ab8:	491d      	ldr	r1, [pc, #116]	@ (8006b30 <vTaskSwitchContext+0xc0>)
 8006aba:	68fa      	ldr	r2, [r7, #12]
 8006abc:	4613      	mov	r3, r2
 8006abe:	009b      	lsls	r3, r3, #2
 8006ac0:	4413      	add	r3, r2
 8006ac2:	009b      	lsls	r3, r3, #2
 8006ac4:	440b      	add	r3, r1
 8006ac6:	681b      	ldr	r3, [r3, #0]
 8006ac8:	2b00      	cmp	r3, #0
 8006aca:	d0e3      	beq.n	8006a94 <vTaskSwitchContext+0x24>
 8006acc:	68fa      	ldr	r2, [r7, #12]
 8006ace:	4613      	mov	r3, r2
 8006ad0:	009b      	lsls	r3, r3, #2
 8006ad2:	4413      	add	r3, r2
 8006ad4:	009b      	lsls	r3, r3, #2
 8006ad6:	4a16      	ldr	r2, [pc, #88]	@ (8006b30 <vTaskSwitchContext+0xc0>)
 8006ad8:	4413      	add	r3, r2
 8006ada:	60bb      	str	r3, [r7, #8]
 8006adc:	68bb      	ldr	r3, [r7, #8]
 8006ade:	685b      	ldr	r3, [r3, #4]
 8006ae0:	685a      	ldr	r2, [r3, #4]
 8006ae2:	68bb      	ldr	r3, [r7, #8]
 8006ae4:	605a      	str	r2, [r3, #4]
 8006ae6:	68bb      	ldr	r3, [r7, #8]
 8006ae8:	685a      	ldr	r2, [r3, #4]
 8006aea:	68bb      	ldr	r3, [r7, #8]
 8006aec:	3308      	adds	r3, #8
 8006aee:	429a      	cmp	r2, r3
 8006af0:	d104      	bne.n	8006afc <vTaskSwitchContext+0x8c>
 8006af2:	68bb      	ldr	r3, [r7, #8]
 8006af4:	685b      	ldr	r3, [r3, #4]
 8006af6:	685a      	ldr	r2, [r3, #4]
 8006af8:	68bb      	ldr	r3, [r7, #8]
 8006afa:	605a      	str	r2, [r3, #4]
 8006afc:	68bb      	ldr	r3, [r7, #8]
 8006afe:	685b      	ldr	r3, [r3, #4]
 8006b00:	68db      	ldr	r3, [r3, #12]
 8006b02:	4a0c      	ldr	r2, [pc, #48]	@ (8006b34 <vTaskSwitchContext+0xc4>)
 8006b04:	6013      	str	r3, [r2, #0]
 8006b06:	4a09      	ldr	r2, [pc, #36]	@ (8006b2c <vTaskSwitchContext+0xbc>)
 8006b08:	68fb      	ldr	r3, [r7, #12]
 8006b0a:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8006b0c:	4b09      	ldr	r3, [pc, #36]	@ (8006b34 <vTaskSwitchContext+0xc4>)
 8006b0e:	681b      	ldr	r3, [r3, #0]
 8006b10:	3354      	adds	r3, #84	@ 0x54
 8006b12:	4a09      	ldr	r2, [pc, #36]	@ (8006b38 <vTaskSwitchContext+0xc8>)
 8006b14:	6013      	str	r3, [r2, #0]
}
 8006b16:	bf00      	nop
 8006b18:	3714      	adds	r7, #20
 8006b1a:	46bd      	mov	sp, r7
 8006b1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b20:	4770      	bx	lr
 8006b22:	bf00      	nop
 8006b24:	20000878 	.word	0x20000878
 8006b28:	2000086c 	.word	0x2000086c
 8006b2c:	20000860 	.word	0x20000860
 8006b30:	200003f4 	.word	0x200003f4
 8006b34:	200003f0 	.word	0x200003f0
 8006b38:	20000054 	.word	0x20000054

08006b3c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8006b3c:	b480      	push	{r7}
 8006b3e:	b083      	sub	sp, #12
 8006b40:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006b42:	4b0c      	ldr	r3, [pc, #48]	@ (8006b74 <prvResetNextTaskUnblockTime+0x38>)
 8006b44:	681b      	ldr	r3, [r3, #0]
 8006b46:	681b      	ldr	r3, [r3, #0]
 8006b48:	2b00      	cmp	r3, #0
 8006b4a:	d104      	bne.n	8006b56 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8006b4c:	4b0a      	ldr	r3, [pc, #40]	@ (8006b78 <prvResetNextTaskUnblockTime+0x3c>)
 8006b4e:	f04f 32ff 	mov.w	r2, #4294967295
 8006b52:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8006b54:	e008      	b.n	8006b68 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006b56:	4b07      	ldr	r3, [pc, #28]	@ (8006b74 <prvResetNextTaskUnblockTime+0x38>)
 8006b58:	681b      	ldr	r3, [r3, #0]
 8006b5a:	68db      	ldr	r3, [r3, #12]
 8006b5c:	68db      	ldr	r3, [r3, #12]
 8006b5e:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8006b60:	687b      	ldr	r3, [r7, #4]
 8006b62:	685b      	ldr	r3, [r3, #4]
 8006b64:	4a04      	ldr	r2, [pc, #16]	@ (8006b78 <prvResetNextTaskUnblockTime+0x3c>)
 8006b66:	6013      	str	r3, [r2, #0]
}
 8006b68:	bf00      	nop
 8006b6a:	370c      	adds	r7, #12
 8006b6c:	46bd      	mov	sp, r7
 8006b6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b72:	4770      	bx	lr
 8006b74:	20000854 	.word	0x20000854
 8006b78:	20000874 	.word	0x20000874

08006b7c <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8006b7c:	b480      	push	{r7}
 8006b7e:	b083      	sub	sp, #12
 8006b80:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8006b82:	4b0b      	ldr	r3, [pc, #44]	@ (8006bb0 <xTaskGetSchedulerState+0x34>)
 8006b84:	681b      	ldr	r3, [r3, #0]
 8006b86:	2b00      	cmp	r3, #0
 8006b88:	d102      	bne.n	8006b90 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8006b8a:	2301      	movs	r3, #1
 8006b8c:	607b      	str	r3, [r7, #4]
 8006b8e:	e008      	b.n	8006ba2 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006b90:	4b08      	ldr	r3, [pc, #32]	@ (8006bb4 <xTaskGetSchedulerState+0x38>)
 8006b92:	681b      	ldr	r3, [r3, #0]
 8006b94:	2b00      	cmp	r3, #0
 8006b96:	d102      	bne.n	8006b9e <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8006b98:	2302      	movs	r3, #2
 8006b9a:	607b      	str	r3, [r7, #4]
 8006b9c:	e001      	b.n	8006ba2 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8006b9e:	2300      	movs	r3, #0
 8006ba0:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8006ba2:	687b      	ldr	r3, [r7, #4]
	}
 8006ba4:	4618      	mov	r0, r3
 8006ba6:	370c      	adds	r7, #12
 8006ba8:	46bd      	mov	sp, r7
 8006baa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bae:	4770      	bx	lr
 8006bb0:	20000864 	.word	0x20000864
 8006bb4:	20000878 	.word	0x20000878
	...

08006bc0 <SVC_Handler>:
}
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8006bc0:	4b07      	ldr	r3, [pc, #28]	@ (8006be0 <pxCurrentTCBConst2>)
 8006bc2:	6819      	ldr	r1, [r3, #0]
 8006bc4:	6808      	ldr	r0, [r1, #0]
 8006bc6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006bca:	f380 8809 	msr	PSP, r0
 8006bce:	f3bf 8f6f 	isb	sy
 8006bd2:	f04f 0000 	mov.w	r0, #0
 8006bd6:	f380 8811 	msr	BASEPRI, r0
 8006bda:	4770      	bx	lr
 8006bdc:	f3af 8000 	nop.w

08006be0 <pxCurrentTCBConst2>:
 8006be0:	200003f0 	.word	0x200003f0
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8006be4:	bf00      	nop
 8006be6:	bf00      	nop
	...

08006bf0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8006bf0:	f3ef 8009 	mrs	r0, PSP
 8006bf4:	f3bf 8f6f 	isb	sy
 8006bf8:	4b15      	ldr	r3, [pc, #84]	@ (8006c50 <pxCurrentTCBConst>)
 8006bfa:	681a      	ldr	r2, [r3, #0]
 8006bfc:	f01e 0f10 	tst.w	lr, #16
 8006c00:	bf08      	it	eq
 8006c02:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8006c06:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006c0a:	6010      	str	r0, [r2, #0]
 8006c0c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8006c10:	f04f 0050 	mov.w	r0, #80	@ 0x50
 8006c14:	f380 8811 	msr	BASEPRI, r0
 8006c18:	f3bf 8f4f 	dsb	sy
 8006c1c:	f3bf 8f6f 	isb	sy
 8006c20:	f7ff ff26 	bl	8006a70 <vTaskSwitchContext>
 8006c24:	f04f 0000 	mov.w	r0, #0
 8006c28:	f380 8811 	msr	BASEPRI, r0
 8006c2c:	bc09      	pop	{r0, r3}
 8006c2e:	6819      	ldr	r1, [r3, #0]
 8006c30:	6808      	ldr	r0, [r1, #0]
 8006c32:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006c36:	f01e 0f10 	tst.w	lr, #16
 8006c3a:	bf08      	it	eq
 8006c3c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8006c40:	f380 8809 	msr	PSP, r0
 8006c44:	f3bf 8f6f 	isb	sy
 8006c48:	4770      	bx	lr
 8006c4a:	bf00      	nop
 8006c4c:	f3af 8000 	nop.w

08006c50 <pxCurrentTCBConst>:
 8006c50:	200003f0 	.word	0x200003f0
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8006c54:	bf00      	nop
 8006c56:	bf00      	nop

08006c58 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8006c58:	b580      	push	{r7, lr}
 8006c5a:	b082      	sub	sp, #8
 8006c5c:	af00      	add	r7, sp, #0
	__asm volatile
 8006c5e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006c62:	f383 8811 	msr	BASEPRI, r3
 8006c66:	f3bf 8f6f 	isb	sy
 8006c6a:	f3bf 8f4f 	dsb	sy
 8006c6e:	607b      	str	r3, [r7, #4]
}
 8006c70:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8006c72:	f7ff fe43 	bl	80068fc <xTaskIncrementTick>
 8006c76:	4603      	mov	r3, r0
 8006c78:	2b00      	cmp	r3, #0
 8006c7a:	d003      	beq.n	8006c84 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8006c7c:	4b06      	ldr	r3, [pc, #24]	@ (8006c98 <xPortSysTickHandler+0x40>)
 8006c7e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006c82:	601a      	str	r2, [r3, #0]
 8006c84:	2300      	movs	r3, #0
 8006c86:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8006c88:	683b      	ldr	r3, [r7, #0]
 8006c8a:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8006c8e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8006c90:	bf00      	nop
 8006c92:	3708      	adds	r7, #8
 8006c94:	46bd      	mov	sp, r7
 8006c96:	bd80      	pop	{r7, pc}
 8006c98:	e000ed04 	.word	0xe000ed04

08006c9c <siprintf>:
 8006c9c:	b40e      	push	{r1, r2, r3}
 8006c9e:	b510      	push	{r4, lr}
 8006ca0:	b09d      	sub	sp, #116	@ 0x74
 8006ca2:	ab1f      	add	r3, sp, #124	@ 0x7c
 8006ca4:	9002      	str	r0, [sp, #8]
 8006ca6:	9006      	str	r0, [sp, #24]
 8006ca8:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8006cac:	480a      	ldr	r0, [pc, #40]	@ (8006cd8 <siprintf+0x3c>)
 8006cae:	9107      	str	r1, [sp, #28]
 8006cb0:	9104      	str	r1, [sp, #16]
 8006cb2:	490a      	ldr	r1, [pc, #40]	@ (8006cdc <siprintf+0x40>)
 8006cb4:	f853 2b04 	ldr.w	r2, [r3], #4
 8006cb8:	9105      	str	r1, [sp, #20]
 8006cba:	2400      	movs	r4, #0
 8006cbc:	a902      	add	r1, sp, #8
 8006cbe:	6800      	ldr	r0, [r0, #0]
 8006cc0:	9301      	str	r3, [sp, #4]
 8006cc2:	941b      	str	r4, [sp, #108]	@ 0x6c
 8006cc4:	f000 f9a2 	bl	800700c <_svfiprintf_r>
 8006cc8:	9b02      	ldr	r3, [sp, #8]
 8006cca:	701c      	strb	r4, [r3, #0]
 8006ccc:	b01d      	add	sp, #116	@ 0x74
 8006cce:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006cd2:	b003      	add	sp, #12
 8006cd4:	4770      	bx	lr
 8006cd6:	bf00      	nop
 8006cd8:	20000054 	.word	0x20000054
 8006cdc:	ffff0208 	.word	0xffff0208

08006ce0 <memset>:
 8006ce0:	4402      	add	r2, r0
 8006ce2:	4603      	mov	r3, r0
 8006ce4:	4293      	cmp	r3, r2
 8006ce6:	d100      	bne.n	8006cea <memset+0xa>
 8006ce8:	4770      	bx	lr
 8006cea:	f803 1b01 	strb.w	r1, [r3], #1
 8006cee:	e7f9      	b.n	8006ce4 <memset+0x4>

08006cf0 <__errno>:
 8006cf0:	4b01      	ldr	r3, [pc, #4]	@ (8006cf8 <__errno+0x8>)
 8006cf2:	6818      	ldr	r0, [r3, #0]
 8006cf4:	4770      	bx	lr
 8006cf6:	bf00      	nop
 8006cf8:	20000054 	.word	0x20000054

08006cfc <__libc_init_array>:
 8006cfc:	b570      	push	{r4, r5, r6, lr}
 8006cfe:	4d0d      	ldr	r5, [pc, #52]	@ (8006d34 <__libc_init_array+0x38>)
 8006d00:	4c0d      	ldr	r4, [pc, #52]	@ (8006d38 <__libc_init_array+0x3c>)
 8006d02:	1b64      	subs	r4, r4, r5
 8006d04:	10a4      	asrs	r4, r4, #2
 8006d06:	2600      	movs	r6, #0
 8006d08:	42a6      	cmp	r6, r4
 8006d0a:	d109      	bne.n	8006d20 <__libc_init_array+0x24>
 8006d0c:	4d0b      	ldr	r5, [pc, #44]	@ (8006d3c <__libc_init_array+0x40>)
 8006d0e:	4c0c      	ldr	r4, [pc, #48]	@ (8006d40 <__libc_init_array+0x44>)
 8006d10:	f000 fc64 	bl	80075dc <_init>
 8006d14:	1b64      	subs	r4, r4, r5
 8006d16:	10a4      	asrs	r4, r4, #2
 8006d18:	2600      	movs	r6, #0
 8006d1a:	42a6      	cmp	r6, r4
 8006d1c:	d105      	bne.n	8006d2a <__libc_init_array+0x2e>
 8006d1e:	bd70      	pop	{r4, r5, r6, pc}
 8006d20:	f855 3b04 	ldr.w	r3, [r5], #4
 8006d24:	4798      	blx	r3
 8006d26:	3601      	adds	r6, #1
 8006d28:	e7ee      	b.n	8006d08 <__libc_init_array+0xc>
 8006d2a:	f855 3b04 	ldr.w	r3, [r5], #4
 8006d2e:	4798      	blx	r3
 8006d30:	3601      	adds	r6, #1
 8006d32:	e7f2      	b.n	8006d1a <__libc_init_array+0x1e>
 8006d34:	080082c8 	.word	0x080082c8
 8006d38:	080082c8 	.word	0x080082c8
 8006d3c:	080082c8 	.word	0x080082c8
 8006d40:	080082cc 	.word	0x080082cc

08006d44 <__retarget_lock_acquire_recursive>:
 8006d44:	4770      	bx	lr

08006d46 <__retarget_lock_release_recursive>:
 8006d46:	4770      	bx	lr

08006d48 <memcpy>:
 8006d48:	440a      	add	r2, r1
 8006d4a:	4291      	cmp	r1, r2
 8006d4c:	f100 33ff 	add.w	r3, r0, #4294967295
 8006d50:	d100      	bne.n	8006d54 <memcpy+0xc>
 8006d52:	4770      	bx	lr
 8006d54:	b510      	push	{r4, lr}
 8006d56:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006d5a:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006d5e:	4291      	cmp	r1, r2
 8006d60:	d1f9      	bne.n	8006d56 <memcpy+0xe>
 8006d62:	bd10      	pop	{r4, pc}

08006d64 <_free_r>:
 8006d64:	b538      	push	{r3, r4, r5, lr}
 8006d66:	4605      	mov	r5, r0
 8006d68:	2900      	cmp	r1, #0
 8006d6a:	d041      	beq.n	8006df0 <_free_r+0x8c>
 8006d6c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006d70:	1f0c      	subs	r4, r1, #4
 8006d72:	2b00      	cmp	r3, #0
 8006d74:	bfb8      	it	lt
 8006d76:	18e4      	addlt	r4, r4, r3
 8006d78:	f000 f8e0 	bl	8006f3c <__malloc_lock>
 8006d7c:	4a1d      	ldr	r2, [pc, #116]	@ (8006df4 <_free_r+0x90>)
 8006d7e:	6813      	ldr	r3, [r2, #0]
 8006d80:	b933      	cbnz	r3, 8006d90 <_free_r+0x2c>
 8006d82:	6063      	str	r3, [r4, #4]
 8006d84:	6014      	str	r4, [r2, #0]
 8006d86:	4628      	mov	r0, r5
 8006d88:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006d8c:	f000 b8dc 	b.w	8006f48 <__malloc_unlock>
 8006d90:	42a3      	cmp	r3, r4
 8006d92:	d908      	bls.n	8006da6 <_free_r+0x42>
 8006d94:	6820      	ldr	r0, [r4, #0]
 8006d96:	1821      	adds	r1, r4, r0
 8006d98:	428b      	cmp	r3, r1
 8006d9a:	bf01      	itttt	eq
 8006d9c:	6819      	ldreq	r1, [r3, #0]
 8006d9e:	685b      	ldreq	r3, [r3, #4]
 8006da0:	1809      	addeq	r1, r1, r0
 8006da2:	6021      	streq	r1, [r4, #0]
 8006da4:	e7ed      	b.n	8006d82 <_free_r+0x1e>
 8006da6:	461a      	mov	r2, r3
 8006da8:	685b      	ldr	r3, [r3, #4]
 8006daa:	b10b      	cbz	r3, 8006db0 <_free_r+0x4c>
 8006dac:	42a3      	cmp	r3, r4
 8006dae:	d9fa      	bls.n	8006da6 <_free_r+0x42>
 8006db0:	6811      	ldr	r1, [r2, #0]
 8006db2:	1850      	adds	r0, r2, r1
 8006db4:	42a0      	cmp	r0, r4
 8006db6:	d10b      	bne.n	8006dd0 <_free_r+0x6c>
 8006db8:	6820      	ldr	r0, [r4, #0]
 8006dba:	4401      	add	r1, r0
 8006dbc:	1850      	adds	r0, r2, r1
 8006dbe:	4283      	cmp	r3, r0
 8006dc0:	6011      	str	r1, [r2, #0]
 8006dc2:	d1e0      	bne.n	8006d86 <_free_r+0x22>
 8006dc4:	6818      	ldr	r0, [r3, #0]
 8006dc6:	685b      	ldr	r3, [r3, #4]
 8006dc8:	6053      	str	r3, [r2, #4]
 8006dca:	4408      	add	r0, r1
 8006dcc:	6010      	str	r0, [r2, #0]
 8006dce:	e7da      	b.n	8006d86 <_free_r+0x22>
 8006dd0:	d902      	bls.n	8006dd8 <_free_r+0x74>
 8006dd2:	230c      	movs	r3, #12
 8006dd4:	602b      	str	r3, [r5, #0]
 8006dd6:	e7d6      	b.n	8006d86 <_free_r+0x22>
 8006dd8:	6820      	ldr	r0, [r4, #0]
 8006dda:	1821      	adds	r1, r4, r0
 8006ddc:	428b      	cmp	r3, r1
 8006dde:	bf04      	itt	eq
 8006de0:	6819      	ldreq	r1, [r3, #0]
 8006de2:	685b      	ldreq	r3, [r3, #4]
 8006de4:	6063      	str	r3, [r4, #4]
 8006de6:	bf04      	itt	eq
 8006de8:	1809      	addeq	r1, r1, r0
 8006dea:	6021      	streq	r1, [r4, #0]
 8006dec:	6054      	str	r4, [r2, #4]
 8006dee:	e7ca      	b.n	8006d86 <_free_r+0x22>
 8006df0:	bd38      	pop	{r3, r4, r5, pc}
 8006df2:	bf00      	nop
 8006df4:	200009c0 	.word	0x200009c0

08006df8 <sbrk_aligned>:
 8006df8:	b570      	push	{r4, r5, r6, lr}
 8006dfa:	4e0f      	ldr	r6, [pc, #60]	@ (8006e38 <sbrk_aligned+0x40>)
 8006dfc:	460c      	mov	r4, r1
 8006dfe:	6831      	ldr	r1, [r6, #0]
 8006e00:	4605      	mov	r5, r0
 8006e02:	b911      	cbnz	r1, 8006e0a <sbrk_aligned+0x12>
 8006e04:	f000 fba4 	bl	8007550 <_sbrk_r>
 8006e08:	6030      	str	r0, [r6, #0]
 8006e0a:	4621      	mov	r1, r4
 8006e0c:	4628      	mov	r0, r5
 8006e0e:	f000 fb9f 	bl	8007550 <_sbrk_r>
 8006e12:	1c43      	adds	r3, r0, #1
 8006e14:	d103      	bne.n	8006e1e <sbrk_aligned+0x26>
 8006e16:	f04f 34ff 	mov.w	r4, #4294967295
 8006e1a:	4620      	mov	r0, r4
 8006e1c:	bd70      	pop	{r4, r5, r6, pc}
 8006e1e:	1cc4      	adds	r4, r0, #3
 8006e20:	f024 0403 	bic.w	r4, r4, #3
 8006e24:	42a0      	cmp	r0, r4
 8006e26:	d0f8      	beq.n	8006e1a <sbrk_aligned+0x22>
 8006e28:	1a21      	subs	r1, r4, r0
 8006e2a:	4628      	mov	r0, r5
 8006e2c:	f000 fb90 	bl	8007550 <_sbrk_r>
 8006e30:	3001      	adds	r0, #1
 8006e32:	d1f2      	bne.n	8006e1a <sbrk_aligned+0x22>
 8006e34:	e7ef      	b.n	8006e16 <sbrk_aligned+0x1e>
 8006e36:	bf00      	nop
 8006e38:	200009bc 	.word	0x200009bc

08006e3c <_malloc_r>:
 8006e3c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006e40:	1ccd      	adds	r5, r1, #3
 8006e42:	f025 0503 	bic.w	r5, r5, #3
 8006e46:	3508      	adds	r5, #8
 8006e48:	2d0c      	cmp	r5, #12
 8006e4a:	bf38      	it	cc
 8006e4c:	250c      	movcc	r5, #12
 8006e4e:	2d00      	cmp	r5, #0
 8006e50:	4606      	mov	r6, r0
 8006e52:	db01      	blt.n	8006e58 <_malloc_r+0x1c>
 8006e54:	42a9      	cmp	r1, r5
 8006e56:	d904      	bls.n	8006e62 <_malloc_r+0x26>
 8006e58:	230c      	movs	r3, #12
 8006e5a:	6033      	str	r3, [r6, #0]
 8006e5c:	2000      	movs	r0, #0
 8006e5e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006e62:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8006f38 <_malloc_r+0xfc>
 8006e66:	f000 f869 	bl	8006f3c <__malloc_lock>
 8006e6a:	f8d8 3000 	ldr.w	r3, [r8]
 8006e6e:	461c      	mov	r4, r3
 8006e70:	bb44      	cbnz	r4, 8006ec4 <_malloc_r+0x88>
 8006e72:	4629      	mov	r1, r5
 8006e74:	4630      	mov	r0, r6
 8006e76:	f7ff ffbf 	bl	8006df8 <sbrk_aligned>
 8006e7a:	1c43      	adds	r3, r0, #1
 8006e7c:	4604      	mov	r4, r0
 8006e7e:	d158      	bne.n	8006f32 <_malloc_r+0xf6>
 8006e80:	f8d8 4000 	ldr.w	r4, [r8]
 8006e84:	4627      	mov	r7, r4
 8006e86:	2f00      	cmp	r7, #0
 8006e88:	d143      	bne.n	8006f12 <_malloc_r+0xd6>
 8006e8a:	2c00      	cmp	r4, #0
 8006e8c:	d04b      	beq.n	8006f26 <_malloc_r+0xea>
 8006e8e:	6823      	ldr	r3, [r4, #0]
 8006e90:	4639      	mov	r1, r7
 8006e92:	4630      	mov	r0, r6
 8006e94:	eb04 0903 	add.w	r9, r4, r3
 8006e98:	f000 fb5a 	bl	8007550 <_sbrk_r>
 8006e9c:	4581      	cmp	r9, r0
 8006e9e:	d142      	bne.n	8006f26 <_malloc_r+0xea>
 8006ea0:	6821      	ldr	r1, [r4, #0]
 8006ea2:	1a6d      	subs	r5, r5, r1
 8006ea4:	4629      	mov	r1, r5
 8006ea6:	4630      	mov	r0, r6
 8006ea8:	f7ff ffa6 	bl	8006df8 <sbrk_aligned>
 8006eac:	3001      	adds	r0, #1
 8006eae:	d03a      	beq.n	8006f26 <_malloc_r+0xea>
 8006eb0:	6823      	ldr	r3, [r4, #0]
 8006eb2:	442b      	add	r3, r5
 8006eb4:	6023      	str	r3, [r4, #0]
 8006eb6:	f8d8 3000 	ldr.w	r3, [r8]
 8006eba:	685a      	ldr	r2, [r3, #4]
 8006ebc:	bb62      	cbnz	r2, 8006f18 <_malloc_r+0xdc>
 8006ebe:	f8c8 7000 	str.w	r7, [r8]
 8006ec2:	e00f      	b.n	8006ee4 <_malloc_r+0xa8>
 8006ec4:	6822      	ldr	r2, [r4, #0]
 8006ec6:	1b52      	subs	r2, r2, r5
 8006ec8:	d420      	bmi.n	8006f0c <_malloc_r+0xd0>
 8006eca:	2a0b      	cmp	r2, #11
 8006ecc:	d917      	bls.n	8006efe <_malloc_r+0xc2>
 8006ece:	1961      	adds	r1, r4, r5
 8006ed0:	42a3      	cmp	r3, r4
 8006ed2:	6025      	str	r5, [r4, #0]
 8006ed4:	bf18      	it	ne
 8006ed6:	6059      	strne	r1, [r3, #4]
 8006ed8:	6863      	ldr	r3, [r4, #4]
 8006eda:	bf08      	it	eq
 8006edc:	f8c8 1000 	streq.w	r1, [r8]
 8006ee0:	5162      	str	r2, [r4, r5]
 8006ee2:	604b      	str	r3, [r1, #4]
 8006ee4:	4630      	mov	r0, r6
 8006ee6:	f000 f82f 	bl	8006f48 <__malloc_unlock>
 8006eea:	f104 000b 	add.w	r0, r4, #11
 8006eee:	1d23      	adds	r3, r4, #4
 8006ef0:	f020 0007 	bic.w	r0, r0, #7
 8006ef4:	1ac2      	subs	r2, r0, r3
 8006ef6:	bf1c      	itt	ne
 8006ef8:	1a1b      	subne	r3, r3, r0
 8006efa:	50a3      	strne	r3, [r4, r2]
 8006efc:	e7af      	b.n	8006e5e <_malloc_r+0x22>
 8006efe:	6862      	ldr	r2, [r4, #4]
 8006f00:	42a3      	cmp	r3, r4
 8006f02:	bf0c      	ite	eq
 8006f04:	f8c8 2000 	streq.w	r2, [r8]
 8006f08:	605a      	strne	r2, [r3, #4]
 8006f0a:	e7eb      	b.n	8006ee4 <_malloc_r+0xa8>
 8006f0c:	4623      	mov	r3, r4
 8006f0e:	6864      	ldr	r4, [r4, #4]
 8006f10:	e7ae      	b.n	8006e70 <_malloc_r+0x34>
 8006f12:	463c      	mov	r4, r7
 8006f14:	687f      	ldr	r7, [r7, #4]
 8006f16:	e7b6      	b.n	8006e86 <_malloc_r+0x4a>
 8006f18:	461a      	mov	r2, r3
 8006f1a:	685b      	ldr	r3, [r3, #4]
 8006f1c:	42a3      	cmp	r3, r4
 8006f1e:	d1fb      	bne.n	8006f18 <_malloc_r+0xdc>
 8006f20:	2300      	movs	r3, #0
 8006f22:	6053      	str	r3, [r2, #4]
 8006f24:	e7de      	b.n	8006ee4 <_malloc_r+0xa8>
 8006f26:	230c      	movs	r3, #12
 8006f28:	6033      	str	r3, [r6, #0]
 8006f2a:	4630      	mov	r0, r6
 8006f2c:	f000 f80c 	bl	8006f48 <__malloc_unlock>
 8006f30:	e794      	b.n	8006e5c <_malloc_r+0x20>
 8006f32:	6005      	str	r5, [r0, #0]
 8006f34:	e7d6      	b.n	8006ee4 <_malloc_r+0xa8>
 8006f36:	bf00      	nop
 8006f38:	200009c0 	.word	0x200009c0

08006f3c <__malloc_lock>:
 8006f3c:	4801      	ldr	r0, [pc, #4]	@ (8006f44 <__malloc_lock+0x8>)
 8006f3e:	f7ff bf01 	b.w	8006d44 <__retarget_lock_acquire_recursive>
 8006f42:	bf00      	nop
 8006f44:	200009b8 	.word	0x200009b8

08006f48 <__malloc_unlock>:
 8006f48:	4801      	ldr	r0, [pc, #4]	@ (8006f50 <__malloc_unlock+0x8>)
 8006f4a:	f7ff befc 	b.w	8006d46 <__retarget_lock_release_recursive>
 8006f4e:	bf00      	nop
 8006f50:	200009b8 	.word	0x200009b8

08006f54 <__ssputs_r>:
 8006f54:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006f58:	688e      	ldr	r6, [r1, #8]
 8006f5a:	461f      	mov	r7, r3
 8006f5c:	42be      	cmp	r6, r7
 8006f5e:	680b      	ldr	r3, [r1, #0]
 8006f60:	4682      	mov	sl, r0
 8006f62:	460c      	mov	r4, r1
 8006f64:	4690      	mov	r8, r2
 8006f66:	d82d      	bhi.n	8006fc4 <__ssputs_r+0x70>
 8006f68:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8006f6c:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8006f70:	d026      	beq.n	8006fc0 <__ssputs_r+0x6c>
 8006f72:	6965      	ldr	r5, [r4, #20]
 8006f74:	6909      	ldr	r1, [r1, #16]
 8006f76:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8006f7a:	eba3 0901 	sub.w	r9, r3, r1
 8006f7e:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8006f82:	1c7b      	adds	r3, r7, #1
 8006f84:	444b      	add	r3, r9
 8006f86:	106d      	asrs	r5, r5, #1
 8006f88:	429d      	cmp	r5, r3
 8006f8a:	bf38      	it	cc
 8006f8c:	461d      	movcc	r5, r3
 8006f8e:	0553      	lsls	r3, r2, #21
 8006f90:	d527      	bpl.n	8006fe2 <__ssputs_r+0x8e>
 8006f92:	4629      	mov	r1, r5
 8006f94:	f7ff ff52 	bl	8006e3c <_malloc_r>
 8006f98:	4606      	mov	r6, r0
 8006f9a:	b360      	cbz	r0, 8006ff6 <__ssputs_r+0xa2>
 8006f9c:	6921      	ldr	r1, [r4, #16]
 8006f9e:	464a      	mov	r2, r9
 8006fa0:	f7ff fed2 	bl	8006d48 <memcpy>
 8006fa4:	89a3      	ldrh	r3, [r4, #12]
 8006fa6:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8006faa:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006fae:	81a3      	strh	r3, [r4, #12]
 8006fb0:	6126      	str	r6, [r4, #16]
 8006fb2:	6165      	str	r5, [r4, #20]
 8006fb4:	444e      	add	r6, r9
 8006fb6:	eba5 0509 	sub.w	r5, r5, r9
 8006fba:	6026      	str	r6, [r4, #0]
 8006fbc:	60a5      	str	r5, [r4, #8]
 8006fbe:	463e      	mov	r6, r7
 8006fc0:	42be      	cmp	r6, r7
 8006fc2:	d900      	bls.n	8006fc6 <__ssputs_r+0x72>
 8006fc4:	463e      	mov	r6, r7
 8006fc6:	6820      	ldr	r0, [r4, #0]
 8006fc8:	4632      	mov	r2, r6
 8006fca:	4641      	mov	r1, r8
 8006fcc:	f000 faa6 	bl	800751c <memmove>
 8006fd0:	68a3      	ldr	r3, [r4, #8]
 8006fd2:	1b9b      	subs	r3, r3, r6
 8006fd4:	60a3      	str	r3, [r4, #8]
 8006fd6:	6823      	ldr	r3, [r4, #0]
 8006fd8:	4433      	add	r3, r6
 8006fda:	6023      	str	r3, [r4, #0]
 8006fdc:	2000      	movs	r0, #0
 8006fde:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006fe2:	462a      	mov	r2, r5
 8006fe4:	f000 fac4 	bl	8007570 <_realloc_r>
 8006fe8:	4606      	mov	r6, r0
 8006fea:	2800      	cmp	r0, #0
 8006fec:	d1e0      	bne.n	8006fb0 <__ssputs_r+0x5c>
 8006fee:	6921      	ldr	r1, [r4, #16]
 8006ff0:	4650      	mov	r0, sl
 8006ff2:	f7ff feb7 	bl	8006d64 <_free_r>
 8006ff6:	230c      	movs	r3, #12
 8006ff8:	f8ca 3000 	str.w	r3, [sl]
 8006ffc:	89a3      	ldrh	r3, [r4, #12]
 8006ffe:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007002:	81a3      	strh	r3, [r4, #12]
 8007004:	f04f 30ff 	mov.w	r0, #4294967295
 8007008:	e7e9      	b.n	8006fde <__ssputs_r+0x8a>
	...

0800700c <_svfiprintf_r>:
 800700c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007010:	4698      	mov	r8, r3
 8007012:	898b      	ldrh	r3, [r1, #12]
 8007014:	061b      	lsls	r3, r3, #24
 8007016:	b09d      	sub	sp, #116	@ 0x74
 8007018:	4607      	mov	r7, r0
 800701a:	460d      	mov	r5, r1
 800701c:	4614      	mov	r4, r2
 800701e:	d510      	bpl.n	8007042 <_svfiprintf_r+0x36>
 8007020:	690b      	ldr	r3, [r1, #16]
 8007022:	b973      	cbnz	r3, 8007042 <_svfiprintf_r+0x36>
 8007024:	2140      	movs	r1, #64	@ 0x40
 8007026:	f7ff ff09 	bl	8006e3c <_malloc_r>
 800702a:	6028      	str	r0, [r5, #0]
 800702c:	6128      	str	r0, [r5, #16]
 800702e:	b930      	cbnz	r0, 800703e <_svfiprintf_r+0x32>
 8007030:	230c      	movs	r3, #12
 8007032:	603b      	str	r3, [r7, #0]
 8007034:	f04f 30ff 	mov.w	r0, #4294967295
 8007038:	b01d      	add	sp, #116	@ 0x74
 800703a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800703e:	2340      	movs	r3, #64	@ 0x40
 8007040:	616b      	str	r3, [r5, #20]
 8007042:	2300      	movs	r3, #0
 8007044:	9309      	str	r3, [sp, #36]	@ 0x24
 8007046:	2320      	movs	r3, #32
 8007048:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800704c:	f8cd 800c 	str.w	r8, [sp, #12]
 8007050:	2330      	movs	r3, #48	@ 0x30
 8007052:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 80071f0 <_svfiprintf_r+0x1e4>
 8007056:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800705a:	f04f 0901 	mov.w	r9, #1
 800705e:	4623      	mov	r3, r4
 8007060:	469a      	mov	sl, r3
 8007062:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007066:	b10a      	cbz	r2, 800706c <_svfiprintf_r+0x60>
 8007068:	2a25      	cmp	r2, #37	@ 0x25
 800706a:	d1f9      	bne.n	8007060 <_svfiprintf_r+0x54>
 800706c:	ebba 0b04 	subs.w	fp, sl, r4
 8007070:	d00b      	beq.n	800708a <_svfiprintf_r+0x7e>
 8007072:	465b      	mov	r3, fp
 8007074:	4622      	mov	r2, r4
 8007076:	4629      	mov	r1, r5
 8007078:	4638      	mov	r0, r7
 800707a:	f7ff ff6b 	bl	8006f54 <__ssputs_r>
 800707e:	3001      	adds	r0, #1
 8007080:	f000 80a7 	beq.w	80071d2 <_svfiprintf_r+0x1c6>
 8007084:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8007086:	445a      	add	r2, fp
 8007088:	9209      	str	r2, [sp, #36]	@ 0x24
 800708a:	f89a 3000 	ldrb.w	r3, [sl]
 800708e:	2b00      	cmp	r3, #0
 8007090:	f000 809f 	beq.w	80071d2 <_svfiprintf_r+0x1c6>
 8007094:	2300      	movs	r3, #0
 8007096:	f04f 32ff 	mov.w	r2, #4294967295
 800709a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800709e:	f10a 0a01 	add.w	sl, sl, #1
 80070a2:	9304      	str	r3, [sp, #16]
 80070a4:	9307      	str	r3, [sp, #28]
 80070a6:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80070aa:	931a      	str	r3, [sp, #104]	@ 0x68
 80070ac:	4654      	mov	r4, sl
 80070ae:	2205      	movs	r2, #5
 80070b0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80070b4:	484e      	ldr	r0, [pc, #312]	@ (80071f0 <_svfiprintf_r+0x1e4>)
 80070b6:	f7f9 f89b 	bl	80001f0 <memchr>
 80070ba:	9a04      	ldr	r2, [sp, #16]
 80070bc:	b9d8      	cbnz	r0, 80070f6 <_svfiprintf_r+0xea>
 80070be:	06d0      	lsls	r0, r2, #27
 80070c0:	bf44      	itt	mi
 80070c2:	2320      	movmi	r3, #32
 80070c4:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80070c8:	0711      	lsls	r1, r2, #28
 80070ca:	bf44      	itt	mi
 80070cc:	232b      	movmi	r3, #43	@ 0x2b
 80070ce:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80070d2:	f89a 3000 	ldrb.w	r3, [sl]
 80070d6:	2b2a      	cmp	r3, #42	@ 0x2a
 80070d8:	d015      	beq.n	8007106 <_svfiprintf_r+0xfa>
 80070da:	9a07      	ldr	r2, [sp, #28]
 80070dc:	4654      	mov	r4, sl
 80070de:	2000      	movs	r0, #0
 80070e0:	f04f 0c0a 	mov.w	ip, #10
 80070e4:	4621      	mov	r1, r4
 80070e6:	f811 3b01 	ldrb.w	r3, [r1], #1
 80070ea:	3b30      	subs	r3, #48	@ 0x30
 80070ec:	2b09      	cmp	r3, #9
 80070ee:	d94b      	bls.n	8007188 <_svfiprintf_r+0x17c>
 80070f0:	b1b0      	cbz	r0, 8007120 <_svfiprintf_r+0x114>
 80070f2:	9207      	str	r2, [sp, #28]
 80070f4:	e014      	b.n	8007120 <_svfiprintf_r+0x114>
 80070f6:	eba0 0308 	sub.w	r3, r0, r8
 80070fa:	fa09 f303 	lsl.w	r3, r9, r3
 80070fe:	4313      	orrs	r3, r2
 8007100:	9304      	str	r3, [sp, #16]
 8007102:	46a2      	mov	sl, r4
 8007104:	e7d2      	b.n	80070ac <_svfiprintf_r+0xa0>
 8007106:	9b03      	ldr	r3, [sp, #12]
 8007108:	1d19      	adds	r1, r3, #4
 800710a:	681b      	ldr	r3, [r3, #0]
 800710c:	9103      	str	r1, [sp, #12]
 800710e:	2b00      	cmp	r3, #0
 8007110:	bfbb      	ittet	lt
 8007112:	425b      	neglt	r3, r3
 8007114:	f042 0202 	orrlt.w	r2, r2, #2
 8007118:	9307      	strge	r3, [sp, #28]
 800711a:	9307      	strlt	r3, [sp, #28]
 800711c:	bfb8      	it	lt
 800711e:	9204      	strlt	r2, [sp, #16]
 8007120:	7823      	ldrb	r3, [r4, #0]
 8007122:	2b2e      	cmp	r3, #46	@ 0x2e
 8007124:	d10a      	bne.n	800713c <_svfiprintf_r+0x130>
 8007126:	7863      	ldrb	r3, [r4, #1]
 8007128:	2b2a      	cmp	r3, #42	@ 0x2a
 800712a:	d132      	bne.n	8007192 <_svfiprintf_r+0x186>
 800712c:	9b03      	ldr	r3, [sp, #12]
 800712e:	1d1a      	adds	r2, r3, #4
 8007130:	681b      	ldr	r3, [r3, #0]
 8007132:	9203      	str	r2, [sp, #12]
 8007134:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8007138:	3402      	adds	r4, #2
 800713a:	9305      	str	r3, [sp, #20]
 800713c:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8007200 <_svfiprintf_r+0x1f4>
 8007140:	7821      	ldrb	r1, [r4, #0]
 8007142:	2203      	movs	r2, #3
 8007144:	4650      	mov	r0, sl
 8007146:	f7f9 f853 	bl	80001f0 <memchr>
 800714a:	b138      	cbz	r0, 800715c <_svfiprintf_r+0x150>
 800714c:	9b04      	ldr	r3, [sp, #16]
 800714e:	eba0 000a 	sub.w	r0, r0, sl
 8007152:	2240      	movs	r2, #64	@ 0x40
 8007154:	4082      	lsls	r2, r0
 8007156:	4313      	orrs	r3, r2
 8007158:	3401      	adds	r4, #1
 800715a:	9304      	str	r3, [sp, #16]
 800715c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007160:	4824      	ldr	r0, [pc, #144]	@ (80071f4 <_svfiprintf_r+0x1e8>)
 8007162:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8007166:	2206      	movs	r2, #6
 8007168:	f7f9 f842 	bl	80001f0 <memchr>
 800716c:	2800      	cmp	r0, #0
 800716e:	d036      	beq.n	80071de <_svfiprintf_r+0x1d2>
 8007170:	4b21      	ldr	r3, [pc, #132]	@ (80071f8 <_svfiprintf_r+0x1ec>)
 8007172:	bb1b      	cbnz	r3, 80071bc <_svfiprintf_r+0x1b0>
 8007174:	9b03      	ldr	r3, [sp, #12]
 8007176:	3307      	adds	r3, #7
 8007178:	f023 0307 	bic.w	r3, r3, #7
 800717c:	3308      	adds	r3, #8
 800717e:	9303      	str	r3, [sp, #12]
 8007180:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007182:	4433      	add	r3, r6
 8007184:	9309      	str	r3, [sp, #36]	@ 0x24
 8007186:	e76a      	b.n	800705e <_svfiprintf_r+0x52>
 8007188:	fb0c 3202 	mla	r2, ip, r2, r3
 800718c:	460c      	mov	r4, r1
 800718e:	2001      	movs	r0, #1
 8007190:	e7a8      	b.n	80070e4 <_svfiprintf_r+0xd8>
 8007192:	2300      	movs	r3, #0
 8007194:	3401      	adds	r4, #1
 8007196:	9305      	str	r3, [sp, #20]
 8007198:	4619      	mov	r1, r3
 800719a:	f04f 0c0a 	mov.w	ip, #10
 800719e:	4620      	mov	r0, r4
 80071a0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80071a4:	3a30      	subs	r2, #48	@ 0x30
 80071a6:	2a09      	cmp	r2, #9
 80071a8:	d903      	bls.n	80071b2 <_svfiprintf_r+0x1a6>
 80071aa:	2b00      	cmp	r3, #0
 80071ac:	d0c6      	beq.n	800713c <_svfiprintf_r+0x130>
 80071ae:	9105      	str	r1, [sp, #20]
 80071b0:	e7c4      	b.n	800713c <_svfiprintf_r+0x130>
 80071b2:	fb0c 2101 	mla	r1, ip, r1, r2
 80071b6:	4604      	mov	r4, r0
 80071b8:	2301      	movs	r3, #1
 80071ba:	e7f0      	b.n	800719e <_svfiprintf_r+0x192>
 80071bc:	ab03      	add	r3, sp, #12
 80071be:	9300      	str	r3, [sp, #0]
 80071c0:	462a      	mov	r2, r5
 80071c2:	4b0e      	ldr	r3, [pc, #56]	@ (80071fc <_svfiprintf_r+0x1f0>)
 80071c4:	a904      	add	r1, sp, #16
 80071c6:	4638      	mov	r0, r7
 80071c8:	f3af 8000 	nop.w
 80071cc:	1c42      	adds	r2, r0, #1
 80071ce:	4606      	mov	r6, r0
 80071d0:	d1d6      	bne.n	8007180 <_svfiprintf_r+0x174>
 80071d2:	89ab      	ldrh	r3, [r5, #12]
 80071d4:	065b      	lsls	r3, r3, #25
 80071d6:	f53f af2d 	bmi.w	8007034 <_svfiprintf_r+0x28>
 80071da:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80071dc:	e72c      	b.n	8007038 <_svfiprintf_r+0x2c>
 80071de:	ab03      	add	r3, sp, #12
 80071e0:	9300      	str	r3, [sp, #0]
 80071e2:	462a      	mov	r2, r5
 80071e4:	4b05      	ldr	r3, [pc, #20]	@ (80071fc <_svfiprintf_r+0x1f0>)
 80071e6:	a904      	add	r1, sp, #16
 80071e8:	4638      	mov	r0, r7
 80071ea:	f000 f879 	bl	80072e0 <_printf_i>
 80071ee:	e7ed      	b.n	80071cc <_svfiprintf_r+0x1c0>
 80071f0:	0800828c 	.word	0x0800828c
 80071f4:	08008296 	.word	0x08008296
 80071f8:	00000000 	.word	0x00000000
 80071fc:	08006f55 	.word	0x08006f55
 8007200:	08008292 	.word	0x08008292

08007204 <_printf_common>:
 8007204:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007208:	4616      	mov	r6, r2
 800720a:	4698      	mov	r8, r3
 800720c:	688a      	ldr	r2, [r1, #8]
 800720e:	690b      	ldr	r3, [r1, #16]
 8007210:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8007214:	4293      	cmp	r3, r2
 8007216:	bfb8      	it	lt
 8007218:	4613      	movlt	r3, r2
 800721a:	6033      	str	r3, [r6, #0]
 800721c:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8007220:	4607      	mov	r7, r0
 8007222:	460c      	mov	r4, r1
 8007224:	b10a      	cbz	r2, 800722a <_printf_common+0x26>
 8007226:	3301      	adds	r3, #1
 8007228:	6033      	str	r3, [r6, #0]
 800722a:	6823      	ldr	r3, [r4, #0]
 800722c:	0699      	lsls	r1, r3, #26
 800722e:	bf42      	ittt	mi
 8007230:	6833      	ldrmi	r3, [r6, #0]
 8007232:	3302      	addmi	r3, #2
 8007234:	6033      	strmi	r3, [r6, #0]
 8007236:	6825      	ldr	r5, [r4, #0]
 8007238:	f015 0506 	ands.w	r5, r5, #6
 800723c:	d106      	bne.n	800724c <_printf_common+0x48>
 800723e:	f104 0a19 	add.w	sl, r4, #25
 8007242:	68e3      	ldr	r3, [r4, #12]
 8007244:	6832      	ldr	r2, [r6, #0]
 8007246:	1a9b      	subs	r3, r3, r2
 8007248:	42ab      	cmp	r3, r5
 800724a:	dc26      	bgt.n	800729a <_printf_common+0x96>
 800724c:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8007250:	6822      	ldr	r2, [r4, #0]
 8007252:	3b00      	subs	r3, #0
 8007254:	bf18      	it	ne
 8007256:	2301      	movne	r3, #1
 8007258:	0692      	lsls	r2, r2, #26
 800725a:	d42b      	bmi.n	80072b4 <_printf_common+0xb0>
 800725c:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8007260:	4641      	mov	r1, r8
 8007262:	4638      	mov	r0, r7
 8007264:	47c8      	blx	r9
 8007266:	3001      	adds	r0, #1
 8007268:	d01e      	beq.n	80072a8 <_printf_common+0xa4>
 800726a:	6823      	ldr	r3, [r4, #0]
 800726c:	6922      	ldr	r2, [r4, #16]
 800726e:	f003 0306 	and.w	r3, r3, #6
 8007272:	2b04      	cmp	r3, #4
 8007274:	bf02      	ittt	eq
 8007276:	68e5      	ldreq	r5, [r4, #12]
 8007278:	6833      	ldreq	r3, [r6, #0]
 800727a:	1aed      	subeq	r5, r5, r3
 800727c:	68a3      	ldr	r3, [r4, #8]
 800727e:	bf0c      	ite	eq
 8007280:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8007284:	2500      	movne	r5, #0
 8007286:	4293      	cmp	r3, r2
 8007288:	bfc4      	itt	gt
 800728a:	1a9b      	subgt	r3, r3, r2
 800728c:	18ed      	addgt	r5, r5, r3
 800728e:	2600      	movs	r6, #0
 8007290:	341a      	adds	r4, #26
 8007292:	42b5      	cmp	r5, r6
 8007294:	d11a      	bne.n	80072cc <_printf_common+0xc8>
 8007296:	2000      	movs	r0, #0
 8007298:	e008      	b.n	80072ac <_printf_common+0xa8>
 800729a:	2301      	movs	r3, #1
 800729c:	4652      	mov	r2, sl
 800729e:	4641      	mov	r1, r8
 80072a0:	4638      	mov	r0, r7
 80072a2:	47c8      	blx	r9
 80072a4:	3001      	adds	r0, #1
 80072a6:	d103      	bne.n	80072b0 <_printf_common+0xac>
 80072a8:	f04f 30ff 	mov.w	r0, #4294967295
 80072ac:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80072b0:	3501      	adds	r5, #1
 80072b2:	e7c6      	b.n	8007242 <_printf_common+0x3e>
 80072b4:	18e1      	adds	r1, r4, r3
 80072b6:	1c5a      	adds	r2, r3, #1
 80072b8:	2030      	movs	r0, #48	@ 0x30
 80072ba:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 80072be:	4422      	add	r2, r4
 80072c0:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 80072c4:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 80072c8:	3302      	adds	r3, #2
 80072ca:	e7c7      	b.n	800725c <_printf_common+0x58>
 80072cc:	2301      	movs	r3, #1
 80072ce:	4622      	mov	r2, r4
 80072d0:	4641      	mov	r1, r8
 80072d2:	4638      	mov	r0, r7
 80072d4:	47c8      	blx	r9
 80072d6:	3001      	adds	r0, #1
 80072d8:	d0e6      	beq.n	80072a8 <_printf_common+0xa4>
 80072da:	3601      	adds	r6, #1
 80072dc:	e7d9      	b.n	8007292 <_printf_common+0x8e>
	...

080072e0 <_printf_i>:
 80072e0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80072e4:	7e0f      	ldrb	r7, [r1, #24]
 80072e6:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80072e8:	2f78      	cmp	r7, #120	@ 0x78
 80072ea:	4691      	mov	r9, r2
 80072ec:	4680      	mov	r8, r0
 80072ee:	460c      	mov	r4, r1
 80072f0:	469a      	mov	sl, r3
 80072f2:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80072f6:	d807      	bhi.n	8007308 <_printf_i+0x28>
 80072f8:	2f62      	cmp	r7, #98	@ 0x62
 80072fa:	d80a      	bhi.n	8007312 <_printf_i+0x32>
 80072fc:	2f00      	cmp	r7, #0
 80072fe:	f000 80d1 	beq.w	80074a4 <_printf_i+0x1c4>
 8007302:	2f58      	cmp	r7, #88	@ 0x58
 8007304:	f000 80b8 	beq.w	8007478 <_printf_i+0x198>
 8007308:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800730c:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8007310:	e03a      	b.n	8007388 <_printf_i+0xa8>
 8007312:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8007316:	2b15      	cmp	r3, #21
 8007318:	d8f6      	bhi.n	8007308 <_printf_i+0x28>
 800731a:	a101      	add	r1, pc, #4	@ (adr r1, 8007320 <_printf_i+0x40>)
 800731c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8007320:	08007379 	.word	0x08007379
 8007324:	0800738d 	.word	0x0800738d
 8007328:	08007309 	.word	0x08007309
 800732c:	08007309 	.word	0x08007309
 8007330:	08007309 	.word	0x08007309
 8007334:	08007309 	.word	0x08007309
 8007338:	0800738d 	.word	0x0800738d
 800733c:	08007309 	.word	0x08007309
 8007340:	08007309 	.word	0x08007309
 8007344:	08007309 	.word	0x08007309
 8007348:	08007309 	.word	0x08007309
 800734c:	0800748b 	.word	0x0800748b
 8007350:	080073b7 	.word	0x080073b7
 8007354:	08007445 	.word	0x08007445
 8007358:	08007309 	.word	0x08007309
 800735c:	08007309 	.word	0x08007309
 8007360:	080074ad 	.word	0x080074ad
 8007364:	08007309 	.word	0x08007309
 8007368:	080073b7 	.word	0x080073b7
 800736c:	08007309 	.word	0x08007309
 8007370:	08007309 	.word	0x08007309
 8007374:	0800744d 	.word	0x0800744d
 8007378:	6833      	ldr	r3, [r6, #0]
 800737a:	1d1a      	adds	r2, r3, #4
 800737c:	681b      	ldr	r3, [r3, #0]
 800737e:	6032      	str	r2, [r6, #0]
 8007380:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8007384:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8007388:	2301      	movs	r3, #1
 800738a:	e09c      	b.n	80074c6 <_printf_i+0x1e6>
 800738c:	6833      	ldr	r3, [r6, #0]
 800738e:	6820      	ldr	r0, [r4, #0]
 8007390:	1d19      	adds	r1, r3, #4
 8007392:	6031      	str	r1, [r6, #0]
 8007394:	0606      	lsls	r6, r0, #24
 8007396:	d501      	bpl.n	800739c <_printf_i+0xbc>
 8007398:	681d      	ldr	r5, [r3, #0]
 800739a:	e003      	b.n	80073a4 <_printf_i+0xc4>
 800739c:	0645      	lsls	r5, r0, #25
 800739e:	d5fb      	bpl.n	8007398 <_printf_i+0xb8>
 80073a0:	f9b3 5000 	ldrsh.w	r5, [r3]
 80073a4:	2d00      	cmp	r5, #0
 80073a6:	da03      	bge.n	80073b0 <_printf_i+0xd0>
 80073a8:	232d      	movs	r3, #45	@ 0x2d
 80073aa:	426d      	negs	r5, r5
 80073ac:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80073b0:	4858      	ldr	r0, [pc, #352]	@ (8007514 <_printf_i+0x234>)
 80073b2:	230a      	movs	r3, #10
 80073b4:	e011      	b.n	80073da <_printf_i+0xfa>
 80073b6:	6821      	ldr	r1, [r4, #0]
 80073b8:	6833      	ldr	r3, [r6, #0]
 80073ba:	0608      	lsls	r0, r1, #24
 80073bc:	f853 5b04 	ldr.w	r5, [r3], #4
 80073c0:	d402      	bmi.n	80073c8 <_printf_i+0xe8>
 80073c2:	0649      	lsls	r1, r1, #25
 80073c4:	bf48      	it	mi
 80073c6:	b2ad      	uxthmi	r5, r5
 80073c8:	2f6f      	cmp	r7, #111	@ 0x6f
 80073ca:	4852      	ldr	r0, [pc, #328]	@ (8007514 <_printf_i+0x234>)
 80073cc:	6033      	str	r3, [r6, #0]
 80073ce:	bf14      	ite	ne
 80073d0:	230a      	movne	r3, #10
 80073d2:	2308      	moveq	r3, #8
 80073d4:	2100      	movs	r1, #0
 80073d6:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 80073da:	6866      	ldr	r6, [r4, #4]
 80073dc:	60a6      	str	r6, [r4, #8]
 80073de:	2e00      	cmp	r6, #0
 80073e0:	db05      	blt.n	80073ee <_printf_i+0x10e>
 80073e2:	6821      	ldr	r1, [r4, #0]
 80073e4:	432e      	orrs	r6, r5
 80073e6:	f021 0104 	bic.w	r1, r1, #4
 80073ea:	6021      	str	r1, [r4, #0]
 80073ec:	d04b      	beq.n	8007486 <_printf_i+0x1a6>
 80073ee:	4616      	mov	r6, r2
 80073f0:	fbb5 f1f3 	udiv	r1, r5, r3
 80073f4:	fb03 5711 	mls	r7, r3, r1, r5
 80073f8:	5dc7      	ldrb	r7, [r0, r7]
 80073fa:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80073fe:	462f      	mov	r7, r5
 8007400:	42bb      	cmp	r3, r7
 8007402:	460d      	mov	r5, r1
 8007404:	d9f4      	bls.n	80073f0 <_printf_i+0x110>
 8007406:	2b08      	cmp	r3, #8
 8007408:	d10b      	bne.n	8007422 <_printf_i+0x142>
 800740a:	6823      	ldr	r3, [r4, #0]
 800740c:	07df      	lsls	r7, r3, #31
 800740e:	d508      	bpl.n	8007422 <_printf_i+0x142>
 8007410:	6923      	ldr	r3, [r4, #16]
 8007412:	6861      	ldr	r1, [r4, #4]
 8007414:	4299      	cmp	r1, r3
 8007416:	bfde      	ittt	le
 8007418:	2330      	movle	r3, #48	@ 0x30
 800741a:	f806 3c01 	strble.w	r3, [r6, #-1]
 800741e:	f106 36ff 	addle.w	r6, r6, #4294967295
 8007422:	1b92      	subs	r2, r2, r6
 8007424:	6122      	str	r2, [r4, #16]
 8007426:	f8cd a000 	str.w	sl, [sp]
 800742a:	464b      	mov	r3, r9
 800742c:	aa03      	add	r2, sp, #12
 800742e:	4621      	mov	r1, r4
 8007430:	4640      	mov	r0, r8
 8007432:	f7ff fee7 	bl	8007204 <_printf_common>
 8007436:	3001      	adds	r0, #1
 8007438:	d14a      	bne.n	80074d0 <_printf_i+0x1f0>
 800743a:	f04f 30ff 	mov.w	r0, #4294967295
 800743e:	b004      	add	sp, #16
 8007440:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007444:	6823      	ldr	r3, [r4, #0]
 8007446:	f043 0320 	orr.w	r3, r3, #32
 800744a:	6023      	str	r3, [r4, #0]
 800744c:	4832      	ldr	r0, [pc, #200]	@ (8007518 <_printf_i+0x238>)
 800744e:	2778      	movs	r7, #120	@ 0x78
 8007450:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8007454:	6823      	ldr	r3, [r4, #0]
 8007456:	6831      	ldr	r1, [r6, #0]
 8007458:	061f      	lsls	r7, r3, #24
 800745a:	f851 5b04 	ldr.w	r5, [r1], #4
 800745e:	d402      	bmi.n	8007466 <_printf_i+0x186>
 8007460:	065f      	lsls	r7, r3, #25
 8007462:	bf48      	it	mi
 8007464:	b2ad      	uxthmi	r5, r5
 8007466:	6031      	str	r1, [r6, #0]
 8007468:	07d9      	lsls	r1, r3, #31
 800746a:	bf44      	itt	mi
 800746c:	f043 0320 	orrmi.w	r3, r3, #32
 8007470:	6023      	strmi	r3, [r4, #0]
 8007472:	b11d      	cbz	r5, 800747c <_printf_i+0x19c>
 8007474:	2310      	movs	r3, #16
 8007476:	e7ad      	b.n	80073d4 <_printf_i+0xf4>
 8007478:	4826      	ldr	r0, [pc, #152]	@ (8007514 <_printf_i+0x234>)
 800747a:	e7e9      	b.n	8007450 <_printf_i+0x170>
 800747c:	6823      	ldr	r3, [r4, #0]
 800747e:	f023 0320 	bic.w	r3, r3, #32
 8007482:	6023      	str	r3, [r4, #0]
 8007484:	e7f6      	b.n	8007474 <_printf_i+0x194>
 8007486:	4616      	mov	r6, r2
 8007488:	e7bd      	b.n	8007406 <_printf_i+0x126>
 800748a:	6833      	ldr	r3, [r6, #0]
 800748c:	6825      	ldr	r5, [r4, #0]
 800748e:	6961      	ldr	r1, [r4, #20]
 8007490:	1d18      	adds	r0, r3, #4
 8007492:	6030      	str	r0, [r6, #0]
 8007494:	062e      	lsls	r6, r5, #24
 8007496:	681b      	ldr	r3, [r3, #0]
 8007498:	d501      	bpl.n	800749e <_printf_i+0x1be>
 800749a:	6019      	str	r1, [r3, #0]
 800749c:	e002      	b.n	80074a4 <_printf_i+0x1c4>
 800749e:	0668      	lsls	r0, r5, #25
 80074a0:	d5fb      	bpl.n	800749a <_printf_i+0x1ba>
 80074a2:	8019      	strh	r1, [r3, #0]
 80074a4:	2300      	movs	r3, #0
 80074a6:	6123      	str	r3, [r4, #16]
 80074a8:	4616      	mov	r6, r2
 80074aa:	e7bc      	b.n	8007426 <_printf_i+0x146>
 80074ac:	6833      	ldr	r3, [r6, #0]
 80074ae:	1d1a      	adds	r2, r3, #4
 80074b0:	6032      	str	r2, [r6, #0]
 80074b2:	681e      	ldr	r6, [r3, #0]
 80074b4:	6862      	ldr	r2, [r4, #4]
 80074b6:	2100      	movs	r1, #0
 80074b8:	4630      	mov	r0, r6
 80074ba:	f7f8 fe99 	bl	80001f0 <memchr>
 80074be:	b108      	cbz	r0, 80074c4 <_printf_i+0x1e4>
 80074c0:	1b80      	subs	r0, r0, r6
 80074c2:	6060      	str	r0, [r4, #4]
 80074c4:	6863      	ldr	r3, [r4, #4]
 80074c6:	6123      	str	r3, [r4, #16]
 80074c8:	2300      	movs	r3, #0
 80074ca:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80074ce:	e7aa      	b.n	8007426 <_printf_i+0x146>
 80074d0:	6923      	ldr	r3, [r4, #16]
 80074d2:	4632      	mov	r2, r6
 80074d4:	4649      	mov	r1, r9
 80074d6:	4640      	mov	r0, r8
 80074d8:	47d0      	blx	sl
 80074da:	3001      	adds	r0, #1
 80074dc:	d0ad      	beq.n	800743a <_printf_i+0x15a>
 80074de:	6823      	ldr	r3, [r4, #0]
 80074e0:	079b      	lsls	r3, r3, #30
 80074e2:	d413      	bmi.n	800750c <_printf_i+0x22c>
 80074e4:	68e0      	ldr	r0, [r4, #12]
 80074e6:	9b03      	ldr	r3, [sp, #12]
 80074e8:	4298      	cmp	r0, r3
 80074ea:	bfb8      	it	lt
 80074ec:	4618      	movlt	r0, r3
 80074ee:	e7a6      	b.n	800743e <_printf_i+0x15e>
 80074f0:	2301      	movs	r3, #1
 80074f2:	4632      	mov	r2, r6
 80074f4:	4649      	mov	r1, r9
 80074f6:	4640      	mov	r0, r8
 80074f8:	47d0      	blx	sl
 80074fa:	3001      	adds	r0, #1
 80074fc:	d09d      	beq.n	800743a <_printf_i+0x15a>
 80074fe:	3501      	adds	r5, #1
 8007500:	68e3      	ldr	r3, [r4, #12]
 8007502:	9903      	ldr	r1, [sp, #12]
 8007504:	1a5b      	subs	r3, r3, r1
 8007506:	42ab      	cmp	r3, r5
 8007508:	dcf2      	bgt.n	80074f0 <_printf_i+0x210>
 800750a:	e7eb      	b.n	80074e4 <_printf_i+0x204>
 800750c:	2500      	movs	r5, #0
 800750e:	f104 0619 	add.w	r6, r4, #25
 8007512:	e7f5      	b.n	8007500 <_printf_i+0x220>
 8007514:	0800829d 	.word	0x0800829d
 8007518:	080082ae 	.word	0x080082ae

0800751c <memmove>:
 800751c:	4288      	cmp	r0, r1
 800751e:	b510      	push	{r4, lr}
 8007520:	eb01 0402 	add.w	r4, r1, r2
 8007524:	d902      	bls.n	800752c <memmove+0x10>
 8007526:	4284      	cmp	r4, r0
 8007528:	4623      	mov	r3, r4
 800752a:	d807      	bhi.n	800753c <memmove+0x20>
 800752c:	1e43      	subs	r3, r0, #1
 800752e:	42a1      	cmp	r1, r4
 8007530:	d008      	beq.n	8007544 <memmove+0x28>
 8007532:	f811 2b01 	ldrb.w	r2, [r1], #1
 8007536:	f803 2f01 	strb.w	r2, [r3, #1]!
 800753a:	e7f8      	b.n	800752e <memmove+0x12>
 800753c:	4402      	add	r2, r0
 800753e:	4601      	mov	r1, r0
 8007540:	428a      	cmp	r2, r1
 8007542:	d100      	bne.n	8007546 <memmove+0x2a>
 8007544:	bd10      	pop	{r4, pc}
 8007546:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800754a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800754e:	e7f7      	b.n	8007540 <memmove+0x24>

08007550 <_sbrk_r>:
 8007550:	b538      	push	{r3, r4, r5, lr}
 8007552:	4d06      	ldr	r5, [pc, #24]	@ (800756c <_sbrk_r+0x1c>)
 8007554:	2300      	movs	r3, #0
 8007556:	4604      	mov	r4, r0
 8007558:	4608      	mov	r0, r1
 800755a:	602b      	str	r3, [r5, #0]
 800755c:	f7fa ff8c 	bl	8002478 <_sbrk>
 8007560:	1c43      	adds	r3, r0, #1
 8007562:	d102      	bne.n	800756a <_sbrk_r+0x1a>
 8007564:	682b      	ldr	r3, [r5, #0]
 8007566:	b103      	cbz	r3, 800756a <_sbrk_r+0x1a>
 8007568:	6023      	str	r3, [r4, #0]
 800756a:	bd38      	pop	{r3, r4, r5, pc}
 800756c:	200009b4 	.word	0x200009b4

08007570 <_realloc_r>:
 8007570:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007574:	4607      	mov	r7, r0
 8007576:	4614      	mov	r4, r2
 8007578:	460d      	mov	r5, r1
 800757a:	b921      	cbnz	r1, 8007586 <_realloc_r+0x16>
 800757c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007580:	4611      	mov	r1, r2
 8007582:	f7ff bc5b 	b.w	8006e3c <_malloc_r>
 8007586:	b92a      	cbnz	r2, 8007594 <_realloc_r+0x24>
 8007588:	f7ff fbec 	bl	8006d64 <_free_r>
 800758c:	4625      	mov	r5, r4
 800758e:	4628      	mov	r0, r5
 8007590:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007594:	f000 f81a 	bl	80075cc <_malloc_usable_size_r>
 8007598:	4284      	cmp	r4, r0
 800759a:	4606      	mov	r6, r0
 800759c:	d802      	bhi.n	80075a4 <_realloc_r+0x34>
 800759e:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80075a2:	d8f4      	bhi.n	800758e <_realloc_r+0x1e>
 80075a4:	4621      	mov	r1, r4
 80075a6:	4638      	mov	r0, r7
 80075a8:	f7ff fc48 	bl	8006e3c <_malloc_r>
 80075ac:	4680      	mov	r8, r0
 80075ae:	b908      	cbnz	r0, 80075b4 <_realloc_r+0x44>
 80075b0:	4645      	mov	r5, r8
 80075b2:	e7ec      	b.n	800758e <_realloc_r+0x1e>
 80075b4:	42b4      	cmp	r4, r6
 80075b6:	4622      	mov	r2, r4
 80075b8:	4629      	mov	r1, r5
 80075ba:	bf28      	it	cs
 80075bc:	4632      	movcs	r2, r6
 80075be:	f7ff fbc3 	bl	8006d48 <memcpy>
 80075c2:	4629      	mov	r1, r5
 80075c4:	4638      	mov	r0, r7
 80075c6:	f7ff fbcd 	bl	8006d64 <_free_r>
 80075ca:	e7f1      	b.n	80075b0 <_realloc_r+0x40>

080075cc <_malloc_usable_size_r>:
 80075cc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80075d0:	1f18      	subs	r0, r3, #4
 80075d2:	2b00      	cmp	r3, #0
 80075d4:	bfbc      	itt	lt
 80075d6:	580b      	ldrlt	r3, [r1, r0]
 80075d8:	18c0      	addlt	r0, r0, r3
 80075da:	4770      	bx	lr

080075dc <_init>:
 80075dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80075de:	bf00      	nop
 80075e0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80075e2:	bc08      	pop	{r3}
 80075e4:	469e      	mov	lr, r3
 80075e6:	4770      	bx	lr

080075e8 <_fini>:
 80075e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80075ea:	bf00      	nop
 80075ec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80075ee:	bc08      	pop	{r3}
 80075f0:	469e      	mov	lr, r3
 80075f2:	4770      	bx	lr
