
DataSafeRT.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000090d0  080001b0  080001b0  000011b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000c60  08009280  08009280  0000a280  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009ee0  08009ee0  0000b0a8  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08009ee0  08009ee0  0000aee0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08009ee8  08009ee8  0000b0a8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009ee8  08009ee8  0000aee8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08009eec  08009eec  0000aeec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000000a8  20000000  08009ef0  0000b000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0000b0a8  2**0
                  CONTENTS
 10 .bss          00004fbc  200000a8  200000a8  0000b0a8  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20005064  20005064  0000b0a8  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0000b0a8  2**0
                  CONTENTS, READONLY
 13 .debug_info   000231d0  00000000  00000000  0000b0d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00004c91  00000000  00000000  0002e2a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001d28  00000000  00000000  00032f40  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00005949  00000000  00000000  00034c68  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00021359  00000000  00000000  0003a5b1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000eb07c  00000000  00000000  0005b90a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00146986  2**0
                  CONTENTS, READONLY
 20 .debug_rnglists 0000167f  00000000  00000000  001469c9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  00007d90  00000000  00000000  00148048  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000090  00000000  00000000  0014fdd8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	@ (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	@ (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	@ (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	200000a8 	.word	0x200000a8
 80001cc:	00000000 	.word	0x00000000
 80001d0:	08009268 	.word	0x08009268

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	@ (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	@ (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	@ (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	200000ac 	.word	0x200000ac
 80001ec:	08009268 	.word	0x08009268

080001f0 <__aeabi_uldivmod>:
 80001f0:	b953      	cbnz	r3, 8000208 <__aeabi_uldivmod+0x18>
 80001f2:	b94a      	cbnz	r2, 8000208 <__aeabi_uldivmod+0x18>
 80001f4:	2900      	cmp	r1, #0
 80001f6:	bf08      	it	eq
 80001f8:	2800      	cmpeq	r0, #0
 80001fa:	bf1c      	itt	ne
 80001fc:	f04f 31ff 	movne.w	r1, #4294967295
 8000200:	f04f 30ff 	movne.w	r0, #4294967295
 8000204:	f000 b988 	b.w	8000518 <__aeabi_idiv0>
 8000208:	f1ad 0c08 	sub.w	ip, sp, #8
 800020c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000210:	f000 f806 	bl	8000220 <__udivmoddi4>
 8000214:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000218:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800021c:	b004      	add	sp, #16
 800021e:	4770      	bx	lr

08000220 <__udivmoddi4>:
 8000220:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000224:	9d08      	ldr	r5, [sp, #32]
 8000226:	468e      	mov	lr, r1
 8000228:	4604      	mov	r4, r0
 800022a:	4688      	mov	r8, r1
 800022c:	2b00      	cmp	r3, #0
 800022e:	d14a      	bne.n	80002c6 <__udivmoddi4+0xa6>
 8000230:	428a      	cmp	r2, r1
 8000232:	4617      	mov	r7, r2
 8000234:	d962      	bls.n	80002fc <__udivmoddi4+0xdc>
 8000236:	fab2 f682 	clz	r6, r2
 800023a:	b14e      	cbz	r6, 8000250 <__udivmoddi4+0x30>
 800023c:	f1c6 0320 	rsb	r3, r6, #32
 8000240:	fa01 f806 	lsl.w	r8, r1, r6
 8000244:	fa20 f303 	lsr.w	r3, r0, r3
 8000248:	40b7      	lsls	r7, r6
 800024a:	ea43 0808 	orr.w	r8, r3, r8
 800024e:	40b4      	lsls	r4, r6
 8000250:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000254:	fa1f fc87 	uxth.w	ip, r7
 8000258:	fbb8 f1fe 	udiv	r1, r8, lr
 800025c:	0c23      	lsrs	r3, r4, #16
 800025e:	fb0e 8811 	mls	r8, lr, r1, r8
 8000262:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000266:	fb01 f20c 	mul.w	r2, r1, ip
 800026a:	429a      	cmp	r2, r3
 800026c:	d909      	bls.n	8000282 <__udivmoddi4+0x62>
 800026e:	18fb      	adds	r3, r7, r3
 8000270:	f101 30ff 	add.w	r0, r1, #4294967295
 8000274:	f080 80ea 	bcs.w	800044c <__udivmoddi4+0x22c>
 8000278:	429a      	cmp	r2, r3
 800027a:	f240 80e7 	bls.w	800044c <__udivmoddi4+0x22c>
 800027e:	3902      	subs	r1, #2
 8000280:	443b      	add	r3, r7
 8000282:	1a9a      	subs	r2, r3, r2
 8000284:	b2a3      	uxth	r3, r4
 8000286:	fbb2 f0fe 	udiv	r0, r2, lr
 800028a:	fb0e 2210 	mls	r2, lr, r0, r2
 800028e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000292:	fb00 fc0c 	mul.w	ip, r0, ip
 8000296:	459c      	cmp	ip, r3
 8000298:	d909      	bls.n	80002ae <__udivmoddi4+0x8e>
 800029a:	18fb      	adds	r3, r7, r3
 800029c:	f100 32ff 	add.w	r2, r0, #4294967295
 80002a0:	f080 80d6 	bcs.w	8000450 <__udivmoddi4+0x230>
 80002a4:	459c      	cmp	ip, r3
 80002a6:	f240 80d3 	bls.w	8000450 <__udivmoddi4+0x230>
 80002aa:	443b      	add	r3, r7
 80002ac:	3802      	subs	r0, #2
 80002ae:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80002b2:	eba3 030c 	sub.w	r3, r3, ip
 80002b6:	2100      	movs	r1, #0
 80002b8:	b11d      	cbz	r5, 80002c2 <__udivmoddi4+0xa2>
 80002ba:	40f3      	lsrs	r3, r6
 80002bc:	2200      	movs	r2, #0
 80002be:	e9c5 3200 	strd	r3, r2, [r5]
 80002c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002c6:	428b      	cmp	r3, r1
 80002c8:	d905      	bls.n	80002d6 <__udivmoddi4+0xb6>
 80002ca:	b10d      	cbz	r5, 80002d0 <__udivmoddi4+0xb0>
 80002cc:	e9c5 0100 	strd	r0, r1, [r5]
 80002d0:	2100      	movs	r1, #0
 80002d2:	4608      	mov	r0, r1
 80002d4:	e7f5      	b.n	80002c2 <__udivmoddi4+0xa2>
 80002d6:	fab3 f183 	clz	r1, r3
 80002da:	2900      	cmp	r1, #0
 80002dc:	d146      	bne.n	800036c <__udivmoddi4+0x14c>
 80002de:	4573      	cmp	r3, lr
 80002e0:	d302      	bcc.n	80002e8 <__udivmoddi4+0xc8>
 80002e2:	4282      	cmp	r2, r0
 80002e4:	f200 8105 	bhi.w	80004f2 <__udivmoddi4+0x2d2>
 80002e8:	1a84      	subs	r4, r0, r2
 80002ea:	eb6e 0203 	sbc.w	r2, lr, r3
 80002ee:	2001      	movs	r0, #1
 80002f0:	4690      	mov	r8, r2
 80002f2:	2d00      	cmp	r5, #0
 80002f4:	d0e5      	beq.n	80002c2 <__udivmoddi4+0xa2>
 80002f6:	e9c5 4800 	strd	r4, r8, [r5]
 80002fa:	e7e2      	b.n	80002c2 <__udivmoddi4+0xa2>
 80002fc:	2a00      	cmp	r2, #0
 80002fe:	f000 8090 	beq.w	8000422 <__udivmoddi4+0x202>
 8000302:	fab2 f682 	clz	r6, r2
 8000306:	2e00      	cmp	r6, #0
 8000308:	f040 80a4 	bne.w	8000454 <__udivmoddi4+0x234>
 800030c:	1a8a      	subs	r2, r1, r2
 800030e:	0c03      	lsrs	r3, r0, #16
 8000310:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000314:	b280      	uxth	r0, r0
 8000316:	b2bc      	uxth	r4, r7
 8000318:	2101      	movs	r1, #1
 800031a:	fbb2 fcfe 	udiv	ip, r2, lr
 800031e:	fb0e 221c 	mls	r2, lr, ip, r2
 8000322:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000326:	fb04 f20c 	mul.w	r2, r4, ip
 800032a:	429a      	cmp	r2, r3
 800032c:	d907      	bls.n	800033e <__udivmoddi4+0x11e>
 800032e:	18fb      	adds	r3, r7, r3
 8000330:	f10c 38ff 	add.w	r8, ip, #4294967295
 8000334:	d202      	bcs.n	800033c <__udivmoddi4+0x11c>
 8000336:	429a      	cmp	r2, r3
 8000338:	f200 80e0 	bhi.w	80004fc <__udivmoddi4+0x2dc>
 800033c:	46c4      	mov	ip, r8
 800033e:	1a9b      	subs	r3, r3, r2
 8000340:	fbb3 f2fe 	udiv	r2, r3, lr
 8000344:	fb0e 3312 	mls	r3, lr, r2, r3
 8000348:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 800034c:	fb02 f404 	mul.w	r4, r2, r4
 8000350:	429c      	cmp	r4, r3
 8000352:	d907      	bls.n	8000364 <__udivmoddi4+0x144>
 8000354:	18fb      	adds	r3, r7, r3
 8000356:	f102 30ff 	add.w	r0, r2, #4294967295
 800035a:	d202      	bcs.n	8000362 <__udivmoddi4+0x142>
 800035c:	429c      	cmp	r4, r3
 800035e:	f200 80ca 	bhi.w	80004f6 <__udivmoddi4+0x2d6>
 8000362:	4602      	mov	r2, r0
 8000364:	1b1b      	subs	r3, r3, r4
 8000366:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 800036a:	e7a5      	b.n	80002b8 <__udivmoddi4+0x98>
 800036c:	f1c1 0620 	rsb	r6, r1, #32
 8000370:	408b      	lsls	r3, r1
 8000372:	fa22 f706 	lsr.w	r7, r2, r6
 8000376:	431f      	orrs	r7, r3
 8000378:	fa0e f401 	lsl.w	r4, lr, r1
 800037c:	fa20 f306 	lsr.w	r3, r0, r6
 8000380:	fa2e fe06 	lsr.w	lr, lr, r6
 8000384:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000388:	4323      	orrs	r3, r4
 800038a:	fa00 f801 	lsl.w	r8, r0, r1
 800038e:	fa1f fc87 	uxth.w	ip, r7
 8000392:	fbbe f0f9 	udiv	r0, lr, r9
 8000396:	0c1c      	lsrs	r4, r3, #16
 8000398:	fb09 ee10 	mls	lr, r9, r0, lr
 800039c:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 80003a0:	fb00 fe0c 	mul.w	lr, r0, ip
 80003a4:	45a6      	cmp	lr, r4
 80003a6:	fa02 f201 	lsl.w	r2, r2, r1
 80003aa:	d909      	bls.n	80003c0 <__udivmoddi4+0x1a0>
 80003ac:	193c      	adds	r4, r7, r4
 80003ae:	f100 3aff 	add.w	sl, r0, #4294967295
 80003b2:	f080 809c 	bcs.w	80004ee <__udivmoddi4+0x2ce>
 80003b6:	45a6      	cmp	lr, r4
 80003b8:	f240 8099 	bls.w	80004ee <__udivmoddi4+0x2ce>
 80003bc:	3802      	subs	r0, #2
 80003be:	443c      	add	r4, r7
 80003c0:	eba4 040e 	sub.w	r4, r4, lr
 80003c4:	fa1f fe83 	uxth.w	lr, r3
 80003c8:	fbb4 f3f9 	udiv	r3, r4, r9
 80003cc:	fb09 4413 	mls	r4, r9, r3, r4
 80003d0:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 80003d4:	fb03 fc0c 	mul.w	ip, r3, ip
 80003d8:	45a4      	cmp	ip, r4
 80003da:	d908      	bls.n	80003ee <__udivmoddi4+0x1ce>
 80003dc:	193c      	adds	r4, r7, r4
 80003de:	f103 3eff 	add.w	lr, r3, #4294967295
 80003e2:	f080 8082 	bcs.w	80004ea <__udivmoddi4+0x2ca>
 80003e6:	45a4      	cmp	ip, r4
 80003e8:	d97f      	bls.n	80004ea <__udivmoddi4+0x2ca>
 80003ea:	3b02      	subs	r3, #2
 80003ec:	443c      	add	r4, r7
 80003ee:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 80003f2:	eba4 040c 	sub.w	r4, r4, ip
 80003f6:	fba0 ec02 	umull	lr, ip, r0, r2
 80003fa:	4564      	cmp	r4, ip
 80003fc:	4673      	mov	r3, lr
 80003fe:	46e1      	mov	r9, ip
 8000400:	d362      	bcc.n	80004c8 <__udivmoddi4+0x2a8>
 8000402:	d05f      	beq.n	80004c4 <__udivmoddi4+0x2a4>
 8000404:	b15d      	cbz	r5, 800041e <__udivmoddi4+0x1fe>
 8000406:	ebb8 0203 	subs.w	r2, r8, r3
 800040a:	eb64 0409 	sbc.w	r4, r4, r9
 800040e:	fa04 f606 	lsl.w	r6, r4, r6
 8000412:	fa22 f301 	lsr.w	r3, r2, r1
 8000416:	431e      	orrs	r6, r3
 8000418:	40cc      	lsrs	r4, r1
 800041a:	e9c5 6400 	strd	r6, r4, [r5]
 800041e:	2100      	movs	r1, #0
 8000420:	e74f      	b.n	80002c2 <__udivmoddi4+0xa2>
 8000422:	fbb1 fcf2 	udiv	ip, r1, r2
 8000426:	0c01      	lsrs	r1, r0, #16
 8000428:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 800042c:	b280      	uxth	r0, r0
 800042e:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000432:	463b      	mov	r3, r7
 8000434:	4638      	mov	r0, r7
 8000436:	463c      	mov	r4, r7
 8000438:	46b8      	mov	r8, r7
 800043a:	46be      	mov	lr, r7
 800043c:	2620      	movs	r6, #32
 800043e:	fbb1 f1f7 	udiv	r1, r1, r7
 8000442:	eba2 0208 	sub.w	r2, r2, r8
 8000446:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 800044a:	e766      	b.n	800031a <__udivmoddi4+0xfa>
 800044c:	4601      	mov	r1, r0
 800044e:	e718      	b.n	8000282 <__udivmoddi4+0x62>
 8000450:	4610      	mov	r0, r2
 8000452:	e72c      	b.n	80002ae <__udivmoddi4+0x8e>
 8000454:	f1c6 0220 	rsb	r2, r6, #32
 8000458:	fa2e f302 	lsr.w	r3, lr, r2
 800045c:	40b7      	lsls	r7, r6
 800045e:	40b1      	lsls	r1, r6
 8000460:	fa20 f202 	lsr.w	r2, r0, r2
 8000464:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000468:	430a      	orrs	r2, r1
 800046a:	fbb3 f8fe 	udiv	r8, r3, lr
 800046e:	b2bc      	uxth	r4, r7
 8000470:	fb0e 3318 	mls	r3, lr, r8, r3
 8000474:	0c11      	lsrs	r1, r2, #16
 8000476:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800047a:	fb08 f904 	mul.w	r9, r8, r4
 800047e:	40b0      	lsls	r0, r6
 8000480:	4589      	cmp	r9, r1
 8000482:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000486:	b280      	uxth	r0, r0
 8000488:	d93e      	bls.n	8000508 <__udivmoddi4+0x2e8>
 800048a:	1879      	adds	r1, r7, r1
 800048c:	f108 3cff 	add.w	ip, r8, #4294967295
 8000490:	d201      	bcs.n	8000496 <__udivmoddi4+0x276>
 8000492:	4589      	cmp	r9, r1
 8000494:	d81f      	bhi.n	80004d6 <__udivmoddi4+0x2b6>
 8000496:	eba1 0109 	sub.w	r1, r1, r9
 800049a:	fbb1 f9fe 	udiv	r9, r1, lr
 800049e:	fb09 f804 	mul.w	r8, r9, r4
 80004a2:	fb0e 1119 	mls	r1, lr, r9, r1
 80004a6:	b292      	uxth	r2, r2
 80004a8:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80004ac:	4542      	cmp	r2, r8
 80004ae:	d229      	bcs.n	8000504 <__udivmoddi4+0x2e4>
 80004b0:	18ba      	adds	r2, r7, r2
 80004b2:	f109 31ff 	add.w	r1, r9, #4294967295
 80004b6:	d2c4      	bcs.n	8000442 <__udivmoddi4+0x222>
 80004b8:	4542      	cmp	r2, r8
 80004ba:	d2c2      	bcs.n	8000442 <__udivmoddi4+0x222>
 80004bc:	f1a9 0102 	sub.w	r1, r9, #2
 80004c0:	443a      	add	r2, r7
 80004c2:	e7be      	b.n	8000442 <__udivmoddi4+0x222>
 80004c4:	45f0      	cmp	r8, lr
 80004c6:	d29d      	bcs.n	8000404 <__udivmoddi4+0x1e4>
 80004c8:	ebbe 0302 	subs.w	r3, lr, r2
 80004cc:	eb6c 0c07 	sbc.w	ip, ip, r7
 80004d0:	3801      	subs	r0, #1
 80004d2:	46e1      	mov	r9, ip
 80004d4:	e796      	b.n	8000404 <__udivmoddi4+0x1e4>
 80004d6:	eba7 0909 	sub.w	r9, r7, r9
 80004da:	4449      	add	r1, r9
 80004dc:	f1a8 0c02 	sub.w	ip, r8, #2
 80004e0:	fbb1 f9fe 	udiv	r9, r1, lr
 80004e4:	fb09 f804 	mul.w	r8, r9, r4
 80004e8:	e7db      	b.n	80004a2 <__udivmoddi4+0x282>
 80004ea:	4673      	mov	r3, lr
 80004ec:	e77f      	b.n	80003ee <__udivmoddi4+0x1ce>
 80004ee:	4650      	mov	r0, sl
 80004f0:	e766      	b.n	80003c0 <__udivmoddi4+0x1a0>
 80004f2:	4608      	mov	r0, r1
 80004f4:	e6fd      	b.n	80002f2 <__udivmoddi4+0xd2>
 80004f6:	443b      	add	r3, r7
 80004f8:	3a02      	subs	r2, #2
 80004fa:	e733      	b.n	8000364 <__udivmoddi4+0x144>
 80004fc:	f1ac 0c02 	sub.w	ip, ip, #2
 8000500:	443b      	add	r3, r7
 8000502:	e71c      	b.n	800033e <__udivmoddi4+0x11e>
 8000504:	4649      	mov	r1, r9
 8000506:	e79c      	b.n	8000442 <__udivmoddi4+0x222>
 8000508:	eba1 0109 	sub.w	r1, r1, r9
 800050c:	46c4      	mov	ip, r8
 800050e:	fbb1 f9fe 	udiv	r9, r1, lr
 8000512:	fb09 f804 	mul.w	r8, r9, r4
 8000516:	e7c4      	b.n	80004a2 <__udivmoddi4+0x282>

08000518 <__aeabi_idiv0>:
 8000518:	4770      	bx	lr
 800051a:	bf00      	nop

0800051c <ili9341_Init>:
  * @brief  Power on the LCD.
  * @param  None
  * @retval None
  */
void ili9341_Init(void)
{
 800051c:	b580      	push	{r7, lr}
 800051e:	af00      	add	r7, sp, #0
  /* Initialize ILI9341 low level bus layer ----------------------------------*/
  LCD_IO_Init();
 8000520:	f000 fd5e 	bl	8000fe0 <LCD_IO_Init>
  
  /* Configure LCD */
  ili9341_WriteReg(0xCA);
 8000524:	20ca      	movs	r0, #202	@ 0xca
 8000526:	f000 f95d 	bl	80007e4 <ili9341_WriteReg>
  ili9341_WriteData(0xC3);
 800052a:	20c3      	movs	r0, #195	@ 0xc3
 800052c:	f000 f967 	bl	80007fe <ili9341_WriteData>
  ili9341_WriteData(0x08);
 8000530:	2008      	movs	r0, #8
 8000532:	f000 f964 	bl	80007fe <ili9341_WriteData>
  ili9341_WriteData(0x50);
 8000536:	2050      	movs	r0, #80	@ 0x50
 8000538:	f000 f961 	bl	80007fe <ili9341_WriteData>
  ili9341_WriteReg(LCD_POWERB);
 800053c:	20cf      	movs	r0, #207	@ 0xcf
 800053e:	f000 f951 	bl	80007e4 <ili9341_WriteReg>
  ili9341_WriteData(0x00);
 8000542:	2000      	movs	r0, #0
 8000544:	f000 f95b 	bl	80007fe <ili9341_WriteData>
  ili9341_WriteData(0xC1);
 8000548:	20c1      	movs	r0, #193	@ 0xc1
 800054a:	f000 f958 	bl	80007fe <ili9341_WriteData>
  ili9341_WriteData(0x30);
 800054e:	2030      	movs	r0, #48	@ 0x30
 8000550:	f000 f955 	bl	80007fe <ili9341_WriteData>
  ili9341_WriteReg(LCD_POWER_SEQ);
 8000554:	20ed      	movs	r0, #237	@ 0xed
 8000556:	f000 f945 	bl	80007e4 <ili9341_WriteReg>
  ili9341_WriteData(0x64);
 800055a:	2064      	movs	r0, #100	@ 0x64
 800055c:	f000 f94f 	bl	80007fe <ili9341_WriteData>
  ili9341_WriteData(0x03);
 8000560:	2003      	movs	r0, #3
 8000562:	f000 f94c 	bl	80007fe <ili9341_WriteData>
  ili9341_WriteData(0x12);
 8000566:	2012      	movs	r0, #18
 8000568:	f000 f949 	bl	80007fe <ili9341_WriteData>
  ili9341_WriteData(0x81);
 800056c:	2081      	movs	r0, #129	@ 0x81
 800056e:	f000 f946 	bl	80007fe <ili9341_WriteData>
  ili9341_WriteReg(LCD_DTCA);
 8000572:	20e8      	movs	r0, #232	@ 0xe8
 8000574:	f000 f936 	bl	80007e4 <ili9341_WriteReg>
  ili9341_WriteData(0x85);
 8000578:	2085      	movs	r0, #133	@ 0x85
 800057a:	f000 f940 	bl	80007fe <ili9341_WriteData>
  ili9341_WriteData(0x00);
 800057e:	2000      	movs	r0, #0
 8000580:	f000 f93d 	bl	80007fe <ili9341_WriteData>
  ili9341_WriteData(0x78);
 8000584:	2078      	movs	r0, #120	@ 0x78
 8000586:	f000 f93a 	bl	80007fe <ili9341_WriteData>
  ili9341_WriteReg(LCD_POWERA);
 800058a:	20cb      	movs	r0, #203	@ 0xcb
 800058c:	f000 f92a 	bl	80007e4 <ili9341_WriteReg>
  ili9341_WriteData(0x39);
 8000590:	2039      	movs	r0, #57	@ 0x39
 8000592:	f000 f934 	bl	80007fe <ili9341_WriteData>
  ili9341_WriteData(0x2C);
 8000596:	202c      	movs	r0, #44	@ 0x2c
 8000598:	f000 f931 	bl	80007fe <ili9341_WriteData>
  ili9341_WriteData(0x00);
 800059c:	2000      	movs	r0, #0
 800059e:	f000 f92e 	bl	80007fe <ili9341_WriteData>
  ili9341_WriteData(0x34);
 80005a2:	2034      	movs	r0, #52	@ 0x34
 80005a4:	f000 f92b 	bl	80007fe <ili9341_WriteData>
  ili9341_WriteData(0x02);
 80005a8:	2002      	movs	r0, #2
 80005aa:	f000 f928 	bl	80007fe <ili9341_WriteData>
  ili9341_WriteReg(LCD_PRC);
 80005ae:	20f7      	movs	r0, #247	@ 0xf7
 80005b0:	f000 f918 	bl	80007e4 <ili9341_WriteReg>
  ili9341_WriteData(0x20);
 80005b4:	2020      	movs	r0, #32
 80005b6:	f000 f922 	bl	80007fe <ili9341_WriteData>
  ili9341_WriteReg(LCD_DTCB);
 80005ba:	20ea      	movs	r0, #234	@ 0xea
 80005bc:	f000 f912 	bl	80007e4 <ili9341_WriteReg>
  ili9341_WriteData(0x00);
 80005c0:	2000      	movs	r0, #0
 80005c2:	f000 f91c 	bl	80007fe <ili9341_WriteData>
  ili9341_WriteData(0x00);
 80005c6:	2000      	movs	r0, #0
 80005c8:	f000 f919 	bl	80007fe <ili9341_WriteData>
  ili9341_WriteReg(LCD_FRMCTR1);
 80005cc:	20b1      	movs	r0, #177	@ 0xb1
 80005ce:	f000 f909 	bl	80007e4 <ili9341_WriteReg>
  ili9341_WriteData(0x00);
 80005d2:	2000      	movs	r0, #0
 80005d4:	f000 f913 	bl	80007fe <ili9341_WriteData>
  ili9341_WriteData(0x1B);
 80005d8:	201b      	movs	r0, #27
 80005da:	f000 f910 	bl	80007fe <ili9341_WriteData>
  ili9341_WriteReg(LCD_DFC);
 80005de:	20b6      	movs	r0, #182	@ 0xb6
 80005e0:	f000 f900 	bl	80007e4 <ili9341_WriteReg>
  ili9341_WriteData(0x0A);
 80005e4:	200a      	movs	r0, #10
 80005e6:	f000 f90a 	bl	80007fe <ili9341_WriteData>
  ili9341_WriteData(0xA2);
 80005ea:	20a2      	movs	r0, #162	@ 0xa2
 80005ec:	f000 f907 	bl	80007fe <ili9341_WriteData>
  ili9341_WriteReg(LCD_POWER1);
 80005f0:	20c0      	movs	r0, #192	@ 0xc0
 80005f2:	f000 f8f7 	bl	80007e4 <ili9341_WriteReg>
  ili9341_WriteData(0x10);
 80005f6:	2010      	movs	r0, #16
 80005f8:	f000 f901 	bl	80007fe <ili9341_WriteData>
  ili9341_WriteReg(LCD_POWER2);
 80005fc:	20c1      	movs	r0, #193	@ 0xc1
 80005fe:	f000 f8f1 	bl	80007e4 <ili9341_WriteReg>
  ili9341_WriteData(0x10);
 8000602:	2010      	movs	r0, #16
 8000604:	f000 f8fb 	bl	80007fe <ili9341_WriteData>
  ili9341_WriteReg(LCD_VCOM1);
 8000608:	20c5      	movs	r0, #197	@ 0xc5
 800060a:	f000 f8eb 	bl	80007e4 <ili9341_WriteReg>
  ili9341_WriteData(0x45);
 800060e:	2045      	movs	r0, #69	@ 0x45
 8000610:	f000 f8f5 	bl	80007fe <ili9341_WriteData>
  ili9341_WriteData(0x15);
 8000614:	2015      	movs	r0, #21
 8000616:	f000 f8f2 	bl	80007fe <ili9341_WriteData>
  ili9341_WriteReg(LCD_VCOM2);
 800061a:	20c7      	movs	r0, #199	@ 0xc7
 800061c:	f000 f8e2 	bl	80007e4 <ili9341_WriteReg>
  ili9341_WriteData(0x90);
 8000620:	2090      	movs	r0, #144	@ 0x90
 8000622:	f000 f8ec 	bl	80007fe <ili9341_WriteData>
  ili9341_WriteReg(LCD_MAC);
 8000626:	2036      	movs	r0, #54	@ 0x36
 8000628:	f000 f8dc 	bl	80007e4 <ili9341_WriteReg>
  ili9341_WriteData(0xC8);
 800062c:	20c8      	movs	r0, #200	@ 0xc8
 800062e:	f000 f8e6 	bl	80007fe <ili9341_WriteData>
  ili9341_WriteReg(LCD_3GAMMA_EN);
 8000632:	20f2      	movs	r0, #242	@ 0xf2
 8000634:	f000 f8d6 	bl	80007e4 <ili9341_WriteReg>
  ili9341_WriteData(0x00);
 8000638:	2000      	movs	r0, #0
 800063a:	f000 f8e0 	bl	80007fe <ili9341_WriteData>
  ili9341_WriteReg(LCD_RGB_INTERFACE);
 800063e:	20b0      	movs	r0, #176	@ 0xb0
 8000640:	f000 f8d0 	bl	80007e4 <ili9341_WriteReg>
  ili9341_WriteData(0xC2);
 8000644:	20c2      	movs	r0, #194	@ 0xc2
 8000646:	f000 f8da 	bl	80007fe <ili9341_WriteData>
  ili9341_WriteReg(LCD_DFC);
 800064a:	20b6      	movs	r0, #182	@ 0xb6
 800064c:	f000 f8ca 	bl	80007e4 <ili9341_WriteReg>
  ili9341_WriteData(0x0A);
 8000650:	200a      	movs	r0, #10
 8000652:	f000 f8d4 	bl	80007fe <ili9341_WriteData>
  ili9341_WriteData(0xA7);
 8000656:	20a7      	movs	r0, #167	@ 0xa7
 8000658:	f000 f8d1 	bl	80007fe <ili9341_WriteData>
  ili9341_WriteData(0x27);
 800065c:	2027      	movs	r0, #39	@ 0x27
 800065e:	f000 f8ce 	bl	80007fe <ili9341_WriteData>
  ili9341_WriteData(0x04);
 8000662:	2004      	movs	r0, #4
 8000664:	f000 f8cb 	bl	80007fe <ili9341_WriteData>
  
  /* Colomn address set */
  ili9341_WriteReg(LCD_COLUMN_ADDR);
 8000668:	202a      	movs	r0, #42	@ 0x2a
 800066a:	f000 f8bb 	bl	80007e4 <ili9341_WriteReg>
  ili9341_WriteData(0x00);
 800066e:	2000      	movs	r0, #0
 8000670:	f000 f8c5 	bl	80007fe <ili9341_WriteData>
  ili9341_WriteData(0x00);
 8000674:	2000      	movs	r0, #0
 8000676:	f000 f8c2 	bl	80007fe <ili9341_WriteData>
  ili9341_WriteData(0x00);
 800067a:	2000      	movs	r0, #0
 800067c:	f000 f8bf 	bl	80007fe <ili9341_WriteData>
  ili9341_WriteData(0xEF);
 8000680:	20ef      	movs	r0, #239	@ 0xef
 8000682:	f000 f8bc 	bl	80007fe <ili9341_WriteData>
  /* Page address set */
  ili9341_WriteReg(LCD_PAGE_ADDR);
 8000686:	202b      	movs	r0, #43	@ 0x2b
 8000688:	f000 f8ac 	bl	80007e4 <ili9341_WriteReg>
  ili9341_WriteData(0x00);
 800068c:	2000      	movs	r0, #0
 800068e:	f000 f8b6 	bl	80007fe <ili9341_WriteData>
  ili9341_WriteData(0x00);
 8000692:	2000      	movs	r0, #0
 8000694:	f000 f8b3 	bl	80007fe <ili9341_WriteData>
  ili9341_WriteData(0x01);
 8000698:	2001      	movs	r0, #1
 800069a:	f000 f8b0 	bl	80007fe <ili9341_WriteData>
  ili9341_WriteData(0x3F);
 800069e:	203f      	movs	r0, #63	@ 0x3f
 80006a0:	f000 f8ad 	bl	80007fe <ili9341_WriteData>
  ili9341_WriteReg(LCD_INTERFACE);
 80006a4:	20f6      	movs	r0, #246	@ 0xf6
 80006a6:	f000 f89d 	bl	80007e4 <ili9341_WriteReg>
  ili9341_WriteData(0x01);
 80006aa:	2001      	movs	r0, #1
 80006ac:	f000 f8a7 	bl	80007fe <ili9341_WriteData>
  ili9341_WriteData(0x00);
 80006b0:	2000      	movs	r0, #0
 80006b2:	f000 f8a4 	bl	80007fe <ili9341_WriteData>
  ili9341_WriteData(0x06);
 80006b6:	2006      	movs	r0, #6
 80006b8:	f000 f8a1 	bl	80007fe <ili9341_WriteData>
  
  ili9341_WriteReg(LCD_GRAM);
 80006bc:	202c      	movs	r0, #44	@ 0x2c
 80006be:	f000 f891 	bl	80007e4 <ili9341_WriteReg>
  LCD_Delay(200);
 80006c2:	20c8      	movs	r0, #200	@ 0xc8
 80006c4:	f000 fd7a 	bl	80011bc <LCD_Delay>
  
  ili9341_WriteReg(LCD_GAMMA);
 80006c8:	2026      	movs	r0, #38	@ 0x26
 80006ca:	f000 f88b 	bl	80007e4 <ili9341_WriteReg>
  ili9341_WriteData(0x01);
 80006ce:	2001      	movs	r0, #1
 80006d0:	f000 f895 	bl	80007fe <ili9341_WriteData>
  
  ili9341_WriteReg(LCD_PGAMMA);
 80006d4:	20e0      	movs	r0, #224	@ 0xe0
 80006d6:	f000 f885 	bl	80007e4 <ili9341_WriteReg>
  ili9341_WriteData(0x0F);
 80006da:	200f      	movs	r0, #15
 80006dc:	f000 f88f 	bl	80007fe <ili9341_WriteData>
  ili9341_WriteData(0x29);
 80006e0:	2029      	movs	r0, #41	@ 0x29
 80006e2:	f000 f88c 	bl	80007fe <ili9341_WriteData>
  ili9341_WriteData(0x24);
 80006e6:	2024      	movs	r0, #36	@ 0x24
 80006e8:	f000 f889 	bl	80007fe <ili9341_WriteData>
  ili9341_WriteData(0x0C);
 80006ec:	200c      	movs	r0, #12
 80006ee:	f000 f886 	bl	80007fe <ili9341_WriteData>
  ili9341_WriteData(0x0E);
 80006f2:	200e      	movs	r0, #14
 80006f4:	f000 f883 	bl	80007fe <ili9341_WriteData>
  ili9341_WriteData(0x09);
 80006f8:	2009      	movs	r0, #9
 80006fa:	f000 f880 	bl	80007fe <ili9341_WriteData>
  ili9341_WriteData(0x4E);
 80006fe:	204e      	movs	r0, #78	@ 0x4e
 8000700:	f000 f87d 	bl	80007fe <ili9341_WriteData>
  ili9341_WriteData(0x78);
 8000704:	2078      	movs	r0, #120	@ 0x78
 8000706:	f000 f87a 	bl	80007fe <ili9341_WriteData>
  ili9341_WriteData(0x3C);
 800070a:	203c      	movs	r0, #60	@ 0x3c
 800070c:	f000 f877 	bl	80007fe <ili9341_WriteData>
  ili9341_WriteData(0x09);
 8000710:	2009      	movs	r0, #9
 8000712:	f000 f874 	bl	80007fe <ili9341_WriteData>
  ili9341_WriteData(0x13);
 8000716:	2013      	movs	r0, #19
 8000718:	f000 f871 	bl	80007fe <ili9341_WriteData>
  ili9341_WriteData(0x05);
 800071c:	2005      	movs	r0, #5
 800071e:	f000 f86e 	bl	80007fe <ili9341_WriteData>
  ili9341_WriteData(0x17);
 8000722:	2017      	movs	r0, #23
 8000724:	f000 f86b 	bl	80007fe <ili9341_WriteData>
  ili9341_WriteData(0x11);
 8000728:	2011      	movs	r0, #17
 800072a:	f000 f868 	bl	80007fe <ili9341_WriteData>
  ili9341_WriteData(0x00);
 800072e:	2000      	movs	r0, #0
 8000730:	f000 f865 	bl	80007fe <ili9341_WriteData>
  ili9341_WriteReg(LCD_NGAMMA);
 8000734:	20e1      	movs	r0, #225	@ 0xe1
 8000736:	f000 f855 	bl	80007e4 <ili9341_WriteReg>
  ili9341_WriteData(0x00);
 800073a:	2000      	movs	r0, #0
 800073c:	f000 f85f 	bl	80007fe <ili9341_WriteData>
  ili9341_WriteData(0x16);
 8000740:	2016      	movs	r0, #22
 8000742:	f000 f85c 	bl	80007fe <ili9341_WriteData>
  ili9341_WriteData(0x1B);
 8000746:	201b      	movs	r0, #27
 8000748:	f000 f859 	bl	80007fe <ili9341_WriteData>
  ili9341_WriteData(0x04);
 800074c:	2004      	movs	r0, #4
 800074e:	f000 f856 	bl	80007fe <ili9341_WriteData>
  ili9341_WriteData(0x11);
 8000752:	2011      	movs	r0, #17
 8000754:	f000 f853 	bl	80007fe <ili9341_WriteData>
  ili9341_WriteData(0x07);
 8000758:	2007      	movs	r0, #7
 800075a:	f000 f850 	bl	80007fe <ili9341_WriteData>
  ili9341_WriteData(0x31);
 800075e:	2031      	movs	r0, #49	@ 0x31
 8000760:	f000 f84d 	bl	80007fe <ili9341_WriteData>
  ili9341_WriteData(0x33);
 8000764:	2033      	movs	r0, #51	@ 0x33
 8000766:	f000 f84a 	bl	80007fe <ili9341_WriteData>
  ili9341_WriteData(0x42);
 800076a:	2042      	movs	r0, #66	@ 0x42
 800076c:	f000 f847 	bl	80007fe <ili9341_WriteData>
  ili9341_WriteData(0x05);
 8000770:	2005      	movs	r0, #5
 8000772:	f000 f844 	bl	80007fe <ili9341_WriteData>
  ili9341_WriteData(0x0C);
 8000776:	200c      	movs	r0, #12
 8000778:	f000 f841 	bl	80007fe <ili9341_WriteData>
  ili9341_WriteData(0x0A);
 800077c:	200a      	movs	r0, #10
 800077e:	f000 f83e 	bl	80007fe <ili9341_WriteData>
  ili9341_WriteData(0x28);
 8000782:	2028      	movs	r0, #40	@ 0x28
 8000784:	f000 f83b 	bl	80007fe <ili9341_WriteData>
  ili9341_WriteData(0x2F);
 8000788:	202f      	movs	r0, #47	@ 0x2f
 800078a:	f000 f838 	bl	80007fe <ili9341_WriteData>
  ili9341_WriteData(0x0F);
 800078e:	200f      	movs	r0, #15
 8000790:	f000 f835 	bl	80007fe <ili9341_WriteData>
  
  ili9341_WriteReg(LCD_SLEEP_OUT);
 8000794:	2011      	movs	r0, #17
 8000796:	f000 f825 	bl	80007e4 <ili9341_WriteReg>
  LCD_Delay(200);
 800079a:	20c8      	movs	r0, #200	@ 0xc8
 800079c:	f000 fd0e 	bl	80011bc <LCD_Delay>
  ili9341_WriteReg(LCD_DISPLAY_ON);
 80007a0:	2029      	movs	r0, #41	@ 0x29
 80007a2:	f000 f81f 	bl	80007e4 <ili9341_WriteReg>
  /* GRAM start writing */
  ili9341_WriteReg(LCD_GRAM);
 80007a6:	202c      	movs	r0, #44	@ 0x2c
 80007a8:	f000 f81c 	bl	80007e4 <ili9341_WriteReg>
}
 80007ac:	bf00      	nop
 80007ae:	bd80      	pop	{r7, pc}

080007b0 <ili9341_ReadID>:
  * @brief  Disables the Display.
  * @param  None
  * @retval LCD Register Value.
  */
uint16_t ili9341_ReadID(void)
{
 80007b0:	b580      	push	{r7, lr}
 80007b2:	af00      	add	r7, sp, #0
  LCD_IO_Init();
 80007b4:	f000 fc14 	bl	8000fe0 <LCD_IO_Init>
  return ((uint16_t)ili9341_ReadData(LCD_READ_ID4, LCD_READ_ID4_SIZE));
 80007b8:	2103      	movs	r1, #3
 80007ba:	20d3      	movs	r0, #211	@ 0xd3
 80007bc:	f000 f82c 	bl	8000818 <ili9341_ReadData>
 80007c0:	4603      	mov	r3, r0
 80007c2:	b29b      	uxth	r3, r3
}
 80007c4:	4618      	mov	r0, r3
 80007c6:	bd80      	pop	{r7, pc}

080007c8 <ili9341_DisplayOn>:
  * @brief  Enables the Display.
  * @param  None
  * @retval None
  */
void ili9341_DisplayOn(void)
{
 80007c8:	b580      	push	{r7, lr}
 80007ca:	af00      	add	r7, sp, #0
  /* Display On */
  ili9341_WriteReg(LCD_DISPLAY_ON);
 80007cc:	2029      	movs	r0, #41	@ 0x29
 80007ce:	f000 f809 	bl	80007e4 <ili9341_WriteReg>
}
 80007d2:	bf00      	nop
 80007d4:	bd80      	pop	{r7, pc}

080007d6 <ili9341_DisplayOff>:
  * @brief  Disables the Display.
  * @param  None
  * @retval None
  */
void ili9341_DisplayOff(void)
{
 80007d6:	b580      	push	{r7, lr}
 80007d8:	af00      	add	r7, sp, #0
  /* Display Off */
  ili9341_WriteReg(LCD_DISPLAY_OFF);
 80007da:	2028      	movs	r0, #40	@ 0x28
 80007dc:	f000 f802 	bl	80007e4 <ili9341_WriteReg>
}
 80007e0:	bf00      	nop
 80007e2:	bd80      	pop	{r7, pc}

080007e4 <ili9341_WriteReg>:
  * @brief  Writes  to the selected LCD register.
  * @param  LCD_Reg: address of the selected register.
  * @retval None
  */
void ili9341_WriteReg(uint8_t LCD_Reg)
{
 80007e4:	b580      	push	{r7, lr}
 80007e6:	b082      	sub	sp, #8
 80007e8:	af00      	add	r7, sp, #0
 80007ea:	4603      	mov	r3, r0
 80007ec:	71fb      	strb	r3, [r7, #7]
  LCD_IO_WriteReg(LCD_Reg);
 80007ee:	79fb      	ldrb	r3, [r7, #7]
 80007f0:	4618      	mov	r0, r3
 80007f2:	f000 fc8f 	bl	8001114 <LCD_IO_WriteReg>
}
 80007f6:	bf00      	nop
 80007f8:	3708      	adds	r7, #8
 80007fa:	46bd      	mov	sp, r7
 80007fc:	bd80      	pop	{r7, pc}

080007fe <ili9341_WriteData>:
  * @brief  Writes data to the selected LCD register.
  * @param  LCD_Reg: address of the selected register.
  * @retval None
  */
void ili9341_WriteData(uint16_t RegValue)
{
 80007fe:	b580      	push	{r7, lr}
 8000800:	b082      	sub	sp, #8
 8000802:	af00      	add	r7, sp, #0
 8000804:	4603      	mov	r3, r0
 8000806:	80fb      	strh	r3, [r7, #6]
  LCD_IO_WriteData(RegValue);
 8000808:	88fb      	ldrh	r3, [r7, #6]
 800080a:	4618      	mov	r0, r3
 800080c:	f000 fc60 	bl	80010d0 <LCD_IO_WriteData>
}
 8000810:	bf00      	nop
 8000812:	3708      	adds	r7, #8
 8000814:	46bd      	mov	sp, r7
 8000816:	bd80      	pop	{r7, pc}

08000818 <ili9341_ReadData>:
  * @param  RegValue: Address of the register to read
  * @param  ReadSize: Number of bytes to read
  * @retval LCD Register Value.
  */
uint32_t ili9341_ReadData(uint16_t RegValue, uint8_t ReadSize)
{
 8000818:	b580      	push	{r7, lr}
 800081a:	b082      	sub	sp, #8
 800081c:	af00      	add	r7, sp, #0
 800081e:	4603      	mov	r3, r0
 8000820:	460a      	mov	r2, r1
 8000822:	80fb      	strh	r3, [r7, #6]
 8000824:	4613      	mov	r3, r2
 8000826:	717b      	strb	r3, [r7, #5]
  /* Read a max of 4 bytes */
  return (LCD_IO_ReadData(RegValue, ReadSize));
 8000828:	797a      	ldrb	r2, [r7, #5]
 800082a:	88fb      	ldrh	r3, [r7, #6]
 800082c:	4611      	mov	r1, r2
 800082e:	4618      	mov	r0, r3
 8000830:	f000 fc92 	bl	8001158 <LCD_IO_ReadData>
 8000834:	4603      	mov	r3, r0
}
 8000836:	4618      	mov	r0, r3
 8000838:	3708      	adds	r7, #8
 800083a:	46bd      	mov	sp, r7
 800083c:	bd80      	pop	{r7, pc}

0800083e <ili9341_GetLcdPixelWidth>:
  * @brief  Get LCD PIXEL WIDTH.
  * @param  None
  * @retval LCD PIXEL WIDTH.
  */
uint16_t ili9341_GetLcdPixelWidth(void)
{
 800083e:	b480      	push	{r7}
 8000840:	af00      	add	r7, sp, #0
  /* Return LCD PIXEL WIDTH */
  return ILI9341_LCD_PIXEL_WIDTH;
 8000842:	23f0      	movs	r3, #240	@ 0xf0



}
 8000844:	4618      	mov	r0, r3
 8000846:	46bd      	mov	sp, r7
 8000848:	f85d 7b04 	ldr.w	r7, [sp], #4
 800084c:	4770      	bx	lr

0800084e <ili9341_GetLcdPixelHeight>:
  * @brief  Get LCD PIXEL HEIGHT.
  * @param  None
  * @retval LCD PIXEL HEIGHT.
  */
uint16_t ili9341_GetLcdPixelHeight(void)
{
 800084e:	b480      	push	{r7}
 8000850:	af00      	add	r7, sp, #0
  /* Return LCD PIXEL HEIGHT */
  return ILI9341_LCD_PIXEL_HEIGHT;
 8000852:	f44f 73a0 	mov.w	r3, #320	@ 0x140
}
 8000856:	4618      	mov	r0, r3
 8000858:	46bd      	mov	sp, r7
 800085a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800085e:	4770      	bx	lr

08000860 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000860:	b580      	push	{r7, lr}
 8000862:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000864:	f001 fe8e 	bl	8002584 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000868:	f000 f848 	bl	80008fc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800086c:	f000 fa6e 	bl	8000d4c <MX_GPIO_Init>
  MX_CRC_Init();
 8000870:	f000 f8b6 	bl	80009e0 <MX_CRC_Init>
  MX_DMA2D_Init();
 8000874:	f000 f8c8 	bl	8000a08 <MX_DMA2D_Init>
  MX_FMC_Init();
 8000878:	f000 fa18 	bl	8000cac <MX_FMC_Init>
  MX_I2C3_Init();
 800087c:	f000 f8f6 	bl	8000a6c <MX_I2C3_Init>
  MX_LTDC_Init();
 8000880:	f000 f934 	bl	8000aec <MX_LTDC_Init>
  MX_SPI5_Init();
 8000884:	f000 f9b2 	bl	8000bec <MX_SPI5_Init>
  MX_USART1_UART_Init();
 8000888:	f000 f9e6 	bl	8000c58 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  BSP_SDRAM_Init();
 800088c:	f001 f8f0 	bl	8001a70 <BSP_SDRAM_Init>
  BSP_LCD_Init();
 8000890:	f000 fca0 	bl	80011d4 <BSP_LCD_Init>
  BSP_LCD_LayerDefaultInit(LCD_BACKGROUND_LAYER,LCD_FRAME_BUFFER);
 8000894:	f04f 4150 	mov.w	r1, #3489660928	@ 0xd0000000
 8000898:	2000      	movs	r0, #0
 800089a:	f000 fd17 	bl	80012cc <BSP_LCD_LayerDefaultInit>
  //BSP_LCD_LayerDefaultInit(LCD_FOREGROUND_LAYER,LCD_FRAME_BUFFER);
  //BSP_LCD_DisplayOn();
  BSP_LCD_SelectLayer(LCD_BACKGROUND_LAYER);
 800089e:	2000      	movs	r0, #0
 80008a0:	f000 fd78 	bl	8001394 <BSP_LCD_SelectLayer>
  BSP_LCD_Clear(LCD_COLOR_WHITE);
 80008a4:	f04f 30ff 	mov.w	r0, #4294967295
 80008a8:	f000 fdb2 	bl	8001410 <BSP_LCD_Clear>
  //BSP_LCD_SetBackColor(LCD_COLOR_BLACK);
  BSP_LCD_SetTextColor(LCD_COLOR_BLUE);
 80008ac:	480d      	ldr	r0, [pc, #52]	@ (80008e4 <main+0x84>)
 80008ae:	f000 fd81 	bl	80013b4 <BSP_LCD_SetTextColor>
  //BSP_LCD_DisplayStringAt(0, LINE(5), (uint8_t *)"Hello STM32F429I-DISCO!");
  ///BSP_LCD_SetTextColor(LCD_COLOR_BLUE);
  BSP_LCD_DisplayStringAtLine(2,(uint8_t *)"Hello STM32F429I-DISCO!");
 80008b2:	490d      	ldr	r1, [pc, #52]	@ (80008e8 <main+0x88>)
 80008b4:	2002      	movs	r0, #2
 80008b6:	f000 fed5 	bl	8001664 <BSP_LCD_DisplayStringAtLine>
  BSP_LCD_SetTextColor(LCD_COLOR_RED);
 80008ba:	480c      	ldr	r0, [pc, #48]	@ (80008ec <main+0x8c>)
 80008bc:	f000 fd7a 	bl	80013b4 <BSP_LCD_SetTextColor>
  BSP_LCD_DisplayStringAtLine(3,(uint8_t *)"Hello STM32F429I-DISCO!");
 80008c0:	4909      	ldr	r1, [pc, #36]	@ (80008e8 <main+0x88>)
 80008c2:	2003      	movs	r0, #3
 80008c4:	f000 fece 	bl	8001664 <BSP_LCD_DisplayStringAtLine>

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 80008c8:	f005 fe2e 	bl	8006528 <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 80008cc:	4a08      	ldr	r2, [pc, #32]	@ (80008f0 <main+0x90>)
 80008ce:	2100      	movs	r1, #0
 80008d0:	4808      	ldr	r0, [pc, #32]	@ (80008f4 <main+0x94>)
 80008d2:	f005 fe73 	bl	80065bc <osThreadNew>
 80008d6:	4603      	mov	r3, r0
 80008d8:	4a07      	ldr	r2, [pc, #28]	@ (80008f8 <main+0x98>)
 80008da:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 80008dc:	f005 fe48 	bl	8006570 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80008e0:	bf00      	nop
 80008e2:	e7fd      	b.n	80008e0 <main+0x80>
 80008e4:	ff0000ff 	.word	0xff0000ff
 80008e8:	0800928c 	.word	0x0800928c
 80008ec:	ffff0000 	.word	0xffff0000
 80008f0:	08009e9c 	.word	0x08009e9c
 80008f4:	08000e45 	.word	0x08000e45
 80008f8:	200002dc 	.word	0x200002dc

080008fc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80008fc:	b580      	push	{r7, lr}
 80008fe:	b094      	sub	sp, #80	@ 0x50
 8000900:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000902:	f107 0320 	add.w	r3, r7, #32
 8000906:	2230      	movs	r2, #48	@ 0x30
 8000908:	2100      	movs	r1, #0
 800090a:	4618      	mov	r0, r3
 800090c:	f008 fbbc 	bl	8009088 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000910:	f107 030c 	add.w	r3, r7, #12
 8000914:	2200      	movs	r2, #0
 8000916:	601a      	str	r2, [r3, #0]
 8000918:	605a      	str	r2, [r3, #4]
 800091a:	609a      	str	r2, [r3, #8]
 800091c:	60da      	str	r2, [r3, #12]
 800091e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000920:	2300      	movs	r3, #0
 8000922:	60bb      	str	r3, [r7, #8]
 8000924:	4b2c      	ldr	r3, [pc, #176]	@ (80009d8 <SystemClock_Config+0xdc>)
 8000926:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000928:	4a2b      	ldr	r2, [pc, #172]	@ (80009d8 <SystemClock_Config+0xdc>)
 800092a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800092e:	6413      	str	r3, [r2, #64]	@ 0x40
 8000930:	4b29      	ldr	r3, [pc, #164]	@ (80009d8 <SystemClock_Config+0xdc>)
 8000932:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000934:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000938:	60bb      	str	r3, [r7, #8]
 800093a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800093c:	2300      	movs	r3, #0
 800093e:	607b      	str	r3, [r7, #4]
 8000940:	4b26      	ldr	r3, [pc, #152]	@ (80009dc <SystemClock_Config+0xe0>)
 8000942:	681b      	ldr	r3, [r3, #0]
 8000944:	4a25      	ldr	r2, [pc, #148]	@ (80009dc <SystemClock_Config+0xe0>)
 8000946:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800094a:	6013      	str	r3, [r2, #0]
 800094c:	4b23      	ldr	r3, [pc, #140]	@ (80009dc <SystemClock_Config+0xe0>)
 800094e:	681b      	ldr	r3, [r3, #0]
 8000950:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000954:	607b      	str	r3, [r7, #4]
 8000956:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000958:	2301      	movs	r3, #1
 800095a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800095c:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000960:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000962:	2302      	movs	r3, #2
 8000964:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000966:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 800096a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 800096c:	2308      	movs	r3, #8
 800096e:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 360;
 8000970:	f44f 73b4 	mov.w	r3, #360	@ 0x168
 8000974:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000976:	2302      	movs	r3, #2
 8000978:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 800097a:	2304      	movs	r3, #4
 800097c:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800097e:	f107 0320 	add.w	r3, r7, #32
 8000982:	4618      	mov	r0, r3
 8000984:	f003 fcce 	bl	8004324 <HAL_RCC_OscConfig>
 8000988:	4603      	mov	r3, r0
 800098a:	2b00      	cmp	r3, #0
 800098c:	d001      	beq.n	8000992 <SystemClock_Config+0x96>
  {
    Error_Handler();
 800098e:	f000 fa62 	bl	8000e56 <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8000992:	f003 fc77 	bl	8004284 <HAL_PWREx_EnableOverDrive>
 8000996:	4603      	mov	r3, r0
 8000998:	2b00      	cmp	r3, #0
 800099a:	d001      	beq.n	80009a0 <SystemClock_Config+0xa4>
  {
    Error_Handler();
 800099c:	f000 fa5b 	bl	8000e56 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80009a0:	230f      	movs	r3, #15
 80009a2:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80009a4:	2302      	movs	r3, #2
 80009a6:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80009a8:	2300      	movs	r3, #0
 80009aa:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80009ac:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 80009b0:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80009b2:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80009b6:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80009b8:	f107 030c 	add.w	r3, r7, #12
 80009bc:	2105      	movs	r1, #5
 80009be:	4618      	mov	r0, r3
 80009c0:	f003 ff28 	bl	8004814 <HAL_RCC_ClockConfig>
 80009c4:	4603      	mov	r3, r0
 80009c6:	2b00      	cmp	r3, #0
 80009c8:	d001      	beq.n	80009ce <SystemClock_Config+0xd2>
  {
    Error_Handler();
 80009ca:	f000 fa44 	bl	8000e56 <Error_Handler>
  }
}
 80009ce:	bf00      	nop
 80009d0:	3750      	adds	r7, #80	@ 0x50
 80009d2:	46bd      	mov	sp, r7
 80009d4:	bd80      	pop	{r7, pc}
 80009d6:	bf00      	nop
 80009d8:	40023800 	.word	0x40023800
 80009dc:	40007000 	.word	0x40007000

080009e0 <MX_CRC_Init>:
  * @brief CRC Initialization Function
  * @param None
  * @retval None
  */
static void MX_CRC_Init(void)
{
 80009e0:	b580      	push	{r7, lr}
 80009e2:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 80009e4:	4b06      	ldr	r3, [pc, #24]	@ (8000a00 <MX_CRC_Init+0x20>)
 80009e6:	4a07      	ldr	r2, [pc, #28]	@ (8000a04 <MX_CRC_Init+0x24>)
 80009e8:	601a      	str	r2, [r3, #0]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 80009ea:	4805      	ldr	r0, [pc, #20]	@ (8000a00 <MX_CRC_Init+0x20>)
 80009ec:	f001 ff71 	bl	80028d2 <HAL_CRC_Init>
 80009f0:	4603      	mov	r3, r0
 80009f2:	2b00      	cmp	r3, #0
 80009f4:	d001      	beq.n	80009fa <MX_CRC_Init+0x1a>
  {
    Error_Handler();
 80009f6:	f000 fa2e 	bl	8000e56 <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 80009fa:	bf00      	nop
 80009fc:	bd80      	pop	{r7, pc}
 80009fe:	bf00      	nop
 8000a00:	200000c4 	.word	0x200000c4
 8000a04:	40023000 	.word	0x40023000

08000a08 <MX_DMA2D_Init>:
  * @brief DMA2D Initialization Function
  * @param None
  * @retval None
  */
static void MX_DMA2D_Init(void)
{
 8000a08:	b580      	push	{r7, lr}
 8000a0a:	af00      	add	r7, sp, #0
  /* USER CODE END DMA2D_Init 0 */

  /* USER CODE BEGIN DMA2D_Init 1 */

  /* USER CODE END DMA2D_Init 1 */
  hdma2d.Instance = DMA2D;
 8000a0c:	4b15      	ldr	r3, [pc, #84]	@ (8000a64 <MX_DMA2D_Init+0x5c>)
 8000a0e:	4a16      	ldr	r2, [pc, #88]	@ (8000a68 <MX_DMA2D_Init+0x60>)
 8000a10:	601a      	str	r2, [r3, #0]
  hdma2d.Init.Mode = DMA2D_M2M;
 8000a12:	4b14      	ldr	r3, [pc, #80]	@ (8000a64 <MX_DMA2D_Init+0x5c>)
 8000a14:	2200      	movs	r2, #0
 8000a16:	605a      	str	r2, [r3, #4]
  hdma2d.Init.ColorMode = DMA2D_OUTPUT_ARGB8888;
 8000a18:	4b12      	ldr	r3, [pc, #72]	@ (8000a64 <MX_DMA2D_Init+0x5c>)
 8000a1a:	2200      	movs	r2, #0
 8000a1c:	609a      	str	r2, [r3, #8]
  hdma2d.Init.OutputOffset = 0;
 8000a1e:	4b11      	ldr	r3, [pc, #68]	@ (8000a64 <MX_DMA2D_Init+0x5c>)
 8000a20:	2200      	movs	r2, #0
 8000a22:	60da      	str	r2, [r3, #12]
  hdma2d.LayerCfg[1].InputOffset = 0;
 8000a24:	4b0f      	ldr	r3, [pc, #60]	@ (8000a64 <MX_DMA2D_Init+0x5c>)
 8000a26:	2200      	movs	r2, #0
 8000a28:	629a      	str	r2, [r3, #40]	@ 0x28
  hdma2d.LayerCfg[1].InputColorMode = DMA2D_INPUT_ARGB8888;
 8000a2a:	4b0e      	ldr	r3, [pc, #56]	@ (8000a64 <MX_DMA2D_Init+0x5c>)
 8000a2c:	2200      	movs	r2, #0
 8000a2e:	62da      	str	r2, [r3, #44]	@ 0x2c
  hdma2d.LayerCfg[1].AlphaMode = DMA2D_NO_MODIF_ALPHA;
 8000a30:	4b0c      	ldr	r3, [pc, #48]	@ (8000a64 <MX_DMA2D_Init+0x5c>)
 8000a32:	2200      	movs	r2, #0
 8000a34:	631a      	str	r2, [r3, #48]	@ 0x30
  hdma2d.LayerCfg[1].InputAlpha = 0;
 8000a36:	4b0b      	ldr	r3, [pc, #44]	@ (8000a64 <MX_DMA2D_Init+0x5c>)
 8000a38:	2200      	movs	r2, #0
 8000a3a:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_DMA2D_Init(&hdma2d) != HAL_OK)
 8000a3c:	4809      	ldr	r0, [pc, #36]	@ (8000a64 <MX_DMA2D_Init+0x5c>)
 8000a3e:	f002 f923 	bl	8002c88 <HAL_DMA2D_Init>
 8000a42:	4603      	mov	r3, r0
 8000a44:	2b00      	cmp	r3, #0
 8000a46:	d001      	beq.n	8000a4c <MX_DMA2D_Init+0x44>
  {
    Error_Handler();
 8000a48:	f000 fa05 	bl	8000e56 <Error_Handler>
  }
  if (HAL_DMA2D_ConfigLayer(&hdma2d, 1) != HAL_OK)
 8000a4c:	2101      	movs	r1, #1
 8000a4e:	4805      	ldr	r0, [pc, #20]	@ (8000a64 <MX_DMA2D_Init+0x5c>)
 8000a50:	f002 fb88 	bl	8003164 <HAL_DMA2D_ConfigLayer>
 8000a54:	4603      	mov	r3, r0
 8000a56:	2b00      	cmp	r3, #0
 8000a58:	d001      	beq.n	8000a5e <MX_DMA2D_Init+0x56>
  {
    Error_Handler();
 8000a5a:	f000 f9fc 	bl	8000e56 <Error_Handler>
  }
  /* USER CODE BEGIN DMA2D_Init 2 */

  /* USER CODE END DMA2D_Init 2 */

}
 8000a5e:	bf00      	nop
 8000a60:	bd80      	pop	{r7, pc}
 8000a62:	bf00      	nop
 8000a64:	200000cc 	.word	0x200000cc
 8000a68:	4002b000 	.word	0x4002b000

08000a6c <MX_I2C3_Init>:
  * @brief I2C3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C3_Init(void)
{
 8000a6c:	b580      	push	{r7, lr}
 8000a6e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 8000a70:	4b1b      	ldr	r3, [pc, #108]	@ (8000ae0 <MX_I2C3_Init+0x74>)
 8000a72:	4a1c      	ldr	r2, [pc, #112]	@ (8000ae4 <MX_I2C3_Init+0x78>)
 8000a74:	601a      	str	r2, [r3, #0]
  hi2c3.Init.ClockSpeed = 100000;
 8000a76:	4b1a      	ldr	r3, [pc, #104]	@ (8000ae0 <MX_I2C3_Init+0x74>)
 8000a78:	4a1b      	ldr	r2, [pc, #108]	@ (8000ae8 <MX_I2C3_Init+0x7c>)
 8000a7a:	605a      	str	r2, [r3, #4]
  hi2c3.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000a7c:	4b18      	ldr	r3, [pc, #96]	@ (8000ae0 <MX_I2C3_Init+0x74>)
 8000a7e:	2200      	movs	r2, #0
 8000a80:	609a      	str	r2, [r3, #8]
  hi2c3.Init.OwnAddress1 = 130;
 8000a82:	4b17      	ldr	r3, [pc, #92]	@ (8000ae0 <MX_I2C3_Init+0x74>)
 8000a84:	2282      	movs	r2, #130	@ 0x82
 8000a86:	60da      	str	r2, [r3, #12]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000a88:	4b15      	ldr	r3, [pc, #84]	@ (8000ae0 <MX_I2C3_Init+0x74>)
 8000a8a:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8000a8e:	611a      	str	r2, [r3, #16]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000a90:	4b13      	ldr	r3, [pc, #76]	@ (8000ae0 <MX_I2C3_Init+0x74>)
 8000a92:	2200      	movs	r2, #0
 8000a94:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2 = 0;
 8000a96:	4b12      	ldr	r3, [pc, #72]	@ (8000ae0 <MX_I2C3_Init+0x74>)
 8000a98:	2200      	movs	r2, #0
 8000a9a:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000a9c:	4b10      	ldr	r3, [pc, #64]	@ (8000ae0 <MX_I2C3_Init+0x74>)
 8000a9e:	2200      	movs	r2, #0
 8000aa0:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000aa2:	4b0f      	ldr	r3, [pc, #60]	@ (8000ae0 <MX_I2C3_Init+0x74>)
 8000aa4:	2200      	movs	r2, #0
 8000aa6:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 8000aa8:	480d      	ldr	r0, [pc, #52]	@ (8000ae0 <MX_I2C3_Init+0x74>)
 8000aaa:	f002 ff5b 	bl	8003964 <HAL_I2C_Init>
 8000aae:	4603      	mov	r3, r0
 8000ab0:	2b00      	cmp	r3, #0
 8000ab2:	d001      	beq.n	8000ab8 <MX_I2C3_Init+0x4c>
  {
    Error_Handler();
 8000ab4:	f000 f9cf 	bl	8000e56 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c3, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000ab8:	2100      	movs	r1, #0
 8000aba:	4809      	ldr	r0, [pc, #36]	@ (8000ae0 <MX_I2C3_Init+0x74>)
 8000abc:	f003 f896 	bl	8003bec <HAL_I2CEx_ConfigAnalogFilter>
 8000ac0:	4603      	mov	r3, r0
 8000ac2:	2b00      	cmp	r3, #0
 8000ac4:	d001      	beq.n	8000aca <MX_I2C3_Init+0x5e>
  {
    Error_Handler();
 8000ac6:	f000 f9c6 	bl	8000e56 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c3, 0) != HAL_OK)
 8000aca:	2100      	movs	r1, #0
 8000acc:	4804      	ldr	r0, [pc, #16]	@ (8000ae0 <MX_I2C3_Init+0x74>)
 8000ace:	f003 f8c9 	bl	8003c64 <HAL_I2CEx_ConfigDigitalFilter>
 8000ad2:	4603      	mov	r3, r0
 8000ad4:	2b00      	cmp	r3, #0
 8000ad6:	d001      	beq.n	8000adc <MX_I2C3_Init+0x70>
  {
    Error_Handler();
 8000ad8:	f000 f9bd 	bl	8000e56 <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 8000adc:	bf00      	nop
 8000ade:	bd80      	pop	{r7, pc}
 8000ae0:	2000010c 	.word	0x2000010c
 8000ae4:	40005c00 	.word	0x40005c00
 8000ae8:	000186a0 	.word	0x000186a0

08000aec <MX_LTDC_Init>:
  * @brief LTDC Initialization Function
  * @param None
  * @retval None
  */
static void MX_LTDC_Init(void)
{
 8000aec:	b580      	push	{r7, lr}
 8000aee:	b08e      	sub	sp, #56	@ 0x38
 8000af0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN LTDC_Init 0 */

  /* USER CODE END LTDC_Init 0 */

  LTDC_LayerCfgTypeDef pLayerCfg = {0};
 8000af2:	1d3b      	adds	r3, r7, #4
 8000af4:	2234      	movs	r2, #52	@ 0x34
 8000af6:	2100      	movs	r1, #0
 8000af8:	4618      	mov	r0, r3
 8000afa:	f008 fac5 	bl	8009088 <memset>

  /* USER CODE BEGIN LTDC_Init 1 */

  /* USER CODE END LTDC_Init 1 */
  hltdc.Instance = LTDC;
 8000afe:	4b39      	ldr	r3, [pc, #228]	@ (8000be4 <MX_LTDC_Init+0xf8>)
 8000b00:	4a39      	ldr	r2, [pc, #228]	@ (8000be8 <MX_LTDC_Init+0xfc>)
 8000b02:	601a      	str	r2, [r3, #0]
  hltdc.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 8000b04:	4b37      	ldr	r3, [pc, #220]	@ (8000be4 <MX_LTDC_Init+0xf8>)
 8000b06:	2200      	movs	r2, #0
 8000b08:	605a      	str	r2, [r3, #4]
  hltdc.Init.VSPolarity = LTDC_VSPOLARITY_AL;
 8000b0a:	4b36      	ldr	r3, [pc, #216]	@ (8000be4 <MX_LTDC_Init+0xf8>)
 8000b0c:	2200      	movs	r2, #0
 8000b0e:	609a      	str	r2, [r3, #8]
  hltdc.Init.DEPolarity = LTDC_DEPOLARITY_AL;
 8000b10:	4b34      	ldr	r3, [pc, #208]	@ (8000be4 <MX_LTDC_Init+0xf8>)
 8000b12:	2200      	movs	r2, #0
 8000b14:	60da      	str	r2, [r3, #12]
  hltdc.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 8000b16:	4b33      	ldr	r3, [pc, #204]	@ (8000be4 <MX_LTDC_Init+0xf8>)
 8000b18:	2200      	movs	r2, #0
 8000b1a:	611a      	str	r2, [r3, #16]
  hltdc.Init.HorizontalSync = 9;
 8000b1c:	4b31      	ldr	r3, [pc, #196]	@ (8000be4 <MX_LTDC_Init+0xf8>)
 8000b1e:	2209      	movs	r2, #9
 8000b20:	615a      	str	r2, [r3, #20]
  hltdc.Init.VerticalSync = 1;
 8000b22:	4b30      	ldr	r3, [pc, #192]	@ (8000be4 <MX_LTDC_Init+0xf8>)
 8000b24:	2201      	movs	r2, #1
 8000b26:	619a      	str	r2, [r3, #24]
  hltdc.Init.AccumulatedHBP = 29;
 8000b28:	4b2e      	ldr	r3, [pc, #184]	@ (8000be4 <MX_LTDC_Init+0xf8>)
 8000b2a:	221d      	movs	r2, #29
 8000b2c:	61da      	str	r2, [r3, #28]
  hltdc.Init.AccumulatedVBP = 3;
 8000b2e:	4b2d      	ldr	r3, [pc, #180]	@ (8000be4 <MX_LTDC_Init+0xf8>)
 8000b30:	2203      	movs	r2, #3
 8000b32:	621a      	str	r2, [r3, #32]
  hltdc.Init.AccumulatedActiveW = 269;
 8000b34:	4b2b      	ldr	r3, [pc, #172]	@ (8000be4 <MX_LTDC_Init+0xf8>)
 8000b36:	f240 120d 	movw	r2, #269	@ 0x10d
 8000b3a:	625a      	str	r2, [r3, #36]	@ 0x24
  hltdc.Init.AccumulatedActiveH = 323;
 8000b3c:	4b29      	ldr	r3, [pc, #164]	@ (8000be4 <MX_LTDC_Init+0xf8>)
 8000b3e:	f240 1243 	movw	r2, #323	@ 0x143
 8000b42:	629a      	str	r2, [r3, #40]	@ 0x28
  hltdc.Init.TotalWidth = 279;
 8000b44:	4b27      	ldr	r3, [pc, #156]	@ (8000be4 <MX_LTDC_Init+0xf8>)
 8000b46:	f240 1217 	movw	r2, #279	@ 0x117
 8000b4a:	62da      	str	r2, [r3, #44]	@ 0x2c
  hltdc.Init.TotalHeigh = 327;
 8000b4c:	4b25      	ldr	r3, [pc, #148]	@ (8000be4 <MX_LTDC_Init+0xf8>)
 8000b4e:	f240 1247 	movw	r2, #327	@ 0x147
 8000b52:	631a      	str	r2, [r3, #48]	@ 0x30
  hltdc.Init.Backcolor.Blue = 0;
 8000b54:	4b23      	ldr	r3, [pc, #140]	@ (8000be4 <MX_LTDC_Init+0xf8>)
 8000b56:	2200      	movs	r2, #0
 8000b58:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  hltdc.Init.Backcolor.Green = 0;
 8000b5c:	4b21      	ldr	r3, [pc, #132]	@ (8000be4 <MX_LTDC_Init+0xf8>)
 8000b5e:	2200      	movs	r2, #0
 8000b60:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
  hltdc.Init.Backcolor.Red = 0;
 8000b64:	4b1f      	ldr	r3, [pc, #124]	@ (8000be4 <MX_LTDC_Init+0xf8>)
 8000b66:	2200      	movs	r2, #0
 8000b68:	f883 2036 	strb.w	r2, [r3, #54]	@ 0x36
  if (HAL_LTDC_Init(&hltdc) != HAL_OK)
 8000b6c:	481d      	ldr	r0, [pc, #116]	@ (8000be4 <MX_LTDC_Init+0xf8>)
 8000b6e:	f003 f8b9 	bl	8003ce4 <HAL_LTDC_Init>
 8000b72:	4603      	mov	r3, r0
 8000b74:	2b00      	cmp	r3, #0
 8000b76:	d001      	beq.n	8000b7c <MX_LTDC_Init+0x90>
  {
    Error_Handler();
 8000b78:	f000 f96d 	bl	8000e56 <Error_Handler>
  }
  pLayerCfg.WindowX0 = 0;
 8000b7c:	2300      	movs	r3, #0
 8000b7e:	607b      	str	r3, [r7, #4]
  pLayerCfg.WindowX1 = 240;
 8000b80:	23f0      	movs	r3, #240	@ 0xf0
 8000b82:	60bb      	str	r3, [r7, #8]
  pLayerCfg.WindowY0 = 0;
 8000b84:	2300      	movs	r3, #0
 8000b86:	60fb      	str	r3, [r7, #12]
  pLayerCfg.WindowY1 = 320;
 8000b88:	f44f 73a0 	mov.w	r3, #320	@ 0x140
 8000b8c:	613b      	str	r3, [r7, #16]
  pLayerCfg.PixelFormat = LTDC_PIXEL_FORMAT_ARGB8888;
 8000b8e:	2300      	movs	r3, #0
 8000b90:	617b      	str	r3, [r7, #20]
  pLayerCfg.Alpha = 255;
 8000b92:	23ff      	movs	r3, #255	@ 0xff
 8000b94:	61bb      	str	r3, [r7, #24]
  pLayerCfg.Alpha0 = 0;
 8000b96:	2300      	movs	r3, #0
 8000b98:	61fb      	str	r3, [r7, #28]
  pLayerCfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_PAxCA;
 8000b9a:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 8000b9e:	623b      	str	r3, [r7, #32]
  pLayerCfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_PAxCA;
 8000ba0:	2307      	movs	r3, #7
 8000ba2:	627b      	str	r3, [r7, #36]	@ 0x24
  pLayerCfg.FBStartAdress = 0;
 8000ba4:	2300      	movs	r3, #0
 8000ba6:	62bb      	str	r3, [r7, #40]	@ 0x28
  pLayerCfg.ImageWidth = 240;
 8000ba8:	23f0      	movs	r3, #240	@ 0xf0
 8000baa:	62fb      	str	r3, [r7, #44]	@ 0x2c
  pLayerCfg.ImageHeight = 320;
 8000bac:	f44f 73a0 	mov.w	r3, #320	@ 0x140
 8000bb0:	633b      	str	r3, [r7, #48]	@ 0x30
  pLayerCfg.Backcolor.Blue = 0;
 8000bb2:	2300      	movs	r3, #0
 8000bb4:	f887 3034 	strb.w	r3, [r7, #52]	@ 0x34
  pLayerCfg.Backcolor.Green = 0;
 8000bb8:	2300      	movs	r3, #0
 8000bba:	f887 3035 	strb.w	r3, [r7, #53]	@ 0x35
  pLayerCfg.Backcolor.Red = 0;
 8000bbe:	2300      	movs	r3, #0
 8000bc0:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg, 0) != HAL_OK)
 8000bc4:	1d3b      	adds	r3, r7, #4
 8000bc6:	2200      	movs	r2, #0
 8000bc8:	4619      	mov	r1, r3
 8000bca:	4806      	ldr	r0, [pc, #24]	@ (8000be4 <MX_LTDC_Init+0xf8>)
 8000bcc:	f003 f95a 	bl	8003e84 <HAL_LTDC_ConfigLayer>
 8000bd0:	4603      	mov	r3, r0
 8000bd2:	2b00      	cmp	r3, #0
 8000bd4:	d001      	beq.n	8000bda <MX_LTDC_Init+0xee>
  {
    Error_Handler();
 8000bd6:	f000 f93e 	bl	8000e56 <Error_Handler>
  }
  /* USER CODE BEGIN LTDC_Init 2 */

  /* USER CODE END LTDC_Init 2 */

}
 8000bda:	bf00      	nop
 8000bdc:	3738      	adds	r7, #56	@ 0x38
 8000bde:	46bd      	mov	sp, r7
 8000be0:	bd80      	pop	{r7, pc}
 8000be2:	bf00      	nop
 8000be4:	20000160 	.word	0x20000160
 8000be8:	40016800 	.word	0x40016800

08000bec <MX_SPI5_Init>:
  * @brief SPI5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI5_Init(void)
{
 8000bec:	b580      	push	{r7, lr}
 8000bee:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI5_Init 1 */

  /* USER CODE END SPI5_Init 1 */
  /* SPI5 parameter configuration*/
  hspi5.Instance = SPI5;
 8000bf0:	4b17      	ldr	r3, [pc, #92]	@ (8000c50 <MX_SPI5_Init+0x64>)
 8000bf2:	4a18      	ldr	r2, [pc, #96]	@ (8000c54 <MX_SPI5_Init+0x68>)
 8000bf4:	601a      	str	r2, [r3, #0]
  hspi5.Init.Mode = SPI_MODE_MASTER;
 8000bf6:	4b16      	ldr	r3, [pc, #88]	@ (8000c50 <MX_SPI5_Init+0x64>)
 8000bf8:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8000bfc:	605a      	str	r2, [r3, #4]
  hspi5.Init.Direction = SPI_DIRECTION_2LINES;
 8000bfe:	4b14      	ldr	r3, [pc, #80]	@ (8000c50 <MX_SPI5_Init+0x64>)
 8000c00:	2200      	movs	r2, #0
 8000c02:	609a      	str	r2, [r3, #8]
  hspi5.Init.DataSize = SPI_DATASIZE_8BIT;
 8000c04:	4b12      	ldr	r3, [pc, #72]	@ (8000c50 <MX_SPI5_Init+0x64>)
 8000c06:	2200      	movs	r2, #0
 8000c08:	60da      	str	r2, [r3, #12]
  hspi5.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000c0a:	4b11      	ldr	r3, [pc, #68]	@ (8000c50 <MX_SPI5_Init+0x64>)
 8000c0c:	2200      	movs	r2, #0
 8000c0e:	611a      	str	r2, [r3, #16]
  hspi5.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000c10:	4b0f      	ldr	r3, [pc, #60]	@ (8000c50 <MX_SPI5_Init+0x64>)
 8000c12:	2200      	movs	r2, #0
 8000c14:	615a      	str	r2, [r3, #20]
  hspi5.Init.NSS = SPI_NSS_SOFT;
 8000c16:	4b0e      	ldr	r3, [pc, #56]	@ (8000c50 <MX_SPI5_Init+0x64>)
 8000c18:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000c1c:	619a      	str	r2, [r3, #24]
  hspi5.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000c1e:	4b0c      	ldr	r3, [pc, #48]	@ (8000c50 <MX_SPI5_Init+0x64>)
 8000c20:	2200      	movs	r2, #0
 8000c22:	61da      	str	r2, [r3, #28]
  hspi5.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000c24:	4b0a      	ldr	r3, [pc, #40]	@ (8000c50 <MX_SPI5_Init+0x64>)
 8000c26:	2200      	movs	r2, #0
 8000c28:	621a      	str	r2, [r3, #32]
  hspi5.Init.TIMode = SPI_TIMODE_DISABLE;
 8000c2a:	4b09      	ldr	r3, [pc, #36]	@ (8000c50 <MX_SPI5_Init+0x64>)
 8000c2c:	2200      	movs	r2, #0
 8000c2e:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi5.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000c30:	4b07      	ldr	r3, [pc, #28]	@ (8000c50 <MX_SPI5_Init+0x64>)
 8000c32:	2200      	movs	r2, #0
 8000c34:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi5.Init.CRCPolynomial = 10;
 8000c36:	4b06      	ldr	r3, [pc, #24]	@ (8000c50 <MX_SPI5_Init+0x64>)
 8000c38:	220a      	movs	r2, #10
 8000c3a:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi5) != HAL_OK)
 8000c3c:	4804      	ldr	r0, [pc, #16]	@ (8000c50 <MX_SPI5_Init+0x64>)
 8000c3e:	f004 fa5a 	bl	80050f6 <HAL_SPI_Init>
 8000c42:	4603      	mov	r3, r0
 8000c44:	2b00      	cmp	r3, #0
 8000c46:	d001      	beq.n	8000c4c <MX_SPI5_Init+0x60>
  {
    Error_Handler();
 8000c48:	f000 f905 	bl	8000e56 <Error_Handler>
  }
  /* USER CODE BEGIN SPI5_Init 2 */

  /* USER CODE END SPI5_Init 2 */

}
 8000c4c:	bf00      	nop
 8000c4e:	bd80      	pop	{r7, pc}
 8000c50:	20000208 	.word	0x20000208
 8000c54:	40015000 	.word	0x40015000

08000c58 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000c58:	b580      	push	{r7, lr}
 8000c5a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000c5c:	4b11      	ldr	r3, [pc, #68]	@ (8000ca4 <MX_USART1_UART_Init+0x4c>)
 8000c5e:	4a12      	ldr	r2, [pc, #72]	@ (8000ca8 <MX_USART1_UART_Init+0x50>)
 8000c60:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000c62:	4b10      	ldr	r3, [pc, #64]	@ (8000ca4 <MX_USART1_UART_Init+0x4c>)
 8000c64:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000c68:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000c6a:	4b0e      	ldr	r3, [pc, #56]	@ (8000ca4 <MX_USART1_UART_Init+0x4c>)
 8000c6c:	2200      	movs	r2, #0
 8000c6e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000c70:	4b0c      	ldr	r3, [pc, #48]	@ (8000ca4 <MX_USART1_UART_Init+0x4c>)
 8000c72:	2200      	movs	r2, #0
 8000c74:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000c76:	4b0b      	ldr	r3, [pc, #44]	@ (8000ca4 <MX_USART1_UART_Init+0x4c>)
 8000c78:	2200      	movs	r2, #0
 8000c7a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000c7c:	4b09      	ldr	r3, [pc, #36]	@ (8000ca4 <MX_USART1_UART_Init+0x4c>)
 8000c7e:	220c      	movs	r2, #12
 8000c80:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000c82:	4b08      	ldr	r3, [pc, #32]	@ (8000ca4 <MX_USART1_UART_Init+0x4c>)
 8000c84:	2200      	movs	r2, #0
 8000c86:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000c88:	4b06      	ldr	r3, [pc, #24]	@ (8000ca4 <MX_USART1_UART_Init+0x4c>)
 8000c8a:	2200      	movs	r2, #0
 8000c8c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000c8e:	4805      	ldr	r0, [pc, #20]	@ (8000ca4 <MX_USART1_UART_Init+0x4c>)
 8000c90:	f005 f838 	bl	8005d04 <HAL_UART_Init>
 8000c94:	4603      	mov	r3, r0
 8000c96:	2b00      	cmp	r3, #0
 8000c98:	d001      	beq.n	8000c9e <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8000c9a:	f000 f8dc 	bl	8000e56 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000c9e:	bf00      	nop
 8000ca0:	bd80      	pop	{r7, pc}
 8000ca2:	bf00      	nop
 8000ca4:	20000260 	.word	0x20000260
 8000ca8:	40011000 	.word	0x40011000

08000cac <MX_FMC_Init>:

/* FMC initialization function */
static void MX_FMC_Init(void)
{
 8000cac:	b580      	push	{r7, lr}
 8000cae:	b088      	sub	sp, #32
 8000cb0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN FMC_Init 0 */

  /* USER CODE END FMC_Init 0 */

  FMC_SDRAM_TimingTypeDef SdramTiming = {0};
 8000cb2:	1d3b      	adds	r3, r7, #4
 8000cb4:	2200      	movs	r2, #0
 8000cb6:	601a      	str	r2, [r3, #0]
 8000cb8:	605a      	str	r2, [r3, #4]
 8000cba:	609a      	str	r2, [r3, #8]
 8000cbc:	60da      	str	r2, [r3, #12]
 8000cbe:	611a      	str	r2, [r3, #16]
 8000cc0:	615a      	str	r2, [r3, #20]
 8000cc2:	619a      	str	r2, [r3, #24]

  /* USER CODE END FMC_Init 1 */

  /** Perform the SDRAM1 memory initialization sequence
  */
  hsdram1.Instance = FMC_SDRAM_DEVICE;
 8000cc4:	4b1f      	ldr	r3, [pc, #124]	@ (8000d44 <MX_FMC_Init+0x98>)
 8000cc6:	4a20      	ldr	r2, [pc, #128]	@ (8000d48 <MX_FMC_Init+0x9c>)
 8000cc8:	601a      	str	r2, [r3, #0]
  /* hsdram1.Init */
  hsdram1.Init.SDBank = FMC_SDRAM_BANK2;
 8000cca:	4b1e      	ldr	r3, [pc, #120]	@ (8000d44 <MX_FMC_Init+0x98>)
 8000ccc:	2201      	movs	r2, #1
 8000cce:	605a      	str	r2, [r3, #4]
  hsdram1.Init.ColumnBitsNumber = FMC_SDRAM_COLUMN_BITS_NUM_8;
 8000cd0:	4b1c      	ldr	r3, [pc, #112]	@ (8000d44 <MX_FMC_Init+0x98>)
 8000cd2:	2200      	movs	r2, #0
 8000cd4:	609a      	str	r2, [r3, #8]
  hsdram1.Init.RowBitsNumber = FMC_SDRAM_ROW_BITS_NUM_12;
 8000cd6:	4b1b      	ldr	r3, [pc, #108]	@ (8000d44 <MX_FMC_Init+0x98>)
 8000cd8:	2204      	movs	r2, #4
 8000cda:	60da      	str	r2, [r3, #12]
  hsdram1.Init.MemoryDataWidth = FMC_SDRAM_MEM_BUS_WIDTH_16;
 8000cdc:	4b19      	ldr	r3, [pc, #100]	@ (8000d44 <MX_FMC_Init+0x98>)
 8000cde:	2210      	movs	r2, #16
 8000ce0:	611a      	str	r2, [r3, #16]
  hsdram1.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 8000ce2:	4b18      	ldr	r3, [pc, #96]	@ (8000d44 <MX_FMC_Init+0x98>)
 8000ce4:	2240      	movs	r2, #64	@ 0x40
 8000ce6:	615a      	str	r2, [r3, #20]
  hsdram1.Init.CASLatency = FMC_SDRAM_CAS_LATENCY_3;
 8000ce8:	4b16      	ldr	r3, [pc, #88]	@ (8000d44 <MX_FMC_Init+0x98>)
 8000cea:	f44f 72c0 	mov.w	r2, #384	@ 0x180
 8000cee:	619a      	str	r2, [r3, #24]
  hsdram1.Init.WriteProtection = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 8000cf0:	4b14      	ldr	r3, [pc, #80]	@ (8000d44 <MX_FMC_Init+0x98>)
 8000cf2:	2200      	movs	r2, #0
 8000cf4:	61da      	str	r2, [r3, #28]
  hsdram1.Init.SDClockPeriod = FMC_SDRAM_CLOCK_PERIOD_2;
 8000cf6:	4b13      	ldr	r3, [pc, #76]	@ (8000d44 <MX_FMC_Init+0x98>)
 8000cf8:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8000cfc:	621a      	str	r2, [r3, #32]
  hsdram1.Init.ReadBurst = FMC_SDRAM_RBURST_DISABLE;
 8000cfe:	4b11      	ldr	r3, [pc, #68]	@ (8000d44 <MX_FMC_Init+0x98>)
 8000d00:	2200      	movs	r2, #0
 8000d02:	625a      	str	r2, [r3, #36]	@ 0x24
  hsdram1.Init.ReadPipeDelay = FMC_SDRAM_RPIPE_DELAY_1;
 8000d04:	4b0f      	ldr	r3, [pc, #60]	@ (8000d44 <MX_FMC_Init+0x98>)
 8000d06:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000d0a:	629a      	str	r2, [r3, #40]	@ 0x28
  /* SdramTiming */
  SdramTiming.LoadToActiveDelay = 2;
 8000d0c:	2302      	movs	r3, #2
 8000d0e:	607b      	str	r3, [r7, #4]
  SdramTiming.ExitSelfRefreshDelay = 7;
 8000d10:	2307      	movs	r3, #7
 8000d12:	60bb      	str	r3, [r7, #8]
  SdramTiming.SelfRefreshTime = 4;
 8000d14:	2304      	movs	r3, #4
 8000d16:	60fb      	str	r3, [r7, #12]
  SdramTiming.RowCycleDelay = 7;
 8000d18:	2307      	movs	r3, #7
 8000d1a:	613b      	str	r3, [r7, #16]
  SdramTiming.WriteRecoveryTime = 3;
 8000d1c:	2303      	movs	r3, #3
 8000d1e:	617b      	str	r3, [r7, #20]
  SdramTiming.RPDelay = 2;
 8000d20:	2302      	movs	r3, #2
 8000d22:	61bb      	str	r3, [r7, #24]
  SdramTiming.RCDDelay = 2;
 8000d24:	2302      	movs	r3, #2
 8000d26:	61fb      	str	r3, [r7, #28]

  if (HAL_SDRAM_Init(&hsdram1, &SdramTiming) != HAL_OK)
 8000d28:	1d3b      	adds	r3, r7, #4
 8000d2a:	4619      	mov	r1, r3
 8000d2c:	4805      	ldr	r0, [pc, #20]	@ (8000d44 <MX_FMC_Init+0x98>)
 8000d2e:	f004 f951 	bl	8004fd4 <HAL_SDRAM_Init>
 8000d32:	4603      	mov	r3, r0
 8000d34:	2b00      	cmp	r3, #0
 8000d36:	d001      	beq.n	8000d3c <MX_FMC_Init+0x90>
  {
    Error_Handler( );
 8000d38:	f000 f88d 	bl	8000e56 <Error_Handler>
  }

  /* USER CODE BEGIN FMC_Init 2 */

  /* USER CODE END FMC_Init 2 */
}
 8000d3c:	bf00      	nop
 8000d3e:	3720      	adds	r7, #32
 8000d40:	46bd      	mov	sp, r7
 8000d42:	bd80      	pop	{r7, pc}
 8000d44:	200002a8 	.word	0x200002a8
 8000d48:	a0000140 	.word	0xa0000140

08000d4c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000d4c:	b480      	push	{r7}
 8000d4e:	b089      	sub	sp, #36	@ 0x24
 8000d50:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000d52:	2300      	movs	r3, #0
 8000d54:	61fb      	str	r3, [r7, #28]
 8000d56:	4b3a      	ldr	r3, [pc, #232]	@ (8000e40 <MX_GPIO_Init+0xf4>)
 8000d58:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d5a:	4a39      	ldr	r2, [pc, #228]	@ (8000e40 <MX_GPIO_Init+0xf4>)
 8000d5c:	f043 0320 	orr.w	r3, r3, #32
 8000d60:	6313      	str	r3, [r2, #48]	@ 0x30
 8000d62:	4b37      	ldr	r3, [pc, #220]	@ (8000e40 <MX_GPIO_Init+0xf4>)
 8000d64:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d66:	f003 0320 	and.w	r3, r3, #32
 8000d6a:	61fb      	str	r3, [r7, #28]
 8000d6c:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000d6e:	2300      	movs	r3, #0
 8000d70:	61bb      	str	r3, [r7, #24]
 8000d72:	4b33      	ldr	r3, [pc, #204]	@ (8000e40 <MX_GPIO_Init+0xf4>)
 8000d74:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d76:	4a32      	ldr	r2, [pc, #200]	@ (8000e40 <MX_GPIO_Init+0xf4>)
 8000d78:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000d7c:	6313      	str	r3, [r2, #48]	@ 0x30
 8000d7e:	4b30      	ldr	r3, [pc, #192]	@ (8000e40 <MX_GPIO_Init+0xf4>)
 8000d80:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d82:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000d86:	61bb      	str	r3, [r7, #24]
 8000d88:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000d8a:	2300      	movs	r3, #0
 8000d8c:	617b      	str	r3, [r7, #20]
 8000d8e:	4b2c      	ldr	r3, [pc, #176]	@ (8000e40 <MX_GPIO_Init+0xf4>)
 8000d90:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d92:	4a2b      	ldr	r2, [pc, #172]	@ (8000e40 <MX_GPIO_Init+0xf4>)
 8000d94:	f043 0304 	orr.w	r3, r3, #4
 8000d98:	6313      	str	r3, [r2, #48]	@ 0x30
 8000d9a:	4b29      	ldr	r3, [pc, #164]	@ (8000e40 <MX_GPIO_Init+0xf4>)
 8000d9c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d9e:	f003 0304 	and.w	r3, r3, #4
 8000da2:	617b      	str	r3, [r7, #20]
 8000da4:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000da6:	2300      	movs	r3, #0
 8000da8:	613b      	str	r3, [r7, #16]
 8000daa:	4b25      	ldr	r3, [pc, #148]	@ (8000e40 <MX_GPIO_Init+0xf4>)
 8000dac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000dae:	4a24      	ldr	r2, [pc, #144]	@ (8000e40 <MX_GPIO_Init+0xf4>)
 8000db0:	f043 0301 	orr.w	r3, r3, #1
 8000db4:	6313      	str	r3, [r2, #48]	@ 0x30
 8000db6:	4b22      	ldr	r3, [pc, #136]	@ (8000e40 <MX_GPIO_Init+0xf4>)
 8000db8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000dba:	f003 0301 	and.w	r3, r3, #1
 8000dbe:	613b      	str	r3, [r7, #16]
 8000dc0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000dc2:	2300      	movs	r3, #0
 8000dc4:	60fb      	str	r3, [r7, #12]
 8000dc6:	4b1e      	ldr	r3, [pc, #120]	@ (8000e40 <MX_GPIO_Init+0xf4>)
 8000dc8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000dca:	4a1d      	ldr	r2, [pc, #116]	@ (8000e40 <MX_GPIO_Init+0xf4>)
 8000dcc:	f043 0302 	orr.w	r3, r3, #2
 8000dd0:	6313      	str	r3, [r2, #48]	@ 0x30
 8000dd2:	4b1b      	ldr	r3, [pc, #108]	@ (8000e40 <MX_GPIO_Init+0xf4>)
 8000dd4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000dd6:	f003 0302 	and.w	r3, r3, #2
 8000dda:	60fb      	str	r3, [r7, #12]
 8000ddc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000dde:	2300      	movs	r3, #0
 8000de0:	60bb      	str	r3, [r7, #8]
 8000de2:	4b17      	ldr	r3, [pc, #92]	@ (8000e40 <MX_GPIO_Init+0xf4>)
 8000de4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000de6:	4a16      	ldr	r2, [pc, #88]	@ (8000e40 <MX_GPIO_Init+0xf4>)
 8000de8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000dec:	6313      	str	r3, [r2, #48]	@ 0x30
 8000dee:	4b14      	ldr	r3, [pc, #80]	@ (8000e40 <MX_GPIO_Init+0xf4>)
 8000df0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000df2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000df6:	60bb      	str	r3, [r7, #8]
 8000df8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000dfa:	2300      	movs	r3, #0
 8000dfc:	607b      	str	r3, [r7, #4]
 8000dfe:	4b10      	ldr	r3, [pc, #64]	@ (8000e40 <MX_GPIO_Init+0xf4>)
 8000e00:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e02:	4a0f      	ldr	r2, [pc, #60]	@ (8000e40 <MX_GPIO_Init+0xf4>)
 8000e04:	f043 0310 	orr.w	r3, r3, #16
 8000e08:	6313      	str	r3, [r2, #48]	@ 0x30
 8000e0a:	4b0d      	ldr	r3, [pc, #52]	@ (8000e40 <MX_GPIO_Init+0xf4>)
 8000e0c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e0e:	f003 0310 	and.w	r3, r3, #16
 8000e12:	607b      	str	r3, [r7, #4]
 8000e14:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000e16:	2300      	movs	r3, #0
 8000e18:	603b      	str	r3, [r7, #0]
 8000e1a:	4b09      	ldr	r3, [pc, #36]	@ (8000e40 <MX_GPIO_Init+0xf4>)
 8000e1c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e1e:	4a08      	ldr	r2, [pc, #32]	@ (8000e40 <MX_GPIO_Init+0xf4>)
 8000e20:	f043 0308 	orr.w	r3, r3, #8
 8000e24:	6313      	str	r3, [r2, #48]	@ 0x30
 8000e26:	4b06      	ldr	r3, [pc, #24]	@ (8000e40 <MX_GPIO_Init+0xf4>)
 8000e28:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e2a:	f003 0308 	and.w	r3, r3, #8
 8000e2e:	603b      	str	r3, [r7, #0]
 8000e30:	683b      	ldr	r3, [r7, #0]

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 8000e32:	bf00      	nop
 8000e34:	3724      	adds	r7, #36	@ 0x24
 8000e36:	46bd      	mov	sp, r7
 8000e38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e3c:	4770      	bx	lr
 8000e3e:	bf00      	nop
 8000e40:	40023800 	.word	0x40023800

08000e44 <StartDefaultTask>:
  * @retval None
  */

/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8000e44:	b580      	push	{r7, lr}
 8000e46:	b082      	sub	sp, #8
 8000e48:	af00      	add	r7, sp, #0
 8000e4a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */

  /* Infinite loop */
  for(;;)
  {
	  osDelay(1000);
 8000e4c:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000e50:	f005 fc46 	bl	80066e0 <osDelay>
 8000e54:	e7fa      	b.n	8000e4c <StartDefaultTask+0x8>

08000e56 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000e56:	b480      	push	{r7}
 8000e58:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000e5a:	b672      	cpsid	i
}
 8000e5c:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000e5e:	bf00      	nop
 8000e60:	e7fd      	b.n	8000e5e <Error_Handler+0x8>
	...

08000e64 <SPIx_Init>:

/**
  * @brief  SPIx Bus initialization
  */
static void SPIx_Init(void)
{
 8000e64:	b580      	push	{r7, lr}
 8000e66:	af00      	add	r7, sp, #0
  if(HAL_SPI_GetState(&SpiHandle) == HAL_SPI_STATE_RESET)
 8000e68:	4819      	ldr	r0, [pc, #100]	@ (8000ed0 <SPIx_Init+0x6c>)
 8000e6a:	f004 fdfb 	bl	8005a64 <HAL_SPI_GetState>
 8000e6e:	4603      	mov	r3, r0
 8000e70:	2b00      	cmp	r3, #0
 8000e72:	d12b      	bne.n	8000ecc <SPIx_Init+0x68>
  {
    /* SPI configuration -----------------------------------------------------*/
    SpiHandle.Instance = DISCOVERY_SPIx;
 8000e74:	4b16      	ldr	r3, [pc, #88]	@ (8000ed0 <SPIx_Init+0x6c>)
 8000e76:	4a17      	ldr	r2, [pc, #92]	@ (8000ed4 <SPIx_Init+0x70>)
 8000e78:	601a      	str	r2, [r3, #0]
       to verify these constraints:
       - ILI9341 LCD SPI interface max baudrate is 10MHz for write and 6.66MHz for read
       - l3gd20 SPI interface max baudrate is 10MHz for write/read
       - PCLK2 frequency is set to 90 MHz 
    */  
    SpiHandle.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8000e7a:	4b15      	ldr	r3, [pc, #84]	@ (8000ed0 <SPIx_Init+0x6c>)
 8000e7c:	2218      	movs	r2, #24
 8000e7e:	61da      	str	r2, [r3, #28]

    /* On STM32F429I-Discovery, LCD ID cannot be read then keep a common configuration */
    /* for LCD and GYRO (SPI_DIRECTION_2LINES) */
    /* Note: To read a register a LCD, SPI_DIRECTION_1LINE should be set */
    SpiHandle.Init.Direction      = SPI_DIRECTION_2LINES;
 8000e80:	4b13      	ldr	r3, [pc, #76]	@ (8000ed0 <SPIx_Init+0x6c>)
 8000e82:	2200      	movs	r2, #0
 8000e84:	609a      	str	r2, [r3, #8]
    SpiHandle.Init.CLKPhase       = SPI_PHASE_1EDGE;
 8000e86:	4b12      	ldr	r3, [pc, #72]	@ (8000ed0 <SPIx_Init+0x6c>)
 8000e88:	2200      	movs	r2, #0
 8000e8a:	615a      	str	r2, [r3, #20]
    SpiHandle.Init.CLKPolarity    = SPI_POLARITY_LOW;
 8000e8c:	4b10      	ldr	r3, [pc, #64]	@ (8000ed0 <SPIx_Init+0x6c>)
 8000e8e:	2200      	movs	r2, #0
 8000e90:	611a      	str	r2, [r3, #16]
    SpiHandle.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLED;
 8000e92:	4b0f      	ldr	r3, [pc, #60]	@ (8000ed0 <SPIx_Init+0x6c>)
 8000e94:	2200      	movs	r2, #0
 8000e96:	629a      	str	r2, [r3, #40]	@ 0x28
    SpiHandle.Init.CRCPolynomial  = 7;
 8000e98:	4b0d      	ldr	r3, [pc, #52]	@ (8000ed0 <SPIx_Init+0x6c>)
 8000e9a:	2207      	movs	r2, #7
 8000e9c:	62da      	str	r2, [r3, #44]	@ 0x2c
    SpiHandle.Init.DataSize       = SPI_DATASIZE_8BIT;
 8000e9e:	4b0c      	ldr	r3, [pc, #48]	@ (8000ed0 <SPIx_Init+0x6c>)
 8000ea0:	2200      	movs	r2, #0
 8000ea2:	60da      	str	r2, [r3, #12]
    SpiHandle.Init.FirstBit       = SPI_FIRSTBIT_MSB;
 8000ea4:	4b0a      	ldr	r3, [pc, #40]	@ (8000ed0 <SPIx_Init+0x6c>)
 8000ea6:	2200      	movs	r2, #0
 8000ea8:	621a      	str	r2, [r3, #32]
    SpiHandle.Init.NSS            = SPI_NSS_SOFT;
 8000eaa:	4b09      	ldr	r3, [pc, #36]	@ (8000ed0 <SPIx_Init+0x6c>)
 8000eac:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000eb0:	619a      	str	r2, [r3, #24]
    SpiHandle.Init.TIMode         = SPI_TIMODE_DISABLED;
 8000eb2:	4b07      	ldr	r3, [pc, #28]	@ (8000ed0 <SPIx_Init+0x6c>)
 8000eb4:	2200      	movs	r2, #0
 8000eb6:	625a      	str	r2, [r3, #36]	@ 0x24
    SpiHandle.Init.Mode           = SPI_MODE_MASTER;
 8000eb8:	4b05      	ldr	r3, [pc, #20]	@ (8000ed0 <SPIx_Init+0x6c>)
 8000eba:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8000ebe:	605a      	str	r2, [r3, #4]
  
    SPIx_MspInit(&SpiHandle);
 8000ec0:	4803      	ldr	r0, [pc, #12]	@ (8000ed0 <SPIx_Init+0x6c>)
 8000ec2:	f000 f853 	bl	8000f6c <SPIx_MspInit>
    HAL_SPI_Init(&SpiHandle);
 8000ec6:	4802      	ldr	r0, [pc, #8]	@ (8000ed0 <SPIx_Init+0x6c>)
 8000ec8:	f004 f915 	bl	80050f6 <HAL_SPI_Init>
  } 
}
 8000ecc:	bf00      	nop
 8000ece:	bd80      	pop	{r7, pc}
 8000ed0:	200002e0 	.word	0x200002e0
 8000ed4:	40015000 	.word	0x40015000

08000ed8 <SPIx_Read>:
  * @brief  Reads 4 bytes from device.
  * @param  ReadSize: Number of bytes to read (max 4 bytes)
  * @retval Value read on the SPI
  */
static uint32_t SPIx_Read(uint8_t ReadSize)
{
 8000ed8:	b580      	push	{r7, lr}
 8000eda:	b084      	sub	sp, #16
 8000edc:	af00      	add	r7, sp, #0
 8000ede:	4603      	mov	r3, r0
 8000ee0:	71fb      	strb	r3, [r7, #7]
  HAL_StatusTypeDef status = HAL_OK;
 8000ee2:	2300      	movs	r3, #0
 8000ee4:	73fb      	strb	r3, [r7, #15]
  uint32_t readvalue;
  
  status = HAL_SPI_Receive(&SpiHandle, (uint8_t*) &readvalue, ReadSize, SpixTimeout);
 8000ee6:	79fb      	ldrb	r3, [r7, #7]
 8000ee8:	b29a      	uxth	r2, r3
 8000eea:	4b09      	ldr	r3, [pc, #36]	@ (8000f10 <SPIx_Read+0x38>)
 8000eec:	681b      	ldr	r3, [r3, #0]
 8000eee:	f107 0108 	add.w	r1, r7, #8
 8000ef2:	4808      	ldr	r0, [pc, #32]	@ (8000f14 <SPIx_Read+0x3c>)
 8000ef4:	f004 faf4 	bl	80054e0 <HAL_SPI_Receive>
 8000ef8:	4603      	mov	r3, r0
 8000efa:	73fb      	strb	r3, [r7, #15]
  
  /* Check the communication status */
  if(status != HAL_OK)
 8000efc:	7bfb      	ldrb	r3, [r7, #15]
 8000efe:	2b00      	cmp	r3, #0
 8000f00:	d001      	beq.n	8000f06 <SPIx_Read+0x2e>
  {
    /* Re-Initialize the BUS */
    SPIx_Error();
 8000f02:	f000 f827 	bl	8000f54 <SPIx_Error>
  }
  
  return readvalue;
 8000f06:	68bb      	ldr	r3, [r7, #8]
}
 8000f08:	4618      	mov	r0, r3
 8000f0a:	3710      	adds	r7, #16
 8000f0c:	46bd      	mov	sp, r7
 8000f0e:	bd80      	pop	{r7, pc}
 8000f10:	20000040 	.word	0x20000040
 8000f14:	200002e0 	.word	0x200002e0

08000f18 <SPIx_Write>:
/**
  * @brief  Writes a byte to device.
  * @param  Value: value to be written
  */
static void SPIx_Write(uint16_t Value)
{
 8000f18:	b580      	push	{r7, lr}
 8000f1a:	b084      	sub	sp, #16
 8000f1c:	af00      	add	r7, sp, #0
 8000f1e:	4603      	mov	r3, r0
 8000f20:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status = HAL_OK;
 8000f22:	2300      	movs	r3, #0
 8000f24:	73fb      	strb	r3, [r7, #15]
  
  status = HAL_SPI_Transmit(&SpiHandle, (uint8_t*) &Value, 1, SpixTimeout);
 8000f26:	4b09      	ldr	r3, [pc, #36]	@ (8000f4c <SPIx_Write+0x34>)
 8000f28:	681b      	ldr	r3, [r3, #0]
 8000f2a:	1db9      	adds	r1, r7, #6
 8000f2c:	2201      	movs	r2, #1
 8000f2e:	4808      	ldr	r0, [pc, #32]	@ (8000f50 <SPIx_Write+0x38>)
 8000f30:	f004 f992 	bl	8005258 <HAL_SPI_Transmit>
 8000f34:	4603      	mov	r3, r0
 8000f36:	73fb      	strb	r3, [r7, #15]
  
  /* Check the communication status */
  if(status != HAL_OK)
 8000f38:	7bfb      	ldrb	r3, [r7, #15]
 8000f3a:	2b00      	cmp	r3, #0
 8000f3c:	d001      	beq.n	8000f42 <SPIx_Write+0x2a>
  {
    /* Re-Initialize the BUS */
    SPIx_Error();
 8000f3e:	f000 f809 	bl	8000f54 <SPIx_Error>
  }
}
 8000f42:	bf00      	nop
 8000f44:	3710      	adds	r7, #16
 8000f46:	46bd      	mov	sp, r7
 8000f48:	bd80      	pop	{r7, pc}
 8000f4a:	bf00      	nop
 8000f4c:	20000040 	.word	0x20000040
 8000f50:	200002e0 	.word	0x200002e0

08000f54 <SPIx_Error>:

/**
  * @brief  SPIx error treatment function.
  */
static void SPIx_Error(void)
{
 8000f54:	b580      	push	{r7, lr}
 8000f56:	af00      	add	r7, sp, #0
  /* De-initialize the SPI communication BUS */
  HAL_SPI_DeInit(&SpiHandle);
 8000f58:	4803      	ldr	r0, [pc, #12]	@ (8000f68 <SPIx_Error+0x14>)
 8000f5a:	f004 f955 	bl	8005208 <HAL_SPI_DeInit>
  
  /* Re- Initialize the SPI communication BUS */
  SPIx_Init();
 8000f5e:	f7ff ff81 	bl	8000e64 <SPIx_Init>
}
 8000f62:	bf00      	nop
 8000f64:	bd80      	pop	{r7, pc}
 8000f66:	bf00      	nop
 8000f68:	200002e0 	.word	0x200002e0

08000f6c <SPIx_MspInit>:
/**
  * @brief  SPI MSP Init.
  * @param  hspi: SPI handle
  */
static void SPIx_MspInit(SPI_HandleTypeDef *hspi)
{
 8000f6c:	b580      	push	{r7, lr}
 8000f6e:	b08a      	sub	sp, #40	@ 0x28
 8000f70:	af00      	add	r7, sp, #0
 8000f72:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef   GPIO_InitStructure;

  /* Enable SPIx clock */
  DISCOVERY_SPIx_CLK_ENABLE();
 8000f74:	2300      	movs	r3, #0
 8000f76:	613b      	str	r3, [r7, #16]
 8000f78:	4b17      	ldr	r3, [pc, #92]	@ (8000fd8 <SPIx_MspInit+0x6c>)
 8000f7a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000f7c:	4a16      	ldr	r2, [pc, #88]	@ (8000fd8 <SPIx_MspInit+0x6c>)
 8000f7e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000f82:	6453      	str	r3, [r2, #68]	@ 0x44
 8000f84:	4b14      	ldr	r3, [pc, #80]	@ (8000fd8 <SPIx_MspInit+0x6c>)
 8000f86:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000f88:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8000f8c:	613b      	str	r3, [r7, #16]
 8000f8e:	693b      	ldr	r3, [r7, #16]

  /* Enable DISCOVERY_SPI GPIO clock */
  DISCOVERY_SPIx_GPIO_CLK_ENABLE();
 8000f90:	2300      	movs	r3, #0
 8000f92:	60fb      	str	r3, [r7, #12]
 8000f94:	4b10      	ldr	r3, [pc, #64]	@ (8000fd8 <SPIx_MspInit+0x6c>)
 8000f96:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f98:	4a0f      	ldr	r2, [pc, #60]	@ (8000fd8 <SPIx_MspInit+0x6c>)
 8000f9a:	f043 0320 	orr.w	r3, r3, #32
 8000f9e:	6313      	str	r3, [r2, #48]	@ 0x30
 8000fa0:	4b0d      	ldr	r3, [pc, #52]	@ (8000fd8 <SPIx_MspInit+0x6c>)
 8000fa2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000fa4:	f003 0320 	and.w	r3, r3, #32
 8000fa8:	60fb      	str	r3, [r7, #12]
 8000faa:	68fb      	ldr	r3, [r7, #12]

  /* configure SPI SCK, MOSI and MISO */    
  GPIO_InitStructure.Pin    = (DISCOVERY_SPIx_SCK_PIN | DISCOVERY_SPIx_MOSI_PIN | DISCOVERY_SPIx_MISO_PIN);
 8000fac:	f44f 7360 	mov.w	r3, #896	@ 0x380
 8000fb0:	617b      	str	r3, [r7, #20]
  GPIO_InitStructure.Mode   = GPIO_MODE_AF_PP;
 8000fb2:	2302      	movs	r3, #2
 8000fb4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStructure.Pull   = GPIO_PULLDOWN;
 8000fb6:	2302      	movs	r3, #2
 8000fb8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStructure.Speed  = GPIO_SPEED_MEDIUM;
 8000fba:	2301      	movs	r3, #1
 8000fbc:	623b      	str	r3, [r7, #32]
  GPIO_InitStructure.Alternate = DISCOVERY_SPIx_AF;
 8000fbe:	2305      	movs	r3, #5
 8000fc0:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(DISCOVERY_SPIx_GPIO_PORT, &GPIO_InitStructure);      
 8000fc2:	f107 0314 	add.w	r3, r7, #20
 8000fc6:	4619      	mov	r1, r3
 8000fc8:	4804      	ldr	r0, [pc, #16]	@ (8000fdc <SPIx_MspInit+0x70>)
 8000fca:	f002 f9f9 	bl	80033c0 <HAL_GPIO_Init>
}
 8000fce:	bf00      	nop
 8000fd0:	3728      	adds	r7, #40	@ 0x28
 8000fd2:	46bd      	mov	sp, r7
 8000fd4:	bd80      	pop	{r7, pc}
 8000fd6:	bf00      	nop
 8000fd8:	40023800 	.word	0x40023800
 8000fdc:	40021400 	.word	0x40021400

08000fe0 <LCD_IO_Init>:

/**
  * @brief  Configures the LCD_SPI interface.
  */
void LCD_IO_Init(void)
{
 8000fe0:	b580      	push	{r7, lr}
 8000fe2:	b088      	sub	sp, #32
 8000fe4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStructure;
  
  if(Is_LCD_IO_Initialized == 0)
 8000fe6:	4b36      	ldr	r3, [pc, #216]	@ (80010c0 <LCD_IO_Init+0xe0>)
 8000fe8:	781b      	ldrb	r3, [r3, #0]
 8000fea:	2b00      	cmp	r3, #0
 8000fec:	d164      	bne.n	80010b8 <LCD_IO_Init+0xd8>
  {
    Is_LCD_IO_Initialized = 1; 
 8000fee:	4b34      	ldr	r3, [pc, #208]	@ (80010c0 <LCD_IO_Init+0xe0>)
 8000ff0:	2201      	movs	r2, #1
 8000ff2:	701a      	strb	r2, [r3, #0]
    
    /* Configure NCS in Output Push-Pull mode */
    LCD_WRX_GPIO_CLK_ENABLE();
 8000ff4:	2300      	movs	r3, #0
 8000ff6:	60bb      	str	r3, [r7, #8]
 8000ff8:	4b32      	ldr	r3, [pc, #200]	@ (80010c4 <LCD_IO_Init+0xe4>)
 8000ffa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ffc:	4a31      	ldr	r2, [pc, #196]	@ (80010c4 <LCD_IO_Init+0xe4>)
 8000ffe:	f043 0308 	orr.w	r3, r3, #8
 8001002:	6313      	str	r3, [r2, #48]	@ 0x30
 8001004:	4b2f      	ldr	r3, [pc, #188]	@ (80010c4 <LCD_IO_Init+0xe4>)
 8001006:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001008:	f003 0308 	and.w	r3, r3, #8
 800100c:	60bb      	str	r3, [r7, #8]
 800100e:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStructure.Pin     = LCD_WRX_PIN;
 8001010:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001014:	60fb      	str	r3, [r7, #12]
    GPIO_InitStructure.Mode    = GPIO_MODE_OUTPUT_PP;
 8001016:	2301      	movs	r3, #1
 8001018:	613b      	str	r3, [r7, #16]
    GPIO_InitStructure.Pull    = GPIO_NOPULL;
 800101a:	2300      	movs	r3, #0
 800101c:	617b      	str	r3, [r7, #20]
    GPIO_InitStructure.Speed   = GPIO_SPEED_FAST;
 800101e:	2302      	movs	r3, #2
 8001020:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(LCD_WRX_GPIO_PORT, &GPIO_InitStructure);
 8001022:	f107 030c 	add.w	r3, r7, #12
 8001026:	4619      	mov	r1, r3
 8001028:	4827      	ldr	r0, [pc, #156]	@ (80010c8 <LCD_IO_Init+0xe8>)
 800102a:	f002 f9c9 	bl	80033c0 <HAL_GPIO_Init>
    
    LCD_RDX_GPIO_CLK_ENABLE();
 800102e:	2300      	movs	r3, #0
 8001030:	607b      	str	r3, [r7, #4]
 8001032:	4b24      	ldr	r3, [pc, #144]	@ (80010c4 <LCD_IO_Init+0xe4>)
 8001034:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001036:	4a23      	ldr	r2, [pc, #140]	@ (80010c4 <LCD_IO_Init+0xe4>)
 8001038:	f043 0308 	orr.w	r3, r3, #8
 800103c:	6313      	str	r3, [r2, #48]	@ 0x30
 800103e:	4b21      	ldr	r3, [pc, #132]	@ (80010c4 <LCD_IO_Init+0xe4>)
 8001040:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001042:	f003 0308 	and.w	r3, r3, #8
 8001046:	607b      	str	r3, [r7, #4]
 8001048:	687b      	ldr	r3, [r7, #4]
    GPIO_InitStructure.Pin     = LCD_RDX_PIN;
 800104a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800104e:	60fb      	str	r3, [r7, #12]
    GPIO_InitStructure.Mode    = GPIO_MODE_OUTPUT_PP;
 8001050:	2301      	movs	r3, #1
 8001052:	613b      	str	r3, [r7, #16]
    GPIO_InitStructure.Pull    = GPIO_NOPULL;
 8001054:	2300      	movs	r3, #0
 8001056:	617b      	str	r3, [r7, #20]
    GPIO_InitStructure.Speed   = GPIO_SPEED_FAST;
 8001058:	2302      	movs	r3, #2
 800105a:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(LCD_RDX_GPIO_PORT, &GPIO_InitStructure);
 800105c:	f107 030c 	add.w	r3, r7, #12
 8001060:	4619      	mov	r1, r3
 8001062:	4819      	ldr	r0, [pc, #100]	@ (80010c8 <LCD_IO_Init+0xe8>)
 8001064:	f002 f9ac 	bl	80033c0 <HAL_GPIO_Init>
    
    /* Configure the LCD Control pins ----------------------------------------*/
    LCD_NCS_GPIO_CLK_ENABLE();
 8001068:	2300      	movs	r3, #0
 800106a:	603b      	str	r3, [r7, #0]
 800106c:	4b15      	ldr	r3, [pc, #84]	@ (80010c4 <LCD_IO_Init+0xe4>)
 800106e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001070:	4a14      	ldr	r2, [pc, #80]	@ (80010c4 <LCD_IO_Init+0xe4>)
 8001072:	f043 0304 	orr.w	r3, r3, #4
 8001076:	6313      	str	r3, [r2, #48]	@ 0x30
 8001078:	4b12      	ldr	r3, [pc, #72]	@ (80010c4 <LCD_IO_Init+0xe4>)
 800107a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800107c:	f003 0304 	and.w	r3, r3, #4
 8001080:	603b      	str	r3, [r7, #0]
 8001082:	683b      	ldr	r3, [r7, #0]
    
    /* Configure NCS in Output Push-Pull mode */
    GPIO_InitStructure.Pin     = LCD_NCS_PIN;
 8001084:	2304      	movs	r3, #4
 8001086:	60fb      	str	r3, [r7, #12]
    GPIO_InitStructure.Mode    = GPIO_MODE_OUTPUT_PP;
 8001088:	2301      	movs	r3, #1
 800108a:	613b      	str	r3, [r7, #16]
    GPIO_InitStructure.Pull    = GPIO_NOPULL;
 800108c:	2300      	movs	r3, #0
 800108e:	617b      	str	r3, [r7, #20]
    GPIO_InitStructure.Speed   = GPIO_SPEED_FAST;
 8001090:	2302      	movs	r3, #2
 8001092:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(LCD_NCS_GPIO_PORT, &GPIO_InitStructure);
 8001094:	f107 030c 	add.w	r3, r7, #12
 8001098:	4619      	mov	r1, r3
 800109a:	480c      	ldr	r0, [pc, #48]	@ (80010cc <LCD_IO_Init+0xec>)
 800109c:	f002 f990 	bl	80033c0 <HAL_GPIO_Init>
    
    /* Set or Reset the control line */
    LCD_CS_LOW();
 80010a0:	2200      	movs	r2, #0
 80010a2:	2104      	movs	r1, #4
 80010a4:	4809      	ldr	r0, [pc, #36]	@ (80010cc <LCD_IO_Init+0xec>)
 80010a6:	f002 fc43 	bl	8003930 <HAL_GPIO_WritePin>
    LCD_CS_HIGH();
 80010aa:	2201      	movs	r2, #1
 80010ac:	2104      	movs	r1, #4
 80010ae:	4807      	ldr	r0, [pc, #28]	@ (80010cc <LCD_IO_Init+0xec>)
 80010b0:	f002 fc3e 	bl	8003930 <HAL_GPIO_WritePin>
    
    SPIx_Init();
 80010b4:	f7ff fed6 	bl	8000e64 <SPIx_Init>
  }
}
 80010b8:	bf00      	nop
 80010ba:	3720      	adds	r7, #32
 80010bc:	46bd      	mov	sp, r7
 80010be:	bd80      	pop	{r7, pc}
 80010c0:	20000338 	.word	0x20000338
 80010c4:	40023800 	.word	0x40023800
 80010c8:	40020c00 	.word	0x40020c00
 80010cc:	40020800 	.word	0x40020800

080010d0 <LCD_IO_WriteData>:

/**
  * @brief  Writes register value.
  */
void LCD_IO_WriteData(uint16_t RegValue) 
{
 80010d0:	b580      	push	{r7, lr}
 80010d2:	b082      	sub	sp, #8
 80010d4:	af00      	add	r7, sp, #0
 80010d6:	4603      	mov	r3, r0
 80010d8:	80fb      	strh	r3, [r7, #6]
  /* Set WRX to send data */
  LCD_WRX_HIGH();
 80010da:	2201      	movs	r2, #1
 80010dc:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80010e0:	480a      	ldr	r0, [pc, #40]	@ (800110c <LCD_IO_WriteData+0x3c>)
 80010e2:	f002 fc25 	bl	8003930 <HAL_GPIO_WritePin>
  
  /* Reset LCD control line(/CS) and Send data */  
  LCD_CS_LOW();
 80010e6:	2200      	movs	r2, #0
 80010e8:	2104      	movs	r1, #4
 80010ea:	4809      	ldr	r0, [pc, #36]	@ (8001110 <LCD_IO_WriteData+0x40>)
 80010ec:	f002 fc20 	bl	8003930 <HAL_GPIO_WritePin>
  SPIx_Write(RegValue);
 80010f0:	88fb      	ldrh	r3, [r7, #6]
 80010f2:	4618      	mov	r0, r3
 80010f4:	f7ff ff10 	bl	8000f18 <SPIx_Write>
  
  /* Deselect: Chip Select high */
  LCD_CS_HIGH();
 80010f8:	2201      	movs	r2, #1
 80010fa:	2104      	movs	r1, #4
 80010fc:	4804      	ldr	r0, [pc, #16]	@ (8001110 <LCD_IO_WriteData+0x40>)
 80010fe:	f002 fc17 	bl	8003930 <HAL_GPIO_WritePin>
}
 8001102:	bf00      	nop
 8001104:	3708      	adds	r7, #8
 8001106:	46bd      	mov	sp, r7
 8001108:	bd80      	pop	{r7, pc}
 800110a:	bf00      	nop
 800110c:	40020c00 	.word	0x40020c00
 8001110:	40020800 	.word	0x40020800

08001114 <LCD_IO_WriteReg>:

/**
  * @brief  Writes register address.
  */
void LCD_IO_WriteReg(uint8_t Reg) 
{
 8001114:	b580      	push	{r7, lr}
 8001116:	b082      	sub	sp, #8
 8001118:	af00      	add	r7, sp, #0
 800111a:	4603      	mov	r3, r0
 800111c:	71fb      	strb	r3, [r7, #7]
  /* Reset WRX to send command */
  LCD_WRX_LOW();
 800111e:	2200      	movs	r2, #0
 8001120:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001124:	480a      	ldr	r0, [pc, #40]	@ (8001150 <LCD_IO_WriteReg+0x3c>)
 8001126:	f002 fc03 	bl	8003930 <HAL_GPIO_WritePin>
  
  /* Reset LCD control line(/CS) and Send command */
  LCD_CS_LOW();
 800112a:	2200      	movs	r2, #0
 800112c:	2104      	movs	r1, #4
 800112e:	4809      	ldr	r0, [pc, #36]	@ (8001154 <LCD_IO_WriteReg+0x40>)
 8001130:	f002 fbfe 	bl	8003930 <HAL_GPIO_WritePin>
  SPIx_Write(Reg);
 8001134:	79fb      	ldrb	r3, [r7, #7]
 8001136:	b29b      	uxth	r3, r3
 8001138:	4618      	mov	r0, r3
 800113a:	f7ff feed 	bl	8000f18 <SPIx_Write>
  
  /* Deselect: Chip Select high */
  LCD_CS_HIGH();
 800113e:	2201      	movs	r2, #1
 8001140:	2104      	movs	r1, #4
 8001142:	4804      	ldr	r0, [pc, #16]	@ (8001154 <LCD_IO_WriteReg+0x40>)
 8001144:	f002 fbf4 	bl	8003930 <HAL_GPIO_WritePin>
}
 8001148:	bf00      	nop
 800114a:	3708      	adds	r7, #8
 800114c:	46bd      	mov	sp, r7
 800114e:	bd80      	pop	{r7, pc}
 8001150:	40020c00 	.word	0x40020c00
 8001154:	40020800 	.word	0x40020800

08001158 <LCD_IO_ReadData>:
  * @param  RegValue Address of the register to read
  * @param  ReadSize Number of bytes to read
  * @retval Content of the register value
  */
uint32_t LCD_IO_ReadData(uint16_t RegValue, uint8_t ReadSize) 
{
 8001158:	b580      	push	{r7, lr}
 800115a:	b084      	sub	sp, #16
 800115c:	af00      	add	r7, sp, #0
 800115e:	4603      	mov	r3, r0
 8001160:	460a      	mov	r2, r1
 8001162:	80fb      	strh	r3, [r7, #6]
 8001164:	4613      	mov	r3, r2
 8001166:	717b      	strb	r3, [r7, #5]
  uint32_t readvalue = 0;
 8001168:	2300      	movs	r3, #0
 800116a:	60fb      	str	r3, [r7, #12]

  /* Select: Chip Select low */
  LCD_CS_LOW();
 800116c:	2200      	movs	r2, #0
 800116e:	2104      	movs	r1, #4
 8001170:	4810      	ldr	r0, [pc, #64]	@ (80011b4 <LCD_IO_ReadData+0x5c>)
 8001172:	f002 fbdd 	bl	8003930 <HAL_GPIO_WritePin>

  /* Reset WRX to send command */
  LCD_WRX_LOW();
 8001176:	2200      	movs	r2, #0
 8001178:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800117c:	480e      	ldr	r0, [pc, #56]	@ (80011b8 <LCD_IO_ReadData+0x60>)
 800117e:	f002 fbd7 	bl	8003930 <HAL_GPIO_WritePin>
  
  SPIx_Write(RegValue);
 8001182:	88fb      	ldrh	r3, [r7, #6]
 8001184:	4618      	mov	r0, r3
 8001186:	f7ff fec7 	bl	8000f18 <SPIx_Write>
  
  readvalue = SPIx_Read(ReadSize);
 800118a:	797b      	ldrb	r3, [r7, #5]
 800118c:	4618      	mov	r0, r3
 800118e:	f7ff fea3 	bl	8000ed8 <SPIx_Read>
 8001192:	60f8      	str	r0, [r7, #12]

  /* Set WRX to send data */
  LCD_WRX_HIGH();
 8001194:	2201      	movs	r2, #1
 8001196:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800119a:	4807      	ldr	r0, [pc, #28]	@ (80011b8 <LCD_IO_ReadData+0x60>)
 800119c:	f002 fbc8 	bl	8003930 <HAL_GPIO_WritePin>

  /* Deselect: Chip Select high */
  LCD_CS_HIGH();
 80011a0:	2201      	movs	r2, #1
 80011a2:	2104      	movs	r1, #4
 80011a4:	4803      	ldr	r0, [pc, #12]	@ (80011b4 <LCD_IO_ReadData+0x5c>)
 80011a6:	f002 fbc3 	bl	8003930 <HAL_GPIO_WritePin>
  
  return readvalue;
 80011aa:	68fb      	ldr	r3, [r7, #12]
}
 80011ac:	4618      	mov	r0, r3
 80011ae:	3710      	adds	r7, #16
 80011b0:	46bd      	mov	sp, r7
 80011b2:	bd80      	pop	{r7, pc}
 80011b4:	40020800 	.word	0x40020800
 80011b8:	40020c00 	.word	0x40020c00

080011bc <LCD_Delay>:
/**
  * @brief  Wait for loop in ms.
  * @param  Delay in ms.
  */
void LCD_Delay(uint32_t Delay)
{
 80011bc:	b580      	push	{r7, lr}
 80011be:	b082      	sub	sp, #8
 80011c0:	af00      	add	r7, sp, #0
 80011c2:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 80011c4:	6878      	ldr	r0, [r7, #4]
 80011c6:	f001 fa4f 	bl	8002668 <HAL_Delay>
}
 80011ca:	bf00      	nop
 80011cc:	3708      	adds	r7, #8
 80011ce:	46bd      	mov	sp, r7
 80011d0:	bd80      	pop	{r7, pc}
	...

080011d4 <BSP_LCD_Init>:
/**
  * @brief  Initializes the LCD.
  * @retval LCD state
  */
uint8_t BSP_LCD_Init(void)
{ 
 80011d4:	b580      	push	{r7, lr}
 80011d6:	af00      	add	r7, sp, #0
  /* PIN EXTC is not connected to VDD and then LCD_READ_ID4 is not accessible. */
  /* In this case, ReadID function is bypassed.*/  
  /*if(ili9341_drv.ReadID() == ILI9341_ID)*/

    /* LTDC Configuration ----------------------------------------------------*/
    LtdcHandler.Instance = LTDC;
 80011d8:	4b2b      	ldr	r3, [pc, #172]	@ (8001288 <BSP_LCD_Init+0xb4>)
 80011da:	4a2c      	ldr	r2, [pc, #176]	@ (800128c <BSP_LCD_Init+0xb8>)
 80011dc:	601a      	str	r2, [r3, #0]
          ActiveH=320 (323-2-2+1)
          VFP=4 (327-320-2-2+1)
      */

    /* Configure horizontal synchronization width */
    LtdcHandler.Init.HorizontalSync = ILI9341_HSYNC;
 80011de:	4b2a      	ldr	r3, [pc, #168]	@ (8001288 <BSP_LCD_Init+0xb4>)
 80011e0:	2209      	movs	r2, #9
 80011e2:	615a      	str	r2, [r3, #20]
    /* Configure vertical synchronization height */
    LtdcHandler.Init.VerticalSync = ILI9341_VSYNC;
 80011e4:	4b28      	ldr	r3, [pc, #160]	@ (8001288 <BSP_LCD_Init+0xb4>)
 80011e6:	2201      	movs	r2, #1
 80011e8:	619a      	str	r2, [r3, #24]
    /* Configure accumulated horizontal back porch */
    LtdcHandler.Init.AccumulatedHBP = ILI9341_HBP;
 80011ea:	4b27      	ldr	r3, [pc, #156]	@ (8001288 <BSP_LCD_Init+0xb4>)
 80011ec:	221d      	movs	r2, #29
 80011ee:	61da      	str	r2, [r3, #28]
    /* Configure accumulated vertical back porch */
    LtdcHandler.Init.AccumulatedVBP = ILI9341_VBP;
 80011f0:	4b25      	ldr	r3, [pc, #148]	@ (8001288 <BSP_LCD_Init+0xb4>)
 80011f2:	2203      	movs	r2, #3
 80011f4:	621a      	str	r2, [r3, #32]
    /* Configure accumulated active width */
    LtdcHandler.Init.AccumulatedActiveW = 269;
 80011f6:	4b24      	ldr	r3, [pc, #144]	@ (8001288 <BSP_LCD_Init+0xb4>)
 80011f8:	f240 120d 	movw	r2, #269	@ 0x10d
 80011fc:	625a      	str	r2, [r3, #36]	@ 0x24
    /* Configure accumulated active height */
    LtdcHandler.Init.AccumulatedActiveH = 323;
 80011fe:	4b22      	ldr	r3, [pc, #136]	@ (8001288 <BSP_LCD_Init+0xb4>)
 8001200:	f240 1243 	movw	r2, #323	@ 0x143
 8001204:	629a      	str	r2, [r3, #40]	@ 0x28
    /* Configure total width */
    LtdcHandler.Init.TotalWidth = 279;
 8001206:	4b20      	ldr	r3, [pc, #128]	@ (8001288 <BSP_LCD_Init+0xb4>)
 8001208:	f240 1217 	movw	r2, #279	@ 0x117
 800120c:	62da      	str	r2, [r3, #44]	@ 0x2c
    /* Configure total height */
    LtdcHandler.Init.TotalHeigh = 327;
 800120e:	4b1e      	ldr	r3, [pc, #120]	@ (8001288 <BSP_LCD_Init+0xb4>)
 8001210:	f240 1247 	movw	r2, #327	@ 0x147
 8001214:	631a      	str	r2, [r3, #48]	@ 0x30
    
    /* Configure R,G,B component values for LCD background color */
    LtdcHandler.Init.Backcolor.Red= 0;
 8001216:	4b1c      	ldr	r3, [pc, #112]	@ (8001288 <BSP_LCD_Init+0xb4>)
 8001218:	2200      	movs	r2, #0
 800121a:	f883 2036 	strb.w	r2, [r3, #54]	@ 0x36
    LtdcHandler.Init.Backcolor.Blue= 0;
 800121e:	4b1a      	ldr	r3, [pc, #104]	@ (8001288 <BSP_LCD_Init+0xb4>)
 8001220:	2200      	movs	r2, #0
 8001222:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    LtdcHandler.Init.Backcolor.Green= 0;
 8001226:	4b18      	ldr	r3, [pc, #96]	@ (8001288 <BSP_LCD_Init+0xb4>)
 8001228:	2200      	movs	r2, #0
 800122a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    /* LCD clock configuration */
    /* PLLSAI_VCO Input = HSE_VALUE/PLL_M = 1 Mhz */
    /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN = 192 Mhz */
    /* PLLLCDCLK = PLLSAI_VCO Output/PLLSAIR = 192/4 = 48 Mhz */
    /* LTDC clock frequency = PLLLCDCLK / LTDC_PLLSAI_DIVR_8 = 48/4 = 6Mhz */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 800122e:	4b18      	ldr	r3, [pc, #96]	@ (8001290 <BSP_LCD_Init+0xbc>)
 8001230:	2208      	movs	r2, #8
 8001232:	601a      	str	r2, [r3, #0]
    PeriphClkInitStruct.PLLSAI.PLLSAIN = 192;
 8001234:	4b16      	ldr	r3, [pc, #88]	@ (8001290 <BSP_LCD_Init+0xbc>)
 8001236:	22c0      	movs	r2, #192	@ 0xc0
 8001238:	611a      	str	r2, [r3, #16]
    PeriphClkInitStruct.PLLSAI.PLLSAIR = 4;
 800123a:	4b15      	ldr	r3, [pc, #84]	@ (8001290 <BSP_LCD_Init+0xbc>)
 800123c:	2204      	movs	r2, #4
 800123e:	619a      	str	r2, [r3, #24]
    PeriphClkInitStruct.PLLSAIDivR = RCC_PLLSAIDIVR_8;
 8001240:	4b13      	ldr	r3, [pc, #76]	@ (8001290 <BSP_LCD_Init+0xbc>)
 8001242:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8001246:	625a      	str	r2, [r3, #36]	@ 0x24
    HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct); 
 8001248:	4811      	ldr	r0, [pc, #68]	@ (8001290 <BSP_LCD_Init+0xbc>)
 800124a:	f003 fd03 	bl	8004c54 <HAL_RCCEx_PeriphCLKConfig>
    
    /* Polarity */
    LtdcHandler.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 800124e:	4b0e      	ldr	r3, [pc, #56]	@ (8001288 <BSP_LCD_Init+0xb4>)
 8001250:	2200      	movs	r2, #0
 8001252:	605a      	str	r2, [r3, #4]
    LtdcHandler.Init.VSPolarity = LTDC_VSPOLARITY_AL;
 8001254:	4b0c      	ldr	r3, [pc, #48]	@ (8001288 <BSP_LCD_Init+0xb4>)
 8001256:	2200      	movs	r2, #0
 8001258:	609a      	str	r2, [r3, #8]
    LtdcHandler.Init.DEPolarity = LTDC_DEPOLARITY_AL;
 800125a:	4b0b      	ldr	r3, [pc, #44]	@ (8001288 <BSP_LCD_Init+0xb4>)
 800125c:	2200      	movs	r2, #0
 800125e:	60da      	str	r2, [r3, #12]
    LtdcHandler.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 8001260:	4b09      	ldr	r3, [pc, #36]	@ (8001288 <BSP_LCD_Init+0xb4>)
 8001262:	2200      	movs	r2, #0
 8001264:	611a      	str	r2, [r3, #16]
    
    BSP_LCD_MspInit();
 8001266:	f000 fa15 	bl	8001694 <BSP_LCD_MspInit>
    HAL_LTDC_Init(&LtdcHandler); 
 800126a:	4807      	ldr	r0, [pc, #28]	@ (8001288 <BSP_LCD_Init+0xb4>)
 800126c:	f002 fd3a 	bl	8003ce4 <HAL_LTDC_Init>
    
    /* Select the device */
    LcdDrv = &ili9341_drv;
 8001270:	4b08      	ldr	r3, [pc, #32]	@ (8001294 <BSP_LCD_Init+0xc0>)
 8001272:	4a09      	ldr	r2, [pc, #36]	@ (8001298 <BSP_LCD_Init+0xc4>)
 8001274:	601a      	str	r2, [r3, #0]

    /* LCD Init */	 
    LcdDrv->Init();
 8001276:	4b07      	ldr	r3, [pc, #28]	@ (8001294 <BSP_LCD_Init+0xc0>)
 8001278:	681b      	ldr	r3, [r3, #0]
 800127a:	681b      	ldr	r3, [r3, #0]
 800127c:	4798      	blx	r3

    /* Initialize the SDRAM */
    BSP_SDRAM_Init();
 800127e:	f000 fbf7 	bl	8001a70 <BSP_SDRAM_Init>

    /* Initialize the font */
    //BSP_LCD_SetFont(&LCD_DEFAULT_FONT);

  return LCD_OK;
 8001282:	2300      	movs	r3, #0
}  
 8001284:	4618      	mov	r0, r3
 8001286:	bd80      	pop	{r7, pc}
 8001288:	2000033c 	.word	0x2000033c
 800128c:	40016800 	.word	0x40016800
 8001290:	20000424 	.word	0x20000424
 8001294:	20000470 	.word	0x20000470
 8001298:	20000008 	.word	0x20000008

0800129c <BSP_LCD_GetXSize>:
/**
  * @brief  Gets the LCD X size.  
  * @retval The used LCD X size
  */
uint32_t BSP_LCD_GetXSize(void)
{
 800129c:	b580      	push	{r7, lr}
 800129e:	af00      	add	r7, sp, #0
  return LcdDrv->GetLcdPixelWidth();
 80012a0:	4b03      	ldr	r3, [pc, #12]	@ (80012b0 <BSP_LCD_GetXSize+0x14>)
 80012a2:	681b      	ldr	r3, [r3, #0]
 80012a4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80012a6:	4798      	blx	r3
 80012a8:	4603      	mov	r3, r0
}
 80012aa:	4618      	mov	r0, r3
 80012ac:	bd80      	pop	{r7, pc}
 80012ae:	bf00      	nop
 80012b0:	20000470 	.word	0x20000470

080012b4 <BSP_LCD_GetYSize>:
/**
  * @brief  Gets the LCD Y size.  
  * @retval The used LCD Y size
  */
uint32_t BSP_LCD_GetYSize(void)
{
 80012b4:	b580      	push	{r7, lr}
 80012b6:	af00      	add	r7, sp, #0
  return LcdDrv->GetLcdPixelHeight();
 80012b8:	4b03      	ldr	r3, [pc, #12]	@ (80012c8 <BSP_LCD_GetYSize+0x14>)
 80012ba:	681b      	ldr	r3, [r3, #0]
 80012bc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80012be:	4798      	blx	r3
 80012c0:	4603      	mov	r3, r0
}
 80012c2:	4618      	mov	r0, r3
 80012c4:	bd80      	pop	{r7, pc}
 80012c6:	bf00      	nop
 80012c8:	20000470 	.word	0x20000470

080012cc <BSP_LCD_LayerDefaultInit>:
  * @brief  Initializes the LCD layers.
  * @param  LayerIndex: the layer foreground or background. 
  * @param  FB_Address: the layer frame buffer.
  */
void BSP_LCD_LayerDefaultInit(uint16_t LayerIndex, uint32_t FB_Address)
{     
 80012cc:	b580      	push	{r7, lr}
 80012ce:	b090      	sub	sp, #64	@ 0x40
 80012d0:	af00      	add	r7, sp, #0
 80012d2:	4603      	mov	r3, r0
 80012d4:	6039      	str	r1, [r7, #0]
 80012d6:	80fb      	strh	r3, [r7, #6]
  LCD_LayerCfgTypeDef   Layercfg;

 /* Layer Init */
  Layercfg.WindowX0 = 0;
 80012d8:	2300      	movs	r3, #0
 80012da:	60fb      	str	r3, [r7, #12]
  Layercfg.WindowX1 = BSP_LCD_GetXSize();
 80012dc:	f7ff ffde 	bl	800129c <BSP_LCD_GetXSize>
 80012e0:	4603      	mov	r3, r0
 80012e2:	613b      	str	r3, [r7, #16]
  Layercfg.WindowY0 = 0;
 80012e4:	2300      	movs	r3, #0
 80012e6:	617b      	str	r3, [r7, #20]
  Layercfg.WindowY1 = BSP_LCD_GetYSize();
 80012e8:	f7ff ffe4 	bl	80012b4 <BSP_LCD_GetYSize>
 80012ec:	4603      	mov	r3, r0
 80012ee:	61bb      	str	r3, [r7, #24]
  Layercfg.PixelFormat = LTDC_PIXEL_FORMAT_ARGB8888;
 80012f0:	2300      	movs	r3, #0
 80012f2:	61fb      	str	r3, [r7, #28]
  Layercfg.FBStartAdress = FB_Address;
 80012f4:	683b      	ldr	r3, [r7, #0]
 80012f6:	633b      	str	r3, [r7, #48]	@ 0x30
  Layercfg.Alpha = 255;
 80012f8:	23ff      	movs	r3, #255	@ 0xff
 80012fa:	623b      	str	r3, [r7, #32]
  Layercfg.Alpha0 = 0;
 80012fc:	2300      	movs	r3, #0
 80012fe:	627b      	str	r3, [r7, #36]	@ 0x24
  Layercfg.Backcolor.Blue = 0;
 8001300:	2300      	movs	r3, #0
 8001302:	f887 303c 	strb.w	r3, [r7, #60]	@ 0x3c
  Layercfg.Backcolor.Green = 0;
 8001306:	2300      	movs	r3, #0
 8001308:	f887 303d 	strb.w	r3, [r7, #61]	@ 0x3d
  Layercfg.Backcolor.Red = 0;
 800130c:	2300      	movs	r3, #0
 800130e:	f887 303e 	strb.w	r3, [r7, #62]	@ 0x3e
  Layercfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_PAxCA;
 8001312:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 8001316:	62bb      	str	r3, [r7, #40]	@ 0x28
  Layercfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_PAxCA;
 8001318:	2307      	movs	r3, #7
 800131a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  Layercfg.ImageWidth = BSP_LCD_GetXSize();
 800131c:	f7ff ffbe 	bl	800129c <BSP_LCD_GetXSize>
 8001320:	4603      	mov	r3, r0
 8001322:	637b      	str	r3, [r7, #52]	@ 0x34
  Layercfg.ImageHeight = BSP_LCD_GetYSize();
 8001324:	f7ff ffc6 	bl	80012b4 <BSP_LCD_GetYSize>
 8001328:	4603      	mov	r3, r0
 800132a:	63bb      	str	r3, [r7, #56]	@ 0x38
  
  HAL_LTDC_ConfigLayer(&LtdcHandler, &Layercfg, LayerIndex); 
 800132c:	88fa      	ldrh	r2, [r7, #6]
 800132e:	f107 030c 	add.w	r3, r7, #12
 8001332:	4619      	mov	r1, r3
 8001334:	4814      	ldr	r0, [pc, #80]	@ (8001388 <BSP_LCD_LayerDefaultInit+0xbc>)
 8001336:	f002 fda5 	bl	8003e84 <HAL_LTDC_ConfigLayer>

  DrawProp[LayerIndex].BackColor = LCD_COLOR_WHITE;
 800133a:	88fa      	ldrh	r2, [r7, #6]
 800133c:	4913      	ldr	r1, [pc, #76]	@ (800138c <BSP_LCD_LayerDefaultInit+0xc0>)
 800133e:	4613      	mov	r3, r2
 8001340:	005b      	lsls	r3, r3, #1
 8001342:	4413      	add	r3, r2
 8001344:	009b      	lsls	r3, r3, #2
 8001346:	440b      	add	r3, r1
 8001348:	3304      	adds	r3, #4
 800134a:	f04f 32ff 	mov.w	r2, #4294967295
 800134e:	601a      	str	r2, [r3, #0]
  DrawProp[LayerIndex].pFont     = &Font16;
 8001350:	88fa      	ldrh	r2, [r7, #6]
 8001352:	490e      	ldr	r1, [pc, #56]	@ (800138c <BSP_LCD_LayerDefaultInit+0xc0>)
 8001354:	4613      	mov	r3, r2
 8001356:	005b      	lsls	r3, r3, #1
 8001358:	4413      	add	r3, r2
 800135a:	009b      	lsls	r3, r3, #2
 800135c:	440b      	add	r3, r1
 800135e:	3308      	adds	r3, #8
 8001360:	4a0b      	ldr	r2, [pc, #44]	@ (8001390 <BSP_LCD_LayerDefaultInit+0xc4>)
 8001362:	601a      	str	r2, [r3, #0]
  DrawProp[LayerIndex].TextColor = LCD_COLOR_BLACK;
 8001364:	88fa      	ldrh	r2, [r7, #6]
 8001366:	4909      	ldr	r1, [pc, #36]	@ (800138c <BSP_LCD_LayerDefaultInit+0xc0>)
 8001368:	4613      	mov	r3, r2
 800136a:	005b      	lsls	r3, r3, #1
 800136c:	4413      	add	r3, r2
 800136e:	009b      	lsls	r3, r3, #2
 8001370:	440b      	add	r3, r1
 8001372:	f04f 427f 	mov.w	r2, #4278190080	@ 0xff000000
 8001376:	601a      	str	r2, [r3, #0]

  /* Dithering activation */
  HAL_LTDC_EnableDither(&LtdcHandler);
 8001378:	4803      	ldr	r0, [pc, #12]	@ (8001388 <BSP_LCD_LayerDefaultInit+0xbc>)
 800137a:	f002 fdc1 	bl	8003f00 <HAL_LTDC_EnableDither>
}
 800137e:	bf00      	nop
 8001380:	3740      	adds	r7, #64	@ 0x40
 8001382:	46bd      	mov	sp, r7
 8001384:	bd80      	pop	{r7, pc}
 8001386:	bf00      	nop
 8001388:	2000033c 	.word	0x2000033c
 800138c:	20000458 	.word	0x20000458
 8001390:	20000000 	.word	0x20000000

08001394 <BSP_LCD_SelectLayer>:
/**
  * @brief  Selects the LCD Layer.
  * @param  LayerIndex: the Layer foreground or background.
  */
void BSP_LCD_SelectLayer(uint32_t LayerIndex)
{
 8001394:	b480      	push	{r7}
 8001396:	b083      	sub	sp, #12
 8001398:	af00      	add	r7, sp, #0
 800139a:	6078      	str	r0, [r7, #4]
  ActiveLayer = LayerIndex;
 800139c:	4a04      	ldr	r2, [pc, #16]	@ (80013b0 <BSP_LCD_SelectLayer+0x1c>)
 800139e:	687b      	ldr	r3, [r7, #4]
 80013a0:	6013      	str	r3, [r2, #0]
}
 80013a2:	bf00      	nop
 80013a4:	370c      	adds	r7, #12
 80013a6:	46bd      	mov	sp, r7
 80013a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013ac:	4770      	bx	lr
 80013ae:	bf00      	nop
 80013b0:	20000454 	.word	0x20000454

080013b4 <BSP_LCD_SetTextColor>:
/**
  * @brief  Sets the Text color.
  * @param  Color: the Text color code ARGB(8-8-8-8)
  */
void BSP_LCD_SetTextColor(uint32_t Color)
{
 80013b4:	b480      	push	{r7}
 80013b6:	b083      	sub	sp, #12
 80013b8:	af00      	add	r7, sp, #0
 80013ba:	6078      	str	r0, [r7, #4]
  DrawProp[ActiveLayer].TextColor = Color;
 80013bc:	4b07      	ldr	r3, [pc, #28]	@ (80013dc <BSP_LCD_SetTextColor+0x28>)
 80013be:	681a      	ldr	r2, [r3, #0]
 80013c0:	4907      	ldr	r1, [pc, #28]	@ (80013e0 <BSP_LCD_SetTextColor+0x2c>)
 80013c2:	4613      	mov	r3, r2
 80013c4:	005b      	lsls	r3, r3, #1
 80013c6:	4413      	add	r3, r2
 80013c8:	009b      	lsls	r3, r3, #2
 80013ca:	440b      	add	r3, r1
 80013cc:	687a      	ldr	r2, [r7, #4]
 80013ce:	601a      	str	r2, [r3, #0]
}
 80013d0:	bf00      	nop
 80013d2:	370c      	adds	r7, #12
 80013d4:	46bd      	mov	sp, r7
 80013d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013da:	4770      	bx	lr
 80013dc:	20000454 	.word	0x20000454
 80013e0:	20000458 	.word	0x20000458

080013e4 <BSP_LCD_GetFont>:
/**
  * @brief  Gets the Text Font.
  * @retval Layer font
  */
sFONT *BSP_LCD_GetFont(void)
{
 80013e4:	b480      	push	{r7}
 80013e6:	af00      	add	r7, sp, #0
  return DrawProp[ActiveLayer].pFont;
 80013e8:	4b07      	ldr	r3, [pc, #28]	@ (8001408 <BSP_LCD_GetFont+0x24>)
 80013ea:	681a      	ldr	r2, [r3, #0]
 80013ec:	4907      	ldr	r1, [pc, #28]	@ (800140c <BSP_LCD_GetFont+0x28>)
 80013ee:	4613      	mov	r3, r2
 80013f0:	005b      	lsls	r3, r3, #1
 80013f2:	4413      	add	r3, r2
 80013f4:	009b      	lsls	r3, r3, #2
 80013f6:	440b      	add	r3, r1
 80013f8:	3308      	adds	r3, #8
 80013fa:	681b      	ldr	r3, [r3, #0]
}
 80013fc:	4618      	mov	r0, r3
 80013fe:	46bd      	mov	sp, r7
 8001400:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001404:	4770      	bx	lr
 8001406:	bf00      	nop
 8001408:	20000454 	.word	0x20000454
 800140c:	20000458 	.word	0x20000458

08001410 <BSP_LCD_Clear>:
/**
  * @brief  Clears the hole LCD.
  * @param  Color: the color of the background
  */
void BSP_LCD_Clear(uint32_t Color)
{ 
 8001410:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001412:	b085      	sub	sp, #20
 8001414:	af02      	add	r7, sp, #8
 8001416:	6078      	str	r0, [r7, #4]
  /* Clear the LCD */ 
  FillBuffer(ActiveLayer, (uint32_t *)(LtdcHandler.LayerCfg[ActiveLayer].FBStartAdress), BSP_LCD_GetXSize(), BSP_LCD_GetYSize(), 0, Color);
 8001418:	4b0f      	ldr	r3, [pc, #60]	@ (8001458 <BSP_LCD_Clear+0x48>)
 800141a:	681c      	ldr	r4, [r3, #0]
 800141c:	4b0e      	ldr	r3, [pc, #56]	@ (8001458 <BSP_LCD_Clear+0x48>)
 800141e:	681b      	ldr	r3, [r3, #0]
 8001420:	4a0e      	ldr	r2, [pc, #56]	@ (800145c <BSP_LCD_Clear+0x4c>)
 8001422:	2134      	movs	r1, #52	@ 0x34
 8001424:	fb01 f303 	mul.w	r3, r1, r3
 8001428:	4413      	add	r3, r2
 800142a:	335c      	adds	r3, #92	@ 0x5c
 800142c:	681b      	ldr	r3, [r3, #0]
 800142e:	461e      	mov	r6, r3
 8001430:	f7ff ff34 	bl	800129c <BSP_LCD_GetXSize>
 8001434:	4605      	mov	r5, r0
 8001436:	f7ff ff3d 	bl	80012b4 <BSP_LCD_GetYSize>
 800143a:	4602      	mov	r2, r0
 800143c:	687b      	ldr	r3, [r7, #4]
 800143e:	9301      	str	r3, [sp, #4]
 8001440:	2300      	movs	r3, #0
 8001442:	9300      	str	r3, [sp, #0]
 8001444:	4613      	mov	r3, r2
 8001446:	462a      	mov	r2, r5
 8001448:	4631      	mov	r1, r6
 800144a:	4620      	mov	r0, r4
 800144c:	f000 fad8 	bl	8001a00 <FillBuffer>
}
 8001450:	bf00      	nop
 8001452:	370c      	adds	r7, #12
 8001454:	46bd      	mov	sp, r7
 8001456:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001458:	20000454 	.word	0x20000454
 800145c:	2000033c 	.word	0x2000033c

08001460 <BSP_LCD_DisplayChar>:
  * @param  Xpos: start column address
  * @param  Ypos: the Line where to display the character shape
  * @param  Ascii: character ascii code, must be between 0x20 and 0x7E
  */
void BSP_LCD_DisplayChar(uint16_t Xpos, uint16_t Ypos, uint8_t Ascii)
{
 8001460:	b590      	push	{r4, r7, lr}
 8001462:	b083      	sub	sp, #12
 8001464:	af00      	add	r7, sp, #0
 8001466:	4603      	mov	r3, r0
 8001468:	80fb      	strh	r3, [r7, #6]
 800146a:	460b      	mov	r3, r1
 800146c:	80bb      	strh	r3, [r7, #4]
 800146e:	4613      	mov	r3, r2
 8001470:	70fb      	strb	r3, [r7, #3]
  DrawChar(Xpos, Ypos, &DrawProp[ActiveLayer].pFont->table[(Ascii-' ') *\
 8001472:	4b1b      	ldr	r3, [pc, #108]	@ (80014e0 <BSP_LCD_DisplayChar+0x80>)
 8001474:	681a      	ldr	r2, [r3, #0]
 8001476:	491b      	ldr	r1, [pc, #108]	@ (80014e4 <BSP_LCD_DisplayChar+0x84>)
 8001478:	4613      	mov	r3, r2
 800147a:	005b      	lsls	r3, r3, #1
 800147c:	4413      	add	r3, r2
 800147e:	009b      	lsls	r3, r3, #2
 8001480:	440b      	add	r3, r1
 8001482:	3308      	adds	r3, #8
 8001484:	681b      	ldr	r3, [r3, #0]
 8001486:	6819      	ldr	r1, [r3, #0]
 8001488:	78fb      	ldrb	r3, [r7, #3]
 800148a:	f1a3 0020 	sub.w	r0, r3, #32
              DrawProp[ActiveLayer].pFont->Height * ((DrawProp[ActiveLayer].pFont->Width + 7) / 8)]);
 800148e:	4b14      	ldr	r3, [pc, #80]	@ (80014e0 <BSP_LCD_DisplayChar+0x80>)
 8001490:	681a      	ldr	r2, [r3, #0]
 8001492:	4c14      	ldr	r4, [pc, #80]	@ (80014e4 <BSP_LCD_DisplayChar+0x84>)
 8001494:	4613      	mov	r3, r2
 8001496:	005b      	lsls	r3, r3, #1
 8001498:	4413      	add	r3, r2
 800149a:	009b      	lsls	r3, r3, #2
 800149c:	4423      	add	r3, r4
 800149e:	3308      	adds	r3, #8
 80014a0:	681b      	ldr	r3, [r3, #0]
 80014a2:	88db      	ldrh	r3, [r3, #6]
  DrawChar(Xpos, Ypos, &DrawProp[ActiveLayer].pFont->table[(Ascii-' ') *\
 80014a4:	fb03 f000 	mul.w	r0, r3, r0
              DrawProp[ActiveLayer].pFont->Height * ((DrawProp[ActiveLayer].pFont->Width + 7) / 8)]);
 80014a8:	4b0d      	ldr	r3, [pc, #52]	@ (80014e0 <BSP_LCD_DisplayChar+0x80>)
 80014aa:	681a      	ldr	r2, [r3, #0]
 80014ac:	4c0d      	ldr	r4, [pc, #52]	@ (80014e4 <BSP_LCD_DisplayChar+0x84>)
 80014ae:	4613      	mov	r3, r2
 80014b0:	005b      	lsls	r3, r3, #1
 80014b2:	4413      	add	r3, r2
 80014b4:	009b      	lsls	r3, r3, #2
 80014b6:	4423      	add	r3, r4
 80014b8:	3308      	adds	r3, #8
 80014ba:	681b      	ldr	r3, [r3, #0]
 80014bc:	889b      	ldrh	r3, [r3, #4]
 80014be:	3307      	adds	r3, #7
 80014c0:	2b00      	cmp	r3, #0
 80014c2:	da00      	bge.n	80014c6 <BSP_LCD_DisplayChar+0x66>
 80014c4:	3307      	adds	r3, #7
 80014c6:	10db      	asrs	r3, r3, #3
 80014c8:	fb00 f303 	mul.w	r3, r0, r3
  DrawChar(Xpos, Ypos, &DrawProp[ActiveLayer].pFont->table[(Ascii-' ') *\
 80014cc:	18ca      	adds	r2, r1, r3
 80014ce:	88b9      	ldrh	r1, [r7, #4]
 80014d0:	88fb      	ldrh	r3, [r7, #6]
 80014d2:	4618      	mov	r0, r3
 80014d4:	f000 f9da 	bl	800188c <DrawChar>
}
 80014d8:	bf00      	nop
 80014da:	370c      	adds	r7, #12
 80014dc:	46bd      	mov	sp, r7
 80014de:	bd90      	pop	{r4, r7, pc}
 80014e0:	20000454 	.word	0x20000454
 80014e4:	20000458 	.word	0x20000458

080014e8 <BSP_LCD_DisplayStringAt>:
  *                @arg CENTER_MODE 
  *                @arg RIGHT_MODE
  *                @arg LEFT_MODE   
  */
void BSP_LCD_DisplayStringAt(uint16_t X, uint16_t Y, uint8_t *pText, Text_AlignModeTypdef mode)
{
 80014e8:	b5b0      	push	{r4, r5, r7, lr}
 80014ea:	b088      	sub	sp, #32
 80014ec:	af00      	add	r7, sp, #0
 80014ee:	60ba      	str	r2, [r7, #8]
 80014f0:	461a      	mov	r2, r3
 80014f2:	4603      	mov	r3, r0
 80014f4:	81fb      	strh	r3, [r7, #14]
 80014f6:	460b      	mov	r3, r1
 80014f8:	81bb      	strh	r3, [r7, #12]
 80014fa:	4613      	mov	r3, r2
 80014fc:	71fb      	strb	r3, [r7, #7]
  uint16_t refcolumn = 1, i = 0;
 80014fe:	2301      	movs	r3, #1
 8001500:	83fb      	strh	r3, [r7, #30]
 8001502:	2300      	movs	r3, #0
 8001504:	83bb      	strh	r3, [r7, #28]
  uint32_t size = 0, xsize = 0; 
 8001506:	2300      	movs	r3, #0
 8001508:	61bb      	str	r3, [r7, #24]
 800150a:	2300      	movs	r3, #0
 800150c:	613b      	str	r3, [r7, #16]
  uint8_t  *ptr = pText;
 800150e:	68bb      	ldr	r3, [r7, #8]
 8001510:	617b      	str	r3, [r7, #20]
  
  /* Get the text size */
  while (*ptr++) size ++ ;
 8001512:	e002      	b.n	800151a <BSP_LCD_DisplayStringAt+0x32>
 8001514:	69bb      	ldr	r3, [r7, #24]
 8001516:	3301      	adds	r3, #1
 8001518:	61bb      	str	r3, [r7, #24]
 800151a:	697b      	ldr	r3, [r7, #20]
 800151c:	1c5a      	adds	r2, r3, #1
 800151e:	617a      	str	r2, [r7, #20]
 8001520:	781b      	ldrb	r3, [r3, #0]
 8001522:	2b00      	cmp	r3, #0
 8001524:	d1f6      	bne.n	8001514 <BSP_LCD_DisplayStringAt+0x2c>
  
  /* Characters number per line */
  xsize = (BSP_LCD_GetXSize()/DrawProp[ActiveLayer].pFont->Width);
 8001526:	f7ff feb9 	bl	800129c <BSP_LCD_GetXSize>
 800152a:	4601      	mov	r1, r0
 800152c:	4b4b      	ldr	r3, [pc, #300]	@ (800165c <BSP_LCD_DisplayStringAt+0x174>)
 800152e:	681a      	ldr	r2, [r3, #0]
 8001530:	484b      	ldr	r0, [pc, #300]	@ (8001660 <BSP_LCD_DisplayStringAt+0x178>)
 8001532:	4613      	mov	r3, r2
 8001534:	005b      	lsls	r3, r3, #1
 8001536:	4413      	add	r3, r2
 8001538:	009b      	lsls	r3, r3, #2
 800153a:	4403      	add	r3, r0
 800153c:	3308      	adds	r3, #8
 800153e:	681b      	ldr	r3, [r3, #0]
 8001540:	889b      	ldrh	r3, [r3, #4]
 8001542:	fbb1 f3f3 	udiv	r3, r1, r3
 8001546:	613b      	str	r3, [r7, #16]
  
  switch (mode)
 8001548:	79fb      	ldrb	r3, [r7, #7]
 800154a:	2b03      	cmp	r3, #3
 800154c:	d01c      	beq.n	8001588 <BSP_LCD_DisplayStringAt+0xa0>
 800154e:	2b03      	cmp	r3, #3
 8001550:	dc33      	bgt.n	80015ba <BSP_LCD_DisplayStringAt+0xd2>
 8001552:	2b01      	cmp	r3, #1
 8001554:	d002      	beq.n	800155c <BSP_LCD_DisplayStringAt+0x74>
 8001556:	2b02      	cmp	r3, #2
 8001558:	d019      	beq.n	800158e <BSP_LCD_DisplayStringAt+0xa6>
 800155a:	e02e      	b.n	80015ba <BSP_LCD_DisplayStringAt+0xd2>
  {
  case CENTER_MODE:
    {
      refcolumn = X+ ((xsize - size)* DrawProp[ActiveLayer].pFont->Width) / 2;
 800155c:	693a      	ldr	r2, [r7, #16]
 800155e:	69bb      	ldr	r3, [r7, #24]
 8001560:	1ad1      	subs	r1, r2, r3
 8001562:	4b3e      	ldr	r3, [pc, #248]	@ (800165c <BSP_LCD_DisplayStringAt+0x174>)
 8001564:	681a      	ldr	r2, [r3, #0]
 8001566:	483e      	ldr	r0, [pc, #248]	@ (8001660 <BSP_LCD_DisplayStringAt+0x178>)
 8001568:	4613      	mov	r3, r2
 800156a:	005b      	lsls	r3, r3, #1
 800156c:	4413      	add	r3, r2
 800156e:	009b      	lsls	r3, r3, #2
 8001570:	4403      	add	r3, r0
 8001572:	3308      	adds	r3, #8
 8001574:	681b      	ldr	r3, [r3, #0]
 8001576:	889b      	ldrh	r3, [r3, #4]
 8001578:	fb01 f303 	mul.w	r3, r1, r3
 800157c:	085b      	lsrs	r3, r3, #1
 800157e:	b29a      	uxth	r2, r3
 8001580:	89fb      	ldrh	r3, [r7, #14]
 8001582:	4413      	add	r3, r2
 8001584:	83fb      	strh	r3, [r7, #30]
      break;
 8001586:	e01b      	b.n	80015c0 <BSP_LCD_DisplayStringAt+0xd8>
    }
  case LEFT_MODE:
    {
      refcolumn = X;
 8001588:	89fb      	ldrh	r3, [r7, #14]
 800158a:	83fb      	strh	r3, [r7, #30]
      break;
 800158c:	e018      	b.n	80015c0 <BSP_LCD_DisplayStringAt+0xd8>
    }
  case RIGHT_MODE:
    {
      refcolumn = X + ((xsize - size)*DrawProp[ActiveLayer].pFont->Width);
 800158e:	693a      	ldr	r2, [r7, #16]
 8001590:	69bb      	ldr	r3, [r7, #24]
 8001592:	1ad3      	subs	r3, r2, r3
 8001594:	b299      	uxth	r1, r3
 8001596:	4b31      	ldr	r3, [pc, #196]	@ (800165c <BSP_LCD_DisplayStringAt+0x174>)
 8001598:	681a      	ldr	r2, [r3, #0]
 800159a:	4831      	ldr	r0, [pc, #196]	@ (8001660 <BSP_LCD_DisplayStringAt+0x178>)
 800159c:	4613      	mov	r3, r2
 800159e:	005b      	lsls	r3, r3, #1
 80015a0:	4413      	add	r3, r2
 80015a2:	009b      	lsls	r3, r3, #2
 80015a4:	4403      	add	r3, r0
 80015a6:	3308      	adds	r3, #8
 80015a8:	681b      	ldr	r3, [r3, #0]
 80015aa:	889b      	ldrh	r3, [r3, #4]
 80015ac:	fb11 f303 	smulbb	r3, r1, r3
 80015b0:	b29a      	uxth	r2, r3
 80015b2:	89fb      	ldrh	r3, [r7, #14]
 80015b4:	4413      	add	r3, r2
 80015b6:	83fb      	strh	r3, [r7, #30]
      break;
 80015b8:	e002      	b.n	80015c0 <BSP_LCD_DisplayStringAt+0xd8>
    }
  default:
    {
      refcolumn = X;
 80015ba:	89fb      	ldrh	r3, [r7, #14]
 80015bc:	83fb      	strh	r3, [r7, #30]
      break;
 80015be:	bf00      	nop
    }
  }

  /* Send the string character by character on LCD */
  while ((*pText != 0) & (((BSP_LCD_GetXSize() - (i*DrawProp[ActiveLayer].pFont->Width)) & 0xFFFF) >= DrawProp[ActiveLayer].pFont->Width))
 80015c0:	e01a      	b.n	80015f8 <BSP_LCD_DisplayStringAt+0x110>
  {
    /* Display one character on LCD */
    BSP_LCD_DisplayChar(refcolumn, Y, *pText);
 80015c2:	68bb      	ldr	r3, [r7, #8]
 80015c4:	781a      	ldrb	r2, [r3, #0]
 80015c6:	89b9      	ldrh	r1, [r7, #12]
 80015c8:	8bfb      	ldrh	r3, [r7, #30]
 80015ca:	4618      	mov	r0, r3
 80015cc:	f7ff ff48 	bl	8001460 <BSP_LCD_DisplayChar>
    /* Decrement the column position by 16 */
    refcolumn += DrawProp[ActiveLayer].pFont->Width;
 80015d0:	4b22      	ldr	r3, [pc, #136]	@ (800165c <BSP_LCD_DisplayStringAt+0x174>)
 80015d2:	681a      	ldr	r2, [r3, #0]
 80015d4:	4922      	ldr	r1, [pc, #136]	@ (8001660 <BSP_LCD_DisplayStringAt+0x178>)
 80015d6:	4613      	mov	r3, r2
 80015d8:	005b      	lsls	r3, r3, #1
 80015da:	4413      	add	r3, r2
 80015dc:	009b      	lsls	r3, r3, #2
 80015de:	440b      	add	r3, r1
 80015e0:	3308      	adds	r3, #8
 80015e2:	681b      	ldr	r3, [r3, #0]
 80015e4:	889a      	ldrh	r2, [r3, #4]
 80015e6:	8bfb      	ldrh	r3, [r7, #30]
 80015e8:	4413      	add	r3, r2
 80015ea:	83fb      	strh	r3, [r7, #30]
    /* Point on the next character */
    pText++;
 80015ec:	68bb      	ldr	r3, [r7, #8]
 80015ee:	3301      	adds	r3, #1
 80015f0:	60bb      	str	r3, [r7, #8]
    i++;
 80015f2:	8bbb      	ldrh	r3, [r7, #28]
 80015f4:	3301      	adds	r3, #1
 80015f6:	83bb      	strh	r3, [r7, #28]
  while ((*pText != 0) & (((BSP_LCD_GetXSize() - (i*DrawProp[ActiveLayer].pFont->Width)) & 0xFFFF) >= DrawProp[ActiveLayer].pFont->Width))
 80015f8:	68bb      	ldr	r3, [r7, #8]
 80015fa:	781b      	ldrb	r3, [r3, #0]
 80015fc:	2b00      	cmp	r3, #0
 80015fe:	bf14      	ite	ne
 8001600:	2301      	movne	r3, #1
 8001602:	2300      	moveq	r3, #0
 8001604:	b2dc      	uxtb	r4, r3
 8001606:	f7ff fe49 	bl	800129c <BSP_LCD_GetXSize>
 800160a:	8bb9      	ldrh	r1, [r7, #28]
 800160c:	4b13      	ldr	r3, [pc, #76]	@ (800165c <BSP_LCD_DisplayStringAt+0x174>)
 800160e:	681a      	ldr	r2, [r3, #0]
 8001610:	4d13      	ldr	r5, [pc, #76]	@ (8001660 <BSP_LCD_DisplayStringAt+0x178>)
 8001612:	4613      	mov	r3, r2
 8001614:	005b      	lsls	r3, r3, #1
 8001616:	4413      	add	r3, r2
 8001618:	009b      	lsls	r3, r3, #2
 800161a:	442b      	add	r3, r5
 800161c:	3308      	adds	r3, #8
 800161e:	681b      	ldr	r3, [r3, #0]
 8001620:	889b      	ldrh	r3, [r3, #4]
 8001622:	fb01 f303 	mul.w	r3, r1, r3
 8001626:	1ac3      	subs	r3, r0, r3
 8001628:	b299      	uxth	r1, r3
 800162a:	4b0c      	ldr	r3, [pc, #48]	@ (800165c <BSP_LCD_DisplayStringAt+0x174>)
 800162c:	681a      	ldr	r2, [r3, #0]
 800162e:	480c      	ldr	r0, [pc, #48]	@ (8001660 <BSP_LCD_DisplayStringAt+0x178>)
 8001630:	4613      	mov	r3, r2
 8001632:	005b      	lsls	r3, r3, #1
 8001634:	4413      	add	r3, r2
 8001636:	009b      	lsls	r3, r3, #2
 8001638:	4403      	add	r3, r0
 800163a:	3308      	adds	r3, #8
 800163c:	681b      	ldr	r3, [r3, #0]
 800163e:	889b      	ldrh	r3, [r3, #4]
 8001640:	4299      	cmp	r1, r3
 8001642:	bf2c      	ite	cs
 8001644:	2301      	movcs	r3, #1
 8001646:	2300      	movcc	r3, #0
 8001648:	b2db      	uxtb	r3, r3
 800164a:	4023      	ands	r3, r4
 800164c:	b2db      	uxtb	r3, r3
 800164e:	2b00      	cmp	r3, #0
 8001650:	d1b7      	bne.n	80015c2 <BSP_LCD_DisplayStringAt+0xda>
  }  
}
 8001652:	bf00      	nop
 8001654:	bf00      	nop
 8001656:	3720      	adds	r7, #32
 8001658:	46bd      	mov	sp, r7
 800165a:	bdb0      	pop	{r4, r5, r7, pc}
 800165c:	20000454 	.word	0x20000454
 8001660:	20000458 	.word	0x20000458

08001664 <BSP_LCD_DisplayStringAtLine>:
  * @brief  Displays a maximum of 20 char on the LCD.
  * @param  Line: the Line where to display the character shape
  * @param  ptr: pointer to string to display on LCD
  */
void BSP_LCD_DisplayStringAtLine(uint16_t Line, uint8_t *ptr)
{
 8001664:	b580      	push	{r7, lr}
 8001666:	b082      	sub	sp, #8
 8001668:	af00      	add	r7, sp, #0
 800166a:	4603      	mov	r3, r0
 800166c:	6039      	str	r1, [r7, #0]
 800166e:	80fb      	strh	r3, [r7, #6]
  BSP_LCD_DisplayStringAt(0, LINE(Line), ptr, LEFT_MODE);
 8001670:	f7ff feb8 	bl	80013e4 <BSP_LCD_GetFont>
 8001674:	4603      	mov	r3, r0
 8001676:	88db      	ldrh	r3, [r3, #6]
 8001678:	88fa      	ldrh	r2, [r7, #6]
 800167a:	fb12 f303 	smulbb	r3, r2, r3
 800167e:	b299      	uxth	r1, r3
 8001680:	2303      	movs	r3, #3
 8001682:	683a      	ldr	r2, [r7, #0]
 8001684:	2000      	movs	r0, #0
 8001686:	f7ff ff2f 	bl	80014e8 <BSP_LCD_DisplayStringAt>
}
 800168a:	bf00      	nop
 800168c:	3708      	adds	r7, #8
 800168e:	46bd      	mov	sp, r7
 8001690:	bd80      	pop	{r7, pc}
	...

08001694 <BSP_LCD_MspInit>:

/**
  * @brief  Initializes the LTDC MSP.
  */
__weak void BSP_LCD_MspInit(void)
{
 8001694:	b580      	push	{r7, lr}
 8001696:	b08e      	sub	sp, #56	@ 0x38
 8001698:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStructure;
  
  /* Enable the LTDC and DMA2D Clock */
  __HAL_RCC_LTDC_CLK_ENABLE();
 800169a:	2300      	movs	r3, #0
 800169c:	623b      	str	r3, [r7, #32]
 800169e:	4b61      	ldr	r3, [pc, #388]	@ (8001824 <BSP_LCD_MspInit+0x190>)
 80016a0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80016a2:	4a60      	ldr	r2, [pc, #384]	@ (8001824 <BSP_LCD_MspInit+0x190>)
 80016a4:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80016a8:	6453      	str	r3, [r2, #68]	@ 0x44
 80016aa:	4b5e      	ldr	r3, [pc, #376]	@ (8001824 <BSP_LCD_MspInit+0x190>)
 80016ac:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80016ae:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80016b2:	623b      	str	r3, [r7, #32]
 80016b4:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_DMA2D_CLK_ENABLE(); 
 80016b6:	2300      	movs	r3, #0
 80016b8:	61fb      	str	r3, [r7, #28]
 80016ba:	4b5a      	ldr	r3, [pc, #360]	@ (8001824 <BSP_LCD_MspInit+0x190>)
 80016bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80016be:	4a59      	ldr	r2, [pc, #356]	@ (8001824 <BSP_LCD_MspInit+0x190>)
 80016c0:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 80016c4:	6313      	str	r3, [r2, #48]	@ 0x30
 80016c6:	4b57      	ldr	r3, [pc, #348]	@ (8001824 <BSP_LCD_MspInit+0x190>)
 80016c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80016ca:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80016ce:	61fb      	str	r3, [r7, #28]
 80016d0:	69fb      	ldr	r3, [r7, #28]
  
  /* Enable GPIOs clock */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80016d2:	2300      	movs	r3, #0
 80016d4:	61bb      	str	r3, [r7, #24]
 80016d6:	4b53      	ldr	r3, [pc, #332]	@ (8001824 <BSP_LCD_MspInit+0x190>)
 80016d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80016da:	4a52      	ldr	r2, [pc, #328]	@ (8001824 <BSP_LCD_MspInit+0x190>)
 80016dc:	f043 0301 	orr.w	r3, r3, #1
 80016e0:	6313      	str	r3, [r2, #48]	@ 0x30
 80016e2:	4b50      	ldr	r3, [pc, #320]	@ (8001824 <BSP_LCD_MspInit+0x190>)
 80016e4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80016e6:	f003 0301 	and.w	r3, r3, #1
 80016ea:	61bb      	str	r3, [r7, #24]
 80016ec:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80016ee:	2300      	movs	r3, #0
 80016f0:	617b      	str	r3, [r7, #20]
 80016f2:	4b4c      	ldr	r3, [pc, #304]	@ (8001824 <BSP_LCD_MspInit+0x190>)
 80016f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80016f6:	4a4b      	ldr	r2, [pc, #300]	@ (8001824 <BSP_LCD_MspInit+0x190>)
 80016f8:	f043 0302 	orr.w	r3, r3, #2
 80016fc:	6313      	str	r3, [r2, #48]	@ 0x30
 80016fe:	4b49      	ldr	r3, [pc, #292]	@ (8001824 <BSP_LCD_MspInit+0x190>)
 8001700:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001702:	f003 0302 	and.w	r3, r3, #2
 8001706:	617b      	str	r3, [r7, #20]
 8001708:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800170a:	2300      	movs	r3, #0
 800170c:	613b      	str	r3, [r7, #16]
 800170e:	4b45      	ldr	r3, [pc, #276]	@ (8001824 <BSP_LCD_MspInit+0x190>)
 8001710:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001712:	4a44      	ldr	r2, [pc, #272]	@ (8001824 <BSP_LCD_MspInit+0x190>)
 8001714:	f043 0304 	orr.w	r3, r3, #4
 8001718:	6313      	str	r3, [r2, #48]	@ 0x30
 800171a:	4b42      	ldr	r3, [pc, #264]	@ (8001824 <BSP_LCD_MspInit+0x190>)
 800171c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800171e:	f003 0304 	and.w	r3, r3, #4
 8001722:	613b      	str	r3, [r7, #16]
 8001724:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001726:	2300      	movs	r3, #0
 8001728:	60fb      	str	r3, [r7, #12]
 800172a:	4b3e      	ldr	r3, [pc, #248]	@ (8001824 <BSP_LCD_MspInit+0x190>)
 800172c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800172e:	4a3d      	ldr	r2, [pc, #244]	@ (8001824 <BSP_LCD_MspInit+0x190>)
 8001730:	f043 0308 	orr.w	r3, r3, #8
 8001734:	6313      	str	r3, [r2, #48]	@ 0x30
 8001736:	4b3b      	ldr	r3, [pc, #236]	@ (8001824 <BSP_LCD_MspInit+0x190>)
 8001738:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800173a:	f003 0308 	and.w	r3, r3, #8
 800173e:	60fb      	str	r3, [r7, #12]
 8001740:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001742:	2300      	movs	r3, #0
 8001744:	60bb      	str	r3, [r7, #8]
 8001746:	4b37      	ldr	r3, [pc, #220]	@ (8001824 <BSP_LCD_MspInit+0x190>)
 8001748:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800174a:	4a36      	ldr	r2, [pc, #216]	@ (8001824 <BSP_LCD_MspInit+0x190>)
 800174c:	f043 0320 	orr.w	r3, r3, #32
 8001750:	6313      	str	r3, [r2, #48]	@ 0x30
 8001752:	4b34      	ldr	r3, [pc, #208]	@ (8001824 <BSP_LCD_MspInit+0x190>)
 8001754:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001756:	f003 0320 	and.w	r3, r3, #32
 800175a:	60bb      	str	r3, [r7, #8]
 800175c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800175e:	2300      	movs	r3, #0
 8001760:	607b      	str	r3, [r7, #4]
 8001762:	4b30      	ldr	r3, [pc, #192]	@ (8001824 <BSP_LCD_MspInit+0x190>)
 8001764:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001766:	4a2f      	ldr	r2, [pc, #188]	@ (8001824 <BSP_LCD_MspInit+0x190>)
 8001768:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800176c:	6313      	str	r3, [r2, #48]	@ 0x30
 800176e:	4b2d      	ldr	r3, [pc, #180]	@ (8001824 <BSP_LCD_MspInit+0x190>)
 8001770:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001772:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001776:	607b      	str	r3, [r7, #4]
 8001778:	687b      	ldr	r3, [r7, #4]
            |  LCD_TFT CLK   <-> PG.07  | LCD_TFT DE   <->  PF.10 |
             -----------------------------------------------------
  */

  /* GPIOA configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_3 | GPIO_PIN_4 | GPIO_PIN_6 |
 800177a:	f641 0358 	movw	r3, #6232	@ 0x1858
 800177e:	627b      	str	r3, [r7, #36]	@ 0x24
                           GPIO_PIN_11 | GPIO_PIN_12;
  GPIO_InitStructure.Mode = GPIO_MODE_AF_PP;
 8001780:	2302      	movs	r3, #2
 8001782:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStructure.Pull = GPIO_NOPULL;
 8001784:	2300      	movs	r3, #0
 8001786:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStructure.Speed = GPIO_SPEED_FAST;
 8001788:	2302      	movs	r3, #2
 800178a:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStructure.Alternate= GPIO_AF14_LTDC;
 800178c:	230e      	movs	r3, #14
 800178e:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStructure);
 8001790:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001794:	4619      	mov	r1, r3
 8001796:	4824      	ldr	r0, [pc, #144]	@ (8001828 <BSP_LCD_MspInit+0x194>)
 8001798:	f001 fe12 	bl	80033c0 <HAL_GPIO_Init>

 /* GPIOB configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_8 | \
 800179c:	f44f 6370 	mov.w	r3, #3840	@ 0xf00
 80017a0:	627b      	str	r3, [r7, #36]	@ 0x24
                           GPIO_PIN_9 | GPIO_PIN_10 | GPIO_PIN_11;
  HAL_GPIO_Init(GPIOB, &GPIO_InitStructure);
 80017a2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80017a6:	4619      	mov	r1, r3
 80017a8:	4820      	ldr	r0, [pc, #128]	@ (800182c <BSP_LCD_MspInit+0x198>)
 80017aa:	f001 fe09 	bl	80033c0 <HAL_GPIO_Init>

 /* GPIOC configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_6 | GPIO_PIN_7 | GPIO_PIN_10;
 80017ae:	f44f 6398 	mov.w	r3, #1216	@ 0x4c0
 80017b2:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStructure);
 80017b4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80017b8:	4619      	mov	r1, r3
 80017ba:	481d      	ldr	r0, [pc, #116]	@ (8001830 <BSP_LCD_MspInit+0x19c>)
 80017bc:	f001 fe00 	bl	80033c0 <HAL_GPIO_Init>

 /* GPIOD configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_3 | GPIO_PIN_6;
 80017c0:	2348      	movs	r3, #72	@ 0x48
 80017c2:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStructure);
 80017c4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80017c8:	4619      	mov	r1, r3
 80017ca:	481a      	ldr	r0, [pc, #104]	@ (8001834 <BSP_LCD_MspInit+0x1a0>)
 80017cc:	f001 fdf8 	bl	80033c0 <HAL_GPIO_Init>
  
 /* GPIOF configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_10;
 80017d0:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80017d4:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOF, &GPIO_InitStructure);     
 80017d6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80017da:	4619      	mov	r1, r3
 80017dc:	4816      	ldr	r0, [pc, #88]	@ (8001838 <BSP_LCD_MspInit+0x1a4>)
 80017de:	f001 fdef 	bl	80033c0 <HAL_GPIO_Init>

 /* GPIOG configuration */  
  GPIO_InitStructure.Pin = GPIO_PIN_6 | GPIO_PIN_7 | \
 80017e2:	f44f 630c 	mov.w	r3, #2240	@ 0x8c0
 80017e6:	627b      	str	r3, [r7, #36]	@ 0x24
                           GPIO_PIN_11;
  HAL_GPIO_Init(GPIOG, &GPIO_InitStructure);
 80017e8:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80017ec:	4619      	mov	r1, r3
 80017ee:	4813      	ldr	r0, [pc, #76]	@ (800183c <BSP_LCD_MspInit+0x1a8>)
 80017f0:	f001 fde6 	bl	80033c0 <HAL_GPIO_Init>
 
  /* GPIOB configuration */  
  GPIO_InitStructure.Pin = GPIO_PIN_0 | GPIO_PIN_1;
 80017f4:	2303      	movs	r3, #3
 80017f6:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStructure.Alternate= GPIO_AF9_LTDC;
 80017f8:	2309      	movs	r3, #9
 80017fa:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStructure);
 80017fc:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001800:	4619      	mov	r1, r3
 8001802:	480a      	ldr	r0, [pc, #40]	@ (800182c <BSP_LCD_MspInit+0x198>)
 8001804:	f001 fddc 	bl	80033c0 <HAL_GPIO_Init>

  /* GPIOG configuration */  
  GPIO_InitStructure.Pin = GPIO_PIN_10 | GPIO_PIN_12;
 8001808:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 800180c:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOG, &GPIO_InitStructure);
 800180e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001812:	4619      	mov	r1, r3
 8001814:	4809      	ldr	r0, [pc, #36]	@ (800183c <BSP_LCD_MspInit+0x1a8>)
 8001816:	f001 fdd3 	bl	80033c0 <HAL_GPIO_Init>
}
 800181a:	bf00      	nop
 800181c:	3738      	adds	r7, #56	@ 0x38
 800181e:	46bd      	mov	sp, r7
 8001820:	bd80      	pop	{r7, pc}
 8001822:	bf00      	nop
 8001824:	40023800 	.word	0x40023800
 8001828:	40020000 	.word	0x40020000
 800182c:	40020400 	.word	0x40020400
 8001830:	40020800 	.word	0x40020800
 8001834:	40020c00 	.word	0x40020c00
 8001838:	40021400 	.word	0x40021400
 800183c:	40021800 	.word	0x40021800

08001840 <BSP_LCD_DrawPixel>:
  * @param  Xpos: the X position
  * @param  Ypos: the Y position
  * @param  RGB_Code: the pixel color in ARGB mode (8-8-8-8)  
  */
void BSP_LCD_DrawPixel(uint16_t Xpos, uint16_t Ypos, uint32_t RGB_Code)
{
 8001840:	b5b0      	push	{r4, r5, r7, lr}
 8001842:	b082      	sub	sp, #8
 8001844:	af00      	add	r7, sp, #0
 8001846:	4603      	mov	r3, r0
 8001848:	603a      	str	r2, [r7, #0]
 800184a:	80fb      	strh	r3, [r7, #6]
 800184c:	460b      	mov	r3, r1
 800184e:	80bb      	strh	r3, [r7, #4]
  /* Write data value to all SDRAM memory */
  *(__IO uint32_t*) (LtdcHandler.LayerCfg[ActiveLayer].FBStartAdress + (4*(Ypos*BSP_LCD_GetXSize() + Xpos))) = RGB_Code;
 8001850:	4b0c      	ldr	r3, [pc, #48]	@ (8001884 <BSP_LCD_DrawPixel+0x44>)
 8001852:	681b      	ldr	r3, [r3, #0]
 8001854:	4a0c      	ldr	r2, [pc, #48]	@ (8001888 <BSP_LCD_DrawPixel+0x48>)
 8001856:	2134      	movs	r1, #52	@ 0x34
 8001858:	fb01 f303 	mul.w	r3, r1, r3
 800185c:	4413      	add	r3, r2
 800185e:	335c      	adds	r3, #92	@ 0x5c
 8001860:	681c      	ldr	r4, [r3, #0]
 8001862:	88bd      	ldrh	r5, [r7, #4]
 8001864:	f7ff fd1a 	bl	800129c <BSP_LCD_GetXSize>
 8001868:	4603      	mov	r3, r0
 800186a:	fb03 f205 	mul.w	r2, r3, r5
 800186e:	88fb      	ldrh	r3, [r7, #6]
 8001870:	4413      	add	r3, r2
 8001872:	009b      	lsls	r3, r3, #2
 8001874:	4423      	add	r3, r4
 8001876:	461a      	mov	r2, r3
 8001878:	683b      	ldr	r3, [r7, #0]
 800187a:	6013      	str	r3, [r2, #0]
}
 800187c:	bf00      	nop
 800187e:	3708      	adds	r7, #8
 8001880:	46bd      	mov	sp, r7
 8001882:	bdb0      	pop	{r4, r5, r7, pc}
 8001884:	20000454 	.word	0x20000454
 8001888:	2000033c 	.word	0x2000033c

0800188c <DrawChar>:
  * @param  Xpos: the Line where to display the character shape
  * @param  Ypos: start column address
  * @param  c: pointer to the character data
  */
static void DrawChar(uint16_t Xpos, uint16_t Ypos, const uint8_t *c)
{
 800188c:	b580      	push	{r7, lr}
 800188e:	b088      	sub	sp, #32
 8001890:	af00      	add	r7, sp, #0
 8001892:	4603      	mov	r3, r0
 8001894:	603a      	str	r2, [r7, #0]
 8001896:	80fb      	strh	r3, [r7, #6]
 8001898:	460b      	mov	r3, r1
 800189a:	80bb      	strh	r3, [r7, #4]
  uint32_t i = 0, j = 0;
 800189c:	2300      	movs	r3, #0
 800189e:	61fb      	str	r3, [r7, #28]
 80018a0:	2300      	movs	r3, #0
 80018a2:	61bb      	str	r3, [r7, #24]
  uint16_t height, width;
  uint8_t offset;
  uint8_t *pchar;
  uint32_t line=0;
 80018a4:	2300      	movs	r3, #0
 80018a6:	617b      	str	r3, [r7, #20]

  height = DrawProp[ActiveLayer].pFont->Height;
 80018a8:	4b53      	ldr	r3, [pc, #332]	@ (80019f8 <DrawChar+0x16c>)
 80018aa:	681a      	ldr	r2, [r3, #0]
 80018ac:	4953      	ldr	r1, [pc, #332]	@ (80019fc <DrawChar+0x170>)
 80018ae:	4613      	mov	r3, r2
 80018b0:	005b      	lsls	r3, r3, #1
 80018b2:	4413      	add	r3, r2
 80018b4:	009b      	lsls	r3, r3, #2
 80018b6:	440b      	add	r3, r1
 80018b8:	3308      	adds	r3, #8
 80018ba:	681b      	ldr	r3, [r3, #0]
 80018bc:	88db      	ldrh	r3, [r3, #6]
 80018be:	827b      	strh	r3, [r7, #18]
  width  = DrawProp[ActiveLayer].pFont->Width;
 80018c0:	4b4d      	ldr	r3, [pc, #308]	@ (80019f8 <DrawChar+0x16c>)
 80018c2:	681a      	ldr	r2, [r3, #0]
 80018c4:	494d      	ldr	r1, [pc, #308]	@ (80019fc <DrawChar+0x170>)
 80018c6:	4613      	mov	r3, r2
 80018c8:	005b      	lsls	r3, r3, #1
 80018ca:	4413      	add	r3, r2
 80018cc:	009b      	lsls	r3, r3, #2
 80018ce:	440b      	add	r3, r1
 80018d0:	3308      	adds	r3, #8
 80018d2:	681b      	ldr	r3, [r3, #0]
 80018d4:	889b      	ldrh	r3, [r3, #4]
 80018d6:	823b      	strh	r3, [r7, #16]

  offset = 8 *((width + 7)/8) -  width ;
 80018d8:	8a3b      	ldrh	r3, [r7, #16]
 80018da:	3307      	adds	r3, #7
 80018dc:	2b00      	cmp	r3, #0
 80018de:	da00      	bge.n	80018e2 <DrawChar+0x56>
 80018e0:	3307      	adds	r3, #7
 80018e2:	10db      	asrs	r3, r3, #3
 80018e4:	b2db      	uxtb	r3, r3
 80018e6:	00db      	lsls	r3, r3, #3
 80018e8:	b2da      	uxtb	r2, r3
 80018ea:	8a3b      	ldrh	r3, [r7, #16]
 80018ec:	b2db      	uxtb	r3, r3
 80018ee:	1ad3      	subs	r3, r2, r3
 80018f0:	73fb      	strb	r3, [r7, #15]

  for(i = 0; i < height; i++)
 80018f2:	2300      	movs	r3, #0
 80018f4:	61fb      	str	r3, [r7, #28]
 80018f6:	e076      	b.n	80019e6 <DrawChar+0x15a>
  {
    pchar = ((uint8_t *)c + (width + 7)/8 * i);
 80018f8:	8a3b      	ldrh	r3, [r7, #16]
 80018fa:	3307      	adds	r3, #7
 80018fc:	2b00      	cmp	r3, #0
 80018fe:	da00      	bge.n	8001902 <DrawChar+0x76>
 8001900:	3307      	adds	r3, #7
 8001902:	10db      	asrs	r3, r3, #3
 8001904:	461a      	mov	r2, r3
 8001906:	69fb      	ldr	r3, [r7, #28]
 8001908:	fb02 f303 	mul.w	r3, r2, r3
 800190c:	683a      	ldr	r2, [r7, #0]
 800190e:	4413      	add	r3, r2
 8001910:	60bb      	str	r3, [r7, #8]

    switch(((width + 7)/8))
 8001912:	8a3b      	ldrh	r3, [r7, #16]
 8001914:	3307      	adds	r3, #7
 8001916:	2b00      	cmp	r3, #0
 8001918:	da00      	bge.n	800191c <DrawChar+0x90>
 800191a:	3307      	adds	r3, #7
 800191c:	10db      	asrs	r3, r3, #3
 800191e:	2b01      	cmp	r3, #1
 8001920:	d002      	beq.n	8001928 <DrawChar+0x9c>
 8001922:	2b02      	cmp	r3, #2
 8001924:	d004      	beq.n	8001930 <DrawChar+0xa4>
 8001926:	e00c      	b.n	8001942 <DrawChar+0xb6>
    {
    case 1:
      line =  pchar[0];      
 8001928:	68bb      	ldr	r3, [r7, #8]
 800192a:	781b      	ldrb	r3, [r3, #0]
 800192c:	617b      	str	r3, [r7, #20]
      break;
 800192e:	e016      	b.n	800195e <DrawChar+0xd2>
      
    case 2:
      line =  (pchar[0]<< 8) | pchar[1];
 8001930:	68bb      	ldr	r3, [r7, #8]
 8001932:	781b      	ldrb	r3, [r3, #0]
 8001934:	021b      	lsls	r3, r3, #8
 8001936:	68ba      	ldr	r2, [r7, #8]
 8001938:	3201      	adds	r2, #1
 800193a:	7812      	ldrb	r2, [r2, #0]
 800193c:	4313      	orrs	r3, r2
 800193e:	617b      	str	r3, [r7, #20]
      break;
 8001940:	e00d      	b.n	800195e <DrawChar+0xd2>

    case 3:
    default:
      line =  (pchar[0]<< 16) | (pchar[1]<< 8) | pchar[2];      
 8001942:	68bb      	ldr	r3, [r7, #8]
 8001944:	781b      	ldrb	r3, [r3, #0]
 8001946:	041a      	lsls	r2, r3, #16
 8001948:	68bb      	ldr	r3, [r7, #8]
 800194a:	3301      	adds	r3, #1
 800194c:	781b      	ldrb	r3, [r3, #0]
 800194e:	021b      	lsls	r3, r3, #8
 8001950:	4313      	orrs	r3, r2
 8001952:	68ba      	ldr	r2, [r7, #8]
 8001954:	3202      	adds	r2, #2
 8001956:	7812      	ldrb	r2, [r2, #0]
 8001958:	4313      	orrs	r3, r2
 800195a:	617b      	str	r3, [r7, #20]
      break;
 800195c:	bf00      	nop
    }

    for (j = 0; j < width; j++)
 800195e:	2300      	movs	r3, #0
 8001960:	61bb      	str	r3, [r7, #24]
 8001962:	e036      	b.n	80019d2 <DrawChar+0x146>
    {
      if(line & (1 << (width- j + offset- 1))) 
 8001964:	8a3a      	ldrh	r2, [r7, #16]
 8001966:	69bb      	ldr	r3, [r7, #24]
 8001968:	1ad2      	subs	r2, r2, r3
 800196a:	7bfb      	ldrb	r3, [r7, #15]
 800196c:	4413      	add	r3, r2
 800196e:	3b01      	subs	r3, #1
 8001970:	2201      	movs	r2, #1
 8001972:	fa02 f303 	lsl.w	r3, r2, r3
 8001976:	461a      	mov	r2, r3
 8001978:	697b      	ldr	r3, [r7, #20]
 800197a:	4013      	ands	r3, r2
 800197c:	2b00      	cmp	r3, #0
 800197e:	d012      	beq.n	80019a6 <DrawChar+0x11a>
      {
        BSP_LCD_DrawPixel((Xpos + j), Ypos, DrawProp[ActiveLayer].TextColor);
 8001980:	69bb      	ldr	r3, [r7, #24]
 8001982:	b29a      	uxth	r2, r3
 8001984:	88fb      	ldrh	r3, [r7, #6]
 8001986:	4413      	add	r3, r2
 8001988:	b298      	uxth	r0, r3
 800198a:	4b1b      	ldr	r3, [pc, #108]	@ (80019f8 <DrawChar+0x16c>)
 800198c:	681a      	ldr	r2, [r3, #0]
 800198e:	491b      	ldr	r1, [pc, #108]	@ (80019fc <DrawChar+0x170>)
 8001990:	4613      	mov	r3, r2
 8001992:	005b      	lsls	r3, r3, #1
 8001994:	4413      	add	r3, r2
 8001996:	009b      	lsls	r3, r3, #2
 8001998:	440b      	add	r3, r1
 800199a:	681a      	ldr	r2, [r3, #0]
 800199c:	88bb      	ldrh	r3, [r7, #4]
 800199e:	4619      	mov	r1, r3
 80019a0:	f7ff ff4e 	bl	8001840 <BSP_LCD_DrawPixel>
 80019a4:	e012      	b.n	80019cc <DrawChar+0x140>
      }
      else
      {
        BSP_LCD_DrawPixel((Xpos + j), Ypos, DrawProp[ActiveLayer].BackColor);
 80019a6:	69bb      	ldr	r3, [r7, #24]
 80019a8:	b29a      	uxth	r2, r3
 80019aa:	88fb      	ldrh	r3, [r7, #6]
 80019ac:	4413      	add	r3, r2
 80019ae:	b298      	uxth	r0, r3
 80019b0:	4b11      	ldr	r3, [pc, #68]	@ (80019f8 <DrawChar+0x16c>)
 80019b2:	681a      	ldr	r2, [r3, #0]
 80019b4:	4911      	ldr	r1, [pc, #68]	@ (80019fc <DrawChar+0x170>)
 80019b6:	4613      	mov	r3, r2
 80019b8:	005b      	lsls	r3, r3, #1
 80019ba:	4413      	add	r3, r2
 80019bc:	009b      	lsls	r3, r3, #2
 80019be:	440b      	add	r3, r1
 80019c0:	3304      	adds	r3, #4
 80019c2:	681a      	ldr	r2, [r3, #0]
 80019c4:	88bb      	ldrh	r3, [r7, #4]
 80019c6:	4619      	mov	r1, r3
 80019c8:	f7ff ff3a 	bl	8001840 <BSP_LCD_DrawPixel>
    for (j = 0; j < width; j++)
 80019cc:	69bb      	ldr	r3, [r7, #24]
 80019ce:	3301      	adds	r3, #1
 80019d0:	61bb      	str	r3, [r7, #24]
 80019d2:	8a3b      	ldrh	r3, [r7, #16]
 80019d4:	69ba      	ldr	r2, [r7, #24]
 80019d6:	429a      	cmp	r2, r3
 80019d8:	d3c4      	bcc.n	8001964 <DrawChar+0xd8>
      } 
    }
    Ypos++;
 80019da:	88bb      	ldrh	r3, [r7, #4]
 80019dc:	3301      	adds	r3, #1
 80019de:	80bb      	strh	r3, [r7, #4]
  for(i = 0; i < height; i++)
 80019e0:	69fb      	ldr	r3, [r7, #28]
 80019e2:	3301      	adds	r3, #1
 80019e4:	61fb      	str	r3, [r7, #28]
 80019e6:	8a7b      	ldrh	r3, [r7, #18]
 80019e8:	69fa      	ldr	r2, [r7, #28]
 80019ea:	429a      	cmp	r2, r3
 80019ec:	d384      	bcc.n	80018f8 <DrawChar+0x6c>
  }
}
 80019ee:	bf00      	nop
 80019f0:	bf00      	nop
 80019f2:	3720      	adds	r7, #32
 80019f4:	46bd      	mov	sp, r7
 80019f6:	bd80      	pop	{r7, pc}
 80019f8:	20000454 	.word	0x20000454
 80019fc:	20000458 	.word	0x20000458

08001a00 <FillBuffer>:
  * @param  ySize: buffer height
  * @param  OffLine: offset
  * @param  ColorIndex: color Index  
  */
static void FillBuffer(uint32_t LayerIndex, void * pDst, uint32_t xSize, uint32_t ySize, uint32_t OffLine, uint32_t ColorIndex) 
{
 8001a00:	b580      	push	{r7, lr}
 8001a02:	b086      	sub	sp, #24
 8001a04:	af02      	add	r7, sp, #8
 8001a06:	60f8      	str	r0, [r7, #12]
 8001a08:	60b9      	str	r1, [r7, #8]
 8001a0a:	607a      	str	r2, [r7, #4]
 8001a0c:	603b      	str	r3, [r7, #0]
  
  /* Register to memory mode with ARGB8888 as color Mode */ 
  Dma2dHandler.Init.Mode         = DMA2D_R2M;
 8001a0e:	4b16      	ldr	r3, [pc, #88]	@ (8001a68 <FillBuffer+0x68>)
 8001a10:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 8001a14:	605a      	str	r2, [r3, #4]
  Dma2dHandler.Init.ColorMode    = DMA2D_ARGB8888;
 8001a16:	4b14      	ldr	r3, [pc, #80]	@ (8001a68 <FillBuffer+0x68>)
 8001a18:	2200      	movs	r2, #0
 8001a1a:	609a      	str	r2, [r3, #8]
  Dma2dHandler.Init.OutputOffset = OffLine;      
 8001a1c:	4a12      	ldr	r2, [pc, #72]	@ (8001a68 <FillBuffer+0x68>)
 8001a1e:	69bb      	ldr	r3, [r7, #24]
 8001a20:	60d3      	str	r3, [r2, #12]
  
  Dma2dHandler.Instance = DMA2D; 
 8001a22:	4b11      	ldr	r3, [pc, #68]	@ (8001a68 <FillBuffer+0x68>)
 8001a24:	4a11      	ldr	r2, [pc, #68]	@ (8001a6c <FillBuffer+0x6c>)
 8001a26:	601a      	str	r2, [r3, #0]
  
  /* DMA2D Initialization */
  if(HAL_DMA2D_Init(&Dma2dHandler) == HAL_OK) 
 8001a28:	480f      	ldr	r0, [pc, #60]	@ (8001a68 <FillBuffer+0x68>)
 8001a2a:	f001 f92d 	bl	8002c88 <HAL_DMA2D_Init>
 8001a2e:	4603      	mov	r3, r0
 8001a30:	2b00      	cmp	r3, #0
 8001a32:	d115      	bne.n	8001a60 <FillBuffer+0x60>
  {
    if(HAL_DMA2D_ConfigLayer(&Dma2dHandler, LayerIndex) == HAL_OK) 
 8001a34:	68f9      	ldr	r1, [r7, #12]
 8001a36:	480c      	ldr	r0, [pc, #48]	@ (8001a68 <FillBuffer+0x68>)
 8001a38:	f001 fb94 	bl	8003164 <HAL_DMA2D_ConfigLayer>
 8001a3c:	4603      	mov	r3, r0
 8001a3e:	2b00      	cmp	r3, #0
 8001a40:	d10e      	bne.n	8001a60 <FillBuffer+0x60>
    {
      if (HAL_DMA2D_Start(&Dma2dHandler, ColorIndex, (uint32_t)pDst, xSize, ySize) == HAL_OK)
 8001a42:	68ba      	ldr	r2, [r7, #8]
 8001a44:	683b      	ldr	r3, [r7, #0]
 8001a46:	9300      	str	r3, [sp, #0]
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	69f9      	ldr	r1, [r7, #28]
 8001a4c:	4806      	ldr	r0, [pc, #24]	@ (8001a68 <FillBuffer+0x68>)
 8001a4e:	f001 f964 	bl	8002d1a <HAL_DMA2D_Start>
 8001a52:	4603      	mov	r3, r0
 8001a54:	2b00      	cmp	r3, #0
 8001a56:	d103      	bne.n	8001a60 <FillBuffer+0x60>
      {
        /* Polling For DMA transfer */  
        HAL_DMA2D_PollForTransfer(&Dma2dHandler, 10);
 8001a58:	210a      	movs	r1, #10
 8001a5a:	4803      	ldr	r0, [pc, #12]	@ (8001a68 <FillBuffer+0x68>)
 8001a5c:	f001 f988 	bl	8002d70 <HAL_DMA2D_PollForTransfer>
      }
    }
  } 
}
 8001a60:	bf00      	nop
 8001a62:	3710      	adds	r7, #16
 8001a64:	46bd      	mov	sp, r7
 8001a66:	bd80      	pop	{r7, pc}
 8001a68:	200003e4 	.word	0x200003e4
 8001a6c:	4002b000 	.word	0x4002b000

08001a70 <BSP_SDRAM_Init>:

/**
  * @brief  Initializes the SDRAM device.
  */
uint8_t BSP_SDRAM_Init(void)
{
 8001a70:	b580      	push	{r7, lr}
 8001a72:	af00      	add	r7, sp, #0
  static uint8_t sdramstatus = SDRAM_ERROR;

  /* SDRAM device configuration */
  SdramHandle.Instance = FMC_SDRAM_DEVICE;
 8001a74:	4b29      	ldr	r3, [pc, #164]	@ (8001b1c <BSP_SDRAM_Init+0xac>)
 8001a76:	4a2a      	ldr	r2, [pc, #168]	@ (8001b20 <BSP_SDRAM_Init+0xb0>)
 8001a78:	601a      	str	r2, [r3, #0]

  /* FMC Configuration -------------------------------------------------------*/
  /* FMC SDRAM Bank configuration */
  /* Timing configuration for 90 Mhz of SD clock frequency (180Mhz/2) */
  /* TMRD: 2 Clock cycles */
  Timing.LoadToActiveDelay    = 2;
 8001a7a:	4b2a      	ldr	r3, [pc, #168]	@ (8001b24 <BSP_SDRAM_Init+0xb4>)
 8001a7c:	2202      	movs	r2, #2
 8001a7e:	601a      	str	r2, [r3, #0]
  /* TXSR: min=70ns (7x11.11ns) */
  Timing.ExitSelfRefreshDelay = 7;
 8001a80:	4b28      	ldr	r3, [pc, #160]	@ (8001b24 <BSP_SDRAM_Init+0xb4>)
 8001a82:	2207      	movs	r2, #7
 8001a84:	605a      	str	r2, [r3, #4]
  /* TRAS: min=42ns (4x11.11ns) max=120k (ns) */
  Timing.SelfRefreshTime      = 4;
 8001a86:	4b27      	ldr	r3, [pc, #156]	@ (8001b24 <BSP_SDRAM_Init+0xb4>)
 8001a88:	2204      	movs	r2, #4
 8001a8a:	609a      	str	r2, [r3, #8]
  /* TRC:  min=70 (7x11.11ns) */
  Timing.RowCycleDelay        = 7;
 8001a8c:	4b25      	ldr	r3, [pc, #148]	@ (8001b24 <BSP_SDRAM_Init+0xb4>)
 8001a8e:	2207      	movs	r2, #7
 8001a90:	60da      	str	r2, [r3, #12]
  /* TWR:  min=1+ 7ns (1+1x11.11ns) */
  Timing.WriteRecoveryTime    = 2;
 8001a92:	4b24      	ldr	r3, [pc, #144]	@ (8001b24 <BSP_SDRAM_Init+0xb4>)
 8001a94:	2202      	movs	r2, #2
 8001a96:	611a      	str	r2, [r3, #16]
  /* TRP:  20ns => 2x11.11ns*/
  Timing.RPDelay              = 2;
 8001a98:	4b22      	ldr	r3, [pc, #136]	@ (8001b24 <BSP_SDRAM_Init+0xb4>)
 8001a9a:	2202      	movs	r2, #2
 8001a9c:	615a      	str	r2, [r3, #20]
  /* TRCD: 20ns => 2x11.11ns */
  Timing.RCDDelay             = 2;
 8001a9e:	4b21      	ldr	r3, [pc, #132]	@ (8001b24 <BSP_SDRAM_Init+0xb4>)
 8001aa0:	2202      	movs	r2, #2
 8001aa2:	619a      	str	r2, [r3, #24]
  
  /* FMC SDRAM control configuration */
  SdramHandle.Init.SDBank             = FMC_SDRAM_BANK2;
 8001aa4:	4b1d      	ldr	r3, [pc, #116]	@ (8001b1c <BSP_SDRAM_Init+0xac>)
 8001aa6:	2201      	movs	r2, #1
 8001aa8:	605a      	str	r2, [r3, #4]
  /* Row addressing: [7:0] */
  SdramHandle.Init.ColumnBitsNumber   = FMC_SDRAM_COLUMN_BITS_NUM_8;
 8001aaa:	4b1c      	ldr	r3, [pc, #112]	@ (8001b1c <BSP_SDRAM_Init+0xac>)
 8001aac:	2200      	movs	r2, #0
 8001aae:	609a      	str	r2, [r3, #8]
  /* Column addressing: [11:0] */
  SdramHandle.Init.RowBitsNumber      = FMC_SDRAM_ROW_BITS_NUM_12;
 8001ab0:	4b1a      	ldr	r3, [pc, #104]	@ (8001b1c <BSP_SDRAM_Init+0xac>)
 8001ab2:	2204      	movs	r2, #4
 8001ab4:	60da      	str	r2, [r3, #12]
  SdramHandle.Init.MemoryDataWidth    = SDRAM_MEMORY_WIDTH;
 8001ab6:	4b19      	ldr	r3, [pc, #100]	@ (8001b1c <BSP_SDRAM_Init+0xac>)
 8001ab8:	2210      	movs	r2, #16
 8001aba:	611a      	str	r2, [r3, #16]
  SdramHandle.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 8001abc:	4b17      	ldr	r3, [pc, #92]	@ (8001b1c <BSP_SDRAM_Init+0xac>)
 8001abe:	2240      	movs	r2, #64	@ 0x40
 8001ac0:	615a      	str	r2, [r3, #20]
  SdramHandle.Init.CASLatency         = SDRAM_CAS_LATENCY;
 8001ac2:	4b16      	ldr	r3, [pc, #88]	@ (8001b1c <BSP_SDRAM_Init+0xac>)
 8001ac4:	f44f 72c0 	mov.w	r2, #384	@ 0x180
 8001ac8:	619a      	str	r2, [r3, #24]
  SdramHandle.Init.WriteProtection    = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 8001aca:	4b14      	ldr	r3, [pc, #80]	@ (8001b1c <BSP_SDRAM_Init+0xac>)
 8001acc:	2200      	movs	r2, #0
 8001ace:	61da      	str	r2, [r3, #28]
  SdramHandle.Init.SDClockPeriod      = SDCLOCK_PERIOD;
 8001ad0:	4b12      	ldr	r3, [pc, #72]	@ (8001b1c <BSP_SDRAM_Init+0xac>)
 8001ad2:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8001ad6:	621a      	str	r2, [r3, #32]
  SdramHandle.Init.ReadBurst          = SDRAM_READBURST;
 8001ad8:	4b10      	ldr	r3, [pc, #64]	@ (8001b1c <BSP_SDRAM_Init+0xac>)
 8001ada:	2200      	movs	r2, #0
 8001adc:	625a      	str	r2, [r3, #36]	@ 0x24
  SdramHandle.Init.ReadPipeDelay      = FMC_SDRAM_RPIPE_DELAY_1;
 8001ade:	4b0f      	ldr	r3, [pc, #60]	@ (8001b1c <BSP_SDRAM_Init+0xac>)
 8001ae0:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001ae4:	629a      	str	r2, [r3, #40]	@ 0x28
                    
  /* SDRAM controller initialization */
  /* __weak function can be surcharged by the application code */
  BSP_SDRAM_MspInit(&SdramHandle, (void *)NULL);
 8001ae6:	2100      	movs	r1, #0
 8001ae8:	480c      	ldr	r0, [pc, #48]	@ (8001b1c <BSP_SDRAM_Init+0xac>)
 8001aea:	f000 f87f 	bl	8001bec <BSP_SDRAM_MspInit>
  if(HAL_SDRAM_Init(&SdramHandle, &Timing) != HAL_OK)
 8001aee:	490d      	ldr	r1, [pc, #52]	@ (8001b24 <BSP_SDRAM_Init+0xb4>)
 8001af0:	480a      	ldr	r0, [pc, #40]	@ (8001b1c <BSP_SDRAM_Init+0xac>)
 8001af2:	f003 fa6f 	bl	8004fd4 <HAL_SDRAM_Init>
 8001af6:	4603      	mov	r3, r0
 8001af8:	2b00      	cmp	r3, #0
 8001afa:	d003      	beq.n	8001b04 <BSP_SDRAM_Init+0x94>
  {
    sdramstatus = SDRAM_ERROR;
 8001afc:	4b0a      	ldr	r3, [pc, #40]	@ (8001b28 <BSP_SDRAM_Init+0xb8>)
 8001afe:	2201      	movs	r2, #1
 8001b00:	701a      	strb	r2, [r3, #0]
 8001b02:	e002      	b.n	8001b0a <BSP_SDRAM_Init+0x9a>
  }
  else
  {
    sdramstatus = SDRAM_OK;
 8001b04:	4b08      	ldr	r3, [pc, #32]	@ (8001b28 <BSP_SDRAM_Init+0xb8>)
 8001b06:	2200      	movs	r2, #0
 8001b08:	701a      	strb	r2, [r3, #0]
  }
  
  /* SDRAM initialization sequence */
  BSP_SDRAM_Initialization_sequence(REFRESH_COUNT);
 8001b0a:	f240 506a 	movw	r0, #1386	@ 0x56a
 8001b0e:	f000 f80d 	bl	8001b2c <BSP_SDRAM_Initialization_sequence>
  
  return sdramstatus;
 8001b12:	4b05      	ldr	r3, [pc, #20]	@ (8001b28 <BSP_SDRAM_Init+0xb8>)
 8001b14:	781b      	ldrb	r3, [r3, #0]
}
 8001b16:	4618      	mov	r0, r3
 8001b18:	bd80      	pop	{r7, pc}
 8001b1a:	bf00      	nop
 8001b1c:	20000474 	.word	0x20000474
 8001b20:	a0000140 	.word	0xa0000140
 8001b24:	200004a8 	.word	0x200004a8
 8001b28:	20000044 	.word	0x20000044

08001b2c <BSP_SDRAM_Initialization_sequence>:
/**
  * @brief  Programs the SDRAM device.
  * @param  RefreshCount: SDRAM refresh counter value 
  */
void BSP_SDRAM_Initialization_sequence(uint32_t RefreshCount)
{
 8001b2c:	b580      	push	{r7, lr}
 8001b2e:	b084      	sub	sp, #16
 8001b30:	af00      	add	r7, sp, #0
 8001b32:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpmrd =0;
 8001b34:	2300      	movs	r3, #0
 8001b36:	60fb      	str	r3, [r7, #12]
  
  /* Step 1:  Configure a clock configuration enable command */
  Command.CommandMode             = FMC_SDRAM_CMD_CLK_ENABLE;
 8001b38:	4b2a      	ldr	r3, [pc, #168]	@ (8001be4 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8001b3a:	2201      	movs	r2, #1
 8001b3c:	601a      	str	r2, [r3, #0]
  Command.CommandTarget           = FMC_SDRAM_CMD_TARGET_BANK2;
 8001b3e:	4b29      	ldr	r3, [pc, #164]	@ (8001be4 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8001b40:	2208      	movs	r2, #8
 8001b42:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber       = 1;
 8001b44:	4b27      	ldr	r3, [pc, #156]	@ (8001be4 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8001b46:	2201      	movs	r2, #1
 8001b48:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition  = 0;
 8001b4a:	4b26      	ldr	r3, [pc, #152]	@ (8001be4 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8001b4c:	2200      	movs	r2, #0
 8001b4e:	60da      	str	r2, [r3, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&SdramHandle, &Command, SDRAM_TIMEOUT);
 8001b50:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001b54:	4923      	ldr	r1, [pc, #140]	@ (8001be4 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8001b56:	4824      	ldr	r0, [pc, #144]	@ (8001be8 <BSP_SDRAM_Initialization_sequence+0xbc>)
 8001b58:	f003 fa70 	bl	800503c <HAL_SDRAM_SendCommand>

  /* Step 2: Insert 100 us minimum delay */ 
  /* Inserted delay is equal to 1 ms due to systick time base unit (ms) */
  HAL_Delay(1);
 8001b5c:	2001      	movs	r0, #1
 8001b5e:	f000 fd83 	bl	8002668 <HAL_Delay>

  /* Step 3: Configure a PALL (precharge all) command */ 
  Command.CommandMode             = FMC_SDRAM_CMD_PALL;
 8001b62:	4b20      	ldr	r3, [pc, #128]	@ (8001be4 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8001b64:	2202      	movs	r2, #2
 8001b66:	601a      	str	r2, [r3, #0]
  Command.CommandTarget           = FMC_SDRAM_CMD_TARGET_BANK2;
 8001b68:	4b1e      	ldr	r3, [pc, #120]	@ (8001be4 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8001b6a:	2208      	movs	r2, #8
 8001b6c:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber       = 1;
 8001b6e:	4b1d      	ldr	r3, [pc, #116]	@ (8001be4 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8001b70:	2201      	movs	r2, #1
 8001b72:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition  = 0;
 8001b74:	4b1b      	ldr	r3, [pc, #108]	@ (8001be4 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8001b76:	2200      	movs	r2, #0
 8001b78:	60da      	str	r2, [r3, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&SdramHandle, &Command, SDRAM_TIMEOUT);  
 8001b7a:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001b7e:	4919      	ldr	r1, [pc, #100]	@ (8001be4 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8001b80:	4819      	ldr	r0, [pc, #100]	@ (8001be8 <BSP_SDRAM_Initialization_sequence+0xbc>)
 8001b82:	f003 fa5b 	bl	800503c <HAL_SDRAM_SendCommand>
  
  /* Step 4: Configure an Auto Refresh command */ 
  Command.CommandMode             = FMC_SDRAM_CMD_AUTOREFRESH_MODE;
 8001b86:	4b17      	ldr	r3, [pc, #92]	@ (8001be4 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8001b88:	2203      	movs	r2, #3
 8001b8a:	601a      	str	r2, [r3, #0]
  Command.CommandTarget           = FMC_SDRAM_CMD_TARGET_BANK2;
 8001b8c:	4b15      	ldr	r3, [pc, #84]	@ (8001be4 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8001b8e:	2208      	movs	r2, #8
 8001b90:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber       = 4;
 8001b92:	4b14      	ldr	r3, [pc, #80]	@ (8001be4 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8001b94:	2204      	movs	r2, #4
 8001b96:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition  = 0;
 8001b98:	4b12      	ldr	r3, [pc, #72]	@ (8001be4 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8001b9a:	2200      	movs	r2, #0
 8001b9c:	60da      	str	r2, [r3, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&SdramHandle, &Command, SDRAM_TIMEOUT);
 8001b9e:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001ba2:	4910      	ldr	r1, [pc, #64]	@ (8001be4 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8001ba4:	4810      	ldr	r0, [pc, #64]	@ (8001be8 <BSP_SDRAM_Initialization_sequence+0xbc>)
 8001ba6:	f003 fa49 	bl	800503c <HAL_SDRAM_SendCommand>
  
  /* Step 5: Program the external memory mode register */
  tmpmrd = (uint32_t)SDRAM_MODEREG_BURST_LENGTH_1          |
 8001baa:	f44f 730c 	mov.w	r3, #560	@ 0x230
 8001bae:	60fb      	str	r3, [r7, #12]
                     SDRAM_MODEREG_BURST_TYPE_SEQUENTIAL   |
                     SDRAM_MODEREG_CAS_LATENCY_3           |
                     SDRAM_MODEREG_OPERATING_MODE_STANDARD |
                     SDRAM_MODEREG_WRITEBURST_MODE_SINGLE;
  
  Command.CommandMode             = FMC_SDRAM_CMD_LOAD_MODE;
 8001bb0:	4b0c      	ldr	r3, [pc, #48]	@ (8001be4 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8001bb2:	2204      	movs	r2, #4
 8001bb4:	601a      	str	r2, [r3, #0]
  Command.CommandTarget           = FMC_SDRAM_CMD_TARGET_BANK2;
 8001bb6:	4b0b      	ldr	r3, [pc, #44]	@ (8001be4 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8001bb8:	2208      	movs	r2, #8
 8001bba:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber       = 1;
 8001bbc:	4b09      	ldr	r3, [pc, #36]	@ (8001be4 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8001bbe:	2201      	movs	r2, #1
 8001bc0:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition  = tmpmrd;
 8001bc2:	68fb      	ldr	r3, [r7, #12]
 8001bc4:	4a07      	ldr	r2, [pc, #28]	@ (8001be4 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8001bc6:	60d3      	str	r3, [r2, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&SdramHandle, &Command, SDRAM_TIMEOUT);
 8001bc8:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001bcc:	4905      	ldr	r1, [pc, #20]	@ (8001be4 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8001bce:	4806      	ldr	r0, [pc, #24]	@ (8001be8 <BSP_SDRAM_Initialization_sequence+0xbc>)
 8001bd0:	f003 fa34 	bl	800503c <HAL_SDRAM_SendCommand>
  
  /* Step 6: Set the refresh rate counter */
  /* Set the device refresh rate */
  HAL_SDRAM_ProgramRefreshRate(&SdramHandle, RefreshCount); 
 8001bd4:	6879      	ldr	r1, [r7, #4]
 8001bd6:	4804      	ldr	r0, [pc, #16]	@ (8001be8 <BSP_SDRAM_Initialization_sequence+0xbc>)
 8001bd8:	f003 fa65 	bl	80050a6 <HAL_SDRAM_ProgramRefreshRate>
}
 8001bdc:	bf00      	nop
 8001bde:	3710      	adds	r7, #16
 8001be0:	46bd      	mov	sp, r7
 8001be2:	bd80      	pop	{r7, pc}
 8001be4:	200004c4 	.word	0x200004c4
 8001be8:	20000474 	.word	0x20000474

08001bec <BSP_SDRAM_MspInit>:
  * @note   This function can be surcharged by application code.
  * @param  hsdram: pointer on SDRAM handle
  * @param  Params: pointer on additional configuration parameters, can be NULL.
  */
__weak void BSP_SDRAM_MspInit(SDRAM_HandleTypeDef  *hsdram, void *Params)
{
 8001bec:	b580      	push	{r7, lr}
 8001bee:	b090      	sub	sp, #64	@ 0x40
 8001bf0:	af00      	add	r7, sp, #0
 8001bf2:	6078      	str	r0, [r7, #4]
 8001bf4:	6039      	str	r1, [r7, #0]
  static DMA_HandleTypeDef dmaHandle;
  GPIO_InitTypeDef GPIO_InitStructure;

  if(hsdram != (SDRAM_HandleTypeDef  *)NULL)
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	2b00      	cmp	r3, #0
 8001bfa:	f000 80ec 	beq.w	8001dd6 <BSP_SDRAM_MspInit+0x1ea>
  {
  /* Enable FMC clock */
  __HAL_RCC_FMC_CLK_ENABLE();
 8001bfe:	2300      	movs	r3, #0
 8001c00:	62bb      	str	r3, [r7, #40]	@ 0x28
 8001c02:	4b77      	ldr	r3, [pc, #476]	@ (8001de0 <BSP_SDRAM_MspInit+0x1f4>)
 8001c04:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001c06:	4a76      	ldr	r2, [pc, #472]	@ (8001de0 <BSP_SDRAM_MspInit+0x1f4>)
 8001c08:	f043 0301 	orr.w	r3, r3, #1
 8001c0c:	6393      	str	r3, [r2, #56]	@ 0x38
 8001c0e:	4b74      	ldr	r3, [pc, #464]	@ (8001de0 <BSP_SDRAM_MspInit+0x1f4>)
 8001c10:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001c12:	f003 0301 	and.w	r3, r3, #1
 8001c16:	62bb      	str	r3, [r7, #40]	@ 0x28
 8001c18:	6abb      	ldr	r3, [r7, #40]	@ 0x28

  /* Enable chosen DMAx clock */
  __DMAx_CLK_ENABLE();
 8001c1a:	2300      	movs	r3, #0
 8001c1c:	627b      	str	r3, [r7, #36]	@ 0x24
 8001c1e:	4b70      	ldr	r3, [pc, #448]	@ (8001de0 <BSP_SDRAM_MspInit+0x1f4>)
 8001c20:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c22:	4a6f      	ldr	r2, [pc, #444]	@ (8001de0 <BSP_SDRAM_MspInit+0x1f4>)
 8001c24:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8001c28:	6313      	str	r3, [r2, #48]	@ 0x30
 8001c2a:	4b6d      	ldr	r3, [pc, #436]	@ (8001de0 <BSP_SDRAM_MspInit+0x1f4>)
 8001c2c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c2e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001c32:	627b      	str	r3, [r7, #36]	@ 0x24
 8001c34:	6a7b      	ldr	r3, [r7, #36]	@ 0x24

  /* Enable GPIOs clock */
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001c36:	2300      	movs	r3, #0
 8001c38:	623b      	str	r3, [r7, #32]
 8001c3a:	4b69      	ldr	r3, [pc, #420]	@ (8001de0 <BSP_SDRAM_MspInit+0x1f4>)
 8001c3c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c3e:	4a68      	ldr	r2, [pc, #416]	@ (8001de0 <BSP_SDRAM_MspInit+0x1f4>)
 8001c40:	f043 0302 	orr.w	r3, r3, #2
 8001c44:	6313      	str	r3, [r2, #48]	@ 0x30
 8001c46:	4b66      	ldr	r3, [pc, #408]	@ (8001de0 <BSP_SDRAM_MspInit+0x1f4>)
 8001c48:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c4a:	f003 0302 	and.w	r3, r3, #2
 8001c4e:	623b      	str	r3, [r7, #32]
 8001c50:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001c52:	2300      	movs	r3, #0
 8001c54:	61fb      	str	r3, [r7, #28]
 8001c56:	4b62      	ldr	r3, [pc, #392]	@ (8001de0 <BSP_SDRAM_MspInit+0x1f4>)
 8001c58:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c5a:	4a61      	ldr	r2, [pc, #388]	@ (8001de0 <BSP_SDRAM_MspInit+0x1f4>)
 8001c5c:	f043 0304 	orr.w	r3, r3, #4
 8001c60:	6313      	str	r3, [r2, #48]	@ 0x30
 8001c62:	4b5f      	ldr	r3, [pc, #380]	@ (8001de0 <BSP_SDRAM_MspInit+0x1f4>)
 8001c64:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c66:	f003 0304 	and.w	r3, r3, #4
 8001c6a:	61fb      	str	r3, [r7, #28]
 8001c6c:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001c6e:	2300      	movs	r3, #0
 8001c70:	61bb      	str	r3, [r7, #24]
 8001c72:	4b5b      	ldr	r3, [pc, #364]	@ (8001de0 <BSP_SDRAM_MspInit+0x1f4>)
 8001c74:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c76:	4a5a      	ldr	r2, [pc, #360]	@ (8001de0 <BSP_SDRAM_MspInit+0x1f4>)
 8001c78:	f043 0308 	orr.w	r3, r3, #8
 8001c7c:	6313      	str	r3, [r2, #48]	@ 0x30
 8001c7e:	4b58      	ldr	r3, [pc, #352]	@ (8001de0 <BSP_SDRAM_MspInit+0x1f4>)
 8001c80:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c82:	f003 0308 	and.w	r3, r3, #8
 8001c86:	61bb      	str	r3, [r7, #24]
 8001c88:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001c8a:	2300      	movs	r3, #0
 8001c8c:	617b      	str	r3, [r7, #20]
 8001c8e:	4b54      	ldr	r3, [pc, #336]	@ (8001de0 <BSP_SDRAM_MspInit+0x1f4>)
 8001c90:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c92:	4a53      	ldr	r2, [pc, #332]	@ (8001de0 <BSP_SDRAM_MspInit+0x1f4>)
 8001c94:	f043 0310 	orr.w	r3, r3, #16
 8001c98:	6313      	str	r3, [r2, #48]	@ 0x30
 8001c9a:	4b51      	ldr	r3, [pc, #324]	@ (8001de0 <BSP_SDRAM_MspInit+0x1f4>)
 8001c9c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c9e:	f003 0310 	and.w	r3, r3, #16
 8001ca2:	617b      	str	r3, [r7, #20]
 8001ca4:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001ca6:	2300      	movs	r3, #0
 8001ca8:	613b      	str	r3, [r7, #16]
 8001caa:	4b4d      	ldr	r3, [pc, #308]	@ (8001de0 <BSP_SDRAM_MspInit+0x1f4>)
 8001cac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001cae:	4a4c      	ldr	r2, [pc, #304]	@ (8001de0 <BSP_SDRAM_MspInit+0x1f4>)
 8001cb0:	f043 0320 	orr.w	r3, r3, #32
 8001cb4:	6313      	str	r3, [r2, #48]	@ 0x30
 8001cb6:	4b4a      	ldr	r3, [pc, #296]	@ (8001de0 <BSP_SDRAM_MspInit+0x1f4>)
 8001cb8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001cba:	f003 0320 	and.w	r3, r3, #32
 8001cbe:	613b      	str	r3, [r7, #16]
 8001cc0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8001cc2:	2300      	movs	r3, #0
 8001cc4:	60fb      	str	r3, [r7, #12]
 8001cc6:	4b46      	ldr	r3, [pc, #280]	@ (8001de0 <BSP_SDRAM_MspInit+0x1f4>)
 8001cc8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001cca:	4a45      	ldr	r2, [pc, #276]	@ (8001de0 <BSP_SDRAM_MspInit+0x1f4>)
 8001ccc:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001cd0:	6313      	str	r3, [r2, #48]	@ 0x30
 8001cd2:	4b43      	ldr	r3, [pc, #268]	@ (8001de0 <BSP_SDRAM_MspInit+0x1f4>)
 8001cd4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001cd6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001cda:	60fb      	str	r3, [r7, #12]
 8001cdc:	68fb      	ldr	r3, [r7, #12]
 +-------------------+  
  
*/
  
  /* Common GPIO configuration */
  GPIO_InitStructure.Mode  = GPIO_MODE_AF_PP;
 8001cde:	2302      	movs	r3, #2
 8001ce0:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStructure.Speed = GPIO_SPEED_FAST;
 8001ce2:	2302      	movs	r3, #2
 8001ce4:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStructure.Pull  = GPIO_NOPULL;
 8001ce6:	2300      	movs	r3, #0
 8001ce8:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStructure.Alternate = GPIO_AF12_FMC;
 8001cea:	230c      	movs	r3, #12
 8001cec:	63fb      	str	r3, [r7, #60]	@ 0x3c

  /* GPIOB configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_5 | GPIO_PIN_6;
 8001cee:	2360      	movs	r3, #96	@ 0x60
 8001cf0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStructure);  
 8001cf2:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001cf6:	4619      	mov	r1, r3
 8001cf8:	483a      	ldr	r0, [pc, #232]	@ (8001de4 <BSP_SDRAM_MspInit+0x1f8>)
 8001cfa:	f001 fb61 	bl	80033c0 <HAL_GPIO_Init>

  /* GPIOC configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_0;      
 8001cfe:	2301      	movs	r3, #1
 8001d00:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStructure);  
 8001d02:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001d06:	4619      	mov	r1, r3
 8001d08:	4837      	ldr	r0, [pc, #220]	@ (8001de8 <BSP_SDRAM_MspInit+0x1fc>)
 8001d0a:	f001 fb59 	bl	80033c0 <HAL_GPIO_Init>
  
  /* GPIOD configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_0 | GPIO_PIN_1  | GPIO_PIN_8 |
 8001d0e:	f24c 7303 	movw	r3, #50947	@ 0xc703
 8001d12:	62fb      	str	r3, [r7, #44]	@ 0x2c
                           GPIO_PIN_9 | GPIO_PIN_10 | GPIO_PIN_14 |
                           GPIO_PIN_15;
  HAL_GPIO_Init(GPIOD, &GPIO_InitStructure);
 8001d14:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001d18:	4619      	mov	r1, r3
 8001d1a:	4834      	ldr	r0, [pc, #208]	@ (8001dec <BSP_SDRAM_MspInit+0x200>)
 8001d1c:	f001 fb50 	bl	80033c0 <HAL_GPIO_Init>

  /* GPIOE configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_0  | GPIO_PIN_1  | GPIO_PIN_7 |
 8001d20:	f64f 7383 	movw	r3, #65411	@ 0xff83
 8001d24:	62fb      	str	r3, [r7, #44]	@ 0x2c
                           GPIO_PIN_8  | GPIO_PIN_9  | GPIO_PIN_10 |
                           GPIO_PIN_11 | GPIO_PIN_12 | GPIO_PIN_13 |
                           GPIO_PIN_14 | GPIO_PIN_15;
  HAL_GPIO_Init(GPIOE, &GPIO_InitStructure);
 8001d26:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001d2a:	4619      	mov	r1, r3
 8001d2c:	4830      	ldr	r0, [pc, #192]	@ (8001df0 <BSP_SDRAM_MspInit+0x204>)
 8001d2e:	f001 fb47 	bl	80033c0 <HAL_GPIO_Init>

  /* GPIOF configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_0  | GPIO_PIN_1 | GPIO_PIN_2 | 
 8001d32:	f64f 033f 	movw	r3, #63551	@ 0xf83f
 8001d36:	62fb      	str	r3, [r7, #44]	@ 0x2c
                           GPIO_PIN_3  | GPIO_PIN_4 | GPIO_PIN_5 |
                           GPIO_PIN_11 | GPIO_PIN_12 | GPIO_PIN_13 |
                           GPIO_PIN_14 | GPIO_PIN_15;
  HAL_GPIO_Init(GPIOF, &GPIO_InitStructure);
 8001d38:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001d3c:	4619      	mov	r1, r3
 8001d3e:	482d      	ldr	r0, [pc, #180]	@ (8001df4 <BSP_SDRAM_MspInit+0x208>)
 8001d40:	f001 fb3e 	bl	80033c0 <HAL_GPIO_Init>

  /* GPIOG configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_4 |
 8001d44:	f248 1333 	movw	r3, #33075	@ 0x8133
 8001d48:	62fb      	str	r3, [r7, #44]	@ 0x2c
                           GPIO_PIN_5 | GPIO_PIN_8 | GPIO_PIN_15;
  HAL_GPIO_Init(GPIOG, &GPIO_InitStructure);
 8001d4a:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001d4e:	4619      	mov	r1, r3
 8001d50:	4829      	ldr	r0, [pc, #164]	@ (8001df8 <BSP_SDRAM_MspInit+0x20c>)
 8001d52:	f001 fb35 	bl	80033c0 <HAL_GPIO_Init>

  /* Configure common DMA parameters */
  dmaHandle.Init.Channel             = SDRAM_DMAx_CHANNEL;
 8001d56:	4b29      	ldr	r3, [pc, #164]	@ (8001dfc <BSP_SDRAM_MspInit+0x210>)
 8001d58:	2200      	movs	r2, #0
 8001d5a:	605a      	str	r2, [r3, #4]
  dmaHandle.Init.Direction           = DMA_MEMORY_TO_MEMORY;
 8001d5c:	4b27      	ldr	r3, [pc, #156]	@ (8001dfc <BSP_SDRAM_MspInit+0x210>)
 8001d5e:	2280      	movs	r2, #128	@ 0x80
 8001d60:	609a      	str	r2, [r3, #8]
  dmaHandle.Init.PeriphInc           = DMA_PINC_ENABLE;
 8001d62:	4b26      	ldr	r3, [pc, #152]	@ (8001dfc <BSP_SDRAM_MspInit+0x210>)
 8001d64:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001d68:	60da      	str	r2, [r3, #12]
  dmaHandle.Init.MemInc              = DMA_MINC_ENABLE;
 8001d6a:	4b24      	ldr	r3, [pc, #144]	@ (8001dfc <BSP_SDRAM_MspInit+0x210>)
 8001d6c:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001d70:	611a      	str	r2, [r3, #16]
  dmaHandle.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8001d72:	4b22      	ldr	r3, [pc, #136]	@ (8001dfc <BSP_SDRAM_MspInit+0x210>)
 8001d74:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8001d78:	615a      	str	r2, [r3, #20]
  dmaHandle.Init.MemDataAlignment    = DMA_MDATAALIGN_WORD;
 8001d7a:	4b20      	ldr	r3, [pc, #128]	@ (8001dfc <BSP_SDRAM_MspInit+0x210>)
 8001d7c:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8001d80:	619a      	str	r2, [r3, #24]
  dmaHandle.Init.Mode                = DMA_NORMAL;
 8001d82:	4b1e      	ldr	r3, [pc, #120]	@ (8001dfc <BSP_SDRAM_MspInit+0x210>)
 8001d84:	2200      	movs	r2, #0
 8001d86:	61da      	str	r2, [r3, #28]
  dmaHandle.Init.Priority            = DMA_PRIORITY_HIGH;
 8001d88:	4b1c      	ldr	r3, [pc, #112]	@ (8001dfc <BSP_SDRAM_MspInit+0x210>)
 8001d8a:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8001d8e:	621a      	str	r2, [r3, #32]
  dmaHandle.Init.FIFOMode            = DMA_FIFOMODE_DISABLE;
 8001d90:	4b1a      	ldr	r3, [pc, #104]	@ (8001dfc <BSP_SDRAM_MspInit+0x210>)
 8001d92:	2200      	movs	r2, #0
 8001d94:	625a      	str	r2, [r3, #36]	@ 0x24
  dmaHandle.Init.FIFOThreshold       = DMA_FIFO_THRESHOLD_FULL;
 8001d96:	4b19      	ldr	r3, [pc, #100]	@ (8001dfc <BSP_SDRAM_MspInit+0x210>)
 8001d98:	2203      	movs	r2, #3
 8001d9a:	629a      	str	r2, [r3, #40]	@ 0x28
  dmaHandle.Init.MemBurst            = DMA_MBURST_SINGLE;
 8001d9c:	4b17      	ldr	r3, [pc, #92]	@ (8001dfc <BSP_SDRAM_MspInit+0x210>)
 8001d9e:	2200      	movs	r2, #0
 8001da0:	62da      	str	r2, [r3, #44]	@ 0x2c
  dmaHandle.Init.PeriphBurst         = DMA_PBURST_SINGLE; 
 8001da2:	4b16      	ldr	r3, [pc, #88]	@ (8001dfc <BSP_SDRAM_MspInit+0x210>)
 8001da4:	2200      	movs	r2, #0
 8001da6:	631a      	str	r2, [r3, #48]	@ 0x30
  
  dmaHandle.Instance = SDRAM_DMAx_STREAM;
 8001da8:	4b14      	ldr	r3, [pc, #80]	@ (8001dfc <BSP_SDRAM_MspInit+0x210>)
 8001daa:	4a15      	ldr	r2, [pc, #84]	@ (8001e00 <BSP_SDRAM_MspInit+0x214>)
 8001dac:	601a      	str	r2, [r3, #0]
  
  /* Associate the DMA handle */
  __HAL_LINKDMA(hsdram, hdma, dmaHandle);
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	4a12      	ldr	r2, [pc, #72]	@ (8001dfc <BSP_SDRAM_MspInit+0x210>)
 8001db2:	631a      	str	r2, [r3, #48]	@ 0x30
 8001db4:	4a11      	ldr	r2, [pc, #68]	@ (8001dfc <BSP_SDRAM_MspInit+0x210>)
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	6393      	str	r3, [r2, #56]	@ 0x38
  
  /* Deinitialize the stream for new transfer */
  HAL_DMA_DeInit(&dmaHandle);
 8001dba:	4810      	ldr	r0, [pc, #64]	@ (8001dfc <BSP_SDRAM_MspInit+0x210>)
 8001dbc:	f000 fe54 	bl	8002a68 <HAL_DMA_DeInit>
  
  /* Configure the DMA stream */
  HAL_DMA_Init(&dmaHandle); 
 8001dc0:	480e      	ldr	r0, [pc, #56]	@ (8001dfc <BSP_SDRAM_MspInit+0x210>)
 8001dc2:	f000 fda3 	bl	800290c <HAL_DMA_Init>
  
  /* NVIC configuration for DMA transfer complete interrupt */
  HAL_NVIC_SetPriority(SDRAM_DMAx_IRQn, 0x0F, 0);
 8001dc6:	2200      	movs	r2, #0
 8001dc8:	210f      	movs	r1, #15
 8001dca:	2038      	movs	r0, #56	@ 0x38
 8001dcc:	f000 fd4b 	bl	8002866 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(SDRAM_DMAx_IRQn);
 8001dd0:	2038      	movs	r0, #56	@ 0x38
 8001dd2:	f000 fd64 	bl	800289e <HAL_NVIC_EnableIRQ>
  } /* of if(hsdram != (SDRAM_HandleTypeDef  *)NULL) */
}
 8001dd6:	bf00      	nop
 8001dd8:	3740      	adds	r7, #64	@ 0x40
 8001dda:	46bd      	mov	sp, r7
 8001ddc:	bd80      	pop	{r7, pc}
 8001dde:	bf00      	nop
 8001de0:	40023800 	.word	0x40023800
 8001de4:	40020400 	.word	0x40020400
 8001de8:	40020800 	.word	0x40020800
 8001dec:	40020c00 	.word	0x40020c00
 8001df0:	40021000 	.word	0x40021000
 8001df4:	40021400 	.word	0x40021400
 8001df8:	40021800 	.word	0x40021800
 8001dfc:	200004d4 	.word	0x200004d4
 8001e00:	40026410 	.word	0x40026410

08001e04 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001e04:	b580      	push	{r7, lr}
 8001e06:	b082      	sub	sp, #8
 8001e08:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001e0a:	2300      	movs	r3, #0
 8001e0c:	607b      	str	r3, [r7, #4]
 8001e0e:	4b12      	ldr	r3, [pc, #72]	@ (8001e58 <HAL_MspInit+0x54>)
 8001e10:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001e12:	4a11      	ldr	r2, [pc, #68]	@ (8001e58 <HAL_MspInit+0x54>)
 8001e14:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001e18:	6453      	str	r3, [r2, #68]	@ 0x44
 8001e1a:	4b0f      	ldr	r3, [pc, #60]	@ (8001e58 <HAL_MspInit+0x54>)
 8001e1c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001e1e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001e22:	607b      	str	r3, [r7, #4]
 8001e24:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001e26:	2300      	movs	r3, #0
 8001e28:	603b      	str	r3, [r7, #0]
 8001e2a:	4b0b      	ldr	r3, [pc, #44]	@ (8001e58 <HAL_MspInit+0x54>)
 8001e2c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e2e:	4a0a      	ldr	r2, [pc, #40]	@ (8001e58 <HAL_MspInit+0x54>)
 8001e30:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001e34:	6413      	str	r3, [r2, #64]	@ 0x40
 8001e36:	4b08      	ldr	r3, [pc, #32]	@ (8001e58 <HAL_MspInit+0x54>)
 8001e38:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e3a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001e3e:	603b      	str	r3, [r7, #0]
 8001e40:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8001e42:	2200      	movs	r2, #0
 8001e44:	210f      	movs	r1, #15
 8001e46:	f06f 0001 	mvn.w	r0, #1
 8001e4a:	f000 fd0c 	bl	8002866 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001e4e:	bf00      	nop
 8001e50:	3708      	adds	r7, #8
 8001e52:	46bd      	mov	sp, r7
 8001e54:	bd80      	pop	{r7, pc}
 8001e56:	bf00      	nop
 8001e58:	40023800 	.word	0x40023800

08001e5c <HAL_CRC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hcrc: CRC handle pointer
  * @retval None
  */
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
 8001e5c:	b480      	push	{r7}
 8001e5e:	b085      	sub	sp, #20
 8001e60:	af00      	add	r7, sp, #0
 8001e62:	6078      	str	r0, [r7, #4]
  if(hcrc->Instance==CRC)
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	681b      	ldr	r3, [r3, #0]
 8001e68:	4a0b      	ldr	r2, [pc, #44]	@ (8001e98 <HAL_CRC_MspInit+0x3c>)
 8001e6a:	4293      	cmp	r3, r2
 8001e6c:	d10d      	bne.n	8001e8a <HAL_CRC_MspInit+0x2e>
  {
    /* USER CODE BEGIN CRC_MspInit 0 */

    /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 8001e6e:	2300      	movs	r3, #0
 8001e70:	60fb      	str	r3, [r7, #12]
 8001e72:	4b0a      	ldr	r3, [pc, #40]	@ (8001e9c <HAL_CRC_MspInit+0x40>)
 8001e74:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e76:	4a09      	ldr	r2, [pc, #36]	@ (8001e9c <HAL_CRC_MspInit+0x40>)
 8001e78:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8001e7c:	6313      	str	r3, [r2, #48]	@ 0x30
 8001e7e:	4b07      	ldr	r3, [pc, #28]	@ (8001e9c <HAL_CRC_MspInit+0x40>)
 8001e80:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e82:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001e86:	60fb      	str	r3, [r7, #12]
 8001e88:	68fb      	ldr	r3, [r7, #12]

    /* USER CODE END CRC_MspInit 1 */

  }

}
 8001e8a:	bf00      	nop
 8001e8c:	3714      	adds	r7, #20
 8001e8e:	46bd      	mov	sp, r7
 8001e90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e94:	4770      	bx	lr
 8001e96:	bf00      	nop
 8001e98:	40023000 	.word	0x40023000
 8001e9c:	40023800 	.word	0x40023800

08001ea0 <HAL_DMA2D_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hdma2d: DMA2D handle pointer
  * @retval None
  */
void HAL_DMA2D_MspInit(DMA2D_HandleTypeDef* hdma2d)
{
 8001ea0:	b580      	push	{r7, lr}
 8001ea2:	b084      	sub	sp, #16
 8001ea4:	af00      	add	r7, sp, #0
 8001ea6:	6078      	str	r0, [r7, #4]
  if(hdma2d->Instance==DMA2D)
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	681b      	ldr	r3, [r3, #0]
 8001eac:	4a0e      	ldr	r2, [pc, #56]	@ (8001ee8 <HAL_DMA2D_MspInit+0x48>)
 8001eae:	4293      	cmp	r3, r2
 8001eb0:	d115      	bne.n	8001ede <HAL_DMA2D_MspInit+0x3e>
  {
    /* USER CODE BEGIN DMA2D_MspInit 0 */

    /* USER CODE END DMA2D_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DMA2D_CLK_ENABLE();
 8001eb2:	2300      	movs	r3, #0
 8001eb4:	60fb      	str	r3, [r7, #12]
 8001eb6:	4b0d      	ldr	r3, [pc, #52]	@ (8001eec <HAL_DMA2D_MspInit+0x4c>)
 8001eb8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001eba:	4a0c      	ldr	r2, [pc, #48]	@ (8001eec <HAL_DMA2D_MspInit+0x4c>)
 8001ebc:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8001ec0:	6313      	str	r3, [r2, #48]	@ 0x30
 8001ec2:	4b0a      	ldr	r3, [pc, #40]	@ (8001eec <HAL_DMA2D_MspInit+0x4c>)
 8001ec4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001ec6:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8001eca:	60fb      	str	r3, [r7, #12]
 8001ecc:	68fb      	ldr	r3, [r7, #12]
    /* DMA2D interrupt Init */
    HAL_NVIC_SetPriority(DMA2D_IRQn, 5, 0);
 8001ece:	2200      	movs	r2, #0
 8001ed0:	2105      	movs	r1, #5
 8001ed2:	205a      	movs	r0, #90	@ 0x5a
 8001ed4:	f000 fcc7 	bl	8002866 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DMA2D_IRQn);
 8001ed8:	205a      	movs	r0, #90	@ 0x5a
 8001eda:	f000 fce0 	bl	800289e <HAL_NVIC_EnableIRQ>

    /* USER CODE END DMA2D_MspInit 1 */

  }

}
 8001ede:	bf00      	nop
 8001ee0:	3710      	adds	r7, #16
 8001ee2:	46bd      	mov	sp, r7
 8001ee4:	bd80      	pop	{r7, pc}
 8001ee6:	bf00      	nop
 8001ee8:	4002b000 	.word	0x4002b000
 8001eec:	40023800 	.word	0x40023800

08001ef0 <HAL_I2C_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hi2c: I2C handle pointer
  * @retval None
  */
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001ef0:	b580      	push	{r7, lr}
 8001ef2:	b08a      	sub	sp, #40	@ 0x28
 8001ef4:	af00      	add	r7, sp, #0
 8001ef6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ef8:	f107 0314 	add.w	r3, r7, #20
 8001efc:	2200      	movs	r2, #0
 8001efe:	601a      	str	r2, [r3, #0]
 8001f00:	605a      	str	r2, [r3, #4]
 8001f02:	609a      	str	r2, [r3, #8]
 8001f04:	60da      	str	r2, [r3, #12]
 8001f06:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C3)
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	681b      	ldr	r3, [r3, #0]
 8001f0c:	4a29      	ldr	r2, [pc, #164]	@ (8001fb4 <HAL_I2C_MspInit+0xc4>)
 8001f0e:	4293      	cmp	r3, r2
 8001f10:	d14b      	bne.n	8001faa <HAL_I2C_MspInit+0xba>
  {
    /* USER CODE BEGIN I2C3_MspInit 0 */

    /* USER CODE END I2C3_MspInit 0 */

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001f12:	2300      	movs	r3, #0
 8001f14:	613b      	str	r3, [r7, #16]
 8001f16:	4b28      	ldr	r3, [pc, #160]	@ (8001fb8 <HAL_I2C_MspInit+0xc8>)
 8001f18:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001f1a:	4a27      	ldr	r2, [pc, #156]	@ (8001fb8 <HAL_I2C_MspInit+0xc8>)
 8001f1c:	f043 0304 	orr.w	r3, r3, #4
 8001f20:	6313      	str	r3, [r2, #48]	@ 0x30
 8001f22:	4b25      	ldr	r3, [pc, #148]	@ (8001fb8 <HAL_I2C_MspInit+0xc8>)
 8001f24:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001f26:	f003 0304 	and.w	r3, r3, #4
 8001f2a:	613b      	str	r3, [r7, #16]
 8001f2c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001f2e:	2300      	movs	r3, #0
 8001f30:	60fb      	str	r3, [r7, #12]
 8001f32:	4b21      	ldr	r3, [pc, #132]	@ (8001fb8 <HAL_I2C_MspInit+0xc8>)
 8001f34:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001f36:	4a20      	ldr	r2, [pc, #128]	@ (8001fb8 <HAL_I2C_MspInit+0xc8>)
 8001f38:	f043 0301 	orr.w	r3, r3, #1
 8001f3c:	6313      	str	r3, [r2, #48]	@ 0x30
 8001f3e:	4b1e      	ldr	r3, [pc, #120]	@ (8001fb8 <HAL_I2C_MspInit+0xc8>)
 8001f40:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001f42:	f003 0301 	and.w	r3, r3, #1
 8001f46:	60fb      	str	r3, [r7, #12]
 8001f48:	68fb      	ldr	r3, [r7, #12]
    /**I2C3 GPIO Configuration
    PC9     ------> I2C3_SDA
    PA8     ------> I2C3_SCL
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001f4a:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001f4e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001f50:	2312      	movs	r3, #18
 8001f52:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f54:	2300      	movs	r3, #0
 8001f56:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001f58:	2303      	movs	r3, #3
 8001f5a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8001f5c:	2304      	movs	r3, #4
 8001f5e:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001f60:	f107 0314 	add.w	r3, r7, #20
 8001f64:	4619      	mov	r1, r3
 8001f66:	4815      	ldr	r0, [pc, #84]	@ (8001fbc <HAL_I2C_MspInit+0xcc>)
 8001f68:	f001 fa2a 	bl	80033c0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8001f6c:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001f70:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001f72:	2312      	movs	r3, #18
 8001f74:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f76:	2300      	movs	r3, #0
 8001f78:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001f7a:	2303      	movs	r3, #3
 8001f7c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8001f7e:	2304      	movs	r3, #4
 8001f80:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001f82:	f107 0314 	add.w	r3, r7, #20
 8001f86:	4619      	mov	r1, r3
 8001f88:	480d      	ldr	r0, [pc, #52]	@ (8001fc0 <HAL_I2C_MspInit+0xd0>)
 8001f8a:	f001 fa19 	bl	80033c0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C3_CLK_ENABLE();
 8001f8e:	2300      	movs	r3, #0
 8001f90:	60bb      	str	r3, [r7, #8]
 8001f92:	4b09      	ldr	r3, [pc, #36]	@ (8001fb8 <HAL_I2C_MspInit+0xc8>)
 8001f94:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f96:	4a08      	ldr	r2, [pc, #32]	@ (8001fb8 <HAL_I2C_MspInit+0xc8>)
 8001f98:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8001f9c:	6413      	str	r3, [r2, #64]	@ 0x40
 8001f9e:	4b06      	ldr	r3, [pc, #24]	@ (8001fb8 <HAL_I2C_MspInit+0xc8>)
 8001fa0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001fa2:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8001fa6:	60bb      	str	r3, [r7, #8]
 8001fa8:	68bb      	ldr	r3, [r7, #8]

    /* USER CODE END I2C3_MspInit 1 */

  }

}
 8001faa:	bf00      	nop
 8001fac:	3728      	adds	r7, #40	@ 0x28
 8001fae:	46bd      	mov	sp, r7
 8001fb0:	bd80      	pop	{r7, pc}
 8001fb2:	bf00      	nop
 8001fb4:	40005c00 	.word	0x40005c00
 8001fb8:	40023800 	.word	0x40023800
 8001fbc:	40020800 	.word	0x40020800
 8001fc0:	40020000 	.word	0x40020000

08001fc4 <HAL_LTDC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hltdc: LTDC handle pointer
  * @retval None
  */
void HAL_LTDC_MspInit(LTDC_HandleTypeDef* hltdc)
{
 8001fc4:	b580      	push	{r7, lr}
 8001fc6:	b09a      	sub	sp, #104	@ 0x68
 8001fc8:	af00      	add	r7, sp, #0
 8001fca:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001fcc:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8001fd0:	2200      	movs	r2, #0
 8001fd2:	601a      	str	r2, [r3, #0]
 8001fd4:	605a      	str	r2, [r3, #4]
 8001fd6:	609a      	str	r2, [r3, #8]
 8001fd8:	60da      	str	r2, [r3, #12]
 8001fda:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001fdc:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001fe0:	2230      	movs	r2, #48	@ 0x30
 8001fe2:	2100      	movs	r1, #0
 8001fe4:	4618      	mov	r0, r3
 8001fe6:	f007 f84f 	bl	8009088 <memset>
  if(hltdc->Instance==LTDC)
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	681b      	ldr	r3, [r3, #0]
 8001fee:	4a81      	ldr	r2, [pc, #516]	@ (80021f4 <HAL_LTDC_MspInit+0x230>)
 8001ff0:	4293      	cmp	r3, r2
 8001ff2:	f040 80fb 	bne.w	80021ec <HAL_LTDC_MspInit+0x228>

    /* USER CODE END LTDC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 8001ff6:	2308      	movs	r3, #8
 8001ff8:	627b      	str	r3, [r7, #36]	@ 0x24
    PeriphClkInitStruct.PLLSAI.PLLSAIN = 192;
 8001ffa:	23c0      	movs	r3, #192	@ 0xc0
 8001ffc:	637b      	str	r3, [r7, #52]	@ 0x34
    PeriphClkInitStruct.PLLSAI.PLLSAIR = 4;
 8001ffe:	2304      	movs	r3, #4
 8002000:	63fb      	str	r3, [r7, #60]	@ 0x3c
    PeriphClkInitStruct.PLLSAIDivR = RCC_PLLSAIDIVR_8;
 8002002:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8002006:	64bb      	str	r3, [r7, #72]	@ 0x48
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002008:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800200c:	4618      	mov	r0, r3
 800200e:	f002 fe21 	bl	8004c54 <HAL_RCCEx_PeriphCLKConfig>
 8002012:	4603      	mov	r3, r0
 8002014:	2b00      	cmp	r3, #0
 8002016:	d001      	beq.n	800201c <HAL_LTDC_MspInit+0x58>
    {
      Error_Handler();
 8002018:	f7fe ff1d 	bl	8000e56 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LTDC_CLK_ENABLE();
 800201c:	2300      	movs	r3, #0
 800201e:	623b      	str	r3, [r7, #32]
 8002020:	4b75      	ldr	r3, [pc, #468]	@ (80021f8 <HAL_LTDC_MspInit+0x234>)
 8002022:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002024:	4a74      	ldr	r2, [pc, #464]	@ (80021f8 <HAL_LTDC_MspInit+0x234>)
 8002026:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800202a:	6453      	str	r3, [r2, #68]	@ 0x44
 800202c:	4b72      	ldr	r3, [pc, #456]	@ (80021f8 <HAL_LTDC_MspInit+0x234>)
 800202e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002030:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8002034:	623b      	str	r3, [r7, #32]
 8002036:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOF_CLK_ENABLE();
 8002038:	2300      	movs	r3, #0
 800203a:	61fb      	str	r3, [r7, #28]
 800203c:	4b6e      	ldr	r3, [pc, #440]	@ (80021f8 <HAL_LTDC_MspInit+0x234>)
 800203e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002040:	4a6d      	ldr	r2, [pc, #436]	@ (80021f8 <HAL_LTDC_MspInit+0x234>)
 8002042:	f043 0320 	orr.w	r3, r3, #32
 8002046:	6313      	str	r3, [r2, #48]	@ 0x30
 8002048:	4b6b      	ldr	r3, [pc, #428]	@ (80021f8 <HAL_LTDC_MspInit+0x234>)
 800204a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800204c:	f003 0320 	and.w	r3, r3, #32
 8002050:	61fb      	str	r3, [r7, #28]
 8002052:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002054:	2300      	movs	r3, #0
 8002056:	61bb      	str	r3, [r7, #24]
 8002058:	4b67      	ldr	r3, [pc, #412]	@ (80021f8 <HAL_LTDC_MspInit+0x234>)
 800205a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800205c:	4a66      	ldr	r2, [pc, #408]	@ (80021f8 <HAL_LTDC_MspInit+0x234>)
 800205e:	f043 0301 	orr.w	r3, r3, #1
 8002062:	6313      	str	r3, [r2, #48]	@ 0x30
 8002064:	4b64      	ldr	r3, [pc, #400]	@ (80021f8 <HAL_LTDC_MspInit+0x234>)
 8002066:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002068:	f003 0301 	and.w	r3, r3, #1
 800206c:	61bb      	str	r3, [r7, #24]
 800206e:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002070:	2300      	movs	r3, #0
 8002072:	617b      	str	r3, [r7, #20]
 8002074:	4b60      	ldr	r3, [pc, #384]	@ (80021f8 <HAL_LTDC_MspInit+0x234>)
 8002076:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002078:	4a5f      	ldr	r2, [pc, #380]	@ (80021f8 <HAL_LTDC_MspInit+0x234>)
 800207a:	f043 0302 	orr.w	r3, r3, #2
 800207e:	6313      	str	r3, [r2, #48]	@ 0x30
 8002080:	4b5d      	ldr	r3, [pc, #372]	@ (80021f8 <HAL_LTDC_MspInit+0x234>)
 8002082:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002084:	f003 0302 	and.w	r3, r3, #2
 8002088:	617b      	str	r3, [r7, #20]
 800208a:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 800208c:	2300      	movs	r3, #0
 800208e:	613b      	str	r3, [r7, #16]
 8002090:	4b59      	ldr	r3, [pc, #356]	@ (80021f8 <HAL_LTDC_MspInit+0x234>)
 8002092:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002094:	4a58      	ldr	r2, [pc, #352]	@ (80021f8 <HAL_LTDC_MspInit+0x234>)
 8002096:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800209a:	6313      	str	r3, [r2, #48]	@ 0x30
 800209c:	4b56      	ldr	r3, [pc, #344]	@ (80021f8 <HAL_LTDC_MspInit+0x234>)
 800209e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80020a0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80020a4:	613b      	str	r3, [r7, #16]
 80020a6:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80020a8:	2300      	movs	r3, #0
 80020aa:	60fb      	str	r3, [r7, #12]
 80020ac:	4b52      	ldr	r3, [pc, #328]	@ (80021f8 <HAL_LTDC_MspInit+0x234>)
 80020ae:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80020b0:	4a51      	ldr	r2, [pc, #324]	@ (80021f8 <HAL_LTDC_MspInit+0x234>)
 80020b2:	f043 0304 	orr.w	r3, r3, #4
 80020b6:	6313      	str	r3, [r2, #48]	@ 0x30
 80020b8:	4b4f      	ldr	r3, [pc, #316]	@ (80021f8 <HAL_LTDC_MspInit+0x234>)
 80020ba:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80020bc:	f003 0304 	and.w	r3, r3, #4
 80020c0:	60fb      	str	r3, [r7, #12]
 80020c2:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80020c4:	2300      	movs	r3, #0
 80020c6:	60bb      	str	r3, [r7, #8]
 80020c8:	4b4b      	ldr	r3, [pc, #300]	@ (80021f8 <HAL_LTDC_MspInit+0x234>)
 80020ca:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80020cc:	4a4a      	ldr	r2, [pc, #296]	@ (80021f8 <HAL_LTDC_MspInit+0x234>)
 80020ce:	f043 0308 	orr.w	r3, r3, #8
 80020d2:	6313      	str	r3, [r2, #48]	@ 0x30
 80020d4:	4b48      	ldr	r3, [pc, #288]	@ (80021f8 <HAL_LTDC_MspInit+0x234>)
 80020d6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80020d8:	f003 0308 	and.w	r3, r3, #8
 80020dc:	60bb      	str	r3, [r7, #8]
 80020de:	68bb      	ldr	r3, [r7, #8]
    PG11     ------> LTDC_B3
    PG12     ------> LTDC_B4
    PB8     ------> LTDC_B6
    PB9     ------> LTDC_B7
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80020e0:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80020e4:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80020e6:	2302      	movs	r3, #2
 80020e8:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020ea:	2300      	movs	r3, #0
 80020ec:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80020ee:	2300      	movs	r3, #0
 80020f0:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 80020f2:	230e      	movs	r3, #14
 80020f4:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80020f6:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 80020fa:	4619      	mov	r1, r3
 80020fc:	483f      	ldr	r0, [pc, #252]	@ (80021fc <HAL_LTDC_MspInit+0x238>)
 80020fe:	f001 f95f 	bl	80033c0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_6|GPIO_PIN_11
 8002102:	f641 0358 	movw	r3, #6232	@ 0x1858
 8002106:	657b      	str	r3, [r7, #84]	@ 0x54
                          |GPIO_PIN_12;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002108:	2302      	movs	r3, #2
 800210a:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800210c:	2300      	movs	r3, #0
 800210e:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002110:	2300      	movs	r3, #0
 8002112:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8002114:	230e      	movs	r3, #14
 8002116:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002118:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 800211c:	4619      	mov	r1, r3
 800211e:	4838      	ldr	r0, [pc, #224]	@ (8002200 <HAL_LTDC_MspInit+0x23c>)
 8002120:	f001 f94e 	bl	80033c0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8002124:	2303      	movs	r3, #3
 8002126:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002128:	2302      	movs	r3, #2
 800212a:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800212c:	2300      	movs	r3, #0
 800212e:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002130:	2300      	movs	r3, #0
 8002132:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 8002134:	2309      	movs	r3, #9
 8002136:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002138:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 800213c:	4619      	mov	r1, r3
 800213e:	4831      	ldr	r0, [pc, #196]	@ (8002204 <HAL_LTDC_MspInit+0x240>)
 8002140:	f001 f93e 	bl	80033c0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_8|GPIO_PIN_9;
 8002144:	f44f 6370 	mov.w	r3, #3840	@ 0xf00
 8002148:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800214a:	2302      	movs	r3, #2
 800214c:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800214e:	2300      	movs	r3, #0
 8002150:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002152:	2300      	movs	r3, #0
 8002154:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8002156:	230e      	movs	r3, #14
 8002158:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800215a:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 800215e:	4619      	mov	r1, r3
 8002160:	4828      	ldr	r0, [pc, #160]	@ (8002204 <HAL_LTDC_MspInit+0x240>)
 8002162:	f001 f92d 	bl	80033c0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_11;
 8002166:	f44f 630c 	mov.w	r3, #2240	@ 0x8c0
 800216a:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800216c:	2302      	movs	r3, #2
 800216e:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002170:	2300      	movs	r3, #0
 8002172:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002174:	2300      	movs	r3, #0
 8002176:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8002178:	230e      	movs	r3, #14
 800217a:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800217c:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8002180:	4619      	mov	r1, r3
 8002182:	4821      	ldr	r0, [pc, #132]	@ (8002208 <HAL_LTDC_MspInit+0x244>)
 8002184:	f001 f91c 	bl	80033c0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_10;
 8002188:	f44f 6398 	mov.w	r3, #1216	@ 0x4c0
 800218c:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800218e:	2302      	movs	r3, #2
 8002190:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002192:	2300      	movs	r3, #0
 8002194:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002196:	2300      	movs	r3, #0
 8002198:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 800219a:	230e      	movs	r3, #14
 800219c:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800219e:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 80021a2:	4619      	mov	r1, r3
 80021a4:	4819      	ldr	r0, [pc, #100]	@ (800220c <HAL_LTDC_MspInit+0x248>)
 80021a6:	f001 f90b 	bl	80033c0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_6;
 80021aa:	2348      	movs	r3, #72	@ 0x48
 80021ac:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80021ae:	2302      	movs	r3, #2
 80021b0:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021b2:	2300      	movs	r3, #0
 80021b4:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80021b6:	2300      	movs	r3, #0
 80021b8:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 80021ba:	230e      	movs	r3, #14
 80021bc:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80021be:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 80021c2:	4619      	mov	r1, r3
 80021c4:	4812      	ldr	r0, [pc, #72]	@ (8002210 <HAL_LTDC_MspInit+0x24c>)
 80021c6:	f001 f8fb 	bl	80033c0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_12;
 80021ca:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 80021ce:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80021d0:	2302      	movs	r3, #2
 80021d2:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021d4:	2300      	movs	r3, #0
 80021d6:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80021d8:	2300      	movs	r3, #0
 80021da:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 80021dc:	2309      	movs	r3, #9
 80021de:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80021e0:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 80021e4:	4619      	mov	r1, r3
 80021e6:	4808      	ldr	r0, [pc, #32]	@ (8002208 <HAL_LTDC_MspInit+0x244>)
 80021e8:	f001 f8ea 	bl	80033c0 <HAL_GPIO_Init>

    /* USER CODE END LTDC_MspInit 1 */

  }

}
 80021ec:	bf00      	nop
 80021ee:	3768      	adds	r7, #104	@ 0x68
 80021f0:	46bd      	mov	sp, r7
 80021f2:	bd80      	pop	{r7, pc}
 80021f4:	40016800 	.word	0x40016800
 80021f8:	40023800 	.word	0x40023800
 80021fc:	40021400 	.word	0x40021400
 8002200:	40020000 	.word	0x40020000
 8002204:	40020400 	.word	0x40020400
 8002208:	40021800 	.word	0x40021800
 800220c:	40020800 	.word	0x40020800
 8002210:	40020c00 	.word	0x40020c00

08002214 <HAL_SPI_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hspi: SPI handle pointer
  * @retval None
  */
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8002214:	b580      	push	{r7, lr}
 8002216:	b08a      	sub	sp, #40	@ 0x28
 8002218:	af00      	add	r7, sp, #0
 800221a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800221c:	f107 0314 	add.w	r3, r7, #20
 8002220:	2200      	movs	r2, #0
 8002222:	601a      	str	r2, [r3, #0]
 8002224:	605a      	str	r2, [r3, #4]
 8002226:	609a      	str	r2, [r3, #8]
 8002228:	60da      	str	r2, [r3, #12]
 800222a:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI5)
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	681b      	ldr	r3, [r3, #0]
 8002230:	4a19      	ldr	r2, [pc, #100]	@ (8002298 <HAL_SPI_MspInit+0x84>)
 8002232:	4293      	cmp	r3, r2
 8002234:	d12c      	bne.n	8002290 <HAL_SPI_MspInit+0x7c>
  {
    /* USER CODE BEGIN SPI5_MspInit 0 */

    /* USER CODE END SPI5_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI5_CLK_ENABLE();
 8002236:	2300      	movs	r3, #0
 8002238:	613b      	str	r3, [r7, #16]
 800223a:	4b18      	ldr	r3, [pc, #96]	@ (800229c <HAL_SPI_MspInit+0x88>)
 800223c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800223e:	4a17      	ldr	r2, [pc, #92]	@ (800229c <HAL_SPI_MspInit+0x88>)
 8002240:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002244:	6453      	str	r3, [r2, #68]	@ 0x44
 8002246:	4b15      	ldr	r3, [pc, #84]	@ (800229c <HAL_SPI_MspInit+0x88>)
 8002248:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800224a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800224e:	613b      	str	r3, [r7, #16]
 8002250:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOF_CLK_ENABLE();
 8002252:	2300      	movs	r3, #0
 8002254:	60fb      	str	r3, [r7, #12]
 8002256:	4b11      	ldr	r3, [pc, #68]	@ (800229c <HAL_SPI_MspInit+0x88>)
 8002258:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800225a:	4a10      	ldr	r2, [pc, #64]	@ (800229c <HAL_SPI_MspInit+0x88>)
 800225c:	f043 0320 	orr.w	r3, r3, #32
 8002260:	6313      	str	r3, [r2, #48]	@ 0x30
 8002262:	4b0e      	ldr	r3, [pc, #56]	@ (800229c <HAL_SPI_MspInit+0x88>)
 8002264:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002266:	f003 0320 	and.w	r3, r3, #32
 800226a:	60fb      	str	r3, [r7, #12]
 800226c:	68fb      	ldr	r3, [r7, #12]
    /**SPI5 GPIO Configuration
    PF7     ------> SPI5_SCK
    PF8     ------> SPI5_MISO
    PF9     ------> SPI5_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9;
 800226e:	f44f 7360 	mov.w	r3, #896	@ 0x380
 8002272:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002274:	2302      	movs	r3, #2
 8002276:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002278:	2300      	movs	r3, #0
 800227a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800227c:	2303      	movs	r3, #3
 800227e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI5;
 8002280:	2305      	movs	r3, #5
 8002282:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8002284:	f107 0314 	add.w	r3, r7, #20
 8002288:	4619      	mov	r1, r3
 800228a:	4805      	ldr	r0, [pc, #20]	@ (80022a0 <HAL_SPI_MspInit+0x8c>)
 800228c:	f001 f898 	bl	80033c0 <HAL_GPIO_Init>

    /* USER CODE END SPI5_MspInit 1 */

  }

}
 8002290:	bf00      	nop
 8002292:	3728      	adds	r7, #40	@ 0x28
 8002294:	46bd      	mov	sp, r7
 8002296:	bd80      	pop	{r7, pc}
 8002298:	40015000 	.word	0x40015000
 800229c:	40023800 	.word	0x40023800
 80022a0:	40021400 	.word	0x40021400

080022a4 <HAL_SPI_MspDeInit>:
  * This function freeze the hardware resources used in this example
  * @param hspi: SPI handle pointer
  * @retval None
  */
void HAL_SPI_MspDeInit(SPI_HandleTypeDef* hspi)
{
 80022a4:	b580      	push	{r7, lr}
 80022a6:	b082      	sub	sp, #8
 80022a8:	af00      	add	r7, sp, #0
 80022aa:	6078      	str	r0, [r7, #4]
  if(hspi->Instance==SPI5)
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	681b      	ldr	r3, [r3, #0]
 80022b0:	4a08      	ldr	r2, [pc, #32]	@ (80022d4 <HAL_SPI_MspDeInit+0x30>)
 80022b2:	4293      	cmp	r3, r2
 80022b4:	d10a      	bne.n	80022cc <HAL_SPI_MspDeInit+0x28>
  {
    /* USER CODE BEGIN SPI5_MspDeInit 0 */

    /* USER CODE END SPI5_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_SPI5_CLK_DISABLE();
 80022b6:	4b08      	ldr	r3, [pc, #32]	@ (80022d8 <HAL_SPI_MspDeInit+0x34>)
 80022b8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80022ba:	4a07      	ldr	r2, [pc, #28]	@ (80022d8 <HAL_SPI_MspDeInit+0x34>)
 80022bc:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 80022c0:	6453      	str	r3, [r2, #68]	@ 0x44
    /**SPI5 GPIO Configuration
    PF7     ------> SPI5_SCK
    PF8     ------> SPI5_MISO
    PF9     ------> SPI5_MOSI
    */
    HAL_GPIO_DeInit(GPIOF, GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9);
 80022c2:	f44f 7160 	mov.w	r1, #896	@ 0x380
 80022c6:	4805      	ldr	r0, [pc, #20]	@ (80022dc <HAL_SPI_MspDeInit+0x38>)
 80022c8:	f001 fa26 	bl	8003718 <HAL_GPIO_DeInit>
    /* USER CODE BEGIN SPI5_MspDeInit 1 */

    /* USER CODE END SPI5_MspDeInit 1 */
  }

}
 80022cc:	bf00      	nop
 80022ce:	3708      	adds	r7, #8
 80022d0:	46bd      	mov	sp, r7
 80022d2:	bd80      	pop	{r7, pc}
 80022d4:	40015000 	.word	0x40015000
 80022d8:	40023800 	.word	0x40023800
 80022dc:	40021400 	.word	0x40021400

080022e0 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80022e0:	b580      	push	{r7, lr}
 80022e2:	b08a      	sub	sp, #40	@ 0x28
 80022e4:	af00      	add	r7, sp, #0
 80022e6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80022e8:	f107 0314 	add.w	r3, r7, #20
 80022ec:	2200      	movs	r2, #0
 80022ee:	601a      	str	r2, [r3, #0]
 80022f0:	605a      	str	r2, [r3, #4]
 80022f2:	609a      	str	r2, [r3, #8]
 80022f4:	60da      	str	r2, [r3, #12]
 80022f6:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	681b      	ldr	r3, [r3, #0]
 80022fc:	4a19      	ldr	r2, [pc, #100]	@ (8002364 <HAL_UART_MspInit+0x84>)
 80022fe:	4293      	cmp	r3, r2
 8002300:	d12c      	bne.n	800235c <HAL_UART_MspInit+0x7c>
  {
    /* USER CODE BEGIN USART1_MspInit 0 */

    /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8002302:	2300      	movs	r3, #0
 8002304:	613b      	str	r3, [r7, #16]
 8002306:	4b18      	ldr	r3, [pc, #96]	@ (8002368 <HAL_UART_MspInit+0x88>)
 8002308:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800230a:	4a17      	ldr	r2, [pc, #92]	@ (8002368 <HAL_UART_MspInit+0x88>)
 800230c:	f043 0310 	orr.w	r3, r3, #16
 8002310:	6453      	str	r3, [r2, #68]	@ 0x44
 8002312:	4b15      	ldr	r3, [pc, #84]	@ (8002368 <HAL_UART_MspInit+0x88>)
 8002314:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002316:	f003 0310 	and.w	r3, r3, #16
 800231a:	613b      	str	r3, [r7, #16]
 800231c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800231e:	2300      	movs	r3, #0
 8002320:	60fb      	str	r3, [r7, #12]
 8002322:	4b11      	ldr	r3, [pc, #68]	@ (8002368 <HAL_UART_MspInit+0x88>)
 8002324:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002326:	4a10      	ldr	r2, [pc, #64]	@ (8002368 <HAL_UART_MspInit+0x88>)
 8002328:	f043 0301 	orr.w	r3, r3, #1
 800232c:	6313      	str	r3, [r2, #48]	@ 0x30
 800232e:	4b0e      	ldr	r3, [pc, #56]	@ (8002368 <HAL_UART_MspInit+0x88>)
 8002330:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002332:	f003 0301 	and.w	r3, r3, #1
 8002336:	60fb      	str	r3, [r7, #12]
 8002338:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 800233a:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 800233e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002340:	2302      	movs	r3, #2
 8002342:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002344:	2300      	movs	r3, #0
 8002346:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002348:	2303      	movs	r3, #3
 800234a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800234c:	2307      	movs	r3, #7
 800234e:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002350:	f107 0314 	add.w	r3, r7, #20
 8002354:	4619      	mov	r1, r3
 8002356:	4805      	ldr	r0, [pc, #20]	@ (800236c <HAL_UART_MspInit+0x8c>)
 8002358:	f001 f832 	bl	80033c0 <HAL_GPIO_Init>

    /* USER CODE END USART1_MspInit 1 */

  }

}
 800235c:	bf00      	nop
 800235e:	3728      	adds	r7, #40	@ 0x28
 8002360:	46bd      	mov	sp, r7
 8002362:	bd80      	pop	{r7, pc}
 8002364:	40011000 	.word	0x40011000
 8002368:	40023800 	.word	0x40023800
 800236c:	40020000 	.word	0x40020000

08002370 <HAL_FMC_MspInit>:

}

static uint32_t FMC_Initialized = 0;

static void HAL_FMC_MspInit(void){
 8002370:	b580      	push	{r7, lr}
 8002372:	b086      	sub	sp, #24
 8002374:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FMC_MspInit 0 */

  /* USER CODE END FMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct ={0};
 8002376:	1d3b      	adds	r3, r7, #4
 8002378:	2200      	movs	r2, #0
 800237a:	601a      	str	r2, [r3, #0]
 800237c:	605a      	str	r2, [r3, #4]
 800237e:	609a      	str	r2, [r3, #8]
 8002380:	60da      	str	r2, [r3, #12]
 8002382:	611a      	str	r2, [r3, #16]
  if (FMC_Initialized) {
 8002384:	4b3b      	ldr	r3, [pc, #236]	@ (8002474 <HAL_FMC_MspInit+0x104>)
 8002386:	681b      	ldr	r3, [r3, #0]
 8002388:	2b00      	cmp	r3, #0
 800238a:	d16f      	bne.n	800246c <HAL_FMC_MspInit+0xfc>
    return;
  }
  FMC_Initialized = 1;
 800238c:	4b39      	ldr	r3, [pc, #228]	@ (8002474 <HAL_FMC_MspInit+0x104>)
 800238e:	2201      	movs	r2, #1
 8002390:	601a      	str	r2, [r3, #0]

  /* Peripheral clock enable */
  __HAL_RCC_FMC_CLK_ENABLE();
 8002392:	2300      	movs	r3, #0
 8002394:	603b      	str	r3, [r7, #0]
 8002396:	4b38      	ldr	r3, [pc, #224]	@ (8002478 <HAL_FMC_MspInit+0x108>)
 8002398:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800239a:	4a37      	ldr	r2, [pc, #220]	@ (8002478 <HAL_FMC_MspInit+0x108>)
 800239c:	f043 0301 	orr.w	r3, r3, #1
 80023a0:	6393      	str	r3, [r2, #56]	@ 0x38
 80023a2:	4b35      	ldr	r3, [pc, #212]	@ (8002478 <HAL_FMC_MspInit+0x108>)
 80023a4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80023a6:	f003 0301 	and.w	r3, r3, #1
 80023aa:	603b      	str	r3, [r7, #0]
 80023ac:	683b      	ldr	r3, [r7, #0]
  PB5   ------> FMC_SDCKE1
  PB6   ------> FMC_SDNE1
  PE0   ------> FMC_NBL0
  PE1   ------> FMC_NBL1
  */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 80023ae:	f64f 033f 	movw	r3, #63551	@ 0xf83f
 80023b2:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_11|GPIO_PIN_12
                          |GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80023b4:	2302      	movs	r3, #2
 80023b6:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023b8:	2300      	movs	r3, #0
 80023ba:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80023bc:	2303      	movs	r3, #3
 80023be:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80023c0:	230c      	movs	r3, #12
 80023c2:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80023c4:	1d3b      	adds	r3, r7, #4
 80023c6:	4619      	mov	r1, r3
 80023c8:	482c      	ldr	r0, [pc, #176]	@ (800247c <HAL_FMC_MspInit+0x10c>)
 80023ca:	f000 fff9 	bl	80033c0 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_0;
 80023ce:	2301      	movs	r3, #1
 80023d0:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80023d2:	2302      	movs	r3, #2
 80023d4:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023d6:	2300      	movs	r3, #0
 80023d8:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80023da:	2303      	movs	r3, #3
 80023dc:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80023de:	230c      	movs	r3, #12
 80023e0:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80023e2:	1d3b      	adds	r3, r7, #4
 80023e4:	4619      	mov	r1, r3
 80023e6:	4826      	ldr	r0, [pc, #152]	@ (8002480 <HAL_FMC_MspInit+0x110>)
 80023e8:	f000 ffea 	bl	80033c0 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5
 80023ec:	f248 1333 	movw	r3, #33075	@ 0x8133
 80023f0:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_8|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80023f2:	2302      	movs	r3, #2
 80023f4:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023f6:	2300      	movs	r3, #0
 80023f8:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80023fa:	2303      	movs	r3, #3
 80023fc:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80023fe:	230c      	movs	r3, #12
 8002400:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8002402:	1d3b      	adds	r3, r7, #4
 8002404:	4619      	mov	r1, r3
 8002406:	481f      	ldr	r0, [pc, #124]	@ (8002484 <HAL_FMC_MspInit+0x114>)
 8002408:	f000 ffda 	bl	80033c0 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10
 800240c:	f64f 7383 	movw	r3, #65411	@ 0xff83
 8002410:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14
                          |GPIO_PIN_15|GPIO_PIN_0|GPIO_PIN_1;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002412:	2302      	movs	r3, #2
 8002414:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002416:	2300      	movs	r3, #0
 8002418:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800241a:	2303      	movs	r3, #3
 800241c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 800241e:	230c      	movs	r3, #12
 8002420:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002422:	1d3b      	adds	r3, r7, #4
 8002424:	4619      	mov	r1, r3
 8002426:	4818      	ldr	r0, [pc, #96]	@ (8002488 <HAL_FMC_MspInit+0x118>)
 8002428:	f000 ffca 	bl	80033c0 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_14
 800242c:	f24c 7303 	movw	r3, #50947	@ 0xc703
 8002430:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_15|GPIO_PIN_0|GPIO_PIN_1;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002432:	2302      	movs	r3, #2
 8002434:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002436:	2300      	movs	r3, #0
 8002438:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800243a:	2303      	movs	r3, #3
 800243c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 800243e:	230c      	movs	r3, #12
 8002440:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002442:	1d3b      	adds	r3, r7, #4
 8002444:	4619      	mov	r1, r3
 8002446:	4811      	ldr	r0, [pc, #68]	@ (800248c <HAL_FMC_MspInit+0x11c>)
 8002448:	f000 ffba 	bl	80033c0 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 800244c:	2360      	movs	r3, #96	@ 0x60
 800244e:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002450:	2302      	movs	r3, #2
 8002452:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002454:	2300      	movs	r3, #0
 8002456:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002458:	2303      	movs	r3, #3
 800245a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 800245c:	230c      	movs	r3, #12
 800245e:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002460:	1d3b      	adds	r3, r7, #4
 8002462:	4619      	mov	r1, r3
 8002464:	480a      	ldr	r0, [pc, #40]	@ (8002490 <HAL_FMC_MspInit+0x120>)
 8002466:	f000 ffab 	bl	80033c0 <HAL_GPIO_Init>
 800246a:	e000      	b.n	800246e <HAL_FMC_MspInit+0xfe>
    return;
 800246c:	bf00      	nop

  /* USER CODE BEGIN FMC_MspInit 1 */

  /* USER CODE END FMC_MspInit 1 */
}
 800246e:	3718      	adds	r7, #24
 8002470:	46bd      	mov	sp, r7
 8002472:	bd80      	pop	{r7, pc}
 8002474:	20000534 	.word	0x20000534
 8002478:	40023800 	.word	0x40023800
 800247c:	40021400 	.word	0x40021400
 8002480:	40020800 	.word	0x40020800
 8002484:	40021800 	.word	0x40021800
 8002488:	40021000 	.word	0x40021000
 800248c:	40020c00 	.word	0x40020c00
 8002490:	40020400 	.word	0x40020400

08002494 <HAL_SDRAM_MspInit>:

void HAL_SDRAM_MspInit(SDRAM_HandleTypeDef* hsdram){
 8002494:	b580      	push	{r7, lr}
 8002496:	b082      	sub	sp, #8
 8002498:	af00      	add	r7, sp, #0
 800249a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SDRAM_MspInit 0 */

  /* USER CODE END SDRAM_MspInit 0 */
  HAL_FMC_MspInit();
 800249c:	f7ff ff68 	bl	8002370 <HAL_FMC_MspInit>
  /* USER CODE BEGIN SDRAM_MspInit 1 */

  /* USER CODE END SDRAM_MspInit 1 */
}
 80024a0:	bf00      	nop
 80024a2:	3708      	adds	r7, #8
 80024a4:	46bd      	mov	sp, r7
 80024a6:	bd80      	pop	{r7, pc}

080024a8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80024a8:	b480      	push	{r7}
 80024aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80024ac:	bf00      	nop
 80024ae:	e7fd      	b.n	80024ac <NMI_Handler+0x4>

080024b0 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80024b0:	b480      	push	{r7}
 80024b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80024b4:	bf00      	nop
 80024b6:	e7fd      	b.n	80024b4 <HardFault_Handler+0x4>

080024b8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80024b8:	b480      	push	{r7}
 80024ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80024bc:	bf00      	nop
 80024be:	e7fd      	b.n	80024bc <MemManage_Handler+0x4>

080024c0 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80024c0:	b480      	push	{r7}
 80024c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80024c4:	bf00      	nop
 80024c6:	e7fd      	b.n	80024c4 <BusFault_Handler+0x4>

080024c8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80024c8:	b480      	push	{r7}
 80024ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80024cc:	bf00      	nop
 80024ce:	e7fd      	b.n	80024cc <UsageFault_Handler+0x4>

080024d0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80024d0:	b480      	push	{r7}
 80024d2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80024d4:	bf00      	nop
 80024d6:	46bd      	mov	sp, r7
 80024d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024dc:	4770      	bx	lr

080024de <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80024de:	b580      	push	{r7, lr}
 80024e0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80024e2:	f000 f8a1 	bl	8002628 <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 80024e6:	f005 fd51 	bl	8007f8c <xTaskGetSchedulerState>
 80024ea:	4603      	mov	r3, r0
 80024ec:	2b01      	cmp	r3, #1
 80024ee:	d001      	beq.n	80024f4 <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 80024f0:	f006 fb4a 	bl	8008b88 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80024f4:	bf00      	nop
 80024f6:	bd80      	pop	{r7, pc}

080024f8 <DMA2D_IRQHandler>:

/**
  * @brief This function handles DMA2D global interrupt.
  */
void DMA2D_IRQHandler(void)
{
 80024f8:	b580      	push	{r7, lr}
 80024fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2D_IRQn 0 */

  /* USER CODE END DMA2D_IRQn 0 */
  HAL_DMA2D_IRQHandler(&hdma2d);
 80024fc:	4802      	ldr	r0, [pc, #8]	@ (8002508 <DMA2D_IRQHandler+0x10>)
 80024fe:	f000 fd20 	bl	8002f42 <HAL_DMA2D_IRQHandler>
  /* USER CODE BEGIN DMA2D_IRQn 1 */

  /* USER CODE END DMA2D_IRQn 1 */
}
 8002502:	bf00      	nop
 8002504:	bd80      	pop	{r7, pc}
 8002506:	bf00      	nop
 8002508:	200000cc 	.word	0x200000cc

0800250c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800250c:	b480      	push	{r7}
 800250e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002510:	4b06      	ldr	r3, [pc, #24]	@ (800252c <SystemInit+0x20>)
 8002512:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002516:	4a05      	ldr	r2, [pc, #20]	@ (800252c <SystemInit+0x20>)
 8002518:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800251c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002520:	bf00      	nop
 8002522:	46bd      	mov	sp, r7
 8002524:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002528:	4770      	bx	lr
 800252a:	bf00      	nop
 800252c:	e000ed00 	.word	0xe000ed00

08002530 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 8002530:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8002568 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8002534:	f7ff ffea 	bl	800250c <SystemInit>
 
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002538:	480c      	ldr	r0, [pc, #48]	@ (800256c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800253a:	490d      	ldr	r1, [pc, #52]	@ (8002570 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 800253c:	4a0d      	ldr	r2, [pc, #52]	@ (8002574 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800253e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002540:	e002      	b.n	8002548 <LoopCopyDataInit>

08002542 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002542:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002544:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002546:	3304      	adds	r3, #4

08002548 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002548:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800254a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800254c:	d3f9      	bcc.n	8002542 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800254e:	4a0a      	ldr	r2, [pc, #40]	@ (8002578 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8002550:	4c0a      	ldr	r4, [pc, #40]	@ (800257c <LoopFillZerobss+0x22>)
  movs r3, #0
 8002552:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002554:	e001      	b.n	800255a <LoopFillZerobss>

08002556 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002556:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002558:	3204      	adds	r2, #4

0800255a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800255a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800255c:	d3fb      	bcc.n	8002556 <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 800255e:	f006 fdf9 	bl	8009154 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002562:	f7fe f97d 	bl	8000860 <main>
  bx  lr    
 8002566:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 8002568:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 800256c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002570:	200000a8 	.word	0x200000a8
  ldr r2, =_sidata
 8002574:	08009ef0 	.word	0x08009ef0
  ldr r2, =_sbss
 8002578:	200000a8 	.word	0x200000a8
  ldr r4, =_ebss
 800257c:	20005064 	.word	0x20005064

08002580 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002580:	e7fe      	b.n	8002580 <ADC_IRQHandler>
	...

08002584 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002584:	b580      	push	{r7, lr}
 8002586:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002588:	4b0e      	ldr	r3, [pc, #56]	@ (80025c4 <HAL_Init+0x40>)
 800258a:	681b      	ldr	r3, [r3, #0]
 800258c:	4a0d      	ldr	r2, [pc, #52]	@ (80025c4 <HAL_Init+0x40>)
 800258e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002592:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002594:	4b0b      	ldr	r3, [pc, #44]	@ (80025c4 <HAL_Init+0x40>)
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	4a0a      	ldr	r2, [pc, #40]	@ (80025c4 <HAL_Init+0x40>)
 800259a:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800259e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80025a0:	4b08      	ldr	r3, [pc, #32]	@ (80025c4 <HAL_Init+0x40>)
 80025a2:	681b      	ldr	r3, [r3, #0]
 80025a4:	4a07      	ldr	r2, [pc, #28]	@ (80025c4 <HAL_Init+0x40>)
 80025a6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80025aa:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80025ac:	2003      	movs	r0, #3
 80025ae:	f000 f94f 	bl	8002850 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80025b2:	200f      	movs	r0, #15
 80025b4:	f000 f808 	bl	80025c8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80025b8:	f7ff fc24 	bl	8001e04 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80025bc:	2300      	movs	r3, #0
}
 80025be:	4618      	mov	r0, r3
 80025c0:	bd80      	pop	{r7, pc}
 80025c2:	bf00      	nop
 80025c4:	40023c00 	.word	0x40023c00

080025c8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80025c8:	b580      	push	{r7, lr}
 80025ca:	b082      	sub	sp, #8
 80025cc:	af00      	add	r7, sp, #0
 80025ce:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80025d0:	4b12      	ldr	r3, [pc, #72]	@ (800261c <HAL_InitTick+0x54>)
 80025d2:	681a      	ldr	r2, [r3, #0]
 80025d4:	4b12      	ldr	r3, [pc, #72]	@ (8002620 <HAL_InitTick+0x58>)
 80025d6:	781b      	ldrb	r3, [r3, #0]
 80025d8:	4619      	mov	r1, r3
 80025da:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80025de:	fbb3 f3f1 	udiv	r3, r3, r1
 80025e2:	fbb2 f3f3 	udiv	r3, r2, r3
 80025e6:	4618      	mov	r0, r3
 80025e8:	f000 f967 	bl	80028ba <HAL_SYSTICK_Config>
 80025ec:	4603      	mov	r3, r0
 80025ee:	2b00      	cmp	r3, #0
 80025f0:	d001      	beq.n	80025f6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80025f2:	2301      	movs	r3, #1
 80025f4:	e00e      	b.n	8002614 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	2b0f      	cmp	r3, #15
 80025fa:	d80a      	bhi.n	8002612 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80025fc:	2200      	movs	r2, #0
 80025fe:	6879      	ldr	r1, [r7, #4]
 8002600:	f04f 30ff 	mov.w	r0, #4294967295
 8002604:	f000 f92f 	bl	8002866 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002608:	4a06      	ldr	r2, [pc, #24]	@ (8002624 <HAL_InitTick+0x5c>)
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800260e:	2300      	movs	r3, #0
 8002610:	e000      	b.n	8002614 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002612:	2301      	movs	r3, #1
}
 8002614:	4618      	mov	r0, r3
 8002616:	3708      	adds	r7, #8
 8002618:	46bd      	mov	sp, r7
 800261a:	bd80      	pop	{r7, pc}
 800261c:	20000048 	.word	0x20000048
 8002620:	20000050 	.word	0x20000050
 8002624:	2000004c 	.word	0x2000004c

08002628 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002628:	b480      	push	{r7}
 800262a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800262c:	4b06      	ldr	r3, [pc, #24]	@ (8002648 <HAL_IncTick+0x20>)
 800262e:	781b      	ldrb	r3, [r3, #0]
 8002630:	461a      	mov	r2, r3
 8002632:	4b06      	ldr	r3, [pc, #24]	@ (800264c <HAL_IncTick+0x24>)
 8002634:	681b      	ldr	r3, [r3, #0]
 8002636:	4413      	add	r3, r2
 8002638:	4a04      	ldr	r2, [pc, #16]	@ (800264c <HAL_IncTick+0x24>)
 800263a:	6013      	str	r3, [r2, #0]
}
 800263c:	bf00      	nop
 800263e:	46bd      	mov	sp, r7
 8002640:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002644:	4770      	bx	lr
 8002646:	bf00      	nop
 8002648:	20000050 	.word	0x20000050
 800264c:	20000538 	.word	0x20000538

08002650 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002650:	b480      	push	{r7}
 8002652:	af00      	add	r7, sp, #0
  return uwTick;
 8002654:	4b03      	ldr	r3, [pc, #12]	@ (8002664 <HAL_GetTick+0x14>)
 8002656:	681b      	ldr	r3, [r3, #0]
}
 8002658:	4618      	mov	r0, r3
 800265a:	46bd      	mov	sp, r7
 800265c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002660:	4770      	bx	lr
 8002662:	bf00      	nop
 8002664:	20000538 	.word	0x20000538

08002668 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002668:	b580      	push	{r7, lr}
 800266a:	b084      	sub	sp, #16
 800266c:	af00      	add	r7, sp, #0
 800266e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002670:	f7ff ffee 	bl	8002650 <HAL_GetTick>
 8002674:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800267a:	68fb      	ldr	r3, [r7, #12]
 800267c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002680:	d005      	beq.n	800268e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002682:	4b0a      	ldr	r3, [pc, #40]	@ (80026ac <HAL_Delay+0x44>)
 8002684:	781b      	ldrb	r3, [r3, #0]
 8002686:	461a      	mov	r2, r3
 8002688:	68fb      	ldr	r3, [r7, #12]
 800268a:	4413      	add	r3, r2
 800268c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800268e:	bf00      	nop
 8002690:	f7ff ffde 	bl	8002650 <HAL_GetTick>
 8002694:	4602      	mov	r2, r0
 8002696:	68bb      	ldr	r3, [r7, #8]
 8002698:	1ad3      	subs	r3, r2, r3
 800269a:	68fa      	ldr	r2, [r7, #12]
 800269c:	429a      	cmp	r2, r3
 800269e:	d8f7      	bhi.n	8002690 <HAL_Delay+0x28>
  {
  }
}
 80026a0:	bf00      	nop
 80026a2:	bf00      	nop
 80026a4:	3710      	adds	r7, #16
 80026a6:	46bd      	mov	sp, r7
 80026a8:	bd80      	pop	{r7, pc}
 80026aa:	bf00      	nop
 80026ac:	20000050 	.word	0x20000050

080026b0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80026b0:	b480      	push	{r7}
 80026b2:	b085      	sub	sp, #20
 80026b4:	af00      	add	r7, sp, #0
 80026b6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	f003 0307 	and.w	r3, r3, #7
 80026be:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80026c0:	4b0c      	ldr	r3, [pc, #48]	@ (80026f4 <__NVIC_SetPriorityGrouping+0x44>)
 80026c2:	68db      	ldr	r3, [r3, #12]
 80026c4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80026c6:	68ba      	ldr	r2, [r7, #8]
 80026c8:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80026cc:	4013      	ands	r3, r2
 80026ce:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80026d0:	68fb      	ldr	r3, [r7, #12]
 80026d2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80026d4:	68bb      	ldr	r3, [r7, #8]
 80026d6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80026d8:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80026dc:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80026e0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80026e2:	4a04      	ldr	r2, [pc, #16]	@ (80026f4 <__NVIC_SetPriorityGrouping+0x44>)
 80026e4:	68bb      	ldr	r3, [r7, #8]
 80026e6:	60d3      	str	r3, [r2, #12]
}
 80026e8:	bf00      	nop
 80026ea:	3714      	adds	r7, #20
 80026ec:	46bd      	mov	sp, r7
 80026ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026f2:	4770      	bx	lr
 80026f4:	e000ed00 	.word	0xe000ed00

080026f8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80026f8:	b480      	push	{r7}
 80026fa:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80026fc:	4b04      	ldr	r3, [pc, #16]	@ (8002710 <__NVIC_GetPriorityGrouping+0x18>)
 80026fe:	68db      	ldr	r3, [r3, #12]
 8002700:	0a1b      	lsrs	r3, r3, #8
 8002702:	f003 0307 	and.w	r3, r3, #7
}
 8002706:	4618      	mov	r0, r3
 8002708:	46bd      	mov	sp, r7
 800270a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800270e:	4770      	bx	lr
 8002710:	e000ed00 	.word	0xe000ed00

08002714 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002714:	b480      	push	{r7}
 8002716:	b083      	sub	sp, #12
 8002718:	af00      	add	r7, sp, #0
 800271a:	4603      	mov	r3, r0
 800271c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800271e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002722:	2b00      	cmp	r3, #0
 8002724:	db0b      	blt.n	800273e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002726:	79fb      	ldrb	r3, [r7, #7]
 8002728:	f003 021f 	and.w	r2, r3, #31
 800272c:	4907      	ldr	r1, [pc, #28]	@ (800274c <__NVIC_EnableIRQ+0x38>)
 800272e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002732:	095b      	lsrs	r3, r3, #5
 8002734:	2001      	movs	r0, #1
 8002736:	fa00 f202 	lsl.w	r2, r0, r2
 800273a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800273e:	bf00      	nop
 8002740:	370c      	adds	r7, #12
 8002742:	46bd      	mov	sp, r7
 8002744:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002748:	4770      	bx	lr
 800274a:	bf00      	nop
 800274c:	e000e100 	.word	0xe000e100

08002750 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002750:	b480      	push	{r7}
 8002752:	b083      	sub	sp, #12
 8002754:	af00      	add	r7, sp, #0
 8002756:	4603      	mov	r3, r0
 8002758:	6039      	str	r1, [r7, #0]
 800275a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800275c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002760:	2b00      	cmp	r3, #0
 8002762:	db0a      	blt.n	800277a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002764:	683b      	ldr	r3, [r7, #0]
 8002766:	b2da      	uxtb	r2, r3
 8002768:	490c      	ldr	r1, [pc, #48]	@ (800279c <__NVIC_SetPriority+0x4c>)
 800276a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800276e:	0112      	lsls	r2, r2, #4
 8002770:	b2d2      	uxtb	r2, r2
 8002772:	440b      	add	r3, r1
 8002774:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002778:	e00a      	b.n	8002790 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800277a:	683b      	ldr	r3, [r7, #0]
 800277c:	b2da      	uxtb	r2, r3
 800277e:	4908      	ldr	r1, [pc, #32]	@ (80027a0 <__NVIC_SetPriority+0x50>)
 8002780:	79fb      	ldrb	r3, [r7, #7]
 8002782:	f003 030f 	and.w	r3, r3, #15
 8002786:	3b04      	subs	r3, #4
 8002788:	0112      	lsls	r2, r2, #4
 800278a:	b2d2      	uxtb	r2, r2
 800278c:	440b      	add	r3, r1
 800278e:	761a      	strb	r2, [r3, #24]
}
 8002790:	bf00      	nop
 8002792:	370c      	adds	r7, #12
 8002794:	46bd      	mov	sp, r7
 8002796:	f85d 7b04 	ldr.w	r7, [sp], #4
 800279a:	4770      	bx	lr
 800279c:	e000e100 	.word	0xe000e100
 80027a0:	e000ed00 	.word	0xe000ed00

080027a4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80027a4:	b480      	push	{r7}
 80027a6:	b089      	sub	sp, #36	@ 0x24
 80027a8:	af00      	add	r7, sp, #0
 80027aa:	60f8      	str	r0, [r7, #12]
 80027ac:	60b9      	str	r1, [r7, #8]
 80027ae:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80027b0:	68fb      	ldr	r3, [r7, #12]
 80027b2:	f003 0307 	and.w	r3, r3, #7
 80027b6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80027b8:	69fb      	ldr	r3, [r7, #28]
 80027ba:	f1c3 0307 	rsb	r3, r3, #7
 80027be:	2b04      	cmp	r3, #4
 80027c0:	bf28      	it	cs
 80027c2:	2304      	movcs	r3, #4
 80027c4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80027c6:	69fb      	ldr	r3, [r7, #28]
 80027c8:	3304      	adds	r3, #4
 80027ca:	2b06      	cmp	r3, #6
 80027cc:	d902      	bls.n	80027d4 <NVIC_EncodePriority+0x30>
 80027ce:	69fb      	ldr	r3, [r7, #28]
 80027d0:	3b03      	subs	r3, #3
 80027d2:	e000      	b.n	80027d6 <NVIC_EncodePriority+0x32>
 80027d4:	2300      	movs	r3, #0
 80027d6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80027d8:	f04f 32ff 	mov.w	r2, #4294967295
 80027dc:	69bb      	ldr	r3, [r7, #24]
 80027de:	fa02 f303 	lsl.w	r3, r2, r3
 80027e2:	43da      	mvns	r2, r3
 80027e4:	68bb      	ldr	r3, [r7, #8]
 80027e6:	401a      	ands	r2, r3
 80027e8:	697b      	ldr	r3, [r7, #20]
 80027ea:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80027ec:	f04f 31ff 	mov.w	r1, #4294967295
 80027f0:	697b      	ldr	r3, [r7, #20]
 80027f2:	fa01 f303 	lsl.w	r3, r1, r3
 80027f6:	43d9      	mvns	r1, r3
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80027fc:	4313      	orrs	r3, r2
         );
}
 80027fe:	4618      	mov	r0, r3
 8002800:	3724      	adds	r7, #36	@ 0x24
 8002802:	46bd      	mov	sp, r7
 8002804:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002808:	4770      	bx	lr
	...

0800280c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800280c:	b580      	push	{r7, lr}
 800280e:	b082      	sub	sp, #8
 8002810:	af00      	add	r7, sp, #0
 8002812:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	3b01      	subs	r3, #1
 8002818:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800281c:	d301      	bcc.n	8002822 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800281e:	2301      	movs	r3, #1
 8002820:	e00f      	b.n	8002842 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002822:	4a0a      	ldr	r2, [pc, #40]	@ (800284c <SysTick_Config+0x40>)
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	3b01      	subs	r3, #1
 8002828:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800282a:	210f      	movs	r1, #15
 800282c:	f04f 30ff 	mov.w	r0, #4294967295
 8002830:	f7ff ff8e 	bl	8002750 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002834:	4b05      	ldr	r3, [pc, #20]	@ (800284c <SysTick_Config+0x40>)
 8002836:	2200      	movs	r2, #0
 8002838:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800283a:	4b04      	ldr	r3, [pc, #16]	@ (800284c <SysTick_Config+0x40>)
 800283c:	2207      	movs	r2, #7
 800283e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002840:	2300      	movs	r3, #0
}
 8002842:	4618      	mov	r0, r3
 8002844:	3708      	adds	r7, #8
 8002846:	46bd      	mov	sp, r7
 8002848:	bd80      	pop	{r7, pc}
 800284a:	bf00      	nop
 800284c:	e000e010 	.word	0xe000e010

08002850 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002850:	b580      	push	{r7, lr}
 8002852:	b082      	sub	sp, #8
 8002854:	af00      	add	r7, sp, #0
 8002856:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002858:	6878      	ldr	r0, [r7, #4]
 800285a:	f7ff ff29 	bl	80026b0 <__NVIC_SetPriorityGrouping>
}
 800285e:	bf00      	nop
 8002860:	3708      	adds	r7, #8
 8002862:	46bd      	mov	sp, r7
 8002864:	bd80      	pop	{r7, pc}

08002866 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002866:	b580      	push	{r7, lr}
 8002868:	b086      	sub	sp, #24
 800286a:	af00      	add	r7, sp, #0
 800286c:	4603      	mov	r3, r0
 800286e:	60b9      	str	r1, [r7, #8]
 8002870:	607a      	str	r2, [r7, #4]
 8002872:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002874:	2300      	movs	r3, #0
 8002876:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002878:	f7ff ff3e 	bl	80026f8 <__NVIC_GetPriorityGrouping>
 800287c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800287e:	687a      	ldr	r2, [r7, #4]
 8002880:	68b9      	ldr	r1, [r7, #8]
 8002882:	6978      	ldr	r0, [r7, #20]
 8002884:	f7ff ff8e 	bl	80027a4 <NVIC_EncodePriority>
 8002888:	4602      	mov	r2, r0
 800288a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800288e:	4611      	mov	r1, r2
 8002890:	4618      	mov	r0, r3
 8002892:	f7ff ff5d 	bl	8002750 <__NVIC_SetPriority>
}
 8002896:	bf00      	nop
 8002898:	3718      	adds	r7, #24
 800289a:	46bd      	mov	sp, r7
 800289c:	bd80      	pop	{r7, pc}

0800289e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800289e:	b580      	push	{r7, lr}
 80028a0:	b082      	sub	sp, #8
 80028a2:	af00      	add	r7, sp, #0
 80028a4:	4603      	mov	r3, r0
 80028a6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80028a8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80028ac:	4618      	mov	r0, r3
 80028ae:	f7ff ff31 	bl	8002714 <__NVIC_EnableIRQ>
}
 80028b2:	bf00      	nop
 80028b4:	3708      	adds	r7, #8
 80028b6:	46bd      	mov	sp, r7
 80028b8:	bd80      	pop	{r7, pc}

080028ba <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80028ba:	b580      	push	{r7, lr}
 80028bc:	b082      	sub	sp, #8
 80028be:	af00      	add	r7, sp, #0
 80028c0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80028c2:	6878      	ldr	r0, [r7, #4]
 80028c4:	f7ff ffa2 	bl	800280c <SysTick_Config>
 80028c8:	4603      	mov	r3, r0
}
 80028ca:	4618      	mov	r0, r3
 80028cc:	3708      	adds	r7, #8
 80028ce:	46bd      	mov	sp, r7
 80028d0:	bd80      	pop	{r7, pc}

080028d2 <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 80028d2:	b580      	push	{r7, lr}
 80028d4:	b082      	sub	sp, #8
 80028d6:	af00      	add	r7, sp, #0
 80028d8:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	2b00      	cmp	r3, #0
 80028de:	d101      	bne.n	80028e4 <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 80028e0:	2301      	movs	r3, #1
 80028e2:	e00e      	b.n	8002902 <HAL_CRC_Init+0x30>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	795b      	ldrb	r3, [r3, #5]
 80028e8:	b2db      	uxtb	r3, r3
 80028ea:	2b00      	cmp	r3, #0
 80028ec:	d105      	bne.n	80028fa <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	2200      	movs	r2, #0
 80028f2:	711a      	strb	r2, [r3, #4]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 80028f4:	6878      	ldr	r0, [r7, #4]
 80028f6:	f7ff fab1 	bl	8001e5c <HAL_CRC_MspInit>
  }

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	2201      	movs	r2, #1
 80028fe:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8002900:	2300      	movs	r3, #0
}
 8002902:	4618      	mov	r0, r3
 8002904:	3708      	adds	r7, #8
 8002906:	46bd      	mov	sp, r7
 8002908:	bd80      	pop	{r7, pc}
	...

0800290c <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800290c:	b580      	push	{r7, lr}
 800290e:	b086      	sub	sp, #24
 8002910:	af00      	add	r7, sp, #0
 8002912:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002914:	2300      	movs	r3, #0
 8002916:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8002918:	f7ff fe9a 	bl	8002650 <HAL_GetTick>
 800291c:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	2b00      	cmp	r3, #0
 8002922:	d101      	bne.n	8002928 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8002924:	2301      	movs	r3, #1
 8002926:	e099      	b.n	8002a5c <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	2202      	movs	r2, #2
 800292c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	2200      	movs	r2, #0
 8002934:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	681b      	ldr	r3, [r3, #0]
 800293c:	681a      	ldr	r2, [r3, #0]
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	681b      	ldr	r3, [r3, #0]
 8002942:	f022 0201 	bic.w	r2, r2, #1
 8002946:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002948:	e00f      	b.n	800296a <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800294a:	f7ff fe81 	bl	8002650 <HAL_GetTick>
 800294e:	4602      	mov	r2, r0
 8002950:	693b      	ldr	r3, [r7, #16]
 8002952:	1ad3      	subs	r3, r2, r3
 8002954:	2b05      	cmp	r3, #5
 8002956:	d908      	bls.n	800296a <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	2220      	movs	r2, #32
 800295c:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	2203      	movs	r2, #3
 8002962:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 8002966:	2303      	movs	r3, #3
 8002968:	e078      	b.n	8002a5c <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	681b      	ldr	r3, [r3, #0]
 800296e:	681b      	ldr	r3, [r3, #0]
 8002970:	f003 0301 	and.w	r3, r3, #1
 8002974:	2b00      	cmp	r3, #0
 8002976:	d1e8      	bne.n	800294a <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	681b      	ldr	r3, [r3, #0]
 800297c:	681b      	ldr	r3, [r3, #0]
 800297e:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8002980:	697a      	ldr	r2, [r7, #20]
 8002982:	4b38      	ldr	r3, [pc, #224]	@ (8002a64 <HAL_DMA_Init+0x158>)
 8002984:	4013      	ands	r3, r2
 8002986:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	685a      	ldr	r2, [r3, #4]
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	689b      	ldr	r3, [r3, #8]
 8002990:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002996:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	691b      	ldr	r3, [r3, #16]
 800299c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80029a2:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	699b      	ldr	r3, [r3, #24]
 80029a8:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80029ae:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	6a1b      	ldr	r3, [r3, #32]
 80029b4:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80029b6:	697a      	ldr	r2, [r7, #20]
 80029b8:	4313      	orrs	r3, r2
 80029ba:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80029c0:	2b04      	cmp	r3, #4
 80029c2:	d107      	bne.n	80029d4 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80029cc:	4313      	orrs	r3, r2
 80029ce:	697a      	ldr	r2, [r7, #20]
 80029d0:	4313      	orrs	r3, r2
 80029d2:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	697a      	ldr	r2, [r7, #20]
 80029da:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	681b      	ldr	r3, [r3, #0]
 80029e0:	695b      	ldr	r3, [r3, #20]
 80029e2:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80029e4:	697b      	ldr	r3, [r7, #20]
 80029e6:	f023 0307 	bic.w	r3, r3, #7
 80029ea:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80029f0:	697a      	ldr	r2, [r7, #20]
 80029f2:	4313      	orrs	r3, r2
 80029f4:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80029fa:	2b04      	cmp	r3, #4
 80029fc:	d117      	bne.n	8002a2e <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002a02:	697a      	ldr	r2, [r7, #20]
 8002a04:	4313      	orrs	r3, r2
 8002a06:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002a0c:	2b00      	cmp	r3, #0
 8002a0e:	d00e      	beq.n	8002a2e <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8002a10:	6878      	ldr	r0, [r7, #4]
 8002a12:	f000 f8bd 	bl	8002b90 <DMA_CheckFifoParam>
 8002a16:	4603      	mov	r3, r0
 8002a18:	2b00      	cmp	r3, #0
 8002a1a:	d008      	beq.n	8002a2e <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	2240      	movs	r2, #64	@ 0x40
 8002a20:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	2201      	movs	r2, #1
 8002a26:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 8002a2a:	2301      	movs	r3, #1
 8002a2c:	e016      	b.n	8002a5c <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	681b      	ldr	r3, [r3, #0]
 8002a32:	697a      	ldr	r2, [r7, #20]
 8002a34:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8002a36:	6878      	ldr	r0, [r7, #4]
 8002a38:	f000 f874 	bl	8002b24 <DMA_CalcBaseAndBitshift>
 8002a3c:	4603      	mov	r3, r0
 8002a3e:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002a44:	223f      	movs	r2, #63	@ 0x3f
 8002a46:	409a      	lsls	r2, r3
 8002a48:	68fb      	ldr	r3, [r7, #12]
 8002a4a:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	2200      	movs	r2, #0
 8002a50:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	2201      	movs	r2, #1
 8002a56:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 8002a5a:	2300      	movs	r3, #0
}
 8002a5c:	4618      	mov	r0, r3
 8002a5e:	3718      	adds	r7, #24
 8002a60:	46bd      	mov	sp, r7
 8002a62:	bd80      	pop	{r7, pc}
 8002a64:	f010803f 	.word	0xf010803f

08002a68 <HAL_DMA_DeInit>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_DeInit(DMA_HandleTypeDef *hdma)
{
 8002a68:	b580      	push	{r7, lr}
 8002a6a:	b084      	sub	sp, #16
 8002a6c:	af00      	add	r7, sp, #0
 8002a6e:	6078      	str	r0, [r7, #4]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	2b00      	cmp	r3, #0
 8002a74:	d101      	bne.n	8002a7a <HAL_DMA_DeInit+0x12>
  {
    return HAL_ERROR;
 8002a76:	2301      	movs	r3, #1
 8002a78:	e050      	b.n	8002b1c <HAL_DMA_DeInit+0xb4>
  }
  
  /* Check the DMA peripheral state */
  if(hdma->State == HAL_DMA_STATE_BUSY)
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002a80:	b2db      	uxtb	r3, r3
 8002a82:	2b02      	cmp	r3, #2
 8002a84:	d101      	bne.n	8002a8a <HAL_DMA_DeInit+0x22>
  {
    /* Return error status */
    return HAL_BUSY;
 8002a86:	2302      	movs	r3, #2
 8002a88:	e048      	b.n	8002b1c <HAL_DMA_DeInit+0xb4>

  /* Check the parameters */
  assert_param(IS_DMA_STREAM_ALL_INSTANCE(hdma->Instance));

  /* Disable the selected DMA Streamx */
  __HAL_DMA_DISABLE(hdma);
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	681b      	ldr	r3, [r3, #0]
 8002a8e:	681a      	ldr	r2, [r3, #0]
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	681b      	ldr	r3, [r3, #0]
 8002a94:	f022 0201 	bic.w	r2, r2, #1
 8002a98:	601a      	str	r2, [r3, #0]

  /* Reset DMA Streamx control register */
  hdma->Instance->CR   = 0U;
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	681b      	ldr	r3, [r3, #0]
 8002a9e:	2200      	movs	r2, #0
 8002aa0:	601a      	str	r2, [r3, #0]

  /* Reset DMA Streamx number of data to transfer register */
  hdma->Instance->NDTR = 0U;
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	681b      	ldr	r3, [r3, #0]
 8002aa6:	2200      	movs	r2, #0
 8002aa8:	605a      	str	r2, [r3, #4]

  /* Reset DMA Streamx peripheral address register */
  hdma->Instance->PAR  = 0U;
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	681b      	ldr	r3, [r3, #0]
 8002aae:	2200      	movs	r2, #0
 8002ab0:	609a      	str	r2, [r3, #8]

  /* Reset DMA Streamx memory 0 address register */
  hdma->Instance->M0AR = 0U;
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	681b      	ldr	r3, [r3, #0]
 8002ab6:	2200      	movs	r2, #0
 8002ab8:	60da      	str	r2, [r3, #12]
  
  /* Reset DMA Streamx memory 1 address register */
  hdma->Instance->M1AR = 0U;
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	681b      	ldr	r3, [r3, #0]
 8002abe:	2200      	movs	r2, #0
 8002ac0:	611a      	str	r2, [r3, #16]
  
  /* Reset DMA Streamx FIFO control register */
  hdma->Instance->FCR  = 0x00000021U;
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	681b      	ldr	r3, [r3, #0]
 8002ac6:	2221      	movs	r2, #33	@ 0x21
 8002ac8:	615a      	str	r2, [r3, #20]
  
  /* Get DMA steam Base Address */  
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8002aca:	6878      	ldr	r0, [r7, #4]
 8002acc:	f000 f82a 	bl	8002b24 <DMA_CalcBaseAndBitshift>
 8002ad0:	4603      	mov	r3, r0
 8002ad2:	60fb      	str	r3, [r7, #12]
  
  /* Clean all callbacks */
  hdma->XferCpltCallback = NULL;
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	2200      	movs	r2, #0
 8002ad8:	63da      	str	r2, [r3, #60]	@ 0x3c
  hdma->XferHalfCpltCallback = NULL;
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	2200      	movs	r2, #0
 8002ade:	641a      	str	r2, [r3, #64]	@ 0x40
  hdma->XferM1CpltCallback = NULL;
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	2200      	movs	r2, #0
 8002ae4:	645a      	str	r2, [r3, #68]	@ 0x44
  hdma->XferM1HalfCpltCallback = NULL;
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	2200      	movs	r2, #0
 8002aea:	649a      	str	r2, [r3, #72]	@ 0x48
  hdma->XferErrorCallback = NULL;
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	2200      	movs	r2, #0
 8002af0:	64da      	str	r2, [r3, #76]	@ 0x4c
  hdma->XferAbortCallback = NULL;
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	2200      	movs	r2, #0
 8002af6:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Clear all interrupt flags at correct offset within the register */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002afc:	223f      	movs	r2, #63	@ 0x3f
 8002afe:	409a      	lsls	r2, r3
 8002b00:	68fb      	ldr	r3, [r7, #12]
 8002b02:	609a      	str	r2, [r3, #8]

  /* Reset the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	2200      	movs	r2, #0
 8002b08:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Reset the DMA state */
  hdma->State = HAL_DMA_STATE_RESET;
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	2200      	movs	r2, #0
 8002b0e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	2200      	movs	r2, #0
 8002b16:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8002b1a:	2300      	movs	r3, #0
}
 8002b1c:	4618      	mov	r0, r3
 8002b1e:	3710      	adds	r7, #16
 8002b20:	46bd      	mov	sp, r7
 8002b22:	bd80      	pop	{r7, pc}

08002b24 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8002b24:	b480      	push	{r7}
 8002b26:	b085      	sub	sp, #20
 8002b28:	af00      	add	r7, sp, #0
 8002b2a:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	b2db      	uxtb	r3, r3
 8002b32:	3b10      	subs	r3, #16
 8002b34:	4a14      	ldr	r2, [pc, #80]	@ (8002b88 <DMA_CalcBaseAndBitshift+0x64>)
 8002b36:	fba2 2303 	umull	r2, r3, r2, r3
 8002b3a:	091b      	lsrs	r3, r3, #4
 8002b3c:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8002b3e:	4a13      	ldr	r2, [pc, #76]	@ (8002b8c <DMA_CalcBaseAndBitshift+0x68>)
 8002b40:	68fb      	ldr	r3, [r7, #12]
 8002b42:	4413      	add	r3, r2
 8002b44:	781b      	ldrb	r3, [r3, #0]
 8002b46:	461a      	mov	r2, r3
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 8002b4c:	68fb      	ldr	r3, [r7, #12]
 8002b4e:	2b03      	cmp	r3, #3
 8002b50:	d909      	bls.n	8002b66 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	681b      	ldr	r3, [r3, #0]
 8002b56:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8002b5a:	f023 0303 	bic.w	r3, r3, #3
 8002b5e:	1d1a      	adds	r2, r3, #4
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	659a      	str	r2, [r3, #88]	@ 0x58
 8002b64:	e007      	b.n	8002b76 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	681b      	ldr	r3, [r3, #0]
 8002b6a:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8002b6e:	f023 0303 	bic.w	r3, r3, #3
 8002b72:	687a      	ldr	r2, [r7, #4]
 8002b74:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 8002b7a:	4618      	mov	r0, r3
 8002b7c:	3714      	adds	r7, #20
 8002b7e:	46bd      	mov	sp, r7
 8002b80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b84:	4770      	bx	lr
 8002b86:	bf00      	nop
 8002b88:	aaaaaaab 	.word	0xaaaaaaab
 8002b8c:	08009ed8 	.word	0x08009ed8

08002b90 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8002b90:	b480      	push	{r7}
 8002b92:	b085      	sub	sp, #20
 8002b94:	af00      	add	r7, sp, #0
 8002b96:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002b98:	2300      	movs	r3, #0
 8002b9a:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002ba0:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	699b      	ldr	r3, [r3, #24]
 8002ba6:	2b00      	cmp	r3, #0
 8002ba8:	d11f      	bne.n	8002bea <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8002baa:	68bb      	ldr	r3, [r7, #8]
 8002bac:	2b03      	cmp	r3, #3
 8002bae:	d856      	bhi.n	8002c5e <DMA_CheckFifoParam+0xce>
 8002bb0:	a201      	add	r2, pc, #4	@ (adr r2, 8002bb8 <DMA_CheckFifoParam+0x28>)
 8002bb2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002bb6:	bf00      	nop
 8002bb8:	08002bc9 	.word	0x08002bc9
 8002bbc:	08002bdb 	.word	0x08002bdb
 8002bc0:	08002bc9 	.word	0x08002bc9
 8002bc4:	08002c5f 	.word	0x08002c5f
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002bcc:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002bd0:	2b00      	cmp	r3, #0
 8002bd2:	d046      	beq.n	8002c62 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8002bd4:	2301      	movs	r3, #1
 8002bd6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002bd8:	e043      	b.n	8002c62 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002bde:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8002be2:	d140      	bne.n	8002c66 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8002be4:	2301      	movs	r3, #1
 8002be6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002be8:	e03d      	b.n	8002c66 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	699b      	ldr	r3, [r3, #24]
 8002bee:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002bf2:	d121      	bne.n	8002c38 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8002bf4:	68bb      	ldr	r3, [r7, #8]
 8002bf6:	2b03      	cmp	r3, #3
 8002bf8:	d837      	bhi.n	8002c6a <DMA_CheckFifoParam+0xda>
 8002bfa:	a201      	add	r2, pc, #4	@ (adr r2, 8002c00 <DMA_CheckFifoParam+0x70>)
 8002bfc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002c00:	08002c11 	.word	0x08002c11
 8002c04:	08002c17 	.word	0x08002c17
 8002c08:	08002c11 	.word	0x08002c11
 8002c0c:	08002c29 	.word	0x08002c29
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8002c10:	2301      	movs	r3, #1
 8002c12:	73fb      	strb	r3, [r7, #15]
      break;
 8002c14:	e030      	b.n	8002c78 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002c1a:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002c1e:	2b00      	cmp	r3, #0
 8002c20:	d025      	beq.n	8002c6e <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8002c22:	2301      	movs	r3, #1
 8002c24:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002c26:	e022      	b.n	8002c6e <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002c2c:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8002c30:	d11f      	bne.n	8002c72 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8002c32:	2301      	movs	r3, #1
 8002c34:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8002c36:	e01c      	b.n	8002c72 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8002c38:	68bb      	ldr	r3, [r7, #8]
 8002c3a:	2b02      	cmp	r3, #2
 8002c3c:	d903      	bls.n	8002c46 <DMA_CheckFifoParam+0xb6>
 8002c3e:	68bb      	ldr	r3, [r7, #8]
 8002c40:	2b03      	cmp	r3, #3
 8002c42:	d003      	beq.n	8002c4c <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8002c44:	e018      	b.n	8002c78 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8002c46:	2301      	movs	r3, #1
 8002c48:	73fb      	strb	r3, [r7, #15]
      break;
 8002c4a:	e015      	b.n	8002c78 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002c50:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002c54:	2b00      	cmp	r3, #0
 8002c56:	d00e      	beq.n	8002c76 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8002c58:	2301      	movs	r3, #1
 8002c5a:	73fb      	strb	r3, [r7, #15]
      break;
 8002c5c:	e00b      	b.n	8002c76 <DMA_CheckFifoParam+0xe6>
      break;
 8002c5e:	bf00      	nop
 8002c60:	e00a      	b.n	8002c78 <DMA_CheckFifoParam+0xe8>
      break;
 8002c62:	bf00      	nop
 8002c64:	e008      	b.n	8002c78 <DMA_CheckFifoParam+0xe8>
      break;
 8002c66:	bf00      	nop
 8002c68:	e006      	b.n	8002c78 <DMA_CheckFifoParam+0xe8>
      break;
 8002c6a:	bf00      	nop
 8002c6c:	e004      	b.n	8002c78 <DMA_CheckFifoParam+0xe8>
      break;
 8002c6e:	bf00      	nop
 8002c70:	e002      	b.n	8002c78 <DMA_CheckFifoParam+0xe8>
      break;   
 8002c72:	bf00      	nop
 8002c74:	e000      	b.n	8002c78 <DMA_CheckFifoParam+0xe8>
      break;
 8002c76:	bf00      	nop
    }
  } 
  
  return status; 
 8002c78:	7bfb      	ldrb	r3, [r7, #15]
}
 8002c7a:	4618      	mov	r0, r3
 8002c7c:	3714      	adds	r7, #20
 8002c7e:	46bd      	mov	sp, r7
 8002c80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c84:	4770      	bx	lr
 8002c86:	bf00      	nop

08002c88 <HAL_DMA2D_Init>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Init(DMA2D_HandleTypeDef *hdma2d)
{
 8002c88:	b580      	push	{r7, lr}
 8002c8a:	b082      	sub	sp, #8
 8002c8c:	af00      	add	r7, sp, #0
 8002c8e:	6078      	str	r0, [r7, #4]
  /* Check the DMA2D peripheral state */
  if (hdma2d == NULL)
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	2b00      	cmp	r3, #0
 8002c94:	d101      	bne.n	8002c9a <HAL_DMA2D_Init+0x12>
  {
    return HAL_ERROR;
 8002c96:	2301      	movs	r3, #1
 8002c98:	e03b      	b.n	8002d12 <HAL_DMA2D_Init+0x8a>

    /* Init the low level hardware */
    hdma2d->MspInitCallback(hdma2d);
  }
#else
  if (hdma2d->State == HAL_DMA2D_STATE_RESET)
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	f893 3039 	ldrb.w	r3, [r3, #57]	@ 0x39
 8002ca0:	b2db      	uxtb	r3, r3
 8002ca2:	2b00      	cmp	r3, #0
 8002ca4:	d106      	bne.n	8002cb4 <HAL_DMA2D_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hdma2d->Lock = HAL_UNLOCKED;
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	2200      	movs	r2, #0
 8002caa:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
    /* Init the low level hardware */
    HAL_DMA2D_MspInit(hdma2d);
 8002cae:	6878      	ldr	r0, [r7, #4]
 8002cb0:	f7ff f8f6 	bl	8001ea0 <HAL_DMA2D_MspInit>
  }
#endif /* (USE_HAL_DMA2D_REGISTER_CALLBACKS) */

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	2202      	movs	r2, #2
 8002cb8:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

  /* DMA2D CR register configuration -------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE, hdma2d->Init.Mode);
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	681b      	ldr	r3, [r3, #0]
 8002cc2:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	685a      	ldr	r2, [r3, #4]
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	681b      	ldr	r3, [r3, #0]
 8002cce:	430a      	orrs	r2, r1
 8002cd0:	601a      	str	r2, [r3, #0]

  /* DMA2D OPFCCR register configuration ---------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM, hdma2d->Init.ColorMode);
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	681b      	ldr	r3, [r3, #0]
 8002cd6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002cd8:	f023 0107 	bic.w	r1, r3, #7
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	689a      	ldr	r2, [r3, #8]
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	681b      	ldr	r3, [r3, #0]
 8002ce4:	430a      	orrs	r2, r1
 8002ce6:	635a      	str	r2, [r3, #52]	@ 0x34

  /* DMA2D OOR register configuration ------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, hdma2d->Init.OutputOffset);
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	681b      	ldr	r3, [r3, #0]
 8002cec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002cee:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 8002cf2:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8002cf6:	687a      	ldr	r2, [r7, #4]
 8002cf8:	68d1      	ldr	r1, [r2, #12]
 8002cfa:	687a      	ldr	r2, [r7, #4]
 8002cfc:	6812      	ldr	r2, [r2, #0]
 8002cfe:	430b      	orrs	r3, r1
 8002d00:	6413      	str	r3, [r2, #64]	@ 0x40


  /* Update error code */
  hdma2d->ErrorCode = HAL_DMA2D_ERROR_NONE;
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	2200      	movs	r2, #0
 8002d06:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA2D state*/
  hdma2d->State  = HAL_DMA2D_STATE_READY;
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	2201      	movs	r2, #1
 8002d0c:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

  return HAL_OK;
 8002d10:	2300      	movs	r3, #0
}
 8002d12:	4618      	mov	r0, r3
 8002d14:	3708      	adds	r7, #8
 8002d16:	46bd      	mov	sp, r7
 8002d18:	bd80      	pop	{r7, pc}

08002d1a <HAL_DMA2D_Start>:
  * @param  Height     The height of data to be transferred from source to destination (expressed in number of lines).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Start(DMA2D_HandleTypeDef *hdma2d, uint32_t pdata, uint32_t DstAddress, uint32_t Width,
                                  uint32_t Height)
{
 8002d1a:	b580      	push	{r7, lr}
 8002d1c:	b086      	sub	sp, #24
 8002d1e:	af02      	add	r7, sp, #8
 8002d20:	60f8      	str	r0, [r7, #12]
 8002d22:	60b9      	str	r1, [r7, #8]
 8002d24:	607a      	str	r2, [r7, #4]
 8002d26:	603b      	str	r3, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DMA2D_LINE(Height));
  assert_param(IS_DMA2D_PIXEL(Width));

  /* Process locked */
  __HAL_LOCK(hdma2d);
 8002d28:	68fb      	ldr	r3, [r7, #12]
 8002d2a:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8002d2e:	2b01      	cmp	r3, #1
 8002d30:	d101      	bne.n	8002d36 <HAL_DMA2D_Start+0x1c>
 8002d32:	2302      	movs	r3, #2
 8002d34:	e018      	b.n	8002d68 <HAL_DMA2D_Start+0x4e>
 8002d36:	68fb      	ldr	r3, [r7, #12]
 8002d38:	2201      	movs	r2, #1
 8002d3a:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8002d3e:	68fb      	ldr	r3, [r7, #12]
 8002d40:	2202      	movs	r2, #2
 8002d42:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

  /* Configure the source, destination address and the data size */
  DMA2D_SetConfig(hdma2d, pdata, DstAddress, Width, Height);
 8002d46:	69bb      	ldr	r3, [r7, #24]
 8002d48:	9300      	str	r3, [sp, #0]
 8002d4a:	683b      	ldr	r3, [r7, #0]
 8002d4c:	687a      	ldr	r2, [r7, #4]
 8002d4e:	68b9      	ldr	r1, [r7, #8]
 8002d50:	68f8      	ldr	r0, [r7, #12]
 8002d52:	f000 fa99 	bl	8003288 <DMA2D_SetConfig>

  /* Enable the Peripheral */
  __HAL_DMA2D_ENABLE(hdma2d);
 8002d56:	68fb      	ldr	r3, [r7, #12]
 8002d58:	681b      	ldr	r3, [r3, #0]
 8002d5a:	681a      	ldr	r2, [r3, #0]
 8002d5c:	68fb      	ldr	r3, [r7, #12]
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	f042 0201 	orr.w	r2, r2, #1
 8002d64:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 8002d66:	2300      	movs	r3, #0
}
 8002d68:	4618      	mov	r0, r3
 8002d6a:	3710      	adds	r7, #16
 8002d6c:	46bd      	mov	sp, r7
 8002d6e:	bd80      	pop	{r7, pc}

08002d70 <HAL_DMA2D_PollForTransfer>:
  *                 the configuration information for the DMA2D.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_PollForTransfer(DMA2D_HandleTypeDef *hdma2d, uint32_t Timeout)
{
 8002d70:	b580      	push	{r7, lr}
 8002d72:	b086      	sub	sp, #24
 8002d74:	af00      	add	r7, sp, #0
 8002d76:	6078      	str	r0, [r7, #4]
 8002d78:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t layer_start;
  __IO uint32_t isrflags = 0x0U;
 8002d7a:	2300      	movs	r3, #0
 8002d7c:	60fb      	str	r3, [r7, #12]

  /* Polling for DMA2D transfer */
  if ((hdma2d->Instance->CR & DMA2D_CR_START) != 0U)
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	681b      	ldr	r3, [r3, #0]
 8002d82:	681b      	ldr	r3, [r3, #0]
 8002d84:	f003 0301 	and.w	r3, r3, #1
 8002d88:	2b00      	cmp	r3, #0
 8002d8a:	d056      	beq.n	8002e3a <HAL_DMA2D_PollForTransfer+0xca>
  {
    /* Get tick */
    tickstart = HAL_GetTick();
 8002d8c:	f7ff fc60 	bl	8002650 <HAL_GetTick>
 8002d90:	6178      	str	r0, [r7, #20]

    while (__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_TC) == 0U)
 8002d92:	e04b      	b.n	8002e2c <HAL_DMA2D_PollForTransfer+0xbc>
    {
      isrflags = READ_REG(hdma2d->Instance->ISR);
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	681b      	ldr	r3, [r3, #0]
 8002d98:	685b      	ldr	r3, [r3, #4]
 8002d9a:	60fb      	str	r3, [r7, #12]
      if ((isrflags & (DMA2D_FLAG_CE | DMA2D_FLAG_TE)) != 0U)
 8002d9c:	68fb      	ldr	r3, [r7, #12]
 8002d9e:	f003 0321 	and.w	r3, r3, #33	@ 0x21
 8002da2:	2b00      	cmp	r3, #0
 8002da4:	d023      	beq.n	8002dee <HAL_DMA2D_PollForTransfer+0x7e>
      {
        if ((isrflags & DMA2D_FLAG_CE) != 0U)
 8002da6:	68fb      	ldr	r3, [r7, #12]
 8002da8:	f003 0320 	and.w	r3, r3, #32
 8002dac:	2b00      	cmp	r3, #0
 8002dae:	d005      	beq.n	8002dbc <HAL_DMA2D_PollForTransfer+0x4c>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002db4:	f043 0202 	orr.w	r2, r3, #2
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	63da      	str	r2, [r3, #60]	@ 0x3c
        }
        if ((isrflags & DMA2D_FLAG_TE) != 0U)
 8002dbc:	68fb      	ldr	r3, [r7, #12]
 8002dbe:	f003 0301 	and.w	r3, r3, #1
 8002dc2:	2b00      	cmp	r3, #0
 8002dc4:	d005      	beq.n	8002dd2 <HAL_DMA2D_PollForTransfer+0x62>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002dca:	f043 0201 	orr.w	r2, r3, #1
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	63da      	str	r2, [r3, #60]	@ 0x3c
        }
        /* Clear the transfer and configuration error flags */
        __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CE | DMA2D_FLAG_TE);
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	681b      	ldr	r3, [r3, #0]
 8002dd6:	2221      	movs	r2, #33	@ 0x21
 8002dd8:	609a      	str	r2, [r3, #8]

        /* Change DMA2D state */
        hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	2204      	movs	r2, #4
 8002dde:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

        /* Process unlocked */
        __HAL_UNLOCK(hdma2d);
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	2200      	movs	r2, #0
 8002de6:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

        return HAL_ERROR;
 8002dea:	2301      	movs	r3, #1
 8002dec:	e0a5      	b.n	8002f3a <HAL_DMA2D_PollForTransfer+0x1ca>
      }
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8002dee:	683b      	ldr	r3, [r7, #0]
 8002df0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002df4:	d01a      	beq.n	8002e2c <HAL_DMA2D_PollForTransfer+0xbc>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8002df6:	f7ff fc2b 	bl	8002650 <HAL_GetTick>
 8002dfa:	4602      	mov	r2, r0
 8002dfc:	697b      	ldr	r3, [r7, #20]
 8002dfe:	1ad3      	subs	r3, r2, r3
 8002e00:	683a      	ldr	r2, [r7, #0]
 8002e02:	429a      	cmp	r2, r3
 8002e04:	d302      	bcc.n	8002e0c <HAL_DMA2D_PollForTransfer+0x9c>
 8002e06:	683b      	ldr	r3, [r7, #0]
 8002e08:	2b00      	cmp	r3, #0
 8002e0a:	d10f      	bne.n	8002e2c <HAL_DMA2D_PollForTransfer+0xbc>
        {
          /* Update error code */
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TIMEOUT;
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002e10:	f043 0220 	orr.w	r2, r3, #32
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	63da      	str	r2, [r3, #60]	@ 0x3c

          /* Change the DMA2D state */
          hdma2d->State = HAL_DMA2D_STATE_TIMEOUT;
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	2203      	movs	r2, #3
 8002e1c:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

          /* Process unlocked */
          __HAL_UNLOCK(hdma2d);
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	2200      	movs	r2, #0
 8002e24:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

          return HAL_TIMEOUT;
 8002e28:	2303      	movs	r3, #3
 8002e2a:	e086      	b.n	8002f3a <HAL_DMA2D_PollForTransfer+0x1ca>
    while (__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_TC) == 0U)
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	685b      	ldr	r3, [r3, #4]
 8002e32:	f003 0302 	and.w	r3, r3, #2
 8002e36:	2b00      	cmp	r3, #0
 8002e38:	d0ac      	beq.n	8002d94 <HAL_DMA2D_PollForTransfer+0x24>
        }
      }
    }
  }
  /* Polling for CLUT loading (foreground or background) */
  layer_start = hdma2d->Instance->FGPFCCR & DMA2D_FGPFCCR_START;
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	681b      	ldr	r3, [r3, #0]
 8002e3e:	69db      	ldr	r3, [r3, #28]
 8002e40:	f003 0320 	and.w	r3, r3, #32
 8002e44:	613b      	str	r3, [r7, #16]
  layer_start |= hdma2d->Instance->BGPFCCR & DMA2D_BGPFCCR_START;
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	681b      	ldr	r3, [r3, #0]
 8002e4a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002e4c:	f003 0320 	and.w	r3, r3, #32
 8002e50:	693a      	ldr	r2, [r7, #16]
 8002e52:	4313      	orrs	r3, r2
 8002e54:	613b      	str	r3, [r7, #16]
  if (layer_start != 0U)
 8002e56:	693b      	ldr	r3, [r7, #16]
 8002e58:	2b00      	cmp	r3, #0
 8002e5a:	d061      	beq.n	8002f20 <HAL_DMA2D_PollForTransfer+0x1b0>
  {
    /* Get tick */
    tickstart = HAL_GetTick();
 8002e5c:	f7ff fbf8 	bl	8002650 <HAL_GetTick>
 8002e60:	6178      	str	r0, [r7, #20]

    while (__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_CTC) == 0U)
 8002e62:	e056      	b.n	8002f12 <HAL_DMA2D_PollForTransfer+0x1a2>
    {
      isrflags = READ_REG(hdma2d->Instance->ISR);
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	681b      	ldr	r3, [r3, #0]
 8002e68:	685b      	ldr	r3, [r3, #4]
 8002e6a:	60fb      	str	r3, [r7, #12]
      if ((isrflags & (DMA2D_FLAG_CAE | DMA2D_FLAG_CE | DMA2D_FLAG_TE)) != 0U)
 8002e6c:	68fb      	ldr	r3, [r7, #12]
 8002e6e:	f003 0329 	and.w	r3, r3, #41	@ 0x29
 8002e72:	2b00      	cmp	r3, #0
 8002e74:	d02e      	beq.n	8002ed4 <HAL_DMA2D_PollForTransfer+0x164>
      {
        if ((isrflags & DMA2D_FLAG_CAE) != 0U)
 8002e76:	68fb      	ldr	r3, [r7, #12]
 8002e78:	f003 0308 	and.w	r3, r3, #8
 8002e7c:	2b00      	cmp	r3, #0
 8002e7e:	d005      	beq.n	8002e8c <HAL_DMA2D_PollForTransfer+0x11c>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CAE;
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002e84:	f043 0204 	orr.w	r2, r3, #4
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	63da      	str	r2, [r3, #60]	@ 0x3c
        }
        if ((isrflags & DMA2D_FLAG_CE) != 0U)
 8002e8c:	68fb      	ldr	r3, [r7, #12]
 8002e8e:	f003 0320 	and.w	r3, r3, #32
 8002e92:	2b00      	cmp	r3, #0
 8002e94:	d005      	beq.n	8002ea2 <HAL_DMA2D_PollForTransfer+0x132>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002e9a:	f043 0202 	orr.w	r2, r3, #2
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	63da      	str	r2, [r3, #60]	@ 0x3c
        }
        if ((isrflags & DMA2D_FLAG_TE) != 0U)
 8002ea2:	68fb      	ldr	r3, [r7, #12]
 8002ea4:	f003 0301 	and.w	r3, r3, #1
 8002ea8:	2b00      	cmp	r3, #0
 8002eaa:	d005      	beq.n	8002eb8 <HAL_DMA2D_PollForTransfer+0x148>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002eb0:	f043 0201 	orr.w	r2, r3, #1
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	63da      	str	r2, [r3, #60]	@ 0x3c
        }
        /* Clear the CLUT Access Error, Configuration Error and Transfer Error flags */
        __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CAE | DMA2D_FLAG_CE | DMA2D_FLAG_TE);
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	681b      	ldr	r3, [r3, #0]
 8002ebc:	2229      	movs	r2, #41	@ 0x29
 8002ebe:	609a      	str	r2, [r3, #8]

        /* Change DMA2D state */
        hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	2204      	movs	r2, #4
 8002ec4:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

        /* Process unlocked */
        __HAL_UNLOCK(hdma2d);
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	2200      	movs	r2, #0
 8002ecc:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

        return HAL_ERROR;
 8002ed0:	2301      	movs	r3, #1
 8002ed2:	e032      	b.n	8002f3a <HAL_DMA2D_PollForTransfer+0x1ca>
      }
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8002ed4:	683b      	ldr	r3, [r7, #0]
 8002ed6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002eda:	d01a      	beq.n	8002f12 <HAL_DMA2D_PollForTransfer+0x1a2>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8002edc:	f7ff fbb8 	bl	8002650 <HAL_GetTick>
 8002ee0:	4602      	mov	r2, r0
 8002ee2:	697b      	ldr	r3, [r7, #20]
 8002ee4:	1ad3      	subs	r3, r2, r3
 8002ee6:	683a      	ldr	r2, [r7, #0]
 8002ee8:	429a      	cmp	r2, r3
 8002eea:	d302      	bcc.n	8002ef2 <HAL_DMA2D_PollForTransfer+0x182>
 8002eec:	683b      	ldr	r3, [r7, #0]
 8002eee:	2b00      	cmp	r3, #0
 8002ef0:	d10f      	bne.n	8002f12 <HAL_DMA2D_PollForTransfer+0x1a2>
        {
          /* Update error code */
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TIMEOUT;
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002ef6:	f043 0220 	orr.w	r2, r3, #32
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	63da      	str	r2, [r3, #60]	@ 0x3c

          /* Change the DMA2D state */
          hdma2d->State = HAL_DMA2D_STATE_TIMEOUT;
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	2203      	movs	r2, #3
 8002f02:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

          /* Process unlocked */
          __HAL_UNLOCK(hdma2d);
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	2200      	movs	r2, #0
 8002f0a:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

          return HAL_TIMEOUT;
 8002f0e:	2303      	movs	r3, #3
 8002f10:	e013      	b.n	8002f3a <HAL_DMA2D_PollForTransfer+0x1ca>
    while (__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_CTC) == 0U)
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	681b      	ldr	r3, [r3, #0]
 8002f16:	685b      	ldr	r3, [r3, #4]
 8002f18:	f003 0310 	and.w	r3, r3, #16
 8002f1c:	2b00      	cmp	r3, #0
 8002f1e:	d0a1      	beq.n	8002e64 <HAL_DMA2D_PollForTransfer+0xf4>
      }
    }
  }

  /* Clear the transfer complete and CLUT loading flags */
  __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TC | DMA2D_FLAG_CTC);
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	2212      	movs	r2, #18
 8002f26:	609a      	str	r2, [r3, #8]

  /* Change DMA2D state */
  hdma2d->State = HAL_DMA2D_STATE_READY;
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	2201      	movs	r2, #1
 8002f2c:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	2200      	movs	r2, #0
 8002f34:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

  return HAL_OK;
 8002f38:	2300      	movs	r3, #0
}
 8002f3a:	4618      	mov	r0, r3
 8002f3c:	3718      	adds	r7, #24
 8002f3e:	46bd      	mov	sp, r7
 8002f40:	bd80      	pop	{r7, pc}

08002f42 <HAL_DMA2D_IRQHandler>:
  * @param  hdma2d Pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
void HAL_DMA2D_IRQHandler(DMA2D_HandleTypeDef *hdma2d)
{
 8002f42:	b580      	push	{r7, lr}
 8002f44:	b084      	sub	sp, #16
 8002f46:	af00      	add	r7, sp, #0
 8002f48:	6078      	str	r0, [r7, #4]
  uint32_t isrflags = READ_REG(hdma2d->Instance->ISR);
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	685b      	ldr	r3, [r3, #4]
 8002f50:	60fb      	str	r3, [r7, #12]
  uint32_t crflags = READ_REG(hdma2d->Instance->CR);
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	681b      	ldr	r3, [r3, #0]
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	60bb      	str	r3, [r7, #8]

  /* Transfer Error Interrupt management ***************************************/
  if ((isrflags & DMA2D_FLAG_TE) != 0U)
 8002f5a:	68fb      	ldr	r3, [r7, #12]
 8002f5c:	f003 0301 	and.w	r3, r3, #1
 8002f60:	2b00      	cmp	r3, #0
 8002f62:	d026      	beq.n	8002fb2 <HAL_DMA2D_IRQHandler+0x70>
  {
    if ((crflags & DMA2D_IT_TE) != 0U)
 8002f64:	68bb      	ldr	r3, [r7, #8]
 8002f66:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002f6a:	2b00      	cmp	r3, #0
 8002f6c:	d021      	beq.n	8002fb2 <HAL_DMA2D_IRQHandler+0x70>
    {
      /* Disable the transfer Error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TE);
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	681b      	ldr	r3, [r3, #0]
 8002f72:	681a      	ldr	r2, [r3, #0]
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	681b      	ldr	r3, [r3, #0]
 8002f78:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8002f7c:	601a      	str	r2, [r3, #0]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002f82:	f043 0201 	orr.w	r2, r3, #1
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	63da      	str	r2, [r3, #60]	@ 0x3c

      /* Clear the transfer error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TE);
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	681b      	ldr	r3, [r3, #0]
 8002f8e:	2201      	movs	r2, #1
 8002f90:	609a      	str	r2, [r3, #8]

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	2204      	movs	r2, #4
 8002f96:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	2200      	movs	r2, #0
 8002f9e:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

      if (hdma2d->XferErrorCallback != NULL)
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	695b      	ldr	r3, [r3, #20]
 8002fa6:	2b00      	cmp	r3, #0
 8002fa8:	d003      	beq.n	8002fb2 <HAL_DMA2D_IRQHandler+0x70>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	695b      	ldr	r3, [r3, #20]
 8002fae:	6878      	ldr	r0, [r7, #4]
 8002fb0:	4798      	blx	r3
      }
    }
  }
  /* Configuration Error Interrupt management **********************************/
  if ((isrflags & DMA2D_FLAG_CE) != 0U)
 8002fb2:	68fb      	ldr	r3, [r7, #12]
 8002fb4:	f003 0320 	and.w	r3, r3, #32
 8002fb8:	2b00      	cmp	r3, #0
 8002fba:	d026      	beq.n	800300a <HAL_DMA2D_IRQHandler+0xc8>
  {
    if ((crflags & DMA2D_IT_CE) != 0U)
 8002fbc:	68bb      	ldr	r3, [r7, #8]
 8002fbe:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002fc2:	2b00      	cmp	r3, #0
 8002fc4:	d021      	beq.n	800300a <HAL_DMA2D_IRQHandler+0xc8>
    {
      /* Disable the Configuration Error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CE);
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	681b      	ldr	r3, [r3, #0]
 8002fca:	681a      	ldr	r2, [r3, #0]
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8002fd4:	601a      	str	r2, [r3, #0]

      /* Clear the Configuration error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CE);
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	681b      	ldr	r3, [r3, #0]
 8002fda:	2220      	movs	r2, #32
 8002fdc:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002fe2:	f043 0202 	orr.w	r2, r3, #2
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	63da      	str	r2, [r3, #60]	@ 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	2204      	movs	r2, #4
 8002fee:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	2200      	movs	r2, #0
 8002ff6:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

      if (hdma2d->XferErrorCallback != NULL)
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	695b      	ldr	r3, [r3, #20]
 8002ffe:	2b00      	cmp	r3, #0
 8003000:	d003      	beq.n	800300a <HAL_DMA2D_IRQHandler+0xc8>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	695b      	ldr	r3, [r3, #20]
 8003006:	6878      	ldr	r0, [r7, #4]
 8003008:	4798      	blx	r3
      }
    }
  }
  /* CLUT access Error Interrupt management ***********************************/
  if ((isrflags & DMA2D_FLAG_CAE) != 0U)
 800300a:	68fb      	ldr	r3, [r7, #12]
 800300c:	f003 0308 	and.w	r3, r3, #8
 8003010:	2b00      	cmp	r3, #0
 8003012:	d026      	beq.n	8003062 <HAL_DMA2D_IRQHandler+0x120>
  {
    if ((crflags & DMA2D_IT_CAE) != 0U)
 8003014:	68bb      	ldr	r3, [r7, #8]
 8003016:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800301a:	2b00      	cmp	r3, #0
 800301c:	d021      	beq.n	8003062 <HAL_DMA2D_IRQHandler+0x120>
    {
      /* Disable the CLUT access error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CAE);
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	681b      	ldr	r3, [r3, #0]
 8003022:	681a      	ldr	r2, [r3, #0]
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	681b      	ldr	r3, [r3, #0]
 8003028:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800302c:	601a      	str	r2, [r3, #0]

      /* Clear the CLUT access error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CAE);
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	681b      	ldr	r3, [r3, #0]
 8003032:	2208      	movs	r2, #8
 8003034:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CAE;
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800303a:	f043 0204 	orr.w	r2, r3, #4
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	63da      	str	r2, [r3, #60]	@ 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	2204      	movs	r2, #4
 8003046:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	2200      	movs	r2, #0
 800304e:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

      if (hdma2d->XferErrorCallback != NULL)
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	695b      	ldr	r3, [r3, #20]
 8003056:	2b00      	cmp	r3, #0
 8003058:	d003      	beq.n	8003062 <HAL_DMA2D_IRQHandler+0x120>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	695b      	ldr	r3, [r3, #20]
 800305e:	6878      	ldr	r0, [r7, #4]
 8003060:	4798      	blx	r3
      }
    }
  }
  /* Transfer watermark Interrupt management **********************************/
  if ((isrflags & DMA2D_FLAG_TW) != 0U)
 8003062:	68fb      	ldr	r3, [r7, #12]
 8003064:	f003 0304 	and.w	r3, r3, #4
 8003068:	2b00      	cmp	r3, #0
 800306a:	d013      	beq.n	8003094 <HAL_DMA2D_IRQHandler+0x152>
  {
    if ((crflags & DMA2D_IT_TW) != 0U)
 800306c:	68bb      	ldr	r3, [r7, #8]
 800306e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003072:	2b00      	cmp	r3, #0
 8003074:	d00e      	beq.n	8003094 <HAL_DMA2D_IRQHandler+0x152>
    {
      /* Disable the transfer watermark interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TW);
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	681b      	ldr	r3, [r3, #0]
 800307a:	681a      	ldr	r2, [r3, #0]
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	681b      	ldr	r3, [r3, #0]
 8003080:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003084:	601a      	str	r2, [r3, #0]

      /* Clear the transfer watermark flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TW);
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	681b      	ldr	r3, [r3, #0]
 800308a:	2204      	movs	r2, #4
 800308c:	609a      	str	r2, [r3, #8]

      /* Transfer watermark Callback */
#if (USE_HAL_DMA2D_REGISTER_CALLBACKS == 1)
      hdma2d->LineEventCallback(hdma2d);
#else
      HAL_DMA2D_LineEventCallback(hdma2d);
 800308e:	6878      	ldr	r0, [r7, #4]
 8003090:	f000 f853 	bl	800313a <HAL_DMA2D_LineEventCallback>
#endif /* USE_HAL_DMA2D_REGISTER_CALLBACKS */

    }
  }
  /* Transfer Complete Interrupt management ************************************/
  if ((isrflags & DMA2D_FLAG_TC) != 0U)
 8003094:	68fb      	ldr	r3, [r7, #12]
 8003096:	f003 0302 	and.w	r3, r3, #2
 800309a:	2b00      	cmp	r3, #0
 800309c:	d024      	beq.n	80030e8 <HAL_DMA2D_IRQHandler+0x1a6>
  {
    if ((crflags & DMA2D_IT_TC) != 0U)
 800309e:	68bb      	ldr	r3, [r7, #8]
 80030a0:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80030a4:	2b00      	cmp	r3, #0
 80030a6:	d01f      	beq.n	80030e8 <HAL_DMA2D_IRQHandler+0x1a6>
    {
      /* Disable the transfer complete interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TC);
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	681a      	ldr	r2, [r3, #0]
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	681b      	ldr	r3, [r3, #0]
 80030b2:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 80030b6:	601a      	str	r2, [r3, #0]

      /* Clear the transfer complete flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TC);
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	681b      	ldr	r3, [r3, #0]
 80030bc:	2202      	movs	r2, #2
 80030be:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_NONE;
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	63da      	str	r2, [r3, #60]	@ 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_READY;
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	2201      	movs	r2, #1
 80030cc:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	2200      	movs	r2, #0
 80030d4:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

      if (hdma2d->XferCpltCallback != NULL)
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	691b      	ldr	r3, [r3, #16]
 80030dc:	2b00      	cmp	r3, #0
 80030de:	d003      	beq.n	80030e8 <HAL_DMA2D_IRQHandler+0x1a6>
      {
        /* Transfer complete Callback */
        hdma2d->XferCpltCallback(hdma2d);
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	691b      	ldr	r3, [r3, #16]
 80030e4:	6878      	ldr	r0, [r7, #4]
 80030e6:	4798      	blx	r3
      }
    }
  }
  /* CLUT Transfer Complete Interrupt management ******************************/
  if ((isrflags & DMA2D_FLAG_CTC) != 0U)
 80030e8:	68fb      	ldr	r3, [r7, #12]
 80030ea:	f003 0310 	and.w	r3, r3, #16
 80030ee:	2b00      	cmp	r3, #0
 80030f0:	d01f      	beq.n	8003132 <HAL_DMA2D_IRQHandler+0x1f0>
  {
    if ((crflags & DMA2D_IT_CTC) != 0U)
 80030f2:	68bb      	ldr	r3, [r7, #8]
 80030f4:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80030f8:	2b00      	cmp	r3, #0
 80030fa:	d01a      	beq.n	8003132 <HAL_DMA2D_IRQHandler+0x1f0>
    {
      /* Disable the CLUT transfer complete interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CTC);
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	681b      	ldr	r3, [r3, #0]
 8003100:	681a      	ldr	r2, [r3, #0]
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	681b      	ldr	r3, [r3, #0]
 8003106:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 800310a:	601a      	str	r2, [r3, #0]

      /* Clear the CLUT transfer complete flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CTC);
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	681b      	ldr	r3, [r3, #0]
 8003110:	2210      	movs	r2, #16
 8003112:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_NONE;
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	63da      	str	r2, [r3, #60]	@ 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_READY;
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	2201      	movs	r2, #1
 8003120:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	2200      	movs	r2, #0
 8003128:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

      /* CLUT Transfer complete Callback */
#if (USE_HAL_DMA2D_REGISTER_CALLBACKS == 1)
      hdma2d->CLUTLoadingCpltCallback(hdma2d);
#else
      HAL_DMA2D_CLUTLoadingCpltCallback(hdma2d);
 800312c:	6878      	ldr	r0, [r7, #4]
 800312e:	f000 f80e 	bl	800314e <HAL_DMA2D_CLUTLoadingCpltCallback>
#endif /* USE_HAL_DMA2D_REGISTER_CALLBACKS */
    }
  }

}
 8003132:	bf00      	nop
 8003134:	3710      	adds	r7, #16
 8003136:	46bd      	mov	sp, r7
 8003138:	bd80      	pop	{r7, pc}

0800313a <HAL_DMA2D_LineEventCallback>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval None
  */
__weak void HAL_DMA2D_LineEventCallback(DMA2D_HandleTypeDef *hdma2d)
{
 800313a:	b480      	push	{r7}
 800313c:	b083      	sub	sp, #12
 800313e:	af00      	add	r7, sp, #0
 8003140:	6078      	str	r0, [r7, #4]
  UNUSED(hdma2d);

  /* NOTE : This function should not be modified; when the callback is needed,
            the HAL_DMA2D_LineEventCallback can be implemented in the user file.
   */
}
 8003142:	bf00      	nop
 8003144:	370c      	adds	r7, #12
 8003146:	46bd      	mov	sp, r7
 8003148:	f85d 7b04 	ldr.w	r7, [sp], #4
 800314c:	4770      	bx	lr

0800314e <HAL_DMA2D_CLUTLoadingCpltCallback>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval None
  */
__weak void HAL_DMA2D_CLUTLoadingCpltCallback(DMA2D_HandleTypeDef *hdma2d)
{
 800314e:	b480      	push	{r7}
 8003150:	b083      	sub	sp, #12
 8003152:	af00      	add	r7, sp, #0
 8003154:	6078      	str	r0, [r7, #4]
  UNUSED(hdma2d);

  /* NOTE : This function should not be modified; when the callback is needed,
            the HAL_DMA2D_CLUTLoadingCpltCallback can be implemented in the user file.
   */
}
 8003156:	bf00      	nop
 8003158:	370c      	adds	r7, #12
 800315a:	46bd      	mov	sp, r7
 800315c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003160:	4770      	bx	lr
	...

08003164 <HAL_DMA2D_ConfigLayer>:
  *                   This parameter can be one of the following values:
  *                   DMA2D_BACKGROUND_LAYER(0) / DMA2D_FOREGROUND_LAYER(1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_ConfigLayer(DMA2D_HandleTypeDef *hdma2d, uint32_t LayerIdx)
{
 8003164:	b480      	push	{r7}
 8003166:	b087      	sub	sp, #28
 8003168:	af00      	add	r7, sp, #0
 800316a:	6078      	str	r0, [r7, #4]
 800316c:	6039      	str	r1, [r7, #0]
  uint32_t regValue;

  /* Check the parameters */
  assert_param(IS_DMA2D_LAYER(LayerIdx));
  assert_param(IS_DMA2D_OFFSET(hdma2d->LayerCfg[LayerIdx].InputOffset));
  if (hdma2d->Init.Mode != DMA2D_R2M)
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	685b      	ldr	r3, [r3, #4]
 8003172:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
      assert_param(IS_DMA2D_ALPHA_MODE(hdma2d->LayerCfg[LayerIdx].AlphaMode));
    }
  }

  /* Process locked */
  __HAL_LOCK(hdma2d);
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 800317c:	2b01      	cmp	r3, #1
 800317e:	d101      	bne.n	8003184 <HAL_DMA2D_ConfigLayer+0x20>
 8003180:	2302      	movs	r3, #2
 8003182:	e079      	b.n	8003278 <HAL_DMA2D_ConfigLayer+0x114>
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	2201      	movs	r2, #1
 8003188:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	2202      	movs	r2, #2
 8003190:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

  pLayerCfg = &hdma2d->LayerCfg[LayerIdx];
 8003194:	683b      	ldr	r3, [r7, #0]
 8003196:	011b      	lsls	r3, r3, #4
 8003198:	3318      	adds	r3, #24
 800319a:	687a      	ldr	r2, [r7, #4]
 800319c:	4413      	add	r3, r2
 800319e:	613b      	str	r3, [r7, #16]

  /* Prepare the value to be written to the BGPFCCR or FGPFCCR register */
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos);
 80031a0:	693b      	ldr	r3, [r7, #16]
 80031a2:	685a      	ldr	r2, [r3, #4]
 80031a4:	693b      	ldr	r3, [r7, #16]
 80031a6:	689b      	ldr	r3, [r3, #8]
 80031a8:	041b      	lsls	r3, r3, #16
 80031aa:	4313      	orrs	r3, r2
 80031ac:	617b      	str	r3, [r7, #20]
  regMask  = DMA2D_BGPFCCR_CM | DMA2D_BGPFCCR_AM | DMA2D_BGPFCCR_ALPHA;
 80031ae:	4b35      	ldr	r3, [pc, #212]	@ (8003284 <HAL_DMA2D_ConfigLayer+0x120>)
 80031b0:	60fb      	str	r3, [r7, #12]


  if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 80031b2:	693b      	ldr	r3, [r7, #16]
 80031b4:	685b      	ldr	r3, [r3, #4]
 80031b6:	2b0a      	cmp	r3, #10
 80031b8:	d003      	beq.n	80031c2 <HAL_DMA2D_ConfigLayer+0x5e>
 80031ba:	693b      	ldr	r3, [r7, #16]
 80031bc:	685b      	ldr	r3, [r3, #4]
 80031be:	2b09      	cmp	r3, #9
 80031c0:	d107      	bne.n	80031d2 <HAL_DMA2D_ConfigLayer+0x6e>
  {
    regValue |= (pLayerCfg->InputAlpha & DMA2D_BGPFCCR_ALPHA);
 80031c2:	693b      	ldr	r3, [r7, #16]
 80031c4:	68db      	ldr	r3, [r3, #12]
 80031c6:	f003 437f 	and.w	r3, r3, #4278190080	@ 0xff000000
 80031ca:	697a      	ldr	r2, [r7, #20]
 80031cc:	4313      	orrs	r3, r2
 80031ce:	617b      	str	r3, [r7, #20]
 80031d0:	e005      	b.n	80031de <HAL_DMA2D_ConfigLayer+0x7a>
  }
  else
  {
    regValue |= (pLayerCfg->InputAlpha << DMA2D_BGPFCCR_ALPHA_Pos);
 80031d2:	693b      	ldr	r3, [r7, #16]
 80031d4:	68db      	ldr	r3, [r3, #12]
 80031d6:	061b      	lsls	r3, r3, #24
 80031d8:	697a      	ldr	r2, [r7, #20]
 80031da:	4313      	orrs	r3, r2
 80031dc:	617b      	str	r3, [r7, #20]
  }

  /* Configure the background DMA2D layer */
  if (LayerIdx == DMA2D_BACKGROUND_LAYER)
 80031de:	683b      	ldr	r3, [r7, #0]
 80031e0:	2b00      	cmp	r3, #0
 80031e2:	d120      	bne.n	8003226 <HAL_DMA2D_ConfigLayer+0xc2>
  {
    /* Write DMA2D BGPFCCR register */
    MODIFY_REG(hdma2d->Instance->BGPFCCR, regMask, regValue);
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	681b      	ldr	r3, [r3, #0]
 80031e8:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80031ea:	68fb      	ldr	r3, [r7, #12]
 80031ec:	43db      	mvns	r3, r3
 80031ee:	ea02 0103 	and.w	r1, r2, r3
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	681b      	ldr	r3, [r3, #0]
 80031f6:	697a      	ldr	r2, [r7, #20]
 80031f8:	430a      	orrs	r2, r1
 80031fa:	625a      	str	r2, [r3, #36]	@ 0x24

    /* DMA2D BGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->BGOR, pLayerCfg->InputOffset);
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	681b      	ldr	r3, [r3, #0]
 8003200:	693a      	ldr	r2, [r7, #16]
 8003202:	6812      	ldr	r2, [r2, #0]
 8003204:	619a      	str	r2, [r3, #24]

    /* DMA2D BGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8003206:	693b      	ldr	r3, [r7, #16]
 8003208:	685b      	ldr	r3, [r3, #4]
 800320a:	2b0a      	cmp	r3, #10
 800320c:	d003      	beq.n	8003216 <HAL_DMA2D_ConfigLayer+0xb2>
 800320e:	693b      	ldr	r3, [r7, #16]
 8003210:	685b      	ldr	r3, [r3, #4]
 8003212:	2b09      	cmp	r3, #9
 8003214:	d127      	bne.n	8003266 <HAL_DMA2D_ConfigLayer+0x102>
    {
      WRITE_REG(hdma2d->Instance->BGCOLR, pLayerCfg->InputAlpha & (DMA2D_BGCOLR_BLUE | DMA2D_BGCOLR_GREEN | \
 8003216:	693b      	ldr	r3, [r7, #16]
 8003218:	68da      	ldr	r2, [r3, #12]
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	681b      	ldr	r3, [r3, #0]
 800321e:	f022 427f 	bic.w	r2, r2, #4278190080	@ 0xff000000
 8003222:	629a      	str	r2, [r3, #40]	@ 0x28
 8003224:	e01f      	b.n	8003266 <HAL_DMA2D_ConfigLayer+0x102>
  else
  {


    /* Write DMA2D FGPFCCR register */
    MODIFY_REG(hdma2d->Instance->FGPFCCR, regMask, regValue);
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	681b      	ldr	r3, [r3, #0]
 800322a:	69da      	ldr	r2, [r3, #28]
 800322c:	68fb      	ldr	r3, [r7, #12]
 800322e:	43db      	mvns	r3, r3
 8003230:	ea02 0103 	and.w	r1, r2, r3
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	697a      	ldr	r2, [r7, #20]
 800323a:	430a      	orrs	r2, r1
 800323c:	61da      	str	r2, [r3, #28]

    /* DMA2D FGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->FGOR, pLayerCfg->InputOffset);
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	681b      	ldr	r3, [r3, #0]
 8003242:	693a      	ldr	r2, [r7, #16]
 8003244:	6812      	ldr	r2, [r2, #0]
 8003246:	611a      	str	r2, [r3, #16]

    /* DMA2D FGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8003248:	693b      	ldr	r3, [r7, #16]
 800324a:	685b      	ldr	r3, [r3, #4]
 800324c:	2b0a      	cmp	r3, #10
 800324e:	d003      	beq.n	8003258 <HAL_DMA2D_ConfigLayer+0xf4>
 8003250:	693b      	ldr	r3, [r7, #16]
 8003252:	685b      	ldr	r3, [r3, #4]
 8003254:	2b09      	cmp	r3, #9
 8003256:	d106      	bne.n	8003266 <HAL_DMA2D_ConfigLayer+0x102>
    {
      WRITE_REG(hdma2d->Instance->FGCOLR, pLayerCfg->InputAlpha & (DMA2D_FGCOLR_BLUE | DMA2D_FGCOLR_GREEN | \
 8003258:	693b      	ldr	r3, [r7, #16]
 800325a:	68da      	ldr	r2, [r3, #12]
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	f022 427f 	bic.w	r2, r2, #4278190080	@ 0xff000000
 8003264:	621a      	str	r2, [r3, #32]
                                                                   DMA2D_FGCOLR_RED));
    }
  }
  /* Initialize the DMA2D state*/
  hdma2d->State = HAL_DMA2D_STATE_READY;
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	2201      	movs	r2, #1
 800326a:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	2200      	movs	r2, #0
 8003272:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

  return HAL_OK;
 8003276:	2300      	movs	r3, #0
}
 8003278:	4618      	mov	r0, r3
 800327a:	371c      	adds	r7, #28
 800327c:	46bd      	mov	sp, r7
 800327e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003282:	4770      	bx	lr
 8003284:	ff03000f 	.word	0xff03000f

08003288 <DMA2D_SetConfig>:
  * @param  Height     The height of data to be transferred from source to destination.
  * @retval HAL status
  */
static void DMA2D_SetConfig(DMA2D_HandleTypeDef *hdma2d, uint32_t pdata, uint32_t DstAddress, uint32_t Width,
                            uint32_t Height)
{
 8003288:	b480      	push	{r7}
 800328a:	b08b      	sub	sp, #44	@ 0x2c
 800328c:	af00      	add	r7, sp, #0
 800328e:	60f8      	str	r0, [r7, #12]
 8003290:	60b9      	str	r1, [r7, #8]
 8003292:	607a      	str	r2, [r7, #4]
 8003294:	603b      	str	r3, [r7, #0]
  uint32_t tmp2;
  uint32_t tmp3;
  uint32_t tmp4;

  /* Configure DMA2D data size */
  MODIFY_REG(hdma2d->Instance->NLR, (DMA2D_NLR_NL | DMA2D_NLR_PL), (Height | (Width << DMA2D_NLR_PL_Pos)));
 8003296:	68fb      	ldr	r3, [r7, #12]
 8003298:	681b      	ldr	r3, [r3, #0]
 800329a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800329c:	f003 4140 	and.w	r1, r3, #3221225472	@ 0xc0000000
 80032a0:	683b      	ldr	r3, [r7, #0]
 80032a2:	041a      	lsls	r2, r3, #16
 80032a4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80032a6:	431a      	orrs	r2, r3
 80032a8:	68fb      	ldr	r3, [r7, #12]
 80032aa:	681b      	ldr	r3, [r3, #0]
 80032ac:	430a      	orrs	r2, r1
 80032ae:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Configure DMA2D destination address */
  WRITE_REG(hdma2d->Instance->OMAR, DstAddress);
 80032b0:	68fb      	ldr	r3, [r7, #12]
 80032b2:	681b      	ldr	r3, [r3, #0]
 80032b4:	687a      	ldr	r2, [r7, #4]
 80032b6:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Register to memory DMA2D mode selected */
  if (hdma2d->Init.Mode == DMA2D_R2M)
 80032b8:	68fb      	ldr	r3, [r7, #12]
 80032ba:	685b      	ldr	r3, [r3, #4]
 80032bc:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 80032c0:	d174      	bne.n	80033ac <DMA2D_SetConfig+0x124>
  {
    tmp1 = pdata & DMA2D_OCOLR_ALPHA_1;
 80032c2:	68bb      	ldr	r3, [r7, #8]
 80032c4:	f003 437f 	and.w	r3, r3, #4278190080	@ 0xff000000
 80032c8:	623b      	str	r3, [r7, #32]
    tmp2 = pdata & DMA2D_OCOLR_RED_1;
 80032ca:	68bb      	ldr	r3, [r7, #8]
 80032cc:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 80032d0:	61fb      	str	r3, [r7, #28]
    tmp3 = pdata & DMA2D_OCOLR_GREEN_1;
 80032d2:	68bb      	ldr	r3, [r7, #8]
 80032d4:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 80032d8:	61bb      	str	r3, [r7, #24]
    tmp4 = pdata & DMA2D_OCOLR_BLUE_1;
 80032da:	68bb      	ldr	r3, [r7, #8]
 80032dc:	b2db      	uxtb	r3, r3
 80032de:	617b      	str	r3, [r7, #20]

    /* Prepare the value to be written to the OCOLR register according to the color mode */
    if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_ARGB8888)
 80032e0:	68fb      	ldr	r3, [r7, #12]
 80032e2:	689b      	ldr	r3, [r3, #8]
 80032e4:	2b00      	cmp	r3, #0
 80032e6:	d108      	bne.n	80032fa <DMA2D_SetConfig+0x72>
    {
      tmp = (tmp3 | tmp2 | tmp1 | tmp4);
 80032e8:	69ba      	ldr	r2, [r7, #24]
 80032ea:	69fb      	ldr	r3, [r7, #28]
 80032ec:	431a      	orrs	r2, r3
 80032ee:	6a3b      	ldr	r3, [r7, #32]
 80032f0:	4313      	orrs	r3, r2
 80032f2:	697a      	ldr	r2, [r7, #20]
 80032f4:	4313      	orrs	r3, r2
 80032f6:	627b      	str	r3, [r7, #36]	@ 0x24
 80032f8:	e053      	b.n	80033a2 <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_RGB888)
 80032fa:	68fb      	ldr	r3, [r7, #12]
 80032fc:	689b      	ldr	r3, [r3, #8]
 80032fe:	2b01      	cmp	r3, #1
 8003300:	d106      	bne.n	8003310 <DMA2D_SetConfig+0x88>
    {
      tmp = (tmp3 | tmp2 | tmp4);
 8003302:	69ba      	ldr	r2, [r7, #24]
 8003304:	69fb      	ldr	r3, [r7, #28]
 8003306:	4313      	orrs	r3, r2
 8003308:	697a      	ldr	r2, [r7, #20]
 800330a:	4313      	orrs	r3, r2
 800330c:	627b      	str	r3, [r7, #36]	@ 0x24
 800330e:	e048      	b.n	80033a2 <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_RGB565)
 8003310:	68fb      	ldr	r3, [r7, #12]
 8003312:	689b      	ldr	r3, [r3, #8]
 8003314:	2b02      	cmp	r3, #2
 8003316:	d111      	bne.n	800333c <DMA2D_SetConfig+0xb4>
    {
      tmp2 = (tmp2 >> 19U);
 8003318:	69fb      	ldr	r3, [r7, #28]
 800331a:	0cdb      	lsrs	r3, r3, #19
 800331c:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 10U);
 800331e:	69bb      	ldr	r3, [r7, #24]
 8003320:	0a9b      	lsrs	r3, r3, #10
 8003322:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 3U);
 8003324:	697b      	ldr	r3, [r7, #20]
 8003326:	08db      	lsrs	r3, r3, #3
 8003328:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 5U) | (tmp2 << 11U) | tmp4);
 800332a:	69bb      	ldr	r3, [r7, #24]
 800332c:	015a      	lsls	r2, r3, #5
 800332e:	69fb      	ldr	r3, [r7, #28]
 8003330:	02db      	lsls	r3, r3, #11
 8003332:	4313      	orrs	r3, r2
 8003334:	697a      	ldr	r2, [r7, #20]
 8003336:	4313      	orrs	r3, r2
 8003338:	627b      	str	r3, [r7, #36]	@ 0x24
 800333a:	e032      	b.n	80033a2 <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_ARGB1555)
 800333c:	68fb      	ldr	r3, [r7, #12]
 800333e:	689b      	ldr	r3, [r3, #8]
 8003340:	2b03      	cmp	r3, #3
 8003342:	d117      	bne.n	8003374 <DMA2D_SetConfig+0xec>
    {
      tmp1 = (tmp1 >> 31U);
 8003344:	6a3b      	ldr	r3, [r7, #32]
 8003346:	0fdb      	lsrs	r3, r3, #31
 8003348:	623b      	str	r3, [r7, #32]
      tmp2 = (tmp2 >> 19U);
 800334a:	69fb      	ldr	r3, [r7, #28]
 800334c:	0cdb      	lsrs	r3, r3, #19
 800334e:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 11U);
 8003350:	69bb      	ldr	r3, [r7, #24]
 8003352:	0adb      	lsrs	r3, r3, #11
 8003354:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 3U);
 8003356:	697b      	ldr	r3, [r7, #20]
 8003358:	08db      	lsrs	r3, r3, #3
 800335a:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 5U) | (tmp2 << 10U) | (tmp1 << 15U) | tmp4);
 800335c:	69bb      	ldr	r3, [r7, #24]
 800335e:	015a      	lsls	r2, r3, #5
 8003360:	69fb      	ldr	r3, [r7, #28]
 8003362:	029b      	lsls	r3, r3, #10
 8003364:	431a      	orrs	r2, r3
 8003366:	6a3b      	ldr	r3, [r7, #32]
 8003368:	03db      	lsls	r3, r3, #15
 800336a:	4313      	orrs	r3, r2
 800336c:	697a      	ldr	r2, [r7, #20]
 800336e:	4313      	orrs	r3, r2
 8003370:	627b      	str	r3, [r7, #36]	@ 0x24
 8003372:	e016      	b.n	80033a2 <DMA2D_SetConfig+0x11a>
    }
    else /* Dhdma2d->Init.ColorMode = DMA2D_OUTPUT_ARGB4444 */
    {
      tmp1 = (tmp1 >> 28U);
 8003374:	6a3b      	ldr	r3, [r7, #32]
 8003376:	0f1b      	lsrs	r3, r3, #28
 8003378:	623b      	str	r3, [r7, #32]
      tmp2 = (tmp2 >> 20U);
 800337a:	69fb      	ldr	r3, [r7, #28]
 800337c:	0d1b      	lsrs	r3, r3, #20
 800337e:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 12U);
 8003380:	69bb      	ldr	r3, [r7, #24]
 8003382:	0b1b      	lsrs	r3, r3, #12
 8003384:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 4U);
 8003386:	697b      	ldr	r3, [r7, #20]
 8003388:	091b      	lsrs	r3, r3, #4
 800338a:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 4U) | (tmp2 << 8U) | (tmp1 << 12U) | tmp4);
 800338c:	69bb      	ldr	r3, [r7, #24]
 800338e:	011a      	lsls	r2, r3, #4
 8003390:	69fb      	ldr	r3, [r7, #28]
 8003392:	021b      	lsls	r3, r3, #8
 8003394:	431a      	orrs	r2, r3
 8003396:	6a3b      	ldr	r3, [r7, #32]
 8003398:	031b      	lsls	r3, r3, #12
 800339a:	4313      	orrs	r3, r2
 800339c:	697a      	ldr	r2, [r7, #20]
 800339e:	4313      	orrs	r3, r2
 80033a0:	627b      	str	r3, [r7, #36]	@ 0x24
    }
    /* Write to DMA2D OCOLR register */
    WRITE_REG(hdma2d->Instance->OCOLR, tmp);
 80033a2:	68fb      	ldr	r3, [r7, #12]
 80033a4:	681b      	ldr	r3, [r3, #0]
 80033a6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80033a8:	639a      	str	r2, [r3, #56]	@ 0x38
  else /* M2M, M2M_PFC or M2M_Blending DMA2D Mode */
  {
    /* Configure DMA2D source address */
    WRITE_REG(hdma2d->Instance->FGMAR, pdata);
  }
}
 80033aa:	e003      	b.n	80033b4 <DMA2D_SetConfig+0x12c>
    WRITE_REG(hdma2d->Instance->FGMAR, pdata);
 80033ac:	68fb      	ldr	r3, [r7, #12]
 80033ae:	681b      	ldr	r3, [r3, #0]
 80033b0:	68ba      	ldr	r2, [r7, #8]
 80033b2:	60da      	str	r2, [r3, #12]
}
 80033b4:	bf00      	nop
 80033b6:	372c      	adds	r7, #44	@ 0x2c
 80033b8:	46bd      	mov	sp, r7
 80033ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033be:	4770      	bx	lr

080033c0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80033c0:	b480      	push	{r7}
 80033c2:	b089      	sub	sp, #36	@ 0x24
 80033c4:	af00      	add	r7, sp, #0
 80033c6:	6078      	str	r0, [r7, #4]
 80033c8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80033ca:	2300      	movs	r3, #0
 80033cc:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80033ce:	2300      	movs	r3, #0
 80033d0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80033d2:	2300      	movs	r3, #0
 80033d4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80033d6:	2300      	movs	r3, #0
 80033d8:	61fb      	str	r3, [r7, #28]
 80033da:	e177      	b.n	80036cc <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80033dc:	2201      	movs	r2, #1
 80033de:	69fb      	ldr	r3, [r7, #28]
 80033e0:	fa02 f303 	lsl.w	r3, r2, r3
 80033e4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80033e6:	683b      	ldr	r3, [r7, #0]
 80033e8:	681b      	ldr	r3, [r3, #0]
 80033ea:	697a      	ldr	r2, [r7, #20]
 80033ec:	4013      	ands	r3, r2
 80033ee:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80033f0:	693a      	ldr	r2, [r7, #16]
 80033f2:	697b      	ldr	r3, [r7, #20]
 80033f4:	429a      	cmp	r2, r3
 80033f6:	f040 8166 	bne.w	80036c6 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80033fa:	683b      	ldr	r3, [r7, #0]
 80033fc:	685b      	ldr	r3, [r3, #4]
 80033fe:	f003 0303 	and.w	r3, r3, #3
 8003402:	2b01      	cmp	r3, #1
 8003404:	d005      	beq.n	8003412 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003406:	683b      	ldr	r3, [r7, #0]
 8003408:	685b      	ldr	r3, [r3, #4]
 800340a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800340e:	2b02      	cmp	r3, #2
 8003410:	d130      	bne.n	8003474 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	689b      	ldr	r3, [r3, #8]
 8003416:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003418:	69fb      	ldr	r3, [r7, #28]
 800341a:	005b      	lsls	r3, r3, #1
 800341c:	2203      	movs	r2, #3
 800341e:	fa02 f303 	lsl.w	r3, r2, r3
 8003422:	43db      	mvns	r3, r3
 8003424:	69ba      	ldr	r2, [r7, #24]
 8003426:	4013      	ands	r3, r2
 8003428:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800342a:	683b      	ldr	r3, [r7, #0]
 800342c:	68da      	ldr	r2, [r3, #12]
 800342e:	69fb      	ldr	r3, [r7, #28]
 8003430:	005b      	lsls	r3, r3, #1
 8003432:	fa02 f303 	lsl.w	r3, r2, r3
 8003436:	69ba      	ldr	r2, [r7, #24]
 8003438:	4313      	orrs	r3, r2
 800343a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	69ba      	ldr	r2, [r7, #24]
 8003440:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	685b      	ldr	r3, [r3, #4]
 8003446:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003448:	2201      	movs	r2, #1
 800344a:	69fb      	ldr	r3, [r7, #28]
 800344c:	fa02 f303 	lsl.w	r3, r2, r3
 8003450:	43db      	mvns	r3, r3
 8003452:	69ba      	ldr	r2, [r7, #24]
 8003454:	4013      	ands	r3, r2
 8003456:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003458:	683b      	ldr	r3, [r7, #0]
 800345a:	685b      	ldr	r3, [r3, #4]
 800345c:	091b      	lsrs	r3, r3, #4
 800345e:	f003 0201 	and.w	r2, r3, #1
 8003462:	69fb      	ldr	r3, [r7, #28]
 8003464:	fa02 f303 	lsl.w	r3, r2, r3
 8003468:	69ba      	ldr	r2, [r7, #24]
 800346a:	4313      	orrs	r3, r2
 800346c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	69ba      	ldr	r2, [r7, #24]
 8003472:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003474:	683b      	ldr	r3, [r7, #0]
 8003476:	685b      	ldr	r3, [r3, #4]
 8003478:	f003 0303 	and.w	r3, r3, #3
 800347c:	2b03      	cmp	r3, #3
 800347e:	d017      	beq.n	80034b0 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	68db      	ldr	r3, [r3, #12]
 8003484:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8003486:	69fb      	ldr	r3, [r7, #28]
 8003488:	005b      	lsls	r3, r3, #1
 800348a:	2203      	movs	r2, #3
 800348c:	fa02 f303 	lsl.w	r3, r2, r3
 8003490:	43db      	mvns	r3, r3
 8003492:	69ba      	ldr	r2, [r7, #24]
 8003494:	4013      	ands	r3, r2
 8003496:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003498:	683b      	ldr	r3, [r7, #0]
 800349a:	689a      	ldr	r2, [r3, #8]
 800349c:	69fb      	ldr	r3, [r7, #28]
 800349e:	005b      	lsls	r3, r3, #1
 80034a0:	fa02 f303 	lsl.w	r3, r2, r3
 80034a4:	69ba      	ldr	r2, [r7, #24]
 80034a6:	4313      	orrs	r3, r2
 80034a8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	69ba      	ldr	r2, [r7, #24]
 80034ae:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80034b0:	683b      	ldr	r3, [r7, #0]
 80034b2:	685b      	ldr	r3, [r3, #4]
 80034b4:	f003 0303 	and.w	r3, r3, #3
 80034b8:	2b02      	cmp	r3, #2
 80034ba:	d123      	bne.n	8003504 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80034bc:	69fb      	ldr	r3, [r7, #28]
 80034be:	08da      	lsrs	r2, r3, #3
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	3208      	adds	r2, #8
 80034c4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80034c8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80034ca:	69fb      	ldr	r3, [r7, #28]
 80034cc:	f003 0307 	and.w	r3, r3, #7
 80034d0:	009b      	lsls	r3, r3, #2
 80034d2:	220f      	movs	r2, #15
 80034d4:	fa02 f303 	lsl.w	r3, r2, r3
 80034d8:	43db      	mvns	r3, r3
 80034da:	69ba      	ldr	r2, [r7, #24]
 80034dc:	4013      	ands	r3, r2
 80034de:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80034e0:	683b      	ldr	r3, [r7, #0]
 80034e2:	691a      	ldr	r2, [r3, #16]
 80034e4:	69fb      	ldr	r3, [r7, #28]
 80034e6:	f003 0307 	and.w	r3, r3, #7
 80034ea:	009b      	lsls	r3, r3, #2
 80034ec:	fa02 f303 	lsl.w	r3, r2, r3
 80034f0:	69ba      	ldr	r2, [r7, #24]
 80034f2:	4313      	orrs	r3, r2
 80034f4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80034f6:	69fb      	ldr	r3, [r7, #28]
 80034f8:	08da      	lsrs	r2, r3, #3
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	3208      	adds	r2, #8
 80034fe:	69b9      	ldr	r1, [r7, #24]
 8003500:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	681b      	ldr	r3, [r3, #0]
 8003508:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800350a:	69fb      	ldr	r3, [r7, #28]
 800350c:	005b      	lsls	r3, r3, #1
 800350e:	2203      	movs	r2, #3
 8003510:	fa02 f303 	lsl.w	r3, r2, r3
 8003514:	43db      	mvns	r3, r3
 8003516:	69ba      	ldr	r2, [r7, #24]
 8003518:	4013      	ands	r3, r2
 800351a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800351c:	683b      	ldr	r3, [r7, #0]
 800351e:	685b      	ldr	r3, [r3, #4]
 8003520:	f003 0203 	and.w	r2, r3, #3
 8003524:	69fb      	ldr	r3, [r7, #28]
 8003526:	005b      	lsls	r3, r3, #1
 8003528:	fa02 f303 	lsl.w	r3, r2, r3
 800352c:	69ba      	ldr	r2, [r7, #24]
 800352e:	4313      	orrs	r3, r2
 8003530:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	69ba      	ldr	r2, [r7, #24]
 8003536:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8003538:	683b      	ldr	r3, [r7, #0]
 800353a:	685b      	ldr	r3, [r3, #4]
 800353c:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8003540:	2b00      	cmp	r3, #0
 8003542:	f000 80c0 	beq.w	80036c6 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003546:	2300      	movs	r3, #0
 8003548:	60fb      	str	r3, [r7, #12]
 800354a:	4b66      	ldr	r3, [pc, #408]	@ (80036e4 <HAL_GPIO_Init+0x324>)
 800354c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800354e:	4a65      	ldr	r2, [pc, #404]	@ (80036e4 <HAL_GPIO_Init+0x324>)
 8003550:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8003554:	6453      	str	r3, [r2, #68]	@ 0x44
 8003556:	4b63      	ldr	r3, [pc, #396]	@ (80036e4 <HAL_GPIO_Init+0x324>)
 8003558:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800355a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800355e:	60fb      	str	r3, [r7, #12]
 8003560:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003562:	4a61      	ldr	r2, [pc, #388]	@ (80036e8 <HAL_GPIO_Init+0x328>)
 8003564:	69fb      	ldr	r3, [r7, #28]
 8003566:	089b      	lsrs	r3, r3, #2
 8003568:	3302      	adds	r3, #2
 800356a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800356e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003570:	69fb      	ldr	r3, [r7, #28]
 8003572:	f003 0303 	and.w	r3, r3, #3
 8003576:	009b      	lsls	r3, r3, #2
 8003578:	220f      	movs	r2, #15
 800357a:	fa02 f303 	lsl.w	r3, r2, r3
 800357e:	43db      	mvns	r3, r3
 8003580:	69ba      	ldr	r2, [r7, #24]
 8003582:	4013      	ands	r3, r2
 8003584:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	4a58      	ldr	r2, [pc, #352]	@ (80036ec <HAL_GPIO_Init+0x32c>)
 800358a:	4293      	cmp	r3, r2
 800358c:	d037      	beq.n	80035fe <HAL_GPIO_Init+0x23e>
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	4a57      	ldr	r2, [pc, #348]	@ (80036f0 <HAL_GPIO_Init+0x330>)
 8003592:	4293      	cmp	r3, r2
 8003594:	d031      	beq.n	80035fa <HAL_GPIO_Init+0x23a>
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	4a56      	ldr	r2, [pc, #344]	@ (80036f4 <HAL_GPIO_Init+0x334>)
 800359a:	4293      	cmp	r3, r2
 800359c:	d02b      	beq.n	80035f6 <HAL_GPIO_Init+0x236>
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	4a55      	ldr	r2, [pc, #340]	@ (80036f8 <HAL_GPIO_Init+0x338>)
 80035a2:	4293      	cmp	r3, r2
 80035a4:	d025      	beq.n	80035f2 <HAL_GPIO_Init+0x232>
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	4a54      	ldr	r2, [pc, #336]	@ (80036fc <HAL_GPIO_Init+0x33c>)
 80035aa:	4293      	cmp	r3, r2
 80035ac:	d01f      	beq.n	80035ee <HAL_GPIO_Init+0x22e>
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	4a53      	ldr	r2, [pc, #332]	@ (8003700 <HAL_GPIO_Init+0x340>)
 80035b2:	4293      	cmp	r3, r2
 80035b4:	d019      	beq.n	80035ea <HAL_GPIO_Init+0x22a>
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	4a52      	ldr	r2, [pc, #328]	@ (8003704 <HAL_GPIO_Init+0x344>)
 80035ba:	4293      	cmp	r3, r2
 80035bc:	d013      	beq.n	80035e6 <HAL_GPIO_Init+0x226>
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	4a51      	ldr	r2, [pc, #324]	@ (8003708 <HAL_GPIO_Init+0x348>)
 80035c2:	4293      	cmp	r3, r2
 80035c4:	d00d      	beq.n	80035e2 <HAL_GPIO_Init+0x222>
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	4a50      	ldr	r2, [pc, #320]	@ (800370c <HAL_GPIO_Init+0x34c>)
 80035ca:	4293      	cmp	r3, r2
 80035cc:	d007      	beq.n	80035de <HAL_GPIO_Init+0x21e>
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	4a4f      	ldr	r2, [pc, #316]	@ (8003710 <HAL_GPIO_Init+0x350>)
 80035d2:	4293      	cmp	r3, r2
 80035d4:	d101      	bne.n	80035da <HAL_GPIO_Init+0x21a>
 80035d6:	2309      	movs	r3, #9
 80035d8:	e012      	b.n	8003600 <HAL_GPIO_Init+0x240>
 80035da:	230a      	movs	r3, #10
 80035dc:	e010      	b.n	8003600 <HAL_GPIO_Init+0x240>
 80035de:	2308      	movs	r3, #8
 80035e0:	e00e      	b.n	8003600 <HAL_GPIO_Init+0x240>
 80035e2:	2307      	movs	r3, #7
 80035e4:	e00c      	b.n	8003600 <HAL_GPIO_Init+0x240>
 80035e6:	2306      	movs	r3, #6
 80035e8:	e00a      	b.n	8003600 <HAL_GPIO_Init+0x240>
 80035ea:	2305      	movs	r3, #5
 80035ec:	e008      	b.n	8003600 <HAL_GPIO_Init+0x240>
 80035ee:	2304      	movs	r3, #4
 80035f0:	e006      	b.n	8003600 <HAL_GPIO_Init+0x240>
 80035f2:	2303      	movs	r3, #3
 80035f4:	e004      	b.n	8003600 <HAL_GPIO_Init+0x240>
 80035f6:	2302      	movs	r3, #2
 80035f8:	e002      	b.n	8003600 <HAL_GPIO_Init+0x240>
 80035fa:	2301      	movs	r3, #1
 80035fc:	e000      	b.n	8003600 <HAL_GPIO_Init+0x240>
 80035fe:	2300      	movs	r3, #0
 8003600:	69fa      	ldr	r2, [r7, #28]
 8003602:	f002 0203 	and.w	r2, r2, #3
 8003606:	0092      	lsls	r2, r2, #2
 8003608:	4093      	lsls	r3, r2
 800360a:	69ba      	ldr	r2, [r7, #24]
 800360c:	4313      	orrs	r3, r2
 800360e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003610:	4935      	ldr	r1, [pc, #212]	@ (80036e8 <HAL_GPIO_Init+0x328>)
 8003612:	69fb      	ldr	r3, [r7, #28]
 8003614:	089b      	lsrs	r3, r3, #2
 8003616:	3302      	adds	r3, #2
 8003618:	69ba      	ldr	r2, [r7, #24]
 800361a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800361e:	4b3d      	ldr	r3, [pc, #244]	@ (8003714 <HAL_GPIO_Init+0x354>)
 8003620:	689b      	ldr	r3, [r3, #8]
 8003622:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003624:	693b      	ldr	r3, [r7, #16]
 8003626:	43db      	mvns	r3, r3
 8003628:	69ba      	ldr	r2, [r7, #24]
 800362a:	4013      	ands	r3, r2
 800362c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800362e:	683b      	ldr	r3, [r7, #0]
 8003630:	685b      	ldr	r3, [r3, #4]
 8003632:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003636:	2b00      	cmp	r3, #0
 8003638:	d003      	beq.n	8003642 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 800363a:	69ba      	ldr	r2, [r7, #24]
 800363c:	693b      	ldr	r3, [r7, #16]
 800363e:	4313      	orrs	r3, r2
 8003640:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003642:	4a34      	ldr	r2, [pc, #208]	@ (8003714 <HAL_GPIO_Init+0x354>)
 8003644:	69bb      	ldr	r3, [r7, #24]
 8003646:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003648:	4b32      	ldr	r3, [pc, #200]	@ (8003714 <HAL_GPIO_Init+0x354>)
 800364a:	68db      	ldr	r3, [r3, #12]
 800364c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800364e:	693b      	ldr	r3, [r7, #16]
 8003650:	43db      	mvns	r3, r3
 8003652:	69ba      	ldr	r2, [r7, #24]
 8003654:	4013      	ands	r3, r2
 8003656:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003658:	683b      	ldr	r3, [r7, #0]
 800365a:	685b      	ldr	r3, [r3, #4]
 800365c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003660:	2b00      	cmp	r3, #0
 8003662:	d003      	beq.n	800366c <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8003664:	69ba      	ldr	r2, [r7, #24]
 8003666:	693b      	ldr	r3, [r7, #16]
 8003668:	4313      	orrs	r3, r2
 800366a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800366c:	4a29      	ldr	r2, [pc, #164]	@ (8003714 <HAL_GPIO_Init+0x354>)
 800366e:	69bb      	ldr	r3, [r7, #24]
 8003670:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8003672:	4b28      	ldr	r3, [pc, #160]	@ (8003714 <HAL_GPIO_Init+0x354>)
 8003674:	685b      	ldr	r3, [r3, #4]
 8003676:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003678:	693b      	ldr	r3, [r7, #16]
 800367a:	43db      	mvns	r3, r3
 800367c:	69ba      	ldr	r2, [r7, #24]
 800367e:	4013      	ands	r3, r2
 8003680:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003682:	683b      	ldr	r3, [r7, #0]
 8003684:	685b      	ldr	r3, [r3, #4]
 8003686:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800368a:	2b00      	cmp	r3, #0
 800368c:	d003      	beq.n	8003696 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 800368e:	69ba      	ldr	r2, [r7, #24]
 8003690:	693b      	ldr	r3, [r7, #16]
 8003692:	4313      	orrs	r3, r2
 8003694:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003696:	4a1f      	ldr	r2, [pc, #124]	@ (8003714 <HAL_GPIO_Init+0x354>)
 8003698:	69bb      	ldr	r3, [r7, #24]
 800369a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800369c:	4b1d      	ldr	r3, [pc, #116]	@ (8003714 <HAL_GPIO_Init+0x354>)
 800369e:	681b      	ldr	r3, [r3, #0]
 80036a0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80036a2:	693b      	ldr	r3, [r7, #16]
 80036a4:	43db      	mvns	r3, r3
 80036a6:	69ba      	ldr	r2, [r7, #24]
 80036a8:	4013      	ands	r3, r2
 80036aa:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80036ac:	683b      	ldr	r3, [r7, #0]
 80036ae:	685b      	ldr	r3, [r3, #4]
 80036b0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80036b4:	2b00      	cmp	r3, #0
 80036b6:	d003      	beq.n	80036c0 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 80036b8:	69ba      	ldr	r2, [r7, #24]
 80036ba:	693b      	ldr	r3, [r7, #16]
 80036bc:	4313      	orrs	r3, r2
 80036be:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80036c0:	4a14      	ldr	r2, [pc, #80]	@ (8003714 <HAL_GPIO_Init+0x354>)
 80036c2:	69bb      	ldr	r3, [r7, #24]
 80036c4:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80036c6:	69fb      	ldr	r3, [r7, #28]
 80036c8:	3301      	adds	r3, #1
 80036ca:	61fb      	str	r3, [r7, #28]
 80036cc:	69fb      	ldr	r3, [r7, #28]
 80036ce:	2b0f      	cmp	r3, #15
 80036d0:	f67f ae84 	bls.w	80033dc <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80036d4:	bf00      	nop
 80036d6:	bf00      	nop
 80036d8:	3724      	adds	r7, #36	@ 0x24
 80036da:	46bd      	mov	sp, r7
 80036dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036e0:	4770      	bx	lr
 80036e2:	bf00      	nop
 80036e4:	40023800 	.word	0x40023800
 80036e8:	40013800 	.word	0x40013800
 80036ec:	40020000 	.word	0x40020000
 80036f0:	40020400 	.word	0x40020400
 80036f4:	40020800 	.word	0x40020800
 80036f8:	40020c00 	.word	0x40020c00
 80036fc:	40021000 	.word	0x40021000
 8003700:	40021400 	.word	0x40021400
 8003704:	40021800 	.word	0x40021800
 8003708:	40021c00 	.word	0x40021c00
 800370c:	40022000 	.word	0x40022000
 8003710:	40022400 	.word	0x40022400
 8003714:	40013c00 	.word	0x40013c00

08003718 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8003718:	b480      	push	{r7}
 800371a:	b087      	sub	sp, #28
 800371c:	af00      	add	r7, sp, #0
 800371e:	6078      	str	r0, [r7, #4]
 8003720:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8003722:	2300      	movs	r3, #0
 8003724:	613b      	str	r3, [r7, #16]
  uint32_t iocurrent = 0x00U;
 8003726:	2300      	movs	r3, #0
 8003728:	60fb      	str	r3, [r7, #12]
  uint32_t tmp = 0x00U;
 800372a:	2300      	movs	r3, #0
 800372c:	60bb      	str	r3, [r7, #8]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  
  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800372e:	2300      	movs	r3, #0
 8003730:	617b      	str	r3, [r7, #20]
 8003732:	e0d9      	b.n	80038e8 <HAL_GPIO_DeInit+0x1d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003734:	2201      	movs	r2, #1
 8003736:	697b      	ldr	r3, [r7, #20]
 8003738:	fa02 f303 	lsl.w	r3, r2, r3
 800373c:	613b      	str	r3, [r7, #16]
    /* Get the current IO position */
    iocurrent = (GPIO_Pin) & ioposition;
 800373e:	683a      	ldr	r2, [r7, #0]
 8003740:	693b      	ldr	r3, [r7, #16]
 8003742:	4013      	ands	r3, r2
 8003744:	60fb      	str	r3, [r7, #12]

    if(iocurrent == ioposition)
 8003746:	68fa      	ldr	r2, [r7, #12]
 8003748:	693b      	ldr	r3, [r7, #16]
 800374a:	429a      	cmp	r2, r3
 800374c:	f040 80c9 	bne.w	80038e2 <HAL_GPIO_DeInit+0x1ca>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      tmp = SYSCFG->EXTICR[position >> 2U];
 8003750:	4a6b      	ldr	r2, [pc, #428]	@ (8003900 <HAL_GPIO_DeInit+0x1e8>)
 8003752:	697b      	ldr	r3, [r7, #20]
 8003754:	089b      	lsrs	r3, r3, #2
 8003756:	3302      	adds	r3, #2
 8003758:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800375c:	60bb      	str	r3, [r7, #8]
      tmp &= (0x0FU << (4U * (position & 0x03U)));
 800375e:	697b      	ldr	r3, [r7, #20]
 8003760:	f003 0303 	and.w	r3, r3, #3
 8003764:	009b      	lsls	r3, r3, #2
 8003766:	220f      	movs	r2, #15
 8003768:	fa02 f303 	lsl.w	r3, r2, r3
 800376c:	68ba      	ldr	r2, [r7, #8]
 800376e:	4013      	ands	r3, r2
 8003770:	60bb      	str	r3, [r7, #8]
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U))))
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	4a63      	ldr	r2, [pc, #396]	@ (8003904 <HAL_GPIO_DeInit+0x1ec>)
 8003776:	4293      	cmp	r3, r2
 8003778:	d037      	beq.n	80037ea <HAL_GPIO_DeInit+0xd2>
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	4a62      	ldr	r2, [pc, #392]	@ (8003908 <HAL_GPIO_DeInit+0x1f0>)
 800377e:	4293      	cmp	r3, r2
 8003780:	d031      	beq.n	80037e6 <HAL_GPIO_DeInit+0xce>
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	4a61      	ldr	r2, [pc, #388]	@ (800390c <HAL_GPIO_DeInit+0x1f4>)
 8003786:	4293      	cmp	r3, r2
 8003788:	d02b      	beq.n	80037e2 <HAL_GPIO_DeInit+0xca>
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	4a60      	ldr	r2, [pc, #384]	@ (8003910 <HAL_GPIO_DeInit+0x1f8>)
 800378e:	4293      	cmp	r3, r2
 8003790:	d025      	beq.n	80037de <HAL_GPIO_DeInit+0xc6>
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	4a5f      	ldr	r2, [pc, #380]	@ (8003914 <HAL_GPIO_DeInit+0x1fc>)
 8003796:	4293      	cmp	r3, r2
 8003798:	d01f      	beq.n	80037da <HAL_GPIO_DeInit+0xc2>
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	4a5e      	ldr	r2, [pc, #376]	@ (8003918 <HAL_GPIO_DeInit+0x200>)
 800379e:	4293      	cmp	r3, r2
 80037a0:	d019      	beq.n	80037d6 <HAL_GPIO_DeInit+0xbe>
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	4a5d      	ldr	r2, [pc, #372]	@ (800391c <HAL_GPIO_DeInit+0x204>)
 80037a6:	4293      	cmp	r3, r2
 80037a8:	d013      	beq.n	80037d2 <HAL_GPIO_DeInit+0xba>
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	4a5c      	ldr	r2, [pc, #368]	@ (8003920 <HAL_GPIO_DeInit+0x208>)
 80037ae:	4293      	cmp	r3, r2
 80037b0:	d00d      	beq.n	80037ce <HAL_GPIO_DeInit+0xb6>
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	4a5b      	ldr	r2, [pc, #364]	@ (8003924 <HAL_GPIO_DeInit+0x20c>)
 80037b6:	4293      	cmp	r3, r2
 80037b8:	d007      	beq.n	80037ca <HAL_GPIO_DeInit+0xb2>
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	4a5a      	ldr	r2, [pc, #360]	@ (8003928 <HAL_GPIO_DeInit+0x210>)
 80037be:	4293      	cmp	r3, r2
 80037c0:	d101      	bne.n	80037c6 <HAL_GPIO_DeInit+0xae>
 80037c2:	2309      	movs	r3, #9
 80037c4:	e012      	b.n	80037ec <HAL_GPIO_DeInit+0xd4>
 80037c6:	230a      	movs	r3, #10
 80037c8:	e010      	b.n	80037ec <HAL_GPIO_DeInit+0xd4>
 80037ca:	2308      	movs	r3, #8
 80037cc:	e00e      	b.n	80037ec <HAL_GPIO_DeInit+0xd4>
 80037ce:	2307      	movs	r3, #7
 80037d0:	e00c      	b.n	80037ec <HAL_GPIO_DeInit+0xd4>
 80037d2:	2306      	movs	r3, #6
 80037d4:	e00a      	b.n	80037ec <HAL_GPIO_DeInit+0xd4>
 80037d6:	2305      	movs	r3, #5
 80037d8:	e008      	b.n	80037ec <HAL_GPIO_DeInit+0xd4>
 80037da:	2304      	movs	r3, #4
 80037dc:	e006      	b.n	80037ec <HAL_GPIO_DeInit+0xd4>
 80037de:	2303      	movs	r3, #3
 80037e0:	e004      	b.n	80037ec <HAL_GPIO_DeInit+0xd4>
 80037e2:	2302      	movs	r3, #2
 80037e4:	e002      	b.n	80037ec <HAL_GPIO_DeInit+0xd4>
 80037e6:	2301      	movs	r3, #1
 80037e8:	e000      	b.n	80037ec <HAL_GPIO_DeInit+0xd4>
 80037ea:	2300      	movs	r3, #0
 80037ec:	697a      	ldr	r2, [r7, #20]
 80037ee:	f002 0203 	and.w	r2, r2, #3
 80037f2:	0092      	lsls	r2, r2, #2
 80037f4:	4093      	lsls	r3, r2
 80037f6:	68ba      	ldr	r2, [r7, #8]
 80037f8:	429a      	cmp	r2, r3
 80037fa:	d132      	bne.n	8003862 <HAL_GPIO_DeInit+0x14a>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR &= ~((uint32_t)iocurrent);
 80037fc:	4b4b      	ldr	r3, [pc, #300]	@ (800392c <HAL_GPIO_DeInit+0x214>)
 80037fe:	681a      	ldr	r2, [r3, #0]
 8003800:	68fb      	ldr	r3, [r7, #12]
 8003802:	43db      	mvns	r3, r3
 8003804:	4949      	ldr	r1, [pc, #292]	@ (800392c <HAL_GPIO_DeInit+0x214>)
 8003806:	4013      	ands	r3, r2
 8003808:	600b      	str	r3, [r1, #0]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 800380a:	4b48      	ldr	r3, [pc, #288]	@ (800392c <HAL_GPIO_DeInit+0x214>)
 800380c:	685a      	ldr	r2, [r3, #4]
 800380e:	68fb      	ldr	r3, [r7, #12]
 8003810:	43db      	mvns	r3, r3
 8003812:	4946      	ldr	r1, [pc, #280]	@ (800392c <HAL_GPIO_DeInit+0x214>)
 8003814:	4013      	ands	r3, r2
 8003816:	604b      	str	r3, [r1, #4]
        
        /* Clear Rising Falling edge configuration */
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 8003818:	4b44      	ldr	r3, [pc, #272]	@ (800392c <HAL_GPIO_DeInit+0x214>)
 800381a:	68da      	ldr	r2, [r3, #12]
 800381c:	68fb      	ldr	r3, [r7, #12]
 800381e:	43db      	mvns	r3, r3
 8003820:	4942      	ldr	r1, [pc, #264]	@ (800392c <HAL_GPIO_DeInit+0x214>)
 8003822:	4013      	ands	r3, r2
 8003824:	60cb      	str	r3, [r1, #12]
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 8003826:	4b41      	ldr	r3, [pc, #260]	@ (800392c <HAL_GPIO_DeInit+0x214>)
 8003828:	689a      	ldr	r2, [r3, #8]
 800382a:	68fb      	ldr	r3, [r7, #12]
 800382c:	43db      	mvns	r3, r3
 800382e:	493f      	ldr	r1, [pc, #252]	@ (800392c <HAL_GPIO_DeInit+0x214>)
 8003830:	4013      	ands	r3, r2
 8003832:	608b      	str	r3, [r1, #8]

        /* Configure the External Interrupt or event for the current IO */
        tmp = 0x0FU << (4U * (position & 0x03U));
 8003834:	697b      	ldr	r3, [r7, #20]
 8003836:	f003 0303 	and.w	r3, r3, #3
 800383a:	009b      	lsls	r3, r3, #2
 800383c:	220f      	movs	r2, #15
 800383e:	fa02 f303 	lsl.w	r3, r2, r3
 8003842:	60bb      	str	r3, [r7, #8]
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
 8003844:	4a2e      	ldr	r2, [pc, #184]	@ (8003900 <HAL_GPIO_DeInit+0x1e8>)
 8003846:	697b      	ldr	r3, [r7, #20]
 8003848:	089b      	lsrs	r3, r3, #2
 800384a:	3302      	adds	r3, #2
 800384c:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8003850:	68bb      	ldr	r3, [r7, #8]
 8003852:	43da      	mvns	r2, r3
 8003854:	482a      	ldr	r0, [pc, #168]	@ (8003900 <HAL_GPIO_DeInit+0x1e8>)
 8003856:	697b      	ldr	r3, [r7, #20]
 8003858:	089b      	lsrs	r3, r3, #2
 800385a:	400a      	ands	r2, r1
 800385c:	3302      	adds	r3, #2
 800385e:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floating Mode */
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	681a      	ldr	r2, [r3, #0]
 8003866:	697b      	ldr	r3, [r7, #20]
 8003868:	005b      	lsls	r3, r3, #1
 800386a:	2103      	movs	r1, #3
 800386c:	fa01 f303 	lsl.w	r3, r1, r3
 8003870:	43db      	mvns	r3, r3
 8003872:	401a      	ands	r2, r3
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8003878:	697b      	ldr	r3, [r7, #20]
 800387a:	08da      	lsrs	r2, r3, #3
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	3208      	adds	r2, #8
 8003880:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8003884:	697b      	ldr	r3, [r7, #20]
 8003886:	f003 0307 	and.w	r3, r3, #7
 800388a:	009b      	lsls	r3, r3, #2
 800388c:	220f      	movs	r2, #15
 800388e:	fa02 f303 	lsl.w	r3, r2, r3
 8003892:	43db      	mvns	r3, r3
 8003894:	697a      	ldr	r2, [r7, #20]
 8003896:	08d2      	lsrs	r2, r2, #3
 8003898:	4019      	ands	r1, r3
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	3208      	adds	r2, #8
 800389e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	68da      	ldr	r2, [r3, #12]
 80038a6:	697b      	ldr	r3, [r7, #20]
 80038a8:	005b      	lsls	r3, r3, #1
 80038aa:	2103      	movs	r1, #3
 80038ac:	fa01 f303 	lsl.w	r3, r1, r3
 80038b0:	43db      	mvns	r3, r3
 80038b2:	401a      	ands	r2, r3
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position) ;
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	685a      	ldr	r2, [r3, #4]
 80038bc:	2101      	movs	r1, #1
 80038be:	697b      	ldr	r3, [r7, #20]
 80038c0:	fa01 f303 	lsl.w	r3, r1, r3
 80038c4:	43db      	mvns	r3, r3
 80038c6:	401a      	ands	r2, r3
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	689a      	ldr	r2, [r3, #8]
 80038d0:	697b      	ldr	r3, [r7, #20]
 80038d2:	005b      	lsls	r3, r3, #1
 80038d4:	2103      	movs	r1, #3
 80038d6:	fa01 f303 	lsl.w	r3, r1, r3
 80038da:	43db      	mvns	r3, r3
 80038dc:	401a      	ands	r2, r3
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	609a      	str	r2, [r3, #8]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80038e2:	697b      	ldr	r3, [r7, #20]
 80038e4:	3301      	adds	r3, #1
 80038e6:	617b      	str	r3, [r7, #20]
 80038e8:	697b      	ldr	r3, [r7, #20]
 80038ea:	2b0f      	cmp	r3, #15
 80038ec:	f67f af22 	bls.w	8003734 <HAL_GPIO_DeInit+0x1c>
    }
  }
}
 80038f0:	bf00      	nop
 80038f2:	bf00      	nop
 80038f4:	371c      	adds	r7, #28
 80038f6:	46bd      	mov	sp, r7
 80038f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038fc:	4770      	bx	lr
 80038fe:	bf00      	nop
 8003900:	40013800 	.word	0x40013800
 8003904:	40020000 	.word	0x40020000
 8003908:	40020400 	.word	0x40020400
 800390c:	40020800 	.word	0x40020800
 8003910:	40020c00 	.word	0x40020c00
 8003914:	40021000 	.word	0x40021000
 8003918:	40021400 	.word	0x40021400
 800391c:	40021800 	.word	0x40021800
 8003920:	40021c00 	.word	0x40021c00
 8003924:	40022000 	.word	0x40022000
 8003928:	40022400 	.word	0x40022400
 800392c:	40013c00 	.word	0x40013c00

08003930 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003930:	b480      	push	{r7}
 8003932:	b083      	sub	sp, #12
 8003934:	af00      	add	r7, sp, #0
 8003936:	6078      	str	r0, [r7, #4]
 8003938:	460b      	mov	r3, r1
 800393a:	807b      	strh	r3, [r7, #2]
 800393c:	4613      	mov	r3, r2
 800393e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003940:	787b      	ldrb	r3, [r7, #1]
 8003942:	2b00      	cmp	r3, #0
 8003944:	d003      	beq.n	800394e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003946:	887a      	ldrh	r2, [r7, #2]
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800394c:	e003      	b.n	8003956 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800394e:	887b      	ldrh	r3, [r7, #2]
 8003950:	041a      	lsls	r2, r3, #16
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	619a      	str	r2, [r3, #24]
}
 8003956:	bf00      	nop
 8003958:	370c      	adds	r7, #12
 800395a:	46bd      	mov	sp, r7
 800395c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003960:	4770      	bx	lr
	...

08003964 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003964:	b580      	push	{r7, lr}
 8003966:	b084      	sub	sp, #16
 8003968:	af00      	add	r7, sp, #0
 800396a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	2b00      	cmp	r3, #0
 8003970:	d101      	bne.n	8003976 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003972:	2301      	movs	r3, #1
 8003974:	e12b      	b.n	8003bce <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800397c:	b2db      	uxtb	r3, r3
 800397e:	2b00      	cmp	r3, #0
 8003980:	d106      	bne.n	8003990 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	2200      	movs	r2, #0
 8003986:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800398a:	6878      	ldr	r0, [r7, #4]
 800398c:	f7fe fab0 	bl	8001ef0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	2224      	movs	r2, #36	@ 0x24
 8003994:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	681b      	ldr	r3, [r3, #0]
 800399c:	681a      	ldr	r2, [r3, #0]
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	681b      	ldr	r3, [r3, #0]
 80039a2:	f022 0201 	bic.w	r2, r2, #1
 80039a6:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	681b      	ldr	r3, [r3, #0]
 80039ac:	681a      	ldr	r2, [r3, #0]
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	681b      	ldr	r3, [r3, #0]
 80039b2:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80039b6:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	681b      	ldr	r3, [r3, #0]
 80039bc:	681a      	ldr	r2, [r3, #0]
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	681b      	ldr	r3, [r3, #0]
 80039c2:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80039c6:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80039c8:	f001 f91c 	bl	8004c04 <HAL_RCC_GetPCLK1Freq>
 80039cc:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	685b      	ldr	r3, [r3, #4]
 80039d2:	4a81      	ldr	r2, [pc, #516]	@ (8003bd8 <HAL_I2C_Init+0x274>)
 80039d4:	4293      	cmp	r3, r2
 80039d6:	d807      	bhi.n	80039e8 <HAL_I2C_Init+0x84>
 80039d8:	68fb      	ldr	r3, [r7, #12]
 80039da:	4a80      	ldr	r2, [pc, #512]	@ (8003bdc <HAL_I2C_Init+0x278>)
 80039dc:	4293      	cmp	r3, r2
 80039de:	bf94      	ite	ls
 80039e0:	2301      	movls	r3, #1
 80039e2:	2300      	movhi	r3, #0
 80039e4:	b2db      	uxtb	r3, r3
 80039e6:	e006      	b.n	80039f6 <HAL_I2C_Init+0x92>
 80039e8:	68fb      	ldr	r3, [r7, #12]
 80039ea:	4a7d      	ldr	r2, [pc, #500]	@ (8003be0 <HAL_I2C_Init+0x27c>)
 80039ec:	4293      	cmp	r3, r2
 80039ee:	bf94      	ite	ls
 80039f0:	2301      	movls	r3, #1
 80039f2:	2300      	movhi	r3, #0
 80039f4:	b2db      	uxtb	r3, r3
 80039f6:	2b00      	cmp	r3, #0
 80039f8:	d001      	beq.n	80039fe <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80039fa:	2301      	movs	r3, #1
 80039fc:	e0e7      	b.n	8003bce <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80039fe:	68fb      	ldr	r3, [r7, #12]
 8003a00:	4a78      	ldr	r2, [pc, #480]	@ (8003be4 <HAL_I2C_Init+0x280>)
 8003a02:	fba2 2303 	umull	r2, r3, r2, r3
 8003a06:	0c9b      	lsrs	r3, r3, #18
 8003a08:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	681b      	ldr	r3, [r3, #0]
 8003a0e:	685b      	ldr	r3, [r3, #4]
 8003a10:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	681b      	ldr	r3, [r3, #0]
 8003a18:	68ba      	ldr	r2, [r7, #8]
 8003a1a:	430a      	orrs	r2, r1
 8003a1c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	681b      	ldr	r3, [r3, #0]
 8003a22:	6a1b      	ldr	r3, [r3, #32]
 8003a24:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	685b      	ldr	r3, [r3, #4]
 8003a2c:	4a6a      	ldr	r2, [pc, #424]	@ (8003bd8 <HAL_I2C_Init+0x274>)
 8003a2e:	4293      	cmp	r3, r2
 8003a30:	d802      	bhi.n	8003a38 <HAL_I2C_Init+0xd4>
 8003a32:	68bb      	ldr	r3, [r7, #8]
 8003a34:	3301      	adds	r3, #1
 8003a36:	e009      	b.n	8003a4c <HAL_I2C_Init+0xe8>
 8003a38:	68bb      	ldr	r3, [r7, #8]
 8003a3a:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8003a3e:	fb02 f303 	mul.w	r3, r2, r3
 8003a42:	4a69      	ldr	r2, [pc, #420]	@ (8003be8 <HAL_I2C_Init+0x284>)
 8003a44:	fba2 2303 	umull	r2, r3, r2, r3
 8003a48:	099b      	lsrs	r3, r3, #6
 8003a4a:	3301      	adds	r3, #1
 8003a4c:	687a      	ldr	r2, [r7, #4]
 8003a4e:	6812      	ldr	r2, [r2, #0]
 8003a50:	430b      	orrs	r3, r1
 8003a52:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	681b      	ldr	r3, [r3, #0]
 8003a58:	69db      	ldr	r3, [r3, #28]
 8003a5a:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8003a5e:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	685b      	ldr	r3, [r3, #4]
 8003a66:	495c      	ldr	r1, [pc, #368]	@ (8003bd8 <HAL_I2C_Init+0x274>)
 8003a68:	428b      	cmp	r3, r1
 8003a6a:	d819      	bhi.n	8003aa0 <HAL_I2C_Init+0x13c>
 8003a6c:	68fb      	ldr	r3, [r7, #12]
 8003a6e:	1e59      	subs	r1, r3, #1
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	685b      	ldr	r3, [r3, #4]
 8003a74:	005b      	lsls	r3, r3, #1
 8003a76:	fbb1 f3f3 	udiv	r3, r1, r3
 8003a7a:	1c59      	adds	r1, r3, #1
 8003a7c:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8003a80:	400b      	ands	r3, r1
 8003a82:	2b00      	cmp	r3, #0
 8003a84:	d00a      	beq.n	8003a9c <HAL_I2C_Init+0x138>
 8003a86:	68fb      	ldr	r3, [r7, #12]
 8003a88:	1e59      	subs	r1, r3, #1
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	685b      	ldr	r3, [r3, #4]
 8003a8e:	005b      	lsls	r3, r3, #1
 8003a90:	fbb1 f3f3 	udiv	r3, r1, r3
 8003a94:	3301      	adds	r3, #1
 8003a96:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003a9a:	e051      	b.n	8003b40 <HAL_I2C_Init+0x1dc>
 8003a9c:	2304      	movs	r3, #4
 8003a9e:	e04f      	b.n	8003b40 <HAL_I2C_Init+0x1dc>
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	689b      	ldr	r3, [r3, #8]
 8003aa4:	2b00      	cmp	r3, #0
 8003aa6:	d111      	bne.n	8003acc <HAL_I2C_Init+0x168>
 8003aa8:	68fb      	ldr	r3, [r7, #12]
 8003aaa:	1e58      	subs	r0, r3, #1
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	6859      	ldr	r1, [r3, #4]
 8003ab0:	460b      	mov	r3, r1
 8003ab2:	005b      	lsls	r3, r3, #1
 8003ab4:	440b      	add	r3, r1
 8003ab6:	fbb0 f3f3 	udiv	r3, r0, r3
 8003aba:	3301      	adds	r3, #1
 8003abc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003ac0:	2b00      	cmp	r3, #0
 8003ac2:	bf0c      	ite	eq
 8003ac4:	2301      	moveq	r3, #1
 8003ac6:	2300      	movne	r3, #0
 8003ac8:	b2db      	uxtb	r3, r3
 8003aca:	e012      	b.n	8003af2 <HAL_I2C_Init+0x18e>
 8003acc:	68fb      	ldr	r3, [r7, #12]
 8003ace:	1e58      	subs	r0, r3, #1
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	6859      	ldr	r1, [r3, #4]
 8003ad4:	460b      	mov	r3, r1
 8003ad6:	009b      	lsls	r3, r3, #2
 8003ad8:	440b      	add	r3, r1
 8003ada:	0099      	lsls	r1, r3, #2
 8003adc:	440b      	add	r3, r1
 8003ade:	fbb0 f3f3 	udiv	r3, r0, r3
 8003ae2:	3301      	adds	r3, #1
 8003ae4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003ae8:	2b00      	cmp	r3, #0
 8003aea:	bf0c      	ite	eq
 8003aec:	2301      	moveq	r3, #1
 8003aee:	2300      	movne	r3, #0
 8003af0:	b2db      	uxtb	r3, r3
 8003af2:	2b00      	cmp	r3, #0
 8003af4:	d001      	beq.n	8003afa <HAL_I2C_Init+0x196>
 8003af6:	2301      	movs	r3, #1
 8003af8:	e022      	b.n	8003b40 <HAL_I2C_Init+0x1dc>
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	689b      	ldr	r3, [r3, #8]
 8003afe:	2b00      	cmp	r3, #0
 8003b00:	d10e      	bne.n	8003b20 <HAL_I2C_Init+0x1bc>
 8003b02:	68fb      	ldr	r3, [r7, #12]
 8003b04:	1e58      	subs	r0, r3, #1
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	6859      	ldr	r1, [r3, #4]
 8003b0a:	460b      	mov	r3, r1
 8003b0c:	005b      	lsls	r3, r3, #1
 8003b0e:	440b      	add	r3, r1
 8003b10:	fbb0 f3f3 	udiv	r3, r0, r3
 8003b14:	3301      	adds	r3, #1
 8003b16:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003b1a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003b1e:	e00f      	b.n	8003b40 <HAL_I2C_Init+0x1dc>
 8003b20:	68fb      	ldr	r3, [r7, #12]
 8003b22:	1e58      	subs	r0, r3, #1
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	6859      	ldr	r1, [r3, #4]
 8003b28:	460b      	mov	r3, r1
 8003b2a:	009b      	lsls	r3, r3, #2
 8003b2c:	440b      	add	r3, r1
 8003b2e:	0099      	lsls	r1, r3, #2
 8003b30:	440b      	add	r3, r1
 8003b32:	fbb0 f3f3 	udiv	r3, r0, r3
 8003b36:	3301      	adds	r3, #1
 8003b38:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003b3c:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8003b40:	6879      	ldr	r1, [r7, #4]
 8003b42:	6809      	ldr	r1, [r1, #0]
 8003b44:	4313      	orrs	r3, r2
 8003b46:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	681b      	ldr	r3, [r3, #0]
 8003b4c:	681b      	ldr	r3, [r3, #0]
 8003b4e:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	69da      	ldr	r2, [r3, #28]
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	6a1b      	ldr	r3, [r3, #32]
 8003b5a:	431a      	orrs	r2, r3
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	681b      	ldr	r3, [r3, #0]
 8003b60:	430a      	orrs	r2, r1
 8003b62:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	681b      	ldr	r3, [r3, #0]
 8003b68:	689b      	ldr	r3, [r3, #8]
 8003b6a:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8003b6e:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8003b72:	687a      	ldr	r2, [r7, #4]
 8003b74:	6911      	ldr	r1, [r2, #16]
 8003b76:	687a      	ldr	r2, [r7, #4]
 8003b78:	68d2      	ldr	r2, [r2, #12]
 8003b7a:	4311      	orrs	r1, r2
 8003b7c:	687a      	ldr	r2, [r7, #4]
 8003b7e:	6812      	ldr	r2, [r2, #0]
 8003b80:	430b      	orrs	r3, r1
 8003b82:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	681b      	ldr	r3, [r3, #0]
 8003b88:	68db      	ldr	r3, [r3, #12]
 8003b8a:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	695a      	ldr	r2, [r3, #20]
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	699b      	ldr	r3, [r3, #24]
 8003b96:	431a      	orrs	r2, r3
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	681b      	ldr	r3, [r3, #0]
 8003b9c:	430a      	orrs	r2, r1
 8003b9e:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	681b      	ldr	r3, [r3, #0]
 8003ba4:	681a      	ldr	r2, [r3, #0]
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	681b      	ldr	r3, [r3, #0]
 8003baa:	f042 0201 	orr.w	r2, r2, #1
 8003bae:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	2200      	movs	r2, #0
 8003bb4:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	2220      	movs	r2, #32
 8003bba:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	2200      	movs	r2, #0
 8003bc2:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	2200      	movs	r2, #0
 8003bc8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8003bcc:	2300      	movs	r3, #0
}
 8003bce:	4618      	mov	r0, r3
 8003bd0:	3710      	adds	r7, #16
 8003bd2:	46bd      	mov	sp, r7
 8003bd4:	bd80      	pop	{r7, pc}
 8003bd6:	bf00      	nop
 8003bd8:	000186a0 	.word	0x000186a0
 8003bdc:	001e847f 	.word	0x001e847f
 8003be0:	003d08ff 	.word	0x003d08ff
 8003be4:	431bde83 	.word	0x431bde83
 8003be8:	10624dd3 	.word	0x10624dd3

08003bec <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter new state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8003bec:	b480      	push	{r7}
 8003bee:	b083      	sub	sp, #12
 8003bf0:	af00      	add	r7, sp, #0
 8003bf2:	6078      	str	r0, [r7, #4]
 8003bf4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003bfc:	b2db      	uxtb	r3, r3
 8003bfe:	2b20      	cmp	r3, #32
 8003c00:	d129      	bne.n	8003c56 <HAL_I2CEx_ConfigAnalogFilter+0x6a>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	2224      	movs	r2, #36	@ 0x24
 8003c06:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	681b      	ldr	r3, [r3, #0]
 8003c0e:	681a      	ldr	r2, [r3, #0]
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	681b      	ldr	r3, [r3, #0]
 8003c14:	f022 0201 	bic.w	r2, r2, #1
 8003c18:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->FLTR &= ~(I2C_FLTR_ANOFF);
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	681b      	ldr	r3, [r3, #0]
 8003c1e:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	681b      	ldr	r3, [r3, #0]
 8003c24:	f022 0210 	bic.w	r2, r2, #16
 8003c28:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Disable the analog filter */
    hi2c->Instance->FLTR |= AnalogFilter;
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	681b      	ldr	r3, [r3, #0]
 8003c2e:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	681b      	ldr	r3, [r3, #0]
 8003c34:	683a      	ldr	r2, [r7, #0]
 8003c36:	430a      	orrs	r2, r1
 8003c38:	625a      	str	r2, [r3, #36]	@ 0x24

    __HAL_I2C_ENABLE(hi2c);
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	681b      	ldr	r3, [r3, #0]
 8003c3e:	681a      	ldr	r2, [r3, #0]
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	681b      	ldr	r3, [r3, #0]
 8003c44:	f042 0201 	orr.w	r2, r2, #1
 8003c48:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	2220      	movs	r2, #32
 8003c4e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    return HAL_OK;
 8003c52:	2300      	movs	r3, #0
 8003c54:	e000      	b.n	8003c58 <HAL_I2CEx_ConfigAnalogFilter+0x6c>
  }
  else
  {
    return HAL_BUSY;
 8003c56:	2302      	movs	r3, #2
  }
}
 8003c58:	4618      	mov	r0, r3
 8003c5a:	370c      	adds	r7, #12
 8003c5c:	46bd      	mov	sp, r7
 8003c5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c62:	4770      	bx	lr

08003c64 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between 0x00 and 0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8003c64:	b480      	push	{r7}
 8003c66:	b085      	sub	sp, #20
 8003c68:	af00      	add	r7, sp, #0
 8003c6a:	6078      	str	r0, [r7, #4]
 8003c6c:	6039      	str	r1, [r7, #0]
  uint16_t tmpreg = 0;
 8003c6e:	2300      	movs	r3, #0
 8003c70:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003c78:	b2db      	uxtb	r3, r3
 8003c7a:	2b20      	cmp	r3, #32
 8003c7c:	d12a      	bne.n	8003cd4 <HAL_I2CEx_ConfigDigitalFilter+0x70>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	2224      	movs	r2, #36	@ 0x24
 8003c82:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	681b      	ldr	r3, [r3, #0]
 8003c8a:	681a      	ldr	r2, [r3, #0]
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	681b      	ldr	r3, [r3, #0]
 8003c90:	f022 0201 	bic.w	r2, r2, #1
 8003c94:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->FLTR;
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	681b      	ldr	r3, [r3, #0]
 8003c9a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003c9c:	81fb      	strh	r3, [r7, #14]

    /* Reset I2Cx DNF bit [3:0] */
    tmpreg &= ~(I2C_FLTR_DNF);
 8003c9e:	89fb      	ldrh	r3, [r7, #14]
 8003ca0:	f023 030f 	bic.w	r3, r3, #15
 8003ca4:	81fb      	strh	r3, [r7, #14]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter;
 8003ca6:	683b      	ldr	r3, [r7, #0]
 8003ca8:	b29a      	uxth	r2, r3
 8003caa:	89fb      	ldrh	r3, [r7, #14]
 8003cac:	4313      	orrs	r3, r2
 8003cae:	81fb      	strh	r3, [r7, #14]

    /* Store the new register value */
    hi2c->Instance->FLTR = tmpreg;
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	681b      	ldr	r3, [r3, #0]
 8003cb4:	89fa      	ldrh	r2, [r7, #14]
 8003cb6:	625a      	str	r2, [r3, #36]	@ 0x24

    __HAL_I2C_ENABLE(hi2c);
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	681b      	ldr	r3, [r3, #0]
 8003cbc:	681a      	ldr	r2, [r3, #0]
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	681b      	ldr	r3, [r3, #0]
 8003cc2:	f042 0201 	orr.w	r2, r2, #1
 8003cc6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	2220      	movs	r2, #32
 8003ccc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    return HAL_OK;
 8003cd0:	2300      	movs	r3, #0
 8003cd2:	e000      	b.n	8003cd6 <HAL_I2CEx_ConfigDigitalFilter+0x72>
  }
  else
  {
    return HAL_BUSY;
 8003cd4:	2302      	movs	r3, #2
  }
}
 8003cd6:	4618      	mov	r0, r3
 8003cd8:	3714      	adds	r7, #20
 8003cda:	46bd      	mov	sp, r7
 8003cdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ce0:	4770      	bx	lr
	...

08003ce4 <HAL_LTDC_Init>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_Init(LTDC_HandleTypeDef *hltdc)
{
 8003ce4:	b580      	push	{r7, lr}
 8003ce6:	b084      	sub	sp, #16
 8003ce8:	af00      	add	r7, sp, #0
 8003cea:	6078      	str	r0, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;

  /* Check the LTDC peripheral state */
  if (hltdc == NULL)
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	2b00      	cmp	r3, #0
 8003cf0:	d101      	bne.n	8003cf6 <HAL_LTDC_Init+0x12>
  {
    return HAL_ERROR;
 8003cf2:	2301      	movs	r3, #1
 8003cf4:	e0bf      	b.n	8003e76 <HAL_LTDC_Init+0x192>
    }
    /* Init the low level hardware */
    hltdc->MspInitCallback(hltdc);
  }
#else
  if (hltdc->State == HAL_LTDC_STATE_RESET)
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	f893 30a1 	ldrb.w	r3, [r3, #161]	@ 0xa1
 8003cfc:	b2db      	uxtb	r3, r3
 8003cfe:	2b00      	cmp	r3, #0
 8003d00:	d106      	bne.n	8003d10 <HAL_LTDC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hltdc->Lock = HAL_UNLOCKED;
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	2200      	movs	r2, #0
 8003d06:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0
    /* Init the low level hardware */
    HAL_LTDC_MspInit(hltdc);
 8003d0a:	6878      	ldr	r0, [r7, #4]
 8003d0c:	f7fe f95a 	bl	8001fc4 <HAL_LTDC_MspInit>
  }
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	2202      	movs	r2, #2
 8003d14:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  /* Configure the HS, VS, DE and PC polarity */
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	681b      	ldr	r3, [r3, #0]
 8003d1c:	699a      	ldr	r2, [r3, #24]
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	681b      	ldr	r3, [r3, #0]
 8003d22:	f022 4270 	bic.w	r2, r2, #4026531840	@ 0xf0000000
 8003d26:	619a      	str	r2, [r3, #24]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	681b      	ldr	r3, [r3, #0]
 8003d2c:	6999      	ldr	r1, [r3, #24]
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	685a      	ldr	r2, [r3, #4]
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	689b      	ldr	r3, [r3, #8]
 8003d36:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	68db      	ldr	r3, [r3, #12]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8003d3c:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	691b      	ldr	r3, [r3, #16]
 8003d42:	431a      	orrs	r2, r3
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	681b      	ldr	r3, [r3, #0]
 8003d48:	430a      	orrs	r2, r1
 8003d4a:	619a      	str	r2, [r3, #24]

  /* Set Synchronization size */
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	681b      	ldr	r3, [r3, #0]
 8003d50:	6899      	ldr	r1, [r3, #8]
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	681a      	ldr	r2, [r3, #0]
 8003d56:	4b4a      	ldr	r3, [pc, #296]	@ (8003e80 <HAL_LTDC_Init+0x19c>)
 8003d58:	400b      	ands	r3, r1
 8003d5a:	6093      	str	r3, [r2, #8]
  tmp = (hltdc->Init.HorizontalSync << 16U);
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	695b      	ldr	r3, [r3, #20]
 8003d60:	041b      	lsls	r3, r3, #16
 8003d62:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	681b      	ldr	r3, [r3, #0]
 8003d68:	6899      	ldr	r1, [r3, #8]
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	699a      	ldr	r2, [r3, #24]
 8003d6e:	68fb      	ldr	r3, [r7, #12]
 8003d70:	431a      	orrs	r2, r3
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	681b      	ldr	r3, [r3, #0]
 8003d76:	430a      	orrs	r2, r1
 8003d78:	609a      	str	r2, [r3, #8]

  /* Set Accumulated Back porch */
  hltdc->Instance->BPCR &= ~(LTDC_BPCR_AVBP | LTDC_BPCR_AHBP);
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	681b      	ldr	r3, [r3, #0]
 8003d7e:	68d9      	ldr	r1, [r3, #12]
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	681a      	ldr	r2, [r3, #0]
 8003d84:	4b3e      	ldr	r3, [pc, #248]	@ (8003e80 <HAL_LTDC_Init+0x19c>)
 8003d86:	400b      	ands	r3, r1
 8003d88:	60d3      	str	r3, [r2, #12]
  tmp = (hltdc->Init.AccumulatedHBP << 16U);
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	69db      	ldr	r3, [r3, #28]
 8003d8e:	041b      	lsls	r3, r3, #16
 8003d90:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	681b      	ldr	r3, [r3, #0]
 8003d96:	68d9      	ldr	r1, [r3, #12]
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	6a1a      	ldr	r2, [r3, #32]
 8003d9c:	68fb      	ldr	r3, [r7, #12]
 8003d9e:	431a      	orrs	r2, r3
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	681b      	ldr	r3, [r3, #0]
 8003da4:	430a      	orrs	r2, r1
 8003da6:	60da      	str	r2, [r3, #12]

  /* Set Accumulated Active Width */
  hltdc->Instance->AWCR &= ~(LTDC_AWCR_AAH | LTDC_AWCR_AAW);
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	681b      	ldr	r3, [r3, #0]
 8003dac:	6919      	ldr	r1, [r3, #16]
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	681a      	ldr	r2, [r3, #0]
 8003db2:	4b33      	ldr	r3, [pc, #204]	@ (8003e80 <HAL_LTDC_Init+0x19c>)
 8003db4:	400b      	ands	r3, r1
 8003db6:	6113      	str	r3, [r2, #16]
  tmp = (hltdc->Init.AccumulatedActiveW << 16U);
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003dbc:	041b      	lsls	r3, r3, #16
 8003dbe:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->AWCR |= (tmp | hltdc->Init.AccumulatedActiveH);
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	681b      	ldr	r3, [r3, #0]
 8003dc4:	6919      	ldr	r1, [r3, #16]
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8003dca:	68fb      	ldr	r3, [r7, #12]
 8003dcc:	431a      	orrs	r2, r3
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	681b      	ldr	r3, [r3, #0]
 8003dd2:	430a      	orrs	r2, r1
 8003dd4:	611a      	str	r2, [r3, #16]

  /* Set Total Width */
  hltdc->Instance->TWCR &= ~(LTDC_TWCR_TOTALH | LTDC_TWCR_TOTALW);
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	681b      	ldr	r3, [r3, #0]
 8003dda:	6959      	ldr	r1, [r3, #20]
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	681a      	ldr	r2, [r3, #0]
 8003de0:	4b27      	ldr	r3, [pc, #156]	@ (8003e80 <HAL_LTDC_Init+0x19c>)
 8003de2:	400b      	ands	r3, r1
 8003de4:	6153      	str	r3, [r2, #20]
  tmp = (hltdc->Init.TotalWidth << 16U);
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003dea:	041b      	lsls	r3, r3, #16
 8003dec:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->TWCR |= (tmp | hltdc->Init.TotalHeigh);
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	681b      	ldr	r3, [r3, #0]
 8003df2:	6959      	ldr	r1, [r3, #20]
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8003df8:	68fb      	ldr	r3, [r7, #12]
 8003dfa:	431a      	orrs	r2, r3
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	681b      	ldr	r3, [r3, #0]
 8003e00:	430a      	orrs	r2, r1
 8003e02:	615a      	str	r2, [r3, #20]

  /* Set the background color value */
  tmp = ((uint32_t)(hltdc->Init.Backcolor.Green) << 8U);
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8003e0a:	021b      	lsls	r3, r3, #8
 8003e0c:	60fb      	str	r3, [r7, #12]
  tmp1 = ((uint32_t)(hltdc->Init.Backcolor.Red) << 16U);
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	f893 3036 	ldrb.w	r3, [r3, #54]	@ 0x36
 8003e14:	041b      	lsls	r3, r3, #16
 8003e16:	60bb      	str	r3, [r7, #8]
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	681b      	ldr	r3, [r3, #0]
 8003e1c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	681b      	ldr	r3, [r3, #0]
 8003e22:	f002 427f 	and.w	r2, r2, #4278190080	@ 0xff000000
 8003e26:	62da      	str	r2, [r3, #44]	@ 0x2c
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	681b      	ldr	r3, [r3, #0]
 8003e2c:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8003e2e:	68ba      	ldr	r2, [r7, #8]
 8003e30:	68fb      	ldr	r3, [r7, #12]
 8003e32:	4313      	orrs	r3, r2
 8003e34:	687a      	ldr	r2, [r7, #4]
 8003e36:	f892 2034 	ldrb.w	r2, [r2, #52]	@ 0x34
 8003e3a:	431a      	orrs	r2, r3
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	681b      	ldr	r3, [r3, #0]
 8003e40:	430a      	orrs	r2, r1
 8003e42:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable the Transfer Error and FIFO underrun interrupts */
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_TE | LTDC_IT_FU);
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	681b      	ldr	r3, [r3, #0]
 8003e48:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	681b      	ldr	r3, [r3, #0]
 8003e4e:	f042 0206 	orr.w	r2, r2, #6
 8003e52:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Enable LTDC by setting LTDCEN bit */
  __HAL_LTDC_ENABLE(hltdc);
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	681b      	ldr	r3, [r3, #0]
 8003e58:	699a      	ldr	r2, [r3, #24]
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	681b      	ldr	r3, [r3, #0]
 8003e5e:	f042 0201 	orr.w	r2, r2, #1
 8003e62:	619a      	str	r2, [r3, #24]

  /* Initialize the error code */
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	2200      	movs	r2, #0
 8003e68:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4

  /* Initialize the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	2201      	movs	r2, #1
 8003e70:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  return HAL_OK;
 8003e74:	2300      	movs	r3, #0
}
 8003e76:	4618      	mov	r0, r3
 8003e78:	3710      	adds	r7, #16
 8003e7a:	46bd      	mov	sp, r7
 8003e7c:	bd80      	pop	{r7, pc}
 8003e7e:	bf00      	nop
 8003e80:	f000f800 	.word	0xf000f800

08003e84 <HAL_LTDC_ConfigLayer>:
  *                    This parameter can be one of the following values:
  *                    LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_ConfigLayer(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 8003e84:	b5b0      	push	{r4, r5, r7, lr}
 8003e86:	b084      	sub	sp, #16
 8003e88:	af00      	add	r7, sp, #0
 8003e8a:	60f8      	str	r0, [r7, #12]
 8003e8c:	60b9      	str	r1, [r7, #8]
 8003e8e:	607a      	str	r2, [r7, #4]
  assert_param(IS_LTDC_BLENDING_FACTOR2(pLayerCfg->BlendingFactor2));
  assert_param(IS_LTDC_CFBLL(pLayerCfg->ImageWidth));
  assert_param(IS_LTDC_CFBLNBR(pLayerCfg->ImageHeight));

  /* Process locked */
  __HAL_LOCK(hltdc);
 8003e90:	68fb      	ldr	r3, [r7, #12]
 8003e92:	f893 30a0 	ldrb.w	r3, [r3, #160]	@ 0xa0
 8003e96:	2b01      	cmp	r3, #1
 8003e98:	d101      	bne.n	8003e9e <HAL_LTDC_ConfigLayer+0x1a>
 8003e9a:	2302      	movs	r3, #2
 8003e9c:	e02c      	b.n	8003ef8 <HAL_LTDC_ConfigLayer+0x74>
 8003e9e:	68fb      	ldr	r3, [r7, #12]
 8003ea0:	2201      	movs	r2, #1
 8003ea2:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8003ea6:	68fb      	ldr	r3, [r7, #12]
 8003ea8:	2202      	movs	r2, #2
 8003eaa:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  /* Copy new layer configuration into handle structure */
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 8003eae:	68fa      	ldr	r2, [r7, #12]
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	2134      	movs	r1, #52	@ 0x34
 8003eb4:	fb01 f303 	mul.w	r3, r1, r3
 8003eb8:	4413      	add	r3, r2
 8003eba:	f103 0238 	add.w	r2, r3, #56	@ 0x38
 8003ebe:	68bb      	ldr	r3, [r7, #8]
 8003ec0:	4614      	mov	r4, r2
 8003ec2:	461d      	mov	r5, r3
 8003ec4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003ec6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003ec8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003eca:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003ecc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003ece:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003ed0:	682b      	ldr	r3, [r5, #0]
 8003ed2:	6023      	str	r3, [r4, #0]

  /* Configure the LTDC Layer */
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 8003ed4:	687a      	ldr	r2, [r7, #4]
 8003ed6:	68b9      	ldr	r1, [r7, #8]
 8003ed8:	68f8      	ldr	r0, [r7, #12]
 8003eda:	f000 f83b 	bl	8003f54 <LTDC_SetConfig>

  /* Set the Immediate Reload type */
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 8003ede:	68fb      	ldr	r3, [r7, #12]
 8003ee0:	681b      	ldr	r3, [r3, #0]
 8003ee2:	2201      	movs	r2, #1
 8003ee4:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Initialize the LTDC state*/
  hltdc->State  = HAL_LTDC_STATE_READY;
 8003ee6:	68fb      	ldr	r3, [r7, #12]
 8003ee8:	2201      	movs	r2, #1
 8003eea:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 8003eee:	68fb      	ldr	r3, [r7, #12]
 8003ef0:	2200      	movs	r2, #0
 8003ef2:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0

  return HAL_OK;
 8003ef6:	2300      	movs	r3, #0
}
 8003ef8:	4618      	mov	r0, r3
 8003efa:	3710      	adds	r7, #16
 8003efc:	46bd      	mov	sp, r7
 8003efe:	bdb0      	pop	{r4, r5, r7, pc}

08003f00 <HAL_LTDC_EnableDither>:
  *                the configuration information for the LTDC.
  * @retval  HAL status
  */

HAL_StatusTypeDef HAL_LTDC_EnableDither(LTDC_HandleTypeDef *hltdc)
{
 8003f00:	b480      	push	{r7}
 8003f02:	b083      	sub	sp, #12
 8003f04:	af00      	add	r7, sp, #0
 8003f06:	6078      	str	r0, [r7, #4]
  /* Process locked */
  __HAL_LOCK(hltdc);
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	f893 30a0 	ldrb.w	r3, [r3, #160]	@ 0xa0
 8003f0e:	2b01      	cmp	r3, #1
 8003f10:	d101      	bne.n	8003f16 <HAL_LTDC_EnableDither+0x16>
 8003f12:	2302      	movs	r3, #2
 8003f14:	e016      	b.n	8003f44 <HAL_LTDC_EnableDither+0x44>
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	2201      	movs	r2, #1
 8003f1a:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	2202      	movs	r2, #2
 8003f22:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  /* Enable Dither by setting DTEN bit */
  LTDC->GCR |= (uint32_t)LTDC_GCR_DEN;
 8003f26:	4b0a      	ldr	r3, [pc, #40]	@ (8003f50 <HAL_LTDC_EnableDither+0x50>)
 8003f28:	699b      	ldr	r3, [r3, #24]
 8003f2a:	4a09      	ldr	r2, [pc, #36]	@ (8003f50 <HAL_LTDC_EnableDither+0x50>)
 8003f2c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003f30:	6193      	str	r3, [r2, #24]

  /* Change the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	2201      	movs	r2, #1
 8003f36:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	2200      	movs	r2, #0
 8003f3e:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0

  return HAL_OK;
 8003f42:	2300      	movs	r3, #0
}
 8003f44:	4618      	mov	r0, r3
 8003f46:	370c      	adds	r7, #12
 8003f48:	46bd      	mov	sp, r7
 8003f4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f4e:	4770      	bx	lr
 8003f50:	40016800 	.word	0x40016800

08003f54 <LTDC_SetConfig>:
  * @param  LayerIdx  LTDC Layer index.
  *                   This parameter can be one of the following values: LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval None
  */
static void LTDC_SetConfig(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 8003f54:	b480      	push	{r7}
 8003f56:	b089      	sub	sp, #36	@ 0x24
 8003f58:	af00      	add	r7, sp, #0
 8003f5a:	60f8      	str	r0, [r7, #12]
 8003f5c:	60b9      	str	r1, [r7, #8]
 8003f5e:	607a      	str	r2, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;
  uint32_t tmp2;

  /* Configure the horizontal start and stop position */
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 8003f60:	68bb      	ldr	r3, [r7, #8]
 8003f62:	685a      	ldr	r2, [r3, #4]
 8003f64:	68fb      	ldr	r3, [r7, #12]
 8003f66:	681b      	ldr	r3, [r3, #0]
 8003f68:	68db      	ldr	r3, [r3, #12]
 8003f6a:	0c1b      	lsrs	r3, r3, #16
 8003f6c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003f70:	4413      	add	r3, r2
 8003f72:	041b      	lsls	r3, r3, #16
 8003f74:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 8003f76:	68fb      	ldr	r3, [r7, #12]
 8003f78:	681b      	ldr	r3, [r3, #0]
 8003f7a:	461a      	mov	r2, r3
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	01db      	lsls	r3, r3, #7
 8003f80:	4413      	add	r3, r2
 8003f82:	3384      	adds	r3, #132	@ 0x84
 8003f84:	685b      	ldr	r3, [r3, #4]
 8003f86:	68fa      	ldr	r2, [r7, #12]
 8003f88:	6812      	ldr	r2, [r2, #0]
 8003f8a:	4611      	mov	r1, r2
 8003f8c:	687a      	ldr	r2, [r7, #4]
 8003f8e:	01d2      	lsls	r2, r2, #7
 8003f90:	440a      	add	r2, r1
 8003f92:	3284      	adds	r2, #132	@ 0x84
 8003f94:	f403 4370 	and.w	r3, r3, #61440	@ 0xf000
 8003f98:	6053      	str	r3, [r2, #4]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8003f9a:	68bb      	ldr	r3, [r7, #8]
 8003f9c:	681a      	ldr	r2, [r3, #0]
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8003f9e:	68fb      	ldr	r3, [r7, #12]
 8003fa0:	681b      	ldr	r3, [r3, #0]
 8003fa2:	68db      	ldr	r3, [r3, #12]
 8003fa4:	0c1b      	lsrs	r3, r3, #16
 8003fa6:	f3c3 030b 	ubfx	r3, r3, #0, #12
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8003faa:	4413      	add	r3, r2
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8003fac:	1c5a      	adds	r2, r3, #1
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8003fae:	68fb      	ldr	r3, [r7, #12]
 8003fb0:	681b      	ldr	r3, [r3, #0]
 8003fb2:	4619      	mov	r1, r3
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	01db      	lsls	r3, r3, #7
 8003fb8:	440b      	add	r3, r1
 8003fba:	3384      	adds	r3, #132	@ 0x84
 8003fbc:	4619      	mov	r1, r3
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8003fbe:	69fb      	ldr	r3, [r7, #28]
 8003fc0:	4313      	orrs	r3, r2
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8003fc2:	604b      	str	r3, [r1, #4]

  /* Configure the vertical start and stop position */
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
 8003fc4:	68bb      	ldr	r3, [r7, #8]
 8003fc6:	68da      	ldr	r2, [r3, #12]
 8003fc8:	68fb      	ldr	r3, [r7, #12]
 8003fca:	681b      	ldr	r3, [r3, #0]
 8003fcc:	68db      	ldr	r3, [r3, #12]
 8003fce:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003fd2:	4413      	add	r3, r2
 8003fd4:	041b      	lsls	r3, r3, #16
 8003fd6:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
 8003fd8:	68fb      	ldr	r3, [r7, #12]
 8003fda:	681b      	ldr	r3, [r3, #0]
 8003fdc:	461a      	mov	r2, r3
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	01db      	lsls	r3, r3, #7
 8003fe2:	4413      	add	r3, r2
 8003fe4:	3384      	adds	r3, #132	@ 0x84
 8003fe6:	689b      	ldr	r3, [r3, #8]
 8003fe8:	68fa      	ldr	r2, [r7, #12]
 8003fea:	6812      	ldr	r2, [r2, #0]
 8003fec:	4611      	mov	r1, r2
 8003fee:	687a      	ldr	r2, [r7, #4]
 8003ff0:	01d2      	lsls	r2, r2, #7
 8003ff2:	440a      	add	r2, r1
 8003ff4:	3284      	adds	r2, #132	@ 0x84
 8003ff6:	f403 4370 	and.w	r3, r3, #61440	@ 0xf000
 8003ffa:	6093      	str	r3, [r2, #8]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
 8003ffc:	68bb      	ldr	r3, [r7, #8]
 8003ffe:	689a      	ldr	r2, [r3, #8]
 8004000:	68fb      	ldr	r3, [r7, #12]
 8004002:	681b      	ldr	r3, [r3, #0]
 8004004:	68db      	ldr	r3, [r3, #12]
 8004006:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800400a:	4413      	add	r3, r2
 800400c:	1c5a      	adds	r2, r3, #1
 800400e:	68fb      	ldr	r3, [r7, #12]
 8004010:	681b      	ldr	r3, [r3, #0]
 8004012:	4619      	mov	r1, r3
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	01db      	lsls	r3, r3, #7
 8004018:	440b      	add	r3, r1
 800401a:	3384      	adds	r3, #132	@ 0x84
 800401c:	4619      	mov	r1, r3
 800401e:	69fb      	ldr	r3, [r7, #28]
 8004020:	4313      	orrs	r3, r2
 8004022:	608b      	str	r3, [r1, #8]

  /* Specifies the pixel format */
  LTDC_LAYER(hltdc, LayerIdx)->PFCR &= ~(LTDC_LxPFCR_PF);
 8004024:	68fb      	ldr	r3, [r7, #12]
 8004026:	681b      	ldr	r3, [r3, #0]
 8004028:	461a      	mov	r2, r3
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	01db      	lsls	r3, r3, #7
 800402e:	4413      	add	r3, r2
 8004030:	3384      	adds	r3, #132	@ 0x84
 8004032:	691b      	ldr	r3, [r3, #16]
 8004034:	68fa      	ldr	r2, [r7, #12]
 8004036:	6812      	ldr	r2, [r2, #0]
 8004038:	4611      	mov	r1, r2
 800403a:	687a      	ldr	r2, [r7, #4]
 800403c:	01d2      	lsls	r2, r2, #7
 800403e:	440a      	add	r2, r1
 8004040:	3284      	adds	r2, #132	@ 0x84
 8004042:	f023 0307 	bic.w	r3, r3, #7
 8004046:	6113      	str	r3, [r2, #16]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 8004048:	68fb      	ldr	r3, [r7, #12]
 800404a:	681b      	ldr	r3, [r3, #0]
 800404c:	461a      	mov	r2, r3
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	01db      	lsls	r3, r3, #7
 8004052:	4413      	add	r3, r2
 8004054:	3384      	adds	r3, #132	@ 0x84
 8004056:	461a      	mov	r2, r3
 8004058:	68bb      	ldr	r3, [r7, #8]
 800405a:	691b      	ldr	r3, [r3, #16]
 800405c:	6113      	str	r3, [r2, #16]

  /* Configure the default color values */
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8U);
 800405e:	68bb      	ldr	r3, [r7, #8]
 8004060:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 8004064:	021b      	lsls	r3, r3, #8
 8004066:	61fb      	str	r3, [r7, #28]
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16U);
 8004068:	68bb      	ldr	r3, [r7, #8]
 800406a:	f893 3032 	ldrb.w	r3, [r3, #50]	@ 0x32
 800406e:	041b      	lsls	r3, r3, #16
 8004070:	61bb      	str	r3, [r7, #24]
  tmp2 = (pLayerCfg->Alpha0 << 24U);
 8004072:	68bb      	ldr	r3, [r7, #8]
 8004074:	699b      	ldr	r3, [r3, #24]
 8004076:	061b      	lsls	r3, r3, #24
 8004078:	617b      	str	r3, [r7, #20]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED |
 800407a:	68fb      	ldr	r3, [r7, #12]
 800407c:	681b      	ldr	r3, [r3, #0]
 800407e:	461a      	mov	r2, r3
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	01db      	lsls	r3, r3, #7
 8004084:	4413      	add	r3, r2
 8004086:	3384      	adds	r3, #132	@ 0x84
 8004088:	699b      	ldr	r3, [r3, #24]
 800408a:	68fb      	ldr	r3, [r7, #12]
 800408c:	681b      	ldr	r3, [r3, #0]
 800408e:	461a      	mov	r2, r3
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	01db      	lsls	r3, r3, #7
 8004094:	4413      	add	r3, r2
 8004096:	3384      	adds	r3, #132	@ 0x84
 8004098:	461a      	mov	r2, r3
 800409a:	2300      	movs	r3, #0
 800409c:	6193      	str	r3, [r2, #24]
                                         LTDC_LxDCCR_DCALPHA);
  LTDC_LAYER(hltdc, LayerIdx)->DCCR = (pLayerCfg->Backcolor.Blue | tmp | tmp1 | tmp2);
 800409e:	68bb      	ldr	r3, [r7, #8]
 80040a0:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 80040a4:	461a      	mov	r2, r3
 80040a6:	69fb      	ldr	r3, [r7, #28]
 80040a8:	431a      	orrs	r2, r3
 80040aa:	69bb      	ldr	r3, [r7, #24]
 80040ac:	431a      	orrs	r2, r3
 80040ae:	68fb      	ldr	r3, [r7, #12]
 80040b0:	681b      	ldr	r3, [r3, #0]
 80040b2:	4619      	mov	r1, r3
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	01db      	lsls	r3, r3, #7
 80040b8:	440b      	add	r3, r1
 80040ba:	3384      	adds	r3, #132	@ 0x84
 80040bc:	4619      	mov	r1, r3
 80040be:	697b      	ldr	r3, [r7, #20]
 80040c0:	4313      	orrs	r3, r2
 80040c2:	618b      	str	r3, [r1, #24]

  /* Specifies the constant alpha value */
  LTDC_LAYER(hltdc, LayerIdx)->CACR &= ~(LTDC_LxCACR_CONSTA);
 80040c4:	68fb      	ldr	r3, [r7, #12]
 80040c6:	681b      	ldr	r3, [r3, #0]
 80040c8:	461a      	mov	r2, r3
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	01db      	lsls	r3, r3, #7
 80040ce:	4413      	add	r3, r2
 80040d0:	3384      	adds	r3, #132	@ 0x84
 80040d2:	695b      	ldr	r3, [r3, #20]
 80040d4:	68fa      	ldr	r2, [r7, #12]
 80040d6:	6812      	ldr	r2, [r2, #0]
 80040d8:	4611      	mov	r1, r2
 80040da:	687a      	ldr	r2, [r7, #4]
 80040dc:	01d2      	lsls	r2, r2, #7
 80040de:	440a      	add	r2, r1
 80040e0:	3284      	adds	r2, #132	@ 0x84
 80040e2:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 80040e6:	6153      	str	r3, [r2, #20]
  LTDC_LAYER(hltdc, LayerIdx)->CACR = (pLayerCfg->Alpha);
 80040e8:	68fb      	ldr	r3, [r7, #12]
 80040ea:	681b      	ldr	r3, [r3, #0]
 80040ec:	461a      	mov	r2, r3
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	01db      	lsls	r3, r3, #7
 80040f2:	4413      	add	r3, r2
 80040f4:	3384      	adds	r3, #132	@ 0x84
 80040f6:	461a      	mov	r2, r3
 80040f8:	68bb      	ldr	r3, [r7, #8]
 80040fa:	695b      	ldr	r3, [r3, #20]
 80040fc:	6153      	str	r3, [r2, #20]

  /* Specifies the blending factors */
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
 80040fe:	68fb      	ldr	r3, [r7, #12]
 8004100:	681b      	ldr	r3, [r3, #0]
 8004102:	461a      	mov	r2, r3
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	01db      	lsls	r3, r3, #7
 8004108:	4413      	add	r3, r2
 800410a:	3384      	adds	r3, #132	@ 0x84
 800410c:	69db      	ldr	r3, [r3, #28]
 800410e:	68fa      	ldr	r2, [r7, #12]
 8004110:	6812      	ldr	r2, [r2, #0]
 8004112:	4611      	mov	r1, r2
 8004114:	687a      	ldr	r2, [r7, #4]
 8004116:	01d2      	lsls	r2, r2, #7
 8004118:	440a      	add	r2, r1
 800411a:	3284      	adds	r2, #132	@ 0x84
 800411c:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 8004120:	f023 0307 	bic.w	r3, r3, #7
 8004124:	61d3      	str	r3, [r2, #28]
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);
 8004126:	68bb      	ldr	r3, [r7, #8]
 8004128:	69da      	ldr	r2, [r3, #28]
 800412a:	68bb      	ldr	r3, [r7, #8]
 800412c:	6a1b      	ldr	r3, [r3, #32]
 800412e:	68f9      	ldr	r1, [r7, #12]
 8004130:	6809      	ldr	r1, [r1, #0]
 8004132:	4608      	mov	r0, r1
 8004134:	6879      	ldr	r1, [r7, #4]
 8004136:	01c9      	lsls	r1, r1, #7
 8004138:	4401      	add	r1, r0
 800413a:	3184      	adds	r1, #132	@ 0x84
 800413c:	4313      	orrs	r3, r2
 800413e:	61cb      	str	r3, [r1, #28]

  /* Configure the color frame buffer start address */
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR &= ~(LTDC_LxCFBAR_CFBADD);
 8004140:	68fb      	ldr	r3, [r7, #12]
 8004142:	681b      	ldr	r3, [r3, #0]
 8004144:	461a      	mov	r2, r3
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	01db      	lsls	r3, r3, #7
 800414a:	4413      	add	r3, r2
 800414c:	3384      	adds	r3, #132	@ 0x84
 800414e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004150:	68fb      	ldr	r3, [r7, #12]
 8004152:	681b      	ldr	r3, [r3, #0]
 8004154:	461a      	mov	r2, r3
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	01db      	lsls	r3, r3, #7
 800415a:	4413      	add	r3, r2
 800415c:	3384      	adds	r3, #132	@ 0x84
 800415e:	461a      	mov	r2, r3
 8004160:	2300      	movs	r3, #0
 8004162:	6293      	str	r3, [r2, #40]	@ 0x28
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR = (pLayerCfg->FBStartAdress);
 8004164:	68fb      	ldr	r3, [r7, #12]
 8004166:	681b      	ldr	r3, [r3, #0]
 8004168:	461a      	mov	r2, r3
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	01db      	lsls	r3, r3, #7
 800416e:	4413      	add	r3, r2
 8004170:	3384      	adds	r3, #132	@ 0x84
 8004172:	461a      	mov	r2, r3
 8004174:	68bb      	ldr	r3, [r7, #8]
 8004176:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004178:	6293      	str	r3, [r2, #40]	@ 0x28

  if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 800417a:	68bb      	ldr	r3, [r7, #8]
 800417c:	691b      	ldr	r3, [r3, #16]
 800417e:	2b00      	cmp	r3, #0
 8004180:	d102      	bne.n	8004188 <LTDC_SetConfig+0x234>
  {
    tmp = 4U;
 8004182:	2304      	movs	r3, #4
 8004184:	61fb      	str	r3, [r7, #28]
 8004186:	e01b      	b.n	80041c0 <LTDC_SetConfig+0x26c>
  }
  else if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB888)
 8004188:	68bb      	ldr	r3, [r7, #8]
 800418a:	691b      	ldr	r3, [r3, #16]
 800418c:	2b01      	cmp	r3, #1
 800418e:	d102      	bne.n	8004196 <LTDC_SetConfig+0x242>
  {
    tmp = 3U;
 8004190:	2303      	movs	r3, #3
 8004192:	61fb      	str	r3, [r7, #28]
 8004194:	e014      	b.n	80041c0 <LTDC_SetConfig+0x26c>
  }
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 8004196:	68bb      	ldr	r3, [r7, #8]
 8004198:	691b      	ldr	r3, [r3, #16]
 800419a:	2b04      	cmp	r3, #4
 800419c:	d00b      	beq.n	80041b6 <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 800419e:	68bb      	ldr	r3, [r7, #8]
 80041a0:	691b      	ldr	r3, [r3, #16]
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 80041a2:	2b02      	cmp	r3, #2
 80041a4:	d007      	beq.n	80041b6 <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 80041a6:	68bb      	ldr	r3, [r7, #8]
 80041a8:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 80041aa:	2b03      	cmp	r3, #3
 80041ac:	d003      	beq.n	80041b6 <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_AL88))
 80041ae:	68bb      	ldr	r3, [r7, #8]
 80041b0:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 80041b2:	2b07      	cmp	r3, #7
 80041b4:	d102      	bne.n	80041bc <LTDC_SetConfig+0x268>
  {
    tmp = 2U;
 80041b6:	2302      	movs	r3, #2
 80041b8:	61fb      	str	r3, [r7, #28]
 80041ba:	e001      	b.n	80041c0 <LTDC_SetConfig+0x26c>
  }
  else
  {
    tmp = 1U;
 80041bc:	2301      	movs	r3, #1
 80041be:	61fb      	str	r3, [r7, #28]
  }

  /* Configure the color frame buffer pitch in byte */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 80041c0:	68fb      	ldr	r3, [r7, #12]
 80041c2:	681b      	ldr	r3, [r3, #0]
 80041c4:	461a      	mov	r2, r3
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	01db      	lsls	r3, r3, #7
 80041ca:	4413      	add	r3, r2
 80041cc:	3384      	adds	r3, #132	@ 0x84
 80041ce:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80041d0:	68fa      	ldr	r2, [r7, #12]
 80041d2:	6812      	ldr	r2, [r2, #0]
 80041d4:	4611      	mov	r1, r2
 80041d6:	687a      	ldr	r2, [r7, #4]
 80041d8:	01d2      	lsls	r2, r2, #7
 80041da:	440a      	add	r2, r1
 80041dc:	3284      	adds	r2, #132	@ 0x84
 80041de:	f003 23e0 	and.w	r3, r3, #3758153728	@ 0xe000e000
 80041e2:	62d3      	str	r3, [r2, #44]	@ 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | \
 80041e4:	68bb      	ldr	r3, [r7, #8]
 80041e6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80041e8:	69fa      	ldr	r2, [r7, #28]
 80041ea:	fb02 f303 	mul.w	r3, r2, r3
 80041ee:	041a      	lsls	r2, r3, #16
                                         (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 3U));
 80041f0:	68bb      	ldr	r3, [r7, #8]
 80041f2:	6859      	ldr	r1, [r3, #4]
 80041f4:	68bb      	ldr	r3, [r7, #8]
 80041f6:	681b      	ldr	r3, [r3, #0]
 80041f8:	1acb      	subs	r3, r1, r3
 80041fa:	69f9      	ldr	r1, [r7, #28]
 80041fc:	fb01 f303 	mul.w	r3, r1, r3
 8004200:	3303      	adds	r3, #3
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | \
 8004202:	68f9      	ldr	r1, [r7, #12]
 8004204:	6809      	ldr	r1, [r1, #0]
 8004206:	4608      	mov	r0, r1
 8004208:	6879      	ldr	r1, [r7, #4]
 800420a:	01c9      	lsls	r1, r1, #7
 800420c:	4401      	add	r1, r0
 800420e:	3184      	adds	r1, #132	@ 0x84
 8004210:	4313      	orrs	r3, r2
 8004212:	62cb      	str	r3, [r1, #44]	@ 0x2c
  /* Configure the frame buffer line number */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
 8004214:	68fb      	ldr	r3, [r7, #12]
 8004216:	681b      	ldr	r3, [r3, #0]
 8004218:	461a      	mov	r2, r3
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	01db      	lsls	r3, r3, #7
 800421e:	4413      	add	r3, r2
 8004220:	3384      	adds	r3, #132	@ 0x84
 8004222:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004224:	68fa      	ldr	r2, [r7, #12]
 8004226:	6812      	ldr	r2, [r2, #0]
 8004228:	4611      	mov	r1, r2
 800422a:	687a      	ldr	r2, [r7, #4]
 800422c:	01d2      	lsls	r2, r2, #7
 800422e:	440a      	add	r2, r1
 8004230:	3284      	adds	r2, #132	@ 0x84
 8004232:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 8004236:	f023 0307 	bic.w	r3, r3, #7
 800423a:	6313      	str	r3, [r2, #48]	@ 0x30
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 800423c:	68fb      	ldr	r3, [r7, #12]
 800423e:	681b      	ldr	r3, [r3, #0]
 8004240:	461a      	mov	r2, r3
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	01db      	lsls	r3, r3, #7
 8004246:	4413      	add	r3, r2
 8004248:	3384      	adds	r3, #132	@ 0x84
 800424a:	461a      	mov	r2, r3
 800424c:	68bb      	ldr	r3, [r7, #8]
 800424e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004250:	6313      	str	r3, [r2, #48]	@ 0x30

  /* Enable LTDC_Layer by setting LEN bit */
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_LEN;
 8004252:	68fb      	ldr	r3, [r7, #12]
 8004254:	681b      	ldr	r3, [r3, #0]
 8004256:	461a      	mov	r2, r3
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	01db      	lsls	r3, r3, #7
 800425c:	4413      	add	r3, r2
 800425e:	3384      	adds	r3, #132	@ 0x84
 8004260:	681b      	ldr	r3, [r3, #0]
 8004262:	68fa      	ldr	r2, [r7, #12]
 8004264:	6812      	ldr	r2, [r2, #0]
 8004266:	4611      	mov	r1, r2
 8004268:	687a      	ldr	r2, [r7, #4]
 800426a:	01d2      	lsls	r2, r2, #7
 800426c:	440a      	add	r2, r1
 800426e:	3284      	adds	r2, #132	@ 0x84
 8004270:	f043 0301 	orr.w	r3, r3, #1
 8004274:	6013      	str	r3, [r2, #0]
}
 8004276:	bf00      	nop
 8004278:	3724      	adds	r7, #36	@ 0x24
 800427a:	46bd      	mov	sp, r7
 800427c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004280:	4770      	bx	lr
	...

08004284 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8004284:	b580      	push	{r7, lr}
 8004286:	b082      	sub	sp, #8
 8004288:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 800428a:	2300      	movs	r3, #0
 800428c:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 800428e:	2300      	movs	r3, #0
 8004290:	603b      	str	r3, [r7, #0]
 8004292:	4b20      	ldr	r3, [pc, #128]	@ (8004314 <HAL_PWREx_EnableOverDrive+0x90>)
 8004294:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004296:	4a1f      	ldr	r2, [pc, #124]	@ (8004314 <HAL_PWREx_EnableOverDrive+0x90>)
 8004298:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800429c:	6413      	str	r3, [r2, #64]	@ 0x40
 800429e:	4b1d      	ldr	r3, [pc, #116]	@ (8004314 <HAL_PWREx_EnableOverDrive+0x90>)
 80042a0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80042a2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80042a6:	603b      	str	r3, [r7, #0]
 80042a8:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 80042aa:	4b1b      	ldr	r3, [pc, #108]	@ (8004318 <HAL_PWREx_EnableOverDrive+0x94>)
 80042ac:	2201      	movs	r2, #1
 80042ae:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80042b0:	f7fe f9ce 	bl	8002650 <HAL_GetTick>
 80042b4:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80042b6:	e009      	b.n	80042cc <HAL_PWREx_EnableOverDrive+0x48>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80042b8:	f7fe f9ca 	bl	8002650 <HAL_GetTick>
 80042bc:	4602      	mov	r2, r0
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	1ad3      	subs	r3, r2, r3
 80042c2:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80042c6:	d901      	bls.n	80042cc <HAL_PWREx_EnableOverDrive+0x48>
    {
      return HAL_TIMEOUT;
 80042c8:	2303      	movs	r3, #3
 80042ca:	e01f      	b.n	800430c <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80042cc:	4b13      	ldr	r3, [pc, #76]	@ (800431c <HAL_PWREx_EnableOverDrive+0x98>)
 80042ce:	685b      	ldr	r3, [r3, #4]
 80042d0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80042d4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80042d8:	d1ee      	bne.n	80042b8 <HAL_PWREx_EnableOverDrive+0x34>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 80042da:	4b11      	ldr	r3, [pc, #68]	@ (8004320 <HAL_PWREx_EnableOverDrive+0x9c>)
 80042dc:	2201      	movs	r2, #1
 80042de:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80042e0:	f7fe f9b6 	bl	8002650 <HAL_GetTick>
 80042e4:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80042e6:	e009      	b.n	80042fc <HAL_PWREx_EnableOverDrive+0x78>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80042e8:	f7fe f9b2 	bl	8002650 <HAL_GetTick>
 80042ec:	4602      	mov	r2, r0
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	1ad3      	subs	r3, r2, r3
 80042f2:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80042f6:	d901      	bls.n	80042fc <HAL_PWREx_EnableOverDrive+0x78>
    {
      return HAL_TIMEOUT;
 80042f8:	2303      	movs	r3, #3
 80042fa:	e007      	b.n	800430c <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80042fc:	4b07      	ldr	r3, [pc, #28]	@ (800431c <HAL_PWREx_EnableOverDrive+0x98>)
 80042fe:	685b      	ldr	r3, [r3, #4]
 8004300:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004304:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8004308:	d1ee      	bne.n	80042e8 <HAL_PWREx_EnableOverDrive+0x64>
    }
  } 
  return HAL_OK;
 800430a:	2300      	movs	r3, #0
}
 800430c:	4618      	mov	r0, r3
 800430e:	3708      	adds	r7, #8
 8004310:	46bd      	mov	sp, r7
 8004312:	bd80      	pop	{r7, pc}
 8004314:	40023800 	.word	0x40023800
 8004318:	420e0040 	.word	0x420e0040
 800431c:	40007000 	.word	0x40007000
 8004320:	420e0044 	.word	0x420e0044

08004324 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004324:	b580      	push	{r7, lr}
 8004326:	b086      	sub	sp, #24
 8004328:	af00      	add	r7, sp, #0
 800432a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	2b00      	cmp	r3, #0
 8004330:	d101      	bne.n	8004336 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004332:	2301      	movs	r3, #1
 8004334:	e267      	b.n	8004806 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	681b      	ldr	r3, [r3, #0]
 800433a:	f003 0301 	and.w	r3, r3, #1
 800433e:	2b00      	cmp	r3, #0
 8004340:	d075      	beq.n	800442e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8004342:	4b88      	ldr	r3, [pc, #544]	@ (8004564 <HAL_RCC_OscConfig+0x240>)
 8004344:	689b      	ldr	r3, [r3, #8]
 8004346:	f003 030c 	and.w	r3, r3, #12
 800434a:	2b04      	cmp	r3, #4
 800434c:	d00c      	beq.n	8004368 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800434e:	4b85      	ldr	r3, [pc, #532]	@ (8004564 <HAL_RCC_OscConfig+0x240>)
 8004350:	689b      	ldr	r3, [r3, #8]
 8004352:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8004356:	2b08      	cmp	r3, #8
 8004358:	d112      	bne.n	8004380 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800435a:	4b82      	ldr	r3, [pc, #520]	@ (8004564 <HAL_RCC_OscConfig+0x240>)
 800435c:	685b      	ldr	r3, [r3, #4]
 800435e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004362:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8004366:	d10b      	bne.n	8004380 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004368:	4b7e      	ldr	r3, [pc, #504]	@ (8004564 <HAL_RCC_OscConfig+0x240>)
 800436a:	681b      	ldr	r3, [r3, #0]
 800436c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004370:	2b00      	cmp	r3, #0
 8004372:	d05b      	beq.n	800442c <HAL_RCC_OscConfig+0x108>
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	685b      	ldr	r3, [r3, #4]
 8004378:	2b00      	cmp	r3, #0
 800437a:	d157      	bne.n	800442c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800437c:	2301      	movs	r3, #1
 800437e:	e242      	b.n	8004806 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	685b      	ldr	r3, [r3, #4]
 8004384:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004388:	d106      	bne.n	8004398 <HAL_RCC_OscConfig+0x74>
 800438a:	4b76      	ldr	r3, [pc, #472]	@ (8004564 <HAL_RCC_OscConfig+0x240>)
 800438c:	681b      	ldr	r3, [r3, #0]
 800438e:	4a75      	ldr	r2, [pc, #468]	@ (8004564 <HAL_RCC_OscConfig+0x240>)
 8004390:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004394:	6013      	str	r3, [r2, #0]
 8004396:	e01d      	b.n	80043d4 <HAL_RCC_OscConfig+0xb0>
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	685b      	ldr	r3, [r3, #4]
 800439c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80043a0:	d10c      	bne.n	80043bc <HAL_RCC_OscConfig+0x98>
 80043a2:	4b70      	ldr	r3, [pc, #448]	@ (8004564 <HAL_RCC_OscConfig+0x240>)
 80043a4:	681b      	ldr	r3, [r3, #0]
 80043a6:	4a6f      	ldr	r2, [pc, #444]	@ (8004564 <HAL_RCC_OscConfig+0x240>)
 80043a8:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80043ac:	6013      	str	r3, [r2, #0]
 80043ae:	4b6d      	ldr	r3, [pc, #436]	@ (8004564 <HAL_RCC_OscConfig+0x240>)
 80043b0:	681b      	ldr	r3, [r3, #0]
 80043b2:	4a6c      	ldr	r2, [pc, #432]	@ (8004564 <HAL_RCC_OscConfig+0x240>)
 80043b4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80043b8:	6013      	str	r3, [r2, #0]
 80043ba:	e00b      	b.n	80043d4 <HAL_RCC_OscConfig+0xb0>
 80043bc:	4b69      	ldr	r3, [pc, #420]	@ (8004564 <HAL_RCC_OscConfig+0x240>)
 80043be:	681b      	ldr	r3, [r3, #0]
 80043c0:	4a68      	ldr	r2, [pc, #416]	@ (8004564 <HAL_RCC_OscConfig+0x240>)
 80043c2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80043c6:	6013      	str	r3, [r2, #0]
 80043c8:	4b66      	ldr	r3, [pc, #408]	@ (8004564 <HAL_RCC_OscConfig+0x240>)
 80043ca:	681b      	ldr	r3, [r3, #0]
 80043cc:	4a65      	ldr	r2, [pc, #404]	@ (8004564 <HAL_RCC_OscConfig+0x240>)
 80043ce:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80043d2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	685b      	ldr	r3, [r3, #4]
 80043d8:	2b00      	cmp	r3, #0
 80043da:	d013      	beq.n	8004404 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80043dc:	f7fe f938 	bl	8002650 <HAL_GetTick>
 80043e0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80043e2:	e008      	b.n	80043f6 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80043e4:	f7fe f934 	bl	8002650 <HAL_GetTick>
 80043e8:	4602      	mov	r2, r0
 80043ea:	693b      	ldr	r3, [r7, #16]
 80043ec:	1ad3      	subs	r3, r2, r3
 80043ee:	2b64      	cmp	r3, #100	@ 0x64
 80043f0:	d901      	bls.n	80043f6 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80043f2:	2303      	movs	r3, #3
 80043f4:	e207      	b.n	8004806 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80043f6:	4b5b      	ldr	r3, [pc, #364]	@ (8004564 <HAL_RCC_OscConfig+0x240>)
 80043f8:	681b      	ldr	r3, [r3, #0]
 80043fa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80043fe:	2b00      	cmp	r3, #0
 8004400:	d0f0      	beq.n	80043e4 <HAL_RCC_OscConfig+0xc0>
 8004402:	e014      	b.n	800442e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004404:	f7fe f924 	bl	8002650 <HAL_GetTick>
 8004408:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800440a:	e008      	b.n	800441e <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800440c:	f7fe f920 	bl	8002650 <HAL_GetTick>
 8004410:	4602      	mov	r2, r0
 8004412:	693b      	ldr	r3, [r7, #16]
 8004414:	1ad3      	subs	r3, r2, r3
 8004416:	2b64      	cmp	r3, #100	@ 0x64
 8004418:	d901      	bls.n	800441e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800441a:	2303      	movs	r3, #3
 800441c:	e1f3      	b.n	8004806 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800441e:	4b51      	ldr	r3, [pc, #324]	@ (8004564 <HAL_RCC_OscConfig+0x240>)
 8004420:	681b      	ldr	r3, [r3, #0]
 8004422:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004426:	2b00      	cmp	r3, #0
 8004428:	d1f0      	bne.n	800440c <HAL_RCC_OscConfig+0xe8>
 800442a:	e000      	b.n	800442e <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800442c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	681b      	ldr	r3, [r3, #0]
 8004432:	f003 0302 	and.w	r3, r3, #2
 8004436:	2b00      	cmp	r3, #0
 8004438:	d063      	beq.n	8004502 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 800443a:	4b4a      	ldr	r3, [pc, #296]	@ (8004564 <HAL_RCC_OscConfig+0x240>)
 800443c:	689b      	ldr	r3, [r3, #8]
 800443e:	f003 030c 	and.w	r3, r3, #12
 8004442:	2b00      	cmp	r3, #0
 8004444:	d00b      	beq.n	800445e <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004446:	4b47      	ldr	r3, [pc, #284]	@ (8004564 <HAL_RCC_OscConfig+0x240>)
 8004448:	689b      	ldr	r3, [r3, #8]
 800444a:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 800444e:	2b08      	cmp	r3, #8
 8004450:	d11c      	bne.n	800448c <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004452:	4b44      	ldr	r3, [pc, #272]	@ (8004564 <HAL_RCC_OscConfig+0x240>)
 8004454:	685b      	ldr	r3, [r3, #4]
 8004456:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800445a:	2b00      	cmp	r3, #0
 800445c:	d116      	bne.n	800448c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800445e:	4b41      	ldr	r3, [pc, #260]	@ (8004564 <HAL_RCC_OscConfig+0x240>)
 8004460:	681b      	ldr	r3, [r3, #0]
 8004462:	f003 0302 	and.w	r3, r3, #2
 8004466:	2b00      	cmp	r3, #0
 8004468:	d005      	beq.n	8004476 <HAL_RCC_OscConfig+0x152>
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	68db      	ldr	r3, [r3, #12]
 800446e:	2b01      	cmp	r3, #1
 8004470:	d001      	beq.n	8004476 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8004472:	2301      	movs	r3, #1
 8004474:	e1c7      	b.n	8004806 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004476:	4b3b      	ldr	r3, [pc, #236]	@ (8004564 <HAL_RCC_OscConfig+0x240>)
 8004478:	681b      	ldr	r3, [r3, #0]
 800447a:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	691b      	ldr	r3, [r3, #16]
 8004482:	00db      	lsls	r3, r3, #3
 8004484:	4937      	ldr	r1, [pc, #220]	@ (8004564 <HAL_RCC_OscConfig+0x240>)
 8004486:	4313      	orrs	r3, r2
 8004488:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800448a:	e03a      	b.n	8004502 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	68db      	ldr	r3, [r3, #12]
 8004490:	2b00      	cmp	r3, #0
 8004492:	d020      	beq.n	80044d6 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004494:	4b34      	ldr	r3, [pc, #208]	@ (8004568 <HAL_RCC_OscConfig+0x244>)
 8004496:	2201      	movs	r2, #1
 8004498:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800449a:	f7fe f8d9 	bl	8002650 <HAL_GetTick>
 800449e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80044a0:	e008      	b.n	80044b4 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80044a2:	f7fe f8d5 	bl	8002650 <HAL_GetTick>
 80044a6:	4602      	mov	r2, r0
 80044a8:	693b      	ldr	r3, [r7, #16]
 80044aa:	1ad3      	subs	r3, r2, r3
 80044ac:	2b02      	cmp	r3, #2
 80044ae:	d901      	bls.n	80044b4 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80044b0:	2303      	movs	r3, #3
 80044b2:	e1a8      	b.n	8004806 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80044b4:	4b2b      	ldr	r3, [pc, #172]	@ (8004564 <HAL_RCC_OscConfig+0x240>)
 80044b6:	681b      	ldr	r3, [r3, #0]
 80044b8:	f003 0302 	and.w	r3, r3, #2
 80044bc:	2b00      	cmp	r3, #0
 80044be:	d0f0      	beq.n	80044a2 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80044c0:	4b28      	ldr	r3, [pc, #160]	@ (8004564 <HAL_RCC_OscConfig+0x240>)
 80044c2:	681b      	ldr	r3, [r3, #0]
 80044c4:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	691b      	ldr	r3, [r3, #16]
 80044cc:	00db      	lsls	r3, r3, #3
 80044ce:	4925      	ldr	r1, [pc, #148]	@ (8004564 <HAL_RCC_OscConfig+0x240>)
 80044d0:	4313      	orrs	r3, r2
 80044d2:	600b      	str	r3, [r1, #0]
 80044d4:	e015      	b.n	8004502 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80044d6:	4b24      	ldr	r3, [pc, #144]	@ (8004568 <HAL_RCC_OscConfig+0x244>)
 80044d8:	2200      	movs	r2, #0
 80044da:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80044dc:	f7fe f8b8 	bl	8002650 <HAL_GetTick>
 80044e0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80044e2:	e008      	b.n	80044f6 <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80044e4:	f7fe f8b4 	bl	8002650 <HAL_GetTick>
 80044e8:	4602      	mov	r2, r0
 80044ea:	693b      	ldr	r3, [r7, #16]
 80044ec:	1ad3      	subs	r3, r2, r3
 80044ee:	2b02      	cmp	r3, #2
 80044f0:	d901      	bls.n	80044f6 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80044f2:	2303      	movs	r3, #3
 80044f4:	e187      	b.n	8004806 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80044f6:	4b1b      	ldr	r3, [pc, #108]	@ (8004564 <HAL_RCC_OscConfig+0x240>)
 80044f8:	681b      	ldr	r3, [r3, #0]
 80044fa:	f003 0302 	and.w	r3, r3, #2
 80044fe:	2b00      	cmp	r3, #0
 8004500:	d1f0      	bne.n	80044e4 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	681b      	ldr	r3, [r3, #0]
 8004506:	f003 0308 	and.w	r3, r3, #8
 800450a:	2b00      	cmp	r3, #0
 800450c:	d036      	beq.n	800457c <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	695b      	ldr	r3, [r3, #20]
 8004512:	2b00      	cmp	r3, #0
 8004514:	d016      	beq.n	8004544 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004516:	4b15      	ldr	r3, [pc, #84]	@ (800456c <HAL_RCC_OscConfig+0x248>)
 8004518:	2201      	movs	r2, #1
 800451a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800451c:	f7fe f898 	bl	8002650 <HAL_GetTick>
 8004520:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004522:	e008      	b.n	8004536 <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004524:	f7fe f894 	bl	8002650 <HAL_GetTick>
 8004528:	4602      	mov	r2, r0
 800452a:	693b      	ldr	r3, [r7, #16]
 800452c:	1ad3      	subs	r3, r2, r3
 800452e:	2b02      	cmp	r3, #2
 8004530:	d901      	bls.n	8004536 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8004532:	2303      	movs	r3, #3
 8004534:	e167      	b.n	8004806 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004536:	4b0b      	ldr	r3, [pc, #44]	@ (8004564 <HAL_RCC_OscConfig+0x240>)
 8004538:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800453a:	f003 0302 	and.w	r3, r3, #2
 800453e:	2b00      	cmp	r3, #0
 8004540:	d0f0      	beq.n	8004524 <HAL_RCC_OscConfig+0x200>
 8004542:	e01b      	b.n	800457c <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004544:	4b09      	ldr	r3, [pc, #36]	@ (800456c <HAL_RCC_OscConfig+0x248>)
 8004546:	2200      	movs	r2, #0
 8004548:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800454a:	f7fe f881 	bl	8002650 <HAL_GetTick>
 800454e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004550:	e00e      	b.n	8004570 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004552:	f7fe f87d 	bl	8002650 <HAL_GetTick>
 8004556:	4602      	mov	r2, r0
 8004558:	693b      	ldr	r3, [r7, #16]
 800455a:	1ad3      	subs	r3, r2, r3
 800455c:	2b02      	cmp	r3, #2
 800455e:	d907      	bls.n	8004570 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8004560:	2303      	movs	r3, #3
 8004562:	e150      	b.n	8004806 <HAL_RCC_OscConfig+0x4e2>
 8004564:	40023800 	.word	0x40023800
 8004568:	42470000 	.word	0x42470000
 800456c:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004570:	4b88      	ldr	r3, [pc, #544]	@ (8004794 <HAL_RCC_OscConfig+0x470>)
 8004572:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004574:	f003 0302 	and.w	r3, r3, #2
 8004578:	2b00      	cmp	r3, #0
 800457a:	d1ea      	bne.n	8004552 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	681b      	ldr	r3, [r3, #0]
 8004580:	f003 0304 	and.w	r3, r3, #4
 8004584:	2b00      	cmp	r3, #0
 8004586:	f000 8097 	beq.w	80046b8 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800458a:	2300      	movs	r3, #0
 800458c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800458e:	4b81      	ldr	r3, [pc, #516]	@ (8004794 <HAL_RCC_OscConfig+0x470>)
 8004590:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004592:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004596:	2b00      	cmp	r3, #0
 8004598:	d10f      	bne.n	80045ba <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800459a:	2300      	movs	r3, #0
 800459c:	60bb      	str	r3, [r7, #8]
 800459e:	4b7d      	ldr	r3, [pc, #500]	@ (8004794 <HAL_RCC_OscConfig+0x470>)
 80045a0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80045a2:	4a7c      	ldr	r2, [pc, #496]	@ (8004794 <HAL_RCC_OscConfig+0x470>)
 80045a4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80045a8:	6413      	str	r3, [r2, #64]	@ 0x40
 80045aa:	4b7a      	ldr	r3, [pc, #488]	@ (8004794 <HAL_RCC_OscConfig+0x470>)
 80045ac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80045ae:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80045b2:	60bb      	str	r3, [r7, #8]
 80045b4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80045b6:	2301      	movs	r3, #1
 80045b8:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80045ba:	4b77      	ldr	r3, [pc, #476]	@ (8004798 <HAL_RCC_OscConfig+0x474>)
 80045bc:	681b      	ldr	r3, [r3, #0]
 80045be:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80045c2:	2b00      	cmp	r3, #0
 80045c4:	d118      	bne.n	80045f8 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80045c6:	4b74      	ldr	r3, [pc, #464]	@ (8004798 <HAL_RCC_OscConfig+0x474>)
 80045c8:	681b      	ldr	r3, [r3, #0]
 80045ca:	4a73      	ldr	r2, [pc, #460]	@ (8004798 <HAL_RCC_OscConfig+0x474>)
 80045cc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80045d0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80045d2:	f7fe f83d 	bl	8002650 <HAL_GetTick>
 80045d6:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80045d8:	e008      	b.n	80045ec <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80045da:	f7fe f839 	bl	8002650 <HAL_GetTick>
 80045de:	4602      	mov	r2, r0
 80045e0:	693b      	ldr	r3, [r7, #16]
 80045e2:	1ad3      	subs	r3, r2, r3
 80045e4:	2b02      	cmp	r3, #2
 80045e6:	d901      	bls.n	80045ec <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80045e8:	2303      	movs	r3, #3
 80045ea:	e10c      	b.n	8004806 <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80045ec:	4b6a      	ldr	r3, [pc, #424]	@ (8004798 <HAL_RCC_OscConfig+0x474>)
 80045ee:	681b      	ldr	r3, [r3, #0]
 80045f0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80045f4:	2b00      	cmp	r3, #0
 80045f6:	d0f0      	beq.n	80045da <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	689b      	ldr	r3, [r3, #8]
 80045fc:	2b01      	cmp	r3, #1
 80045fe:	d106      	bne.n	800460e <HAL_RCC_OscConfig+0x2ea>
 8004600:	4b64      	ldr	r3, [pc, #400]	@ (8004794 <HAL_RCC_OscConfig+0x470>)
 8004602:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004604:	4a63      	ldr	r2, [pc, #396]	@ (8004794 <HAL_RCC_OscConfig+0x470>)
 8004606:	f043 0301 	orr.w	r3, r3, #1
 800460a:	6713      	str	r3, [r2, #112]	@ 0x70
 800460c:	e01c      	b.n	8004648 <HAL_RCC_OscConfig+0x324>
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	689b      	ldr	r3, [r3, #8]
 8004612:	2b05      	cmp	r3, #5
 8004614:	d10c      	bne.n	8004630 <HAL_RCC_OscConfig+0x30c>
 8004616:	4b5f      	ldr	r3, [pc, #380]	@ (8004794 <HAL_RCC_OscConfig+0x470>)
 8004618:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800461a:	4a5e      	ldr	r2, [pc, #376]	@ (8004794 <HAL_RCC_OscConfig+0x470>)
 800461c:	f043 0304 	orr.w	r3, r3, #4
 8004620:	6713      	str	r3, [r2, #112]	@ 0x70
 8004622:	4b5c      	ldr	r3, [pc, #368]	@ (8004794 <HAL_RCC_OscConfig+0x470>)
 8004624:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004626:	4a5b      	ldr	r2, [pc, #364]	@ (8004794 <HAL_RCC_OscConfig+0x470>)
 8004628:	f043 0301 	orr.w	r3, r3, #1
 800462c:	6713      	str	r3, [r2, #112]	@ 0x70
 800462e:	e00b      	b.n	8004648 <HAL_RCC_OscConfig+0x324>
 8004630:	4b58      	ldr	r3, [pc, #352]	@ (8004794 <HAL_RCC_OscConfig+0x470>)
 8004632:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004634:	4a57      	ldr	r2, [pc, #348]	@ (8004794 <HAL_RCC_OscConfig+0x470>)
 8004636:	f023 0301 	bic.w	r3, r3, #1
 800463a:	6713      	str	r3, [r2, #112]	@ 0x70
 800463c:	4b55      	ldr	r3, [pc, #340]	@ (8004794 <HAL_RCC_OscConfig+0x470>)
 800463e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004640:	4a54      	ldr	r2, [pc, #336]	@ (8004794 <HAL_RCC_OscConfig+0x470>)
 8004642:	f023 0304 	bic.w	r3, r3, #4
 8004646:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	689b      	ldr	r3, [r3, #8]
 800464c:	2b00      	cmp	r3, #0
 800464e:	d015      	beq.n	800467c <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004650:	f7fd fffe 	bl	8002650 <HAL_GetTick>
 8004654:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004656:	e00a      	b.n	800466e <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004658:	f7fd fffa 	bl	8002650 <HAL_GetTick>
 800465c:	4602      	mov	r2, r0
 800465e:	693b      	ldr	r3, [r7, #16]
 8004660:	1ad3      	subs	r3, r2, r3
 8004662:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004666:	4293      	cmp	r3, r2
 8004668:	d901      	bls.n	800466e <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800466a:	2303      	movs	r3, #3
 800466c:	e0cb      	b.n	8004806 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800466e:	4b49      	ldr	r3, [pc, #292]	@ (8004794 <HAL_RCC_OscConfig+0x470>)
 8004670:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004672:	f003 0302 	and.w	r3, r3, #2
 8004676:	2b00      	cmp	r3, #0
 8004678:	d0ee      	beq.n	8004658 <HAL_RCC_OscConfig+0x334>
 800467a:	e014      	b.n	80046a6 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800467c:	f7fd ffe8 	bl	8002650 <HAL_GetTick>
 8004680:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004682:	e00a      	b.n	800469a <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004684:	f7fd ffe4 	bl	8002650 <HAL_GetTick>
 8004688:	4602      	mov	r2, r0
 800468a:	693b      	ldr	r3, [r7, #16]
 800468c:	1ad3      	subs	r3, r2, r3
 800468e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004692:	4293      	cmp	r3, r2
 8004694:	d901      	bls.n	800469a <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8004696:	2303      	movs	r3, #3
 8004698:	e0b5      	b.n	8004806 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800469a:	4b3e      	ldr	r3, [pc, #248]	@ (8004794 <HAL_RCC_OscConfig+0x470>)
 800469c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800469e:	f003 0302 	and.w	r3, r3, #2
 80046a2:	2b00      	cmp	r3, #0
 80046a4:	d1ee      	bne.n	8004684 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80046a6:	7dfb      	ldrb	r3, [r7, #23]
 80046a8:	2b01      	cmp	r3, #1
 80046aa:	d105      	bne.n	80046b8 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80046ac:	4b39      	ldr	r3, [pc, #228]	@ (8004794 <HAL_RCC_OscConfig+0x470>)
 80046ae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80046b0:	4a38      	ldr	r2, [pc, #224]	@ (8004794 <HAL_RCC_OscConfig+0x470>)
 80046b2:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80046b6:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	699b      	ldr	r3, [r3, #24]
 80046bc:	2b00      	cmp	r3, #0
 80046be:	f000 80a1 	beq.w	8004804 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80046c2:	4b34      	ldr	r3, [pc, #208]	@ (8004794 <HAL_RCC_OscConfig+0x470>)
 80046c4:	689b      	ldr	r3, [r3, #8]
 80046c6:	f003 030c 	and.w	r3, r3, #12
 80046ca:	2b08      	cmp	r3, #8
 80046cc:	d05c      	beq.n	8004788 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	699b      	ldr	r3, [r3, #24]
 80046d2:	2b02      	cmp	r3, #2
 80046d4:	d141      	bne.n	800475a <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80046d6:	4b31      	ldr	r3, [pc, #196]	@ (800479c <HAL_RCC_OscConfig+0x478>)
 80046d8:	2200      	movs	r2, #0
 80046da:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80046dc:	f7fd ffb8 	bl	8002650 <HAL_GetTick>
 80046e0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80046e2:	e008      	b.n	80046f6 <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80046e4:	f7fd ffb4 	bl	8002650 <HAL_GetTick>
 80046e8:	4602      	mov	r2, r0
 80046ea:	693b      	ldr	r3, [r7, #16]
 80046ec:	1ad3      	subs	r3, r2, r3
 80046ee:	2b02      	cmp	r3, #2
 80046f0:	d901      	bls.n	80046f6 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80046f2:	2303      	movs	r3, #3
 80046f4:	e087      	b.n	8004806 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80046f6:	4b27      	ldr	r3, [pc, #156]	@ (8004794 <HAL_RCC_OscConfig+0x470>)
 80046f8:	681b      	ldr	r3, [r3, #0]
 80046fa:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80046fe:	2b00      	cmp	r3, #0
 8004700:	d1f0      	bne.n	80046e4 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	69da      	ldr	r2, [r3, #28]
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	6a1b      	ldr	r3, [r3, #32]
 800470a:	431a      	orrs	r2, r3
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004710:	019b      	lsls	r3, r3, #6
 8004712:	431a      	orrs	r2, r3
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004718:	085b      	lsrs	r3, r3, #1
 800471a:	3b01      	subs	r3, #1
 800471c:	041b      	lsls	r3, r3, #16
 800471e:	431a      	orrs	r2, r3
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004724:	061b      	lsls	r3, r3, #24
 8004726:	491b      	ldr	r1, [pc, #108]	@ (8004794 <HAL_RCC_OscConfig+0x470>)
 8004728:	4313      	orrs	r3, r2
 800472a:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800472c:	4b1b      	ldr	r3, [pc, #108]	@ (800479c <HAL_RCC_OscConfig+0x478>)
 800472e:	2201      	movs	r2, #1
 8004730:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004732:	f7fd ff8d 	bl	8002650 <HAL_GetTick>
 8004736:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004738:	e008      	b.n	800474c <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800473a:	f7fd ff89 	bl	8002650 <HAL_GetTick>
 800473e:	4602      	mov	r2, r0
 8004740:	693b      	ldr	r3, [r7, #16]
 8004742:	1ad3      	subs	r3, r2, r3
 8004744:	2b02      	cmp	r3, #2
 8004746:	d901      	bls.n	800474c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8004748:	2303      	movs	r3, #3
 800474a:	e05c      	b.n	8004806 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800474c:	4b11      	ldr	r3, [pc, #68]	@ (8004794 <HAL_RCC_OscConfig+0x470>)
 800474e:	681b      	ldr	r3, [r3, #0]
 8004750:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004754:	2b00      	cmp	r3, #0
 8004756:	d0f0      	beq.n	800473a <HAL_RCC_OscConfig+0x416>
 8004758:	e054      	b.n	8004804 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800475a:	4b10      	ldr	r3, [pc, #64]	@ (800479c <HAL_RCC_OscConfig+0x478>)
 800475c:	2200      	movs	r2, #0
 800475e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004760:	f7fd ff76 	bl	8002650 <HAL_GetTick>
 8004764:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004766:	e008      	b.n	800477a <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004768:	f7fd ff72 	bl	8002650 <HAL_GetTick>
 800476c:	4602      	mov	r2, r0
 800476e:	693b      	ldr	r3, [r7, #16]
 8004770:	1ad3      	subs	r3, r2, r3
 8004772:	2b02      	cmp	r3, #2
 8004774:	d901      	bls.n	800477a <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8004776:	2303      	movs	r3, #3
 8004778:	e045      	b.n	8004806 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800477a:	4b06      	ldr	r3, [pc, #24]	@ (8004794 <HAL_RCC_OscConfig+0x470>)
 800477c:	681b      	ldr	r3, [r3, #0]
 800477e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004782:	2b00      	cmp	r3, #0
 8004784:	d1f0      	bne.n	8004768 <HAL_RCC_OscConfig+0x444>
 8004786:	e03d      	b.n	8004804 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	699b      	ldr	r3, [r3, #24]
 800478c:	2b01      	cmp	r3, #1
 800478e:	d107      	bne.n	80047a0 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8004790:	2301      	movs	r3, #1
 8004792:	e038      	b.n	8004806 <HAL_RCC_OscConfig+0x4e2>
 8004794:	40023800 	.word	0x40023800
 8004798:	40007000 	.word	0x40007000
 800479c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80047a0:	4b1b      	ldr	r3, [pc, #108]	@ (8004810 <HAL_RCC_OscConfig+0x4ec>)
 80047a2:	685b      	ldr	r3, [r3, #4]
 80047a4:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	699b      	ldr	r3, [r3, #24]
 80047aa:	2b01      	cmp	r3, #1
 80047ac:	d028      	beq.n	8004800 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80047ae:	68fb      	ldr	r3, [r7, #12]
 80047b0:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80047b8:	429a      	cmp	r2, r3
 80047ba:	d121      	bne.n	8004800 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80047bc:	68fb      	ldr	r3, [r7, #12]
 80047be:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80047c6:	429a      	cmp	r2, r3
 80047c8:	d11a      	bne.n	8004800 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80047ca:	68fa      	ldr	r2, [r7, #12]
 80047cc:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 80047d0:	4013      	ands	r3, r2
 80047d2:	687a      	ldr	r2, [r7, #4]
 80047d4:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80047d6:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80047d8:	4293      	cmp	r3, r2
 80047da:	d111      	bne.n	8004800 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80047dc:	68fb      	ldr	r3, [r7, #12]
 80047de:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80047e6:	085b      	lsrs	r3, r3, #1
 80047e8:	3b01      	subs	r3, #1
 80047ea:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80047ec:	429a      	cmp	r2, r3
 80047ee:	d107      	bne.n	8004800 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80047f0:	68fb      	ldr	r3, [r7, #12]
 80047f2:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80047fa:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80047fc:	429a      	cmp	r2, r3
 80047fe:	d001      	beq.n	8004804 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8004800:	2301      	movs	r3, #1
 8004802:	e000      	b.n	8004806 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8004804:	2300      	movs	r3, #0
}
 8004806:	4618      	mov	r0, r3
 8004808:	3718      	adds	r7, #24
 800480a:	46bd      	mov	sp, r7
 800480c:	bd80      	pop	{r7, pc}
 800480e:	bf00      	nop
 8004810:	40023800 	.word	0x40023800

08004814 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004814:	b580      	push	{r7, lr}
 8004816:	b084      	sub	sp, #16
 8004818:	af00      	add	r7, sp, #0
 800481a:	6078      	str	r0, [r7, #4]
 800481c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	2b00      	cmp	r3, #0
 8004822:	d101      	bne.n	8004828 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004824:	2301      	movs	r3, #1
 8004826:	e0cc      	b.n	80049c2 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004828:	4b68      	ldr	r3, [pc, #416]	@ (80049cc <HAL_RCC_ClockConfig+0x1b8>)
 800482a:	681b      	ldr	r3, [r3, #0]
 800482c:	f003 030f 	and.w	r3, r3, #15
 8004830:	683a      	ldr	r2, [r7, #0]
 8004832:	429a      	cmp	r2, r3
 8004834:	d90c      	bls.n	8004850 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004836:	4b65      	ldr	r3, [pc, #404]	@ (80049cc <HAL_RCC_ClockConfig+0x1b8>)
 8004838:	683a      	ldr	r2, [r7, #0]
 800483a:	b2d2      	uxtb	r2, r2
 800483c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800483e:	4b63      	ldr	r3, [pc, #396]	@ (80049cc <HAL_RCC_ClockConfig+0x1b8>)
 8004840:	681b      	ldr	r3, [r3, #0]
 8004842:	f003 030f 	and.w	r3, r3, #15
 8004846:	683a      	ldr	r2, [r7, #0]
 8004848:	429a      	cmp	r2, r3
 800484a:	d001      	beq.n	8004850 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800484c:	2301      	movs	r3, #1
 800484e:	e0b8      	b.n	80049c2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	681b      	ldr	r3, [r3, #0]
 8004854:	f003 0302 	and.w	r3, r3, #2
 8004858:	2b00      	cmp	r3, #0
 800485a:	d020      	beq.n	800489e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	681b      	ldr	r3, [r3, #0]
 8004860:	f003 0304 	and.w	r3, r3, #4
 8004864:	2b00      	cmp	r3, #0
 8004866:	d005      	beq.n	8004874 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004868:	4b59      	ldr	r3, [pc, #356]	@ (80049d0 <HAL_RCC_ClockConfig+0x1bc>)
 800486a:	689b      	ldr	r3, [r3, #8]
 800486c:	4a58      	ldr	r2, [pc, #352]	@ (80049d0 <HAL_RCC_ClockConfig+0x1bc>)
 800486e:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8004872:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	681b      	ldr	r3, [r3, #0]
 8004878:	f003 0308 	and.w	r3, r3, #8
 800487c:	2b00      	cmp	r3, #0
 800487e:	d005      	beq.n	800488c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004880:	4b53      	ldr	r3, [pc, #332]	@ (80049d0 <HAL_RCC_ClockConfig+0x1bc>)
 8004882:	689b      	ldr	r3, [r3, #8]
 8004884:	4a52      	ldr	r2, [pc, #328]	@ (80049d0 <HAL_RCC_ClockConfig+0x1bc>)
 8004886:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 800488a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800488c:	4b50      	ldr	r3, [pc, #320]	@ (80049d0 <HAL_RCC_ClockConfig+0x1bc>)
 800488e:	689b      	ldr	r3, [r3, #8]
 8004890:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	689b      	ldr	r3, [r3, #8]
 8004898:	494d      	ldr	r1, [pc, #308]	@ (80049d0 <HAL_RCC_ClockConfig+0x1bc>)
 800489a:	4313      	orrs	r3, r2
 800489c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	681b      	ldr	r3, [r3, #0]
 80048a2:	f003 0301 	and.w	r3, r3, #1
 80048a6:	2b00      	cmp	r3, #0
 80048a8:	d044      	beq.n	8004934 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	685b      	ldr	r3, [r3, #4]
 80048ae:	2b01      	cmp	r3, #1
 80048b0:	d107      	bne.n	80048c2 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80048b2:	4b47      	ldr	r3, [pc, #284]	@ (80049d0 <HAL_RCC_ClockConfig+0x1bc>)
 80048b4:	681b      	ldr	r3, [r3, #0]
 80048b6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80048ba:	2b00      	cmp	r3, #0
 80048bc:	d119      	bne.n	80048f2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80048be:	2301      	movs	r3, #1
 80048c0:	e07f      	b.n	80049c2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	685b      	ldr	r3, [r3, #4]
 80048c6:	2b02      	cmp	r3, #2
 80048c8:	d003      	beq.n	80048d2 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80048ce:	2b03      	cmp	r3, #3
 80048d0:	d107      	bne.n	80048e2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80048d2:	4b3f      	ldr	r3, [pc, #252]	@ (80049d0 <HAL_RCC_ClockConfig+0x1bc>)
 80048d4:	681b      	ldr	r3, [r3, #0]
 80048d6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80048da:	2b00      	cmp	r3, #0
 80048dc:	d109      	bne.n	80048f2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80048de:	2301      	movs	r3, #1
 80048e0:	e06f      	b.n	80049c2 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80048e2:	4b3b      	ldr	r3, [pc, #236]	@ (80049d0 <HAL_RCC_ClockConfig+0x1bc>)
 80048e4:	681b      	ldr	r3, [r3, #0]
 80048e6:	f003 0302 	and.w	r3, r3, #2
 80048ea:	2b00      	cmp	r3, #0
 80048ec:	d101      	bne.n	80048f2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80048ee:	2301      	movs	r3, #1
 80048f0:	e067      	b.n	80049c2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80048f2:	4b37      	ldr	r3, [pc, #220]	@ (80049d0 <HAL_RCC_ClockConfig+0x1bc>)
 80048f4:	689b      	ldr	r3, [r3, #8]
 80048f6:	f023 0203 	bic.w	r2, r3, #3
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	685b      	ldr	r3, [r3, #4]
 80048fe:	4934      	ldr	r1, [pc, #208]	@ (80049d0 <HAL_RCC_ClockConfig+0x1bc>)
 8004900:	4313      	orrs	r3, r2
 8004902:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004904:	f7fd fea4 	bl	8002650 <HAL_GetTick>
 8004908:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800490a:	e00a      	b.n	8004922 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800490c:	f7fd fea0 	bl	8002650 <HAL_GetTick>
 8004910:	4602      	mov	r2, r0
 8004912:	68fb      	ldr	r3, [r7, #12]
 8004914:	1ad3      	subs	r3, r2, r3
 8004916:	f241 3288 	movw	r2, #5000	@ 0x1388
 800491a:	4293      	cmp	r3, r2
 800491c:	d901      	bls.n	8004922 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800491e:	2303      	movs	r3, #3
 8004920:	e04f      	b.n	80049c2 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004922:	4b2b      	ldr	r3, [pc, #172]	@ (80049d0 <HAL_RCC_ClockConfig+0x1bc>)
 8004924:	689b      	ldr	r3, [r3, #8]
 8004926:	f003 020c 	and.w	r2, r3, #12
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	685b      	ldr	r3, [r3, #4]
 800492e:	009b      	lsls	r3, r3, #2
 8004930:	429a      	cmp	r2, r3
 8004932:	d1eb      	bne.n	800490c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004934:	4b25      	ldr	r3, [pc, #148]	@ (80049cc <HAL_RCC_ClockConfig+0x1b8>)
 8004936:	681b      	ldr	r3, [r3, #0]
 8004938:	f003 030f 	and.w	r3, r3, #15
 800493c:	683a      	ldr	r2, [r7, #0]
 800493e:	429a      	cmp	r2, r3
 8004940:	d20c      	bcs.n	800495c <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004942:	4b22      	ldr	r3, [pc, #136]	@ (80049cc <HAL_RCC_ClockConfig+0x1b8>)
 8004944:	683a      	ldr	r2, [r7, #0]
 8004946:	b2d2      	uxtb	r2, r2
 8004948:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800494a:	4b20      	ldr	r3, [pc, #128]	@ (80049cc <HAL_RCC_ClockConfig+0x1b8>)
 800494c:	681b      	ldr	r3, [r3, #0]
 800494e:	f003 030f 	and.w	r3, r3, #15
 8004952:	683a      	ldr	r2, [r7, #0]
 8004954:	429a      	cmp	r2, r3
 8004956:	d001      	beq.n	800495c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004958:	2301      	movs	r3, #1
 800495a:	e032      	b.n	80049c2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	681b      	ldr	r3, [r3, #0]
 8004960:	f003 0304 	and.w	r3, r3, #4
 8004964:	2b00      	cmp	r3, #0
 8004966:	d008      	beq.n	800497a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004968:	4b19      	ldr	r3, [pc, #100]	@ (80049d0 <HAL_RCC_ClockConfig+0x1bc>)
 800496a:	689b      	ldr	r3, [r3, #8]
 800496c:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	68db      	ldr	r3, [r3, #12]
 8004974:	4916      	ldr	r1, [pc, #88]	@ (80049d0 <HAL_RCC_ClockConfig+0x1bc>)
 8004976:	4313      	orrs	r3, r2
 8004978:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	681b      	ldr	r3, [r3, #0]
 800497e:	f003 0308 	and.w	r3, r3, #8
 8004982:	2b00      	cmp	r3, #0
 8004984:	d009      	beq.n	800499a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004986:	4b12      	ldr	r3, [pc, #72]	@ (80049d0 <HAL_RCC_ClockConfig+0x1bc>)
 8004988:	689b      	ldr	r3, [r3, #8]
 800498a:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	691b      	ldr	r3, [r3, #16]
 8004992:	00db      	lsls	r3, r3, #3
 8004994:	490e      	ldr	r1, [pc, #56]	@ (80049d0 <HAL_RCC_ClockConfig+0x1bc>)
 8004996:	4313      	orrs	r3, r2
 8004998:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800499a:	f000 f821 	bl	80049e0 <HAL_RCC_GetSysClockFreq>
 800499e:	4602      	mov	r2, r0
 80049a0:	4b0b      	ldr	r3, [pc, #44]	@ (80049d0 <HAL_RCC_ClockConfig+0x1bc>)
 80049a2:	689b      	ldr	r3, [r3, #8]
 80049a4:	091b      	lsrs	r3, r3, #4
 80049a6:	f003 030f 	and.w	r3, r3, #15
 80049aa:	490a      	ldr	r1, [pc, #40]	@ (80049d4 <HAL_RCC_ClockConfig+0x1c0>)
 80049ac:	5ccb      	ldrb	r3, [r1, r3]
 80049ae:	fa22 f303 	lsr.w	r3, r2, r3
 80049b2:	4a09      	ldr	r2, [pc, #36]	@ (80049d8 <HAL_RCC_ClockConfig+0x1c4>)
 80049b4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 80049b6:	4b09      	ldr	r3, [pc, #36]	@ (80049dc <HAL_RCC_ClockConfig+0x1c8>)
 80049b8:	681b      	ldr	r3, [r3, #0]
 80049ba:	4618      	mov	r0, r3
 80049bc:	f7fd fe04 	bl	80025c8 <HAL_InitTick>

  return HAL_OK;
 80049c0:	2300      	movs	r3, #0
}
 80049c2:	4618      	mov	r0, r3
 80049c4:	3710      	adds	r7, #16
 80049c6:	46bd      	mov	sp, r7
 80049c8:	bd80      	pop	{r7, pc}
 80049ca:	bf00      	nop
 80049cc:	40023c00 	.word	0x40023c00
 80049d0:	40023800 	.word	0x40023800
 80049d4:	08009ec0 	.word	0x08009ec0
 80049d8:	20000048 	.word	0x20000048
 80049dc:	2000004c 	.word	0x2000004c

080049e0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80049e0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80049e4:	b094      	sub	sp, #80	@ 0x50
 80049e6:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 80049e8:	2300      	movs	r3, #0
 80049ea:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 80049ec:	2300      	movs	r3, #0
 80049ee:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 80049f0:	2300      	movs	r3, #0
 80049f2:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 80049f4:	2300      	movs	r3, #0
 80049f6:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80049f8:	4b79      	ldr	r3, [pc, #484]	@ (8004be0 <HAL_RCC_GetSysClockFreq+0x200>)
 80049fa:	689b      	ldr	r3, [r3, #8]
 80049fc:	f003 030c 	and.w	r3, r3, #12
 8004a00:	2b08      	cmp	r3, #8
 8004a02:	d00d      	beq.n	8004a20 <HAL_RCC_GetSysClockFreq+0x40>
 8004a04:	2b08      	cmp	r3, #8
 8004a06:	f200 80e1 	bhi.w	8004bcc <HAL_RCC_GetSysClockFreq+0x1ec>
 8004a0a:	2b00      	cmp	r3, #0
 8004a0c:	d002      	beq.n	8004a14 <HAL_RCC_GetSysClockFreq+0x34>
 8004a0e:	2b04      	cmp	r3, #4
 8004a10:	d003      	beq.n	8004a1a <HAL_RCC_GetSysClockFreq+0x3a>
 8004a12:	e0db      	b.n	8004bcc <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004a14:	4b73      	ldr	r3, [pc, #460]	@ (8004be4 <HAL_RCC_GetSysClockFreq+0x204>)
 8004a16:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8004a18:	e0db      	b.n	8004bd2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004a1a:	4b73      	ldr	r3, [pc, #460]	@ (8004be8 <HAL_RCC_GetSysClockFreq+0x208>)
 8004a1c:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8004a1e:	e0d8      	b.n	8004bd2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004a20:	4b6f      	ldr	r3, [pc, #444]	@ (8004be0 <HAL_RCC_GetSysClockFreq+0x200>)
 8004a22:	685b      	ldr	r3, [r3, #4]
 8004a24:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8004a28:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004a2a:	4b6d      	ldr	r3, [pc, #436]	@ (8004be0 <HAL_RCC_GetSysClockFreq+0x200>)
 8004a2c:	685b      	ldr	r3, [r3, #4]
 8004a2e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004a32:	2b00      	cmp	r3, #0
 8004a34:	d063      	beq.n	8004afe <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004a36:	4b6a      	ldr	r3, [pc, #424]	@ (8004be0 <HAL_RCC_GetSysClockFreq+0x200>)
 8004a38:	685b      	ldr	r3, [r3, #4]
 8004a3a:	099b      	lsrs	r3, r3, #6
 8004a3c:	2200      	movs	r2, #0
 8004a3e:	63bb      	str	r3, [r7, #56]	@ 0x38
 8004a40:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8004a42:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004a44:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004a48:	633b      	str	r3, [r7, #48]	@ 0x30
 8004a4a:	2300      	movs	r3, #0
 8004a4c:	637b      	str	r3, [r7, #52]	@ 0x34
 8004a4e:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8004a52:	4622      	mov	r2, r4
 8004a54:	462b      	mov	r3, r5
 8004a56:	f04f 0000 	mov.w	r0, #0
 8004a5a:	f04f 0100 	mov.w	r1, #0
 8004a5e:	0159      	lsls	r1, r3, #5
 8004a60:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004a64:	0150      	lsls	r0, r2, #5
 8004a66:	4602      	mov	r2, r0
 8004a68:	460b      	mov	r3, r1
 8004a6a:	4621      	mov	r1, r4
 8004a6c:	1a51      	subs	r1, r2, r1
 8004a6e:	6139      	str	r1, [r7, #16]
 8004a70:	4629      	mov	r1, r5
 8004a72:	eb63 0301 	sbc.w	r3, r3, r1
 8004a76:	617b      	str	r3, [r7, #20]
 8004a78:	f04f 0200 	mov.w	r2, #0
 8004a7c:	f04f 0300 	mov.w	r3, #0
 8004a80:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004a84:	4659      	mov	r1, fp
 8004a86:	018b      	lsls	r3, r1, #6
 8004a88:	4651      	mov	r1, sl
 8004a8a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8004a8e:	4651      	mov	r1, sl
 8004a90:	018a      	lsls	r2, r1, #6
 8004a92:	4651      	mov	r1, sl
 8004a94:	ebb2 0801 	subs.w	r8, r2, r1
 8004a98:	4659      	mov	r1, fp
 8004a9a:	eb63 0901 	sbc.w	r9, r3, r1
 8004a9e:	f04f 0200 	mov.w	r2, #0
 8004aa2:	f04f 0300 	mov.w	r3, #0
 8004aa6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004aaa:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004aae:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004ab2:	4690      	mov	r8, r2
 8004ab4:	4699      	mov	r9, r3
 8004ab6:	4623      	mov	r3, r4
 8004ab8:	eb18 0303 	adds.w	r3, r8, r3
 8004abc:	60bb      	str	r3, [r7, #8]
 8004abe:	462b      	mov	r3, r5
 8004ac0:	eb49 0303 	adc.w	r3, r9, r3
 8004ac4:	60fb      	str	r3, [r7, #12]
 8004ac6:	f04f 0200 	mov.w	r2, #0
 8004aca:	f04f 0300 	mov.w	r3, #0
 8004ace:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8004ad2:	4629      	mov	r1, r5
 8004ad4:	024b      	lsls	r3, r1, #9
 8004ad6:	4621      	mov	r1, r4
 8004ad8:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8004adc:	4621      	mov	r1, r4
 8004ade:	024a      	lsls	r2, r1, #9
 8004ae0:	4610      	mov	r0, r2
 8004ae2:	4619      	mov	r1, r3
 8004ae4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004ae6:	2200      	movs	r2, #0
 8004ae8:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004aea:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8004aec:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8004af0:	f7fb fb7e 	bl	80001f0 <__aeabi_uldivmod>
 8004af4:	4602      	mov	r2, r0
 8004af6:	460b      	mov	r3, r1
 8004af8:	4613      	mov	r3, r2
 8004afa:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004afc:	e058      	b.n	8004bb0 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004afe:	4b38      	ldr	r3, [pc, #224]	@ (8004be0 <HAL_RCC_GetSysClockFreq+0x200>)
 8004b00:	685b      	ldr	r3, [r3, #4]
 8004b02:	099b      	lsrs	r3, r3, #6
 8004b04:	2200      	movs	r2, #0
 8004b06:	4618      	mov	r0, r3
 8004b08:	4611      	mov	r1, r2
 8004b0a:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8004b0e:	623b      	str	r3, [r7, #32]
 8004b10:	2300      	movs	r3, #0
 8004b12:	627b      	str	r3, [r7, #36]	@ 0x24
 8004b14:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8004b18:	4642      	mov	r2, r8
 8004b1a:	464b      	mov	r3, r9
 8004b1c:	f04f 0000 	mov.w	r0, #0
 8004b20:	f04f 0100 	mov.w	r1, #0
 8004b24:	0159      	lsls	r1, r3, #5
 8004b26:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004b2a:	0150      	lsls	r0, r2, #5
 8004b2c:	4602      	mov	r2, r0
 8004b2e:	460b      	mov	r3, r1
 8004b30:	4641      	mov	r1, r8
 8004b32:	ebb2 0a01 	subs.w	sl, r2, r1
 8004b36:	4649      	mov	r1, r9
 8004b38:	eb63 0b01 	sbc.w	fp, r3, r1
 8004b3c:	f04f 0200 	mov.w	r2, #0
 8004b40:	f04f 0300 	mov.w	r3, #0
 8004b44:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8004b48:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8004b4c:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8004b50:	ebb2 040a 	subs.w	r4, r2, sl
 8004b54:	eb63 050b 	sbc.w	r5, r3, fp
 8004b58:	f04f 0200 	mov.w	r2, #0
 8004b5c:	f04f 0300 	mov.w	r3, #0
 8004b60:	00eb      	lsls	r3, r5, #3
 8004b62:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004b66:	00e2      	lsls	r2, r4, #3
 8004b68:	4614      	mov	r4, r2
 8004b6a:	461d      	mov	r5, r3
 8004b6c:	4643      	mov	r3, r8
 8004b6e:	18e3      	adds	r3, r4, r3
 8004b70:	603b      	str	r3, [r7, #0]
 8004b72:	464b      	mov	r3, r9
 8004b74:	eb45 0303 	adc.w	r3, r5, r3
 8004b78:	607b      	str	r3, [r7, #4]
 8004b7a:	f04f 0200 	mov.w	r2, #0
 8004b7e:	f04f 0300 	mov.w	r3, #0
 8004b82:	e9d7 4500 	ldrd	r4, r5, [r7]
 8004b86:	4629      	mov	r1, r5
 8004b88:	028b      	lsls	r3, r1, #10
 8004b8a:	4621      	mov	r1, r4
 8004b8c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004b90:	4621      	mov	r1, r4
 8004b92:	028a      	lsls	r2, r1, #10
 8004b94:	4610      	mov	r0, r2
 8004b96:	4619      	mov	r1, r3
 8004b98:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004b9a:	2200      	movs	r2, #0
 8004b9c:	61bb      	str	r3, [r7, #24]
 8004b9e:	61fa      	str	r2, [r7, #28]
 8004ba0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004ba4:	f7fb fb24 	bl	80001f0 <__aeabi_uldivmod>
 8004ba8:	4602      	mov	r2, r0
 8004baa:	460b      	mov	r3, r1
 8004bac:	4613      	mov	r3, r2
 8004bae:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8004bb0:	4b0b      	ldr	r3, [pc, #44]	@ (8004be0 <HAL_RCC_GetSysClockFreq+0x200>)
 8004bb2:	685b      	ldr	r3, [r3, #4]
 8004bb4:	0c1b      	lsrs	r3, r3, #16
 8004bb6:	f003 0303 	and.w	r3, r3, #3
 8004bba:	3301      	adds	r3, #1
 8004bbc:	005b      	lsls	r3, r3, #1
 8004bbe:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 8004bc0:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8004bc2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004bc4:	fbb2 f3f3 	udiv	r3, r2, r3
 8004bc8:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8004bca:	e002      	b.n	8004bd2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004bcc:	4b05      	ldr	r3, [pc, #20]	@ (8004be4 <HAL_RCC_GetSysClockFreq+0x204>)
 8004bce:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8004bd0:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004bd2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8004bd4:	4618      	mov	r0, r3
 8004bd6:	3750      	adds	r7, #80	@ 0x50
 8004bd8:	46bd      	mov	sp, r7
 8004bda:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004bde:	bf00      	nop
 8004be0:	40023800 	.word	0x40023800
 8004be4:	00f42400 	.word	0x00f42400
 8004be8:	007a1200 	.word	0x007a1200

08004bec <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004bec:	b480      	push	{r7}
 8004bee:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004bf0:	4b03      	ldr	r3, [pc, #12]	@ (8004c00 <HAL_RCC_GetHCLKFreq+0x14>)
 8004bf2:	681b      	ldr	r3, [r3, #0]
}
 8004bf4:	4618      	mov	r0, r3
 8004bf6:	46bd      	mov	sp, r7
 8004bf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bfc:	4770      	bx	lr
 8004bfe:	bf00      	nop
 8004c00:	20000048 	.word	0x20000048

08004c04 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004c04:	b580      	push	{r7, lr}
 8004c06:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8004c08:	f7ff fff0 	bl	8004bec <HAL_RCC_GetHCLKFreq>
 8004c0c:	4602      	mov	r2, r0
 8004c0e:	4b05      	ldr	r3, [pc, #20]	@ (8004c24 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004c10:	689b      	ldr	r3, [r3, #8]
 8004c12:	0a9b      	lsrs	r3, r3, #10
 8004c14:	f003 0307 	and.w	r3, r3, #7
 8004c18:	4903      	ldr	r1, [pc, #12]	@ (8004c28 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004c1a:	5ccb      	ldrb	r3, [r1, r3]
 8004c1c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004c20:	4618      	mov	r0, r3
 8004c22:	bd80      	pop	{r7, pc}
 8004c24:	40023800 	.word	0x40023800
 8004c28:	08009ed0 	.word	0x08009ed0

08004c2c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004c2c:	b580      	push	{r7, lr}
 8004c2e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8004c30:	f7ff ffdc 	bl	8004bec <HAL_RCC_GetHCLKFreq>
 8004c34:	4602      	mov	r2, r0
 8004c36:	4b05      	ldr	r3, [pc, #20]	@ (8004c4c <HAL_RCC_GetPCLK2Freq+0x20>)
 8004c38:	689b      	ldr	r3, [r3, #8]
 8004c3a:	0b5b      	lsrs	r3, r3, #13
 8004c3c:	f003 0307 	and.w	r3, r3, #7
 8004c40:	4903      	ldr	r1, [pc, #12]	@ (8004c50 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004c42:	5ccb      	ldrb	r3, [r1, r3]
 8004c44:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004c48:	4618      	mov	r0, r3
 8004c4a:	bd80      	pop	{r7, pc}
 8004c4c:	40023800 	.word	0x40023800
 8004c50:	08009ed0 	.word	0x08009ed0

08004c54 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004c54:	b580      	push	{r7, lr}
 8004c56:	b086      	sub	sp, #24
 8004c58:	af00      	add	r7, sp, #0
 8004c5a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004c5c:	2300      	movs	r3, #0
 8004c5e:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8004c60:	2300      	movs	r3, #0
 8004c62:	613b      	str	r3, [r7, #16]

  /*----------------------- SAI/I2S Configuration (PLLI2S) -------------------*/
  /*----------------------- Common configuration SAI/I2S ---------------------*/
  /* In Case of SAI or I2S Clock Configuration through PLLI2S, PLLI2SN division
     factor is common parameters for both peripherals */
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	681b      	ldr	r3, [r3, #0]
 8004c68:	f003 0301 	and.w	r3, r3, #1
 8004c6c:	2b00      	cmp	r3, #0
 8004c6e:	d10b      	bne.n	8004c88 <HAL_RCCEx_PeriphCLKConfig+0x34>
      (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	681b      	ldr	r3, [r3, #0]
 8004c74:	f003 0302 	and.w	r3, r3, #2
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8004c78:	2b00      	cmp	r3, #0
 8004c7a:	d105      	bne.n	8004c88 <HAL_RCCEx_PeriphCLKConfig+0x34>
      (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	681b      	ldr	r3, [r3, #0]
 8004c80:	f003 0340 	and.w	r3, r3, #64	@ 0x40
      (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 8004c84:	2b00      	cmp	r3, #0
 8004c86:	d075      	beq.n	8004d74 <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    /* check for Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8004c88:	4b91      	ldr	r3, [pc, #580]	@ (8004ed0 <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 8004c8a:	2200      	movs	r2, #0
 8004c8c:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8004c8e:	f7fd fcdf 	bl	8002650 <HAL_GetTick>
 8004c92:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004c94:	e008      	b.n	8004ca8 <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
      if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8004c96:	f7fd fcdb 	bl	8002650 <HAL_GetTick>
 8004c9a:	4602      	mov	r2, r0
 8004c9c:	697b      	ldr	r3, [r7, #20]
 8004c9e:	1ad3      	subs	r3, r2, r3
 8004ca0:	2b02      	cmp	r3, #2
 8004ca2:	d901      	bls.n	8004ca8 <HAL_RCCEx_PeriphCLKConfig+0x54>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004ca4:	2303      	movs	r3, #3
 8004ca6:	e189      	b.n	8004fbc <HAL_RCCEx_PeriphCLKConfig+0x368>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004ca8:	4b8a      	ldr	r3, [pc, #552]	@ (8004ed4 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004caa:	681b      	ldr	r3, [r3, #0]
 8004cac:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004cb0:	2b00      	cmp	r3, #0
 8004cb2:	d1f0      	bne.n	8004c96 <HAL_RCCEx_PeriphCLKConfig+0x42>
    }

    /*---------------------------- I2S configuration -------------------------*/
    /* In Case of I2S Clock Configuration through PLLI2S, PLLI2SR must be added
      only for I2S configuration */
    if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	681b      	ldr	r3, [r3, #0]
 8004cb8:	f003 0301 	and.w	r3, r3, #1
 8004cbc:	2b00      	cmp	r3, #0
 8004cbe:	d009      	beq.n	8004cd4 <HAL_RCCEx_PeriphCLKConfig+0x80>
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	685b      	ldr	r3, [r3, #4]
 8004cc4:	019a      	lsls	r2, r3, #6
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	689b      	ldr	r3, [r3, #8]
 8004cca:	071b      	lsls	r3, r3, #28
 8004ccc:	4981      	ldr	r1, [pc, #516]	@ (8004ed4 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004cce:	4313      	orrs	r3, r2
 8004cd0:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLI2S, PLLI2SQ and PLLI2S_DIVQ must
       be added only for SAI configuration */
    if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == (RCC_PERIPHCLK_SAI_PLLI2S))
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	681b      	ldr	r3, [r3, #0]
 8004cd8:	f003 0302 	and.w	r3, r3, #2
 8004cdc:	2b00      	cmp	r3, #0
 8004cde:	d01f      	beq.n	8004d20 <HAL_RCCEx_PeriphCLKConfig+0xcc>
      /* Check the PLLI2S division factors */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SR value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8004ce0:	4b7c      	ldr	r3, [pc, #496]	@ (8004ed4 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004ce2:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004ce6:	0f1b      	lsrs	r3, r3, #28
 8004ce8:	f003 0307 	and.w	r3, r3, #7
 8004cec:	613b      	str	r3, [r7, #16]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	685b      	ldr	r3, [r3, #4]
 8004cf2:	019a      	lsls	r2, r3, #6
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	68db      	ldr	r3, [r3, #12]
 8004cf8:	061b      	lsls	r3, r3, #24
 8004cfa:	431a      	orrs	r2, r3
 8004cfc:	693b      	ldr	r3, [r7, #16]
 8004cfe:	071b      	lsls	r3, r3, #28
 8004d00:	4974      	ldr	r1, [pc, #464]	@ (8004ed4 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004d02:	4313      	orrs	r3, r2
 8004d04:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8004d08:	4b72      	ldr	r3, [pc, #456]	@ (8004ed4 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004d0a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8004d0e:	f023 021f 	bic.w	r2, r3, #31
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	69db      	ldr	r3, [r3, #28]
 8004d16:	3b01      	subs	r3, #1
 8004d18:	496e      	ldr	r1, [pc, #440]	@ (8004ed4 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004d1a:	4313      	orrs	r3, r2
 8004d1c:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	681b      	ldr	r3, [r3, #0]
 8004d24:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004d28:	2b00      	cmp	r3, #0
 8004d2a:	d00d      	beq.n	8004d48 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      /* Check for Parameters */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Configure the PLLI2S multiplication and division factors */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SQ,
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	685b      	ldr	r3, [r3, #4]
 8004d30:	019a      	lsls	r2, r3, #6
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	68db      	ldr	r3, [r3, #12]
 8004d36:	061b      	lsls	r3, r3, #24
 8004d38:	431a      	orrs	r2, r3
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	689b      	ldr	r3, [r3, #8]
 8004d3e:	071b      	lsls	r3, r3, #28
 8004d40:	4964      	ldr	r1, [pc, #400]	@ (8004ed4 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004d42:	4313      	orrs	r3, r2
 8004d44:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
                                     PeriphClkInit->PLLI2S.PLLI2SR);
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8004d48:	4b61      	ldr	r3, [pc, #388]	@ (8004ed0 <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 8004d4a:	2201      	movs	r2, #1
 8004d4c:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8004d4e:	f7fd fc7f 	bl	8002650 <HAL_GetTick>
 8004d52:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004d54:	e008      	b.n	8004d68 <HAL_RCCEx_PeriphCLKConfig+0x114>
    {
      if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8004d56:	f7fd fc7b 	bl	8002650 <HAL_GetTick>
 8004d5a:	4602      	mov	r2, r0
 8004d5c:	697b      	ldr	r3, [r7, #20]
 8004d5e:	1ad3      	subs	r3, r2, r3
 8004d60:	2b02      	cmp	r3, #2
 8004d62:	d901      	bls.n	8004d68 <HAL_RCCEx_PeriphCLKConfig+0x114>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004d64:	2303      	movs	r3, #3
 8004d66:	e129      	b.n	8004fbc <HAL_RCCEx_PeriphCLKConfig+0x368>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004d68:	4b5a      	ldr	r3, [pc, #360]	@ (8004ed4 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004d6a:	681b      	ldr	r3, [r3, #0]
 8004d6c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004d70:	2b00      	cmp	r3, #0
 8004d72:	d0f0      	beq.n	8004d56 <HAL_RCCEx_PeriphCLKConfig+0x102>

  /*----------------------- SAI/LTDC Configuration (PLLSAI) ------------------*/
  /*----------------------- Common configuration SAI/LTDC --------------------*/
  /* In Case of SAI or LTDC Clock Configuration through PLLSAI, PLLSAIN division
     factor is common parameters for both peripherals */
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	681b      	ldr	r3, [r3, #0]
 8004d78:	f003 0304 	and.w	r3, r3, #4
 8004d7c:	2b00      	cmp	r3, #0
 8004d7e:	d105      	bne.n	8004d8c <HAL_RCCEx_PeriphCLKConfig+0x138>
      (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC))
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	681b      	ldr	r3, [r3, #0]
 8004d84:	f003 0308 	and.w	r3, r3, #8
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 8004d88:	2b00      	cmp	r3, #0
 8004d8a:	d079      	beq.n	8004e80 <HAL_RCCEx_PeriphCLKConfig+0x22c>
  {
    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8004d8c:	4b52      	ldr	r3, [pc, #328]	@ (8004ed8 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 8004d8e:	2200      	movs	r2, #0
 8004d90:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8004d92:	f7fd fc5d 	bl	8002650 <HAL_GetTick>
 8004d96:	6178      	str	r0, [r7, #20]
    /* Wait till PLLSAI is disabled */
    while (__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8004d98:	e008      	b.n	8004dac <HAL_RCCEx_PeriphCLKConfig+0x158>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8004d9a:	f7fd fc59 	bl	8002650 <HAL_GetTick>
 8004d9e:	4602      	mov	r2, r0
 8004da0:	697b      	ldr	r3, [r7, #20]
 8004da2:	1ad3      	subs	r3, r2, r3
 8004da4:	2b02      	cmp	r3, #2
 8004da6:	d901      	bls.n	8004dac <HAL_RCCEx_PeriphCLKConfig+0x158>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004da8:	2303      	movs	r3, #3
 8004daa:	e107      	b.n	8004fbc <HAL_RCCEx_PeriphCLKConfig+0x368>
    while (__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8004dac:	4b49      	ldr	r3, [pc, #292]	@ (8004ed4 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004dae:	681b      	ldr	r3, [r3, #0]
 8004db0:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8004db4:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8004db8:	d0ef      	beq.n	8004d9a <HAL_RCCEx_PeriphCLKConfig+0x146>
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLSAI, PLLSAIQ and PLLSAI_DIVQ must
       be added only for SAI configuration */
    if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == (RCC_PERIPHCLK_SAI_PLLSAI))
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	681b      	ldr	r3, [r3, #0]
 8004dbe:	f003 0304 	and.w	r3, r3, #4
 8004dc2:	2b00      	cmp	r3, #0
 8004dc4:	d020      	beq.n	8004e08 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8004dc6:	4b43      	ldr	r3, [pc, #268]	@ (8004ed4 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004dc8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004dcc:	0f1b      	lsrs	r3, r3, #28
 8004dce:	f003 0307 	and.w	r3, r3, #7
 8004dd2:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	691b      	ldr	r3, [r3, #16]
 8004dd8:	019a      	lsls	r2, r3, #6
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	695b      	ldr	r3, [r3, #20]
 8004dde:	061b      	lsls	r3, r3, #24
 8004de0:	431a      	orrs	r2, r3
 8004de2:	693b      	ldr	r3, [r7, #16]
 8004de4:	071b      	lsls	r3, r3, #28
 8004de6:	493b      	ldr	r1, [pc, #236]	@ (8004ed4 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004de8:	4313      	orrs	r3, r2
 8004dea:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8004dee:	4b39      	ldr	r3, [pc, #228]	@ (8004ed4 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004df0:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8004df4:	f423 52f8 	bic.w	r2, r3, #7936	@ 0x1f00
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	6a1b      	ldr	r3, [r3, #32]
 8004dfc:	3b01      	subs	r3, #1
 8004dfe:	021b      	lsls	r3, r3, #8
 8004e00:	4934      	ldr	r1, [pc, #208]	@ (8004ed4 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004e02:	4313      	orrs	r3, r2
 8004e04:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*---------------------------- LTDC configuration ------------------------*/
    if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	681b      	ldr	r3, [r3, #0]
 8004e0c:	f003 0308 	and.w	r3, r3, #8
 8004e10:	2b00      	cmp	r3, #0
 8004e12:	d01e      	beq.n	8004e52 <HAL_RCCEx_PeriphCLKConfig+0x1fe>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8004e14:	4b2f      	ldr	r3, [pc, #188]	@ (8004ed4 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004e16:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004e1a:	0e1b      	lsrs	r3, r3, #24
 8004e1c:	f003 030f 	and.w	r3, r3, #15
 8004e20:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN, tmpreg1, PeriphClkInit->PLLSAI.PLLSAIR);
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	691b      	ldr	r3, [r3, #16]
 8004e26:	019a      	lsls	r2, r3, #6
 8004e28:	693b      	ldr	r3, [r7, #16]
 8004e2a:	061b      	lsls	r3, r3, #24
 8004e2c:	431a      	orrs	r2, r3
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	699b      	ldr	r3, [r3, #24]
 8004e32:	071b      	lsls	r3, r3, #28
 8004e34:	4927      	ldr	r1, [pc, #156]	@ (8004ed4 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004e36:	4313      	orrs	r3, r2
 8004e38:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8004e3c:	4b25      	ldr	r3, [pc, #148]	@ (8004ed4 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004e3e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8004e42:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004e4a:	4922      	ldr	r1, [pc, #136]	@ (8004ed4 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004e4c:	4313      	orrs	r3, r2
 8004e4e:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }
    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8004e52:	4b21      	ldr	r3, [pc, #132]	@ (8004ed8 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 8004e54:	2201      	movs	r2, #1
 8004e56:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8004e58:	f7fd fbfa 	bl	8002650 <HAL_GetTick>
 8004e5c:	6178      	str	r0, [r7, #20]
    /* Wait till PLLSAI is ready */
    while (__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8004e5e:	e008      	b.n	8004e72 <HAL_RCCEx_PeriphCLKConfig+0x21e>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8004e60:	f7fd fbf6 	bl	8002650 <HAL_GetTick>
 8004e64:	4602      	mov	r2, r0
 8004e66:	697b      	ldr	r3, [r7, #20]
 8004e68:	1ad3      	subs	r3, r2, r3
 8004e6a:	2b02      	cmp	r3, #2
 8004e6c:	d901      	bls.n	8004e72 <HAL_RCCEx_PeriphCLKConfig+0x21e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004e6e:	2303      	movs	r3, #3
 8004e70:	e0a4      	b.n	8004fbc <HAL_RCCEx_PeriphCLKConfig+0x368>
    while (__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8004e72:	4b18      	ldr	r3, [pc, #96]	@ (8004ed4 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004e74:	681b      	ldr	r3, [r3, #0]
 8004e76:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8004e7a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8004e7e:	d1ef      	bne.n	8004e60 <HAL_RCCEx_PeriphCLKConfig+0x20c>
    }
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- RTC configuration ---------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	681b      	ldr	r3, [r3, #0]
 8004e84:	f003 0320 	and.w	r3, r3, #32
 8004e88:	2b00      	cmp	r3, #0
 8004e8a:	f000 808b 	beq.w	8004fa4 <HAL_RCCEx_PeriphCLKConfig+0x350>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8004e8e:	2300      	movs	r3, #0
 8004e90:	60fb      	str	r3, [r7, #12]
 8004e92:	4b10      	ldr	r3, [pc, #64]	@ (8004ed4 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004e94:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004e96:	4a0f      	ldr	r2, [pc, #60]	@ (8004ed4 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004e98:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004e9c:	6413      	str	r3, [r2, #64]	@ 0x40
 8004e9e:	4b0d      	ldr	r3, [pc, #52]	@ (8004ed4 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004ea0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004ea2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004ea6:	60fb      	str	r3, [r7, #12]
 8004ea8:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8004eaa:	4b0c      	ldr	r3, [pc, #48]	@ (8004edc <HAL_RCCEx_PeriphCLKConfig+0x288>)
 8004eac:	681b      	ldr	r3, [r3, #0]
 8004eae:	4a0b      	ldr	r2, [pc, #44]	@ (8004edc <HAL_RCCEx_PeriphCLKConfig+0x288>)
 8004eb0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004eb4:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8004eb6:	f7fd fbcb 	bl	8002650 <HAL_GetTick>
 8004eba:	6178      	str	r0, [r7, #20]

    while ((PWR->CR & PWR_CR_DBP) == RESET)
 8004ebc:	e010      	b.n	8004ee0 <HAL_RCCEx_PeriphCLKConfig+0x28c>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004ebe:	f7fd fbc7 	bl	8002650 <HAL_GetTick>
 8004ec2:	4602      	mov	r2, r0
 8004ec4:	697b      	ldr	r3, [r7, #20]
 8004ec6:	1ad3      	subs	r3, r2, r3
 8004ec8:	2b02      	cmp	r3, #2
 8004eca:	d909      	bls.n	8004ee0 <HAL_RCCEx_PeriphCLKConfig+0x28c>
      {
        return HAL_TIMEOUT;
 8004ecc:	2303      	movs	r3, #3
 8004ece:	e075      	b.n	8004fbc <HAL_RCCEx_PeriphCLKConfig+0x368>
 8004ed0:	42470068 	.word	0x42470068
 8004ed4:	40023800 	.word	0x40023800
 8004ed8:	42470070 	.word	0x42470070
 8004edc:	40007000 	.word	0x40007000
    while ((PWR->CR & PWR_CR_DBP) == RESET)
 8004ee0:	4b38      	ldr	r3, [pc, #224]	@ (8004fc4 <HAL_RCCEx_PeriphCLKConfig+0x370>)
 8004ee2:	681b      	ldr	r3, [r3, #0]
 8004ee4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004ee8:	2b00      	cmp	r3, #0
 8004eea:	d0e8      	beq.n	8004ebe <HAL_RCCEx_PeriphCLKConfig+0x26a>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8004eec:	4b36      	ldr	r3, [pc, #216]	@ (8004fc8 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8004eee:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004ef0:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004ef4:	613b      	str	r3, [r7, #16]
    if ((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8004ef6:	693b      	ldr	r3, [r7, #16]
 8004ef8:	2b00      	cmp	r3, #0
 8004efa:	d02f      	beq.n	8004f5c <HAL_RCCEx_PeriphCLKConfig+0x308>
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004f00:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004f04:	693a      	ldr	r2, [r7, #16]
 8004f06:	429a      	cmp	r2, r3
 8004f08:	d028      	beq.n	8004f5c <HAL_RCCEx_PeriphCLKConfig+0x308>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004f0a:	4b2f      	ldr	r3, [pc, #188]	@ (8004fc8 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8004f0c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004f0e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004f12:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8004f14:	4b2d      	ldr	r3, [pc, #180]	@ (8004fcc <HAL_RCCEx_PeriphCLKConfig+0x378>)
 8004f16:	2201      	movs	r2, #1
 8004f18:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004f1a:	4b2c      	ldr	r3, [pc, #176]	@ (8004fcc <HAL_RCCEx_PeriphCLKConfig+0x378>)
 8004f1c:	2200      	movs	r2, #0
 8004f1e:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8004f20:	4a29      	ldr	r2, [pc, #164]	@ (8004fc8 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8004f22:	693b      	ldr	r3, [r7, #16]
 8004f24:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8004f26:	4b28      	ldr	r3, [pc, #160]	@ (8004fc8 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8004f28:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004f2a:	f003 0301 	and.w	r3, r3, #1
 8004f2e:	2b01      	cmp	r3, #1
 8004f30:	d114      	bne.n	8004f5c <HAL_RCCEx_PeriphCLKConfig+0x308>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8004f32:	f7fd fb8d 	bl	8002650 <HAL_GetTick>
 8004f36:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004f38:	e00a      	b.n	8004f50 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004f3a:	f7fd fb89 	bl	8002650 <HAL_GetTick>
 8004f3e:	4602      	mov	r2, r0
 8004f40:	697b      	ldr	r3, [r7, #20]
 8004f42:	1ad3      	subs	r3, r2, r3
 8004f44:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004f48:	4293      	cmp	r3, r2
 8004f4a:	d901      	bls.n	8004f50 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
          {
            return HAL_TIMEOUT;
 8004f4c:	2303      	movs	r3, #3
 8004f4e:	e035      	b.n	8004fbc <HAL_RCCEx_PeriphCLKConfig+0x368>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004f50:	4b1d      	ldr	r3, [pc, #116]	@ (8004fc8 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8004f52:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004f54:	f003 0302 	and.w	r3, r3, #2
 8004f58:	2b00      	cmp	r3, #0
 8004f5a:	d0ee      	beq.n	8004f3a <HAL_RCCEx_PeriphCLKConfig+0x2e6>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004f60:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004f64:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004f68:	d10d      	bne.n	8004f86 <HAL_RCCEx_PeriphCLKConfig+0x332>
 8004f6a:	4b17      	ldr	r3, [pc, #92]	@ (8004fc8 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8004f6c:	689b      	ldr	r3, [r3, #8]
 8004f6e:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004f76:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 8004f7a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004f7e:	4912      	ldr	r1, [pc, #72]	@ (8004fc8 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8004f80:	4313      	orrs	r3, r2
 8004f82:	608b      	str	r3, [r1, #8]
 8004f84:	e005      	b.n	8004f92 <HAL_RCCEx_PeriphCLKConfig+0x33e>
 8004f86:	4b10      	ldr	r3, [pc, #64]	@ (8004fc8 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8004f88:	689b      	ldr	r3, [r3, #8]
 8004f8a:	4a0f      	ldr	r2, [pc, #60]	@ (8004fc8 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8004f8c:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 8004f90:	6093      	str	r3, [r2, #8]
 8004f92:	4b0d      	ldr	r3, [pc, #52]	@ (8004fc8 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8004f94:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004f9a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004f9e:	490a      	ldr	r1, [pc, #40]	@ (8004fc8 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8004fa0:	4313      	orrs	r3, r2
 8004fa2:	670b      	str	r3, [r1, #112]	@ 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- TIM configuration ---------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	681b      	ldr	r3, [r3, #0]
 8004fa8:	f003 0310 	and.w	r3, r3, #16
 8004fac:	2b00      	cmp	r3, #0
 8004fae:	d004      	beq.n	8004fba <HAL_RCCEx_PeriphCLKConfig+0x366>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	f893 202c 	ldrb.w	r2, [r3, #44]	@ 0x2c
 8004fb6:	4b06      	ldr	r3, [pc, #24]	@ (8004fd0 <HAL_RCCEx_PeriphCLKConfig+0x37c>)
 8004fb8:	601a      	str	r2, [r3, #0]
  }
  return HAL_OK;
 8004fba:	2300      	movs	r3, #0
}
 8004fbc:	4618      	mov	r0, r3
 8004fbe:	3718      	adds	r7, #24
 8004fc0:	46bd      	mov	sp, r7
 8004fc2:	bd80      	pop	{r7, pc}
 8004fc4:	40007000 	.word	0x40007000
 8004fc8:	40023800 	.word	0x40023800
 8004fcc:	42470e40 	.word	0x42470e40
 8004fd0:	424711e0 	.word	0x424711e0

08004fd4 <HAL_SDRAM_Init>:
  *                the configuration information for SDRAM module.
  * @param  Timing Pointer to SDRAM control timing structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_Init(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_TimingTypeDef *Timing)
{
 8004fd4:	b580      	push	{r7, lr}
 8004fd6:	b082      	sub	sp, #8
 8004fd8:	af00      	add	r7, sp, #0
 8004fda:	6078      	str	r0, [r7, #4]
 8004fdc:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM handle parameter */
  if (hsdram == NULL)
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	2b00      	cmp	r3, #0
 8004fe2:	d101      	bne.n	8004fe8 <HAL_SDRAM_Init+0x14>
  {
    return HAL_ERROR;
 8004fe4:	2301      	movs	r3, #1
 8004fe6:	e025      	b.n	8005034 <HAL_SDRAM_Init+0x60>
  }

  if (hsdram->State == HAL_SDRAM_STATE_RESET)
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 8004fee:	b2db      	uxtb	r3, r3
 8004ff0:	2b00      	cmp	r3, #0
 8004ff2:	d106      	bne.n	8005002 <HAL_SDRAM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hsdram->Lock = HAL_UNLOCKED;
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	2200      	movs	r2, #0
 8004ff8:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d

    /* Init the low level hardware */
    hsdram->MspInitCallback(hsdram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SDRAM_MspInit(hsdram);
 8004ffc:	6878      	ldr	r0, [r7, #4]
 8004ffe:	f7fd fa49 	bl	8002494 <HAL_SDRAM_MspInit>
#endif /* USE_HAL_SDRAM_REGISTER_CALLBACKS */
  }

  /* Initialize the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	2202      	movs	r2, #2
 8005006:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

  /* Initialize SDRAM control Interface */
  (void)FMC_SDRAM_Init(hsdram->Instance, &(hsdram->Init));
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	681a      	ldr	r2, [r3, #0]
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	3304      	adds	r3, #4
 8005012:	4619      	mov	r1, r3
 8005014:	4610      	mov	r0, r2
 8005016:	f001 f939 	bl	800628c <FMC_SDRAM_Init>

  /* Initialize SDRAM timing Interface */
  (void)FMC_SDRAM_Timing_Init(hsdram->Instance, Timing, hsdram->Init.SDBank);
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	6818      	ldr	r0, [r3, #0]
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	685b      	ldr	r3, [r3, #4]
 8005022:	461a      	mov	r2, r3
 8005024:	6839      	ldr	r1, [r7, #0]
 8005026:	f001 f98e 	bl	8006346 <FMC_SDRAM_Timing_Init>
  /* Update the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	2201      	movs	r2, #1
 800502e:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

  return HAL_OK;
 8005032:	2300      	movs	r3, #0
}
 8005034:	4618      	mov	r0, r3
 8005036:	3708      	adds	r7, #8
 8005038:	46bd      	mov	sp, r7
 800503a:	bd80      	pop	{r7, pc}

0800503c <HAL_SDRAM_SendCommand>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_SendCommand(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_CommandTypeDef *Command,
                                        uint32_t Timeout)
{
 800503c:	b580      	push	{r7, lr}
 800503e:	b086      	sub	sp, #24
 8005040:	af00      	add	r7, sp, #0
 8005042:	60f8      	str	r0, [r7, #12]
 8005044:	60b9      	str	r1, [r7, #8]
 8005046:	607a      	str	r2, [r7, #4]
  HAL_SDRAM_StateTypeDef state = hsdram->State;
 8005048:	68fb      	ldr	r3, [r7, #12]
 800504a:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 800504e:	75fb      	strb	r3, [r7, #23]

  /* Check the SDRAM controller state */
  if (state == HAL_SDRAM_STATE_BUSY)
 8005050:	7dfb      	ldrb	r3, [r7, #23]
 8005052:	2b02      	cmp	r3, #2
 8005054:	d101      	bne.n	800505a <HAL_SDRAM_SendCommand+0x1e>
  {
    return HAL_BUSY;
 8005056:	2302      	movs	r3, #2
 8005058:	e021      	b.n	800509e <HAL_SDRAM_SendCommand+0x62>
  }
  else if ((state == HAL_SDRAM_STATE_READY) || (state == HAL_SDRAM_STATE_PRECHARGED))
 800505a:	7dfb      	ldrb	r3, [r7, #23]
 800505c:	2b01      	cmp	r3, #1
 800505e:	d002      	beq.n	8005066 <HAL_SDRAM_SendCommand+0x2a>
 8005060:	7dfb      	ldrb	r3, [r7, #23]
 8005062:	2b05      	cmp	r3, #5
 8005064:	d118      	bne.n	8005098 <HAL_SDRAM_SendCommand+0x5c>
  {
    /* Update the SDRAM state */
    hsdram->State = HAL_SDRAM_STATE_BUSY;
 8005066:	68fb      	ldr	r3, [r7, #12]
 8005068:	2202      	movs	r2, #2
 800506a:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

    /* Send SDRAM command */
    (void)FMC_SDRAM_SendCommand(hsdram->Instance, Command, Timeout);
 800506e:	68fb      	ldr	r3, [r7, #12]
 8005070:	681b      	ldr	r3, [r3, #0]
 8005072:	687a      	ldr	r2, [r7, #4]
 8005074:	68b9      	ldr	r1, [r7, #8]
 8005076:	4618      	mov	r0, r3
 8005078:	f001 f9ce 	bl	8006418 <FMC_SDRAM_SendCommand>

    /* Update the SDRAM controller state state */
    if (Command->CommandMode == FMC_SDRAM_CMD_PALL)
 800507c:	68bb      	ldr	r3, [r7, #8]
 800507e:	681b      	ldr	r3, [r3, #0]
 8005080:	2b02      	cmp	r3, #2
 8005082:	d104      	bne.n	800508e <HAL_SDRAM_SendCommand+0x52>
    {
      hsdram->State = HAL_SDRAM_STATE_PRECHARGED;
 8005084:	68fb      	ldr	r3, [r7, #12]
 8005086:	2205      	movs	r2, #5
 8005088:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c
    if (Command->CommandMode == FMC_SDRAM_CMD_PALL)
 800508c:	e006      	b.n	800509c <HAL_SDRAM_SendCommand+0x60>
    }
    else
    {
      hsdram->State = HAL_SDRAM_STATE_READY;
 800508e:	68fb      	ldr	r3, [r7, #12]
 8005090:	2201      	movs	r2, #1
 8005092:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c
    if (Command->CommandMode == FMC_SDRAM_CMD_PALL)
 8005096:	e001      	b.n	800509c <HAL_SDRAM_SendCommand+0x60>
    }
  }
  else
  {
    return HAL_ERROR;
 8005098:	2301      	movs	r3, #1
 800509a:	e000      	b.n	800509e <HAL_SDRAM_SendCommand+0x62>
  }

  return HAL_OK;
 800509c:	2300      	movs	r3, #0
}
 800509e:	4618      	mov	r0, r3
 80050a0:	3718      	adds	r7, #24
 80050a2:	46bd      	mov	sp, r7
 80050a4:	bd80      	pop	{r7, pc}

080050a6 <HAL_SDRAM_ProgramRefreshRate>:
  *                the configuration information for SDRAM module.
  * @param  RefreshRate The SDRAM refresh rate value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_ProgramRefreshRate(SDRAM_HandleTypeDef *hsdram, uint32_t RefreshRate)
{
 80050a6:	b580      	push	{r7, lr}
 80050a8:	b082      	sub	sp, #8
 80050aa:	af00      	add	r7, sp, #0
 80050ac:	6078      	str	r0, [r7, #4]
 80050ae:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM controller state */
  if (hsdram->State == HAL_SDRAM_STATE_BUSY)
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 80050b6:	b2db      	uxtb	r3, r3
 80050b8:	2b02      	cmp	r3, #2
 80050ba:	d101      	bne.n	80050c0 <HAL_SDRAM_ProgramRefreshRate+0x1a>
  {
    return HAL_BUSY;
 80050bc:	2302      	movs	r3, #2
 80050be:	e016      	b.n	80050ee <HAL_SDRAM_ProgramRefreshRate+0x48>
  }
  else if (hsdram->State == HAL_SDRAM_STATE_READY)
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 80050c6:	b2db      	uxtb	r3, r3
 80050c8:	2b01      	cmp	r3, #1
 80050ca:	d10f      	bne.n	80050ec <HAL_SDRAM_ProgramRefreshRate+0x46>
  {
    /* Update the SDRAM state */
    hsdram->State = HAL_SDRAM_STATE_BUSY;
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	2202      	movs	r2, #2
 80050d0:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

    /* Program the refresh rate */
    (void)FMC_SDRAM_ProgramRefreshRate(hsdram->Instance, RefreshRate);
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	681b      	ldr	r3, [r3, #0]
 80050d8:	6839      	ldr	r1, [r7, #0]
 80050da:	4618      	mov	r0, r3
 80050dc:	f001 f9d9 	bl	8006492 <FMC_SDRAM_ProgramRefreshRate>

    /* Update the SDRAM state */
    hsdram->State = HAL_SDRAM_STATE_READY;
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	2201      	movs	r2, #1
 80050e4:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c
  else
  {
    return HAL_ERROR;
  }

  return HAL_OK;
 80050e8:	2300      	movs	r3, #0
 80050ea:	e000      	b.n	80050ee <HAL_SDRAM_ProgramRefreshRate+0x48>
    return HAL_ERROR;
 80050ec:	2301      	movs	r3, #1
}
 80050ee:	4618      	mov	r0, r3
 80050f0:	3708      	adds	r7, #8
 80050f2:	46bd      	mov	sp, r7
 80050f4:	bd80      	pop	{r7, pc}

080050f6 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80050f6:	b580      	push	{r7, lr}
 80050f8:	b082      	sub	sp, #8
 80050fa:	af00      	add	r7, sp, #0
 80050fc:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	2b00      	cmp	r3, #0
 8005102:	d101      	bne.n	8005108 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8005104:	2301      	movs	r3, #1
 8005106:	e07b      	b.n	8005200 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800510c:	2b00      	cmp	r3, #0
 800510e:	d108      	bne.n	8005122 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	685b      	ldr	r3, [r3, #4]
 8005114:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8005118:	d009      	beq.n	800512e <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	2200      	movs	r2, #0
 800511e:	61da      	str	r2, [r3, #28]
 8005120:	e005      	b.n	800512e <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	2200      	movs	r2, #0
 8005126:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	2200      	movs	r2, #0
 800512c:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	2200      	movs	r2, #0
 8005132:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800513a:	b2db      	uxtb	r3, r3
 800513c:	2b00      	cmp	r3, #0
 800513e:	d106      	bne.n	800514e <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	2200      	movs	r2, #0
 8005144:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8005148:	6878      	ldr	r0, [r7, #4]
 800514a:	f7fd f863 	bl	8002214 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	2202      	movs	r2, #2
 8005152:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	681b      	ldr	r3, [r3, #0]
 800515a:	681a      	ldr	r2, [r3, #0]
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	681b      	ldr	r3, [r3, #0]
 8005160:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8005164:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	685b      	ldr	r3, [r3, #4]
 800516a:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	689b      	ldr	r3, [r3, #8]
 8005172:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8005176:	431a      	orrs	r2, r3
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	68db      	ldr	r3, [r3, #12]
 800517c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005180:	431a      	orrs	r2, r3
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	691b      	ldr	r3, [r3, #16]
 8005186:	f003 0302 	and.w	r3, r3, #2
 800518a:	431a      	orrs	r2, r3
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	695b      	ldr	r3, [r3, #20]
 8005190:	f003 0301 	and.w	r3, r3, #1
 8005194:	431a      	orrs	r2, r3
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	699b      	ldr	r3, [r3, #24]
 800519a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800519e:	431a      	orrs	r2, r3
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	69db      	ldr	r3, [r3, #28]
 80051a4:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80051a8:	431a      	orrs	r2, r3
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	6a1b      	ldr	r3, [r3, #32]
 80051ae:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80051b2:	ea42 0103 	orr.w	r1, r2, r3
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80051ba:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	681b      	ldr	r3, [r3, #0]
 80051c2:	430a      	orrs	r2, r1
 80051c4:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	699b      	ldr	r3, [r3, #24]
 80051ca:	0c1b      	lsrs	r3, r3, #16
 80051cc:	f003 0104 	and.w	r1, r3, #4
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80051d4:	f003 0210 	and.w	r2, r3, #16
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	681b      	ldr	r3, [r3, #0]
 80051dc:	430a      	orrs	r2, r1
 80051de:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	681b      	ldr	r3, [r3, #0]
 80051e4:	69da      	ldr	r2, [r3, #28]
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	681b      	ldr	r3, [r3, #0]
 80051ea:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80051ee:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	2200      	movs	r2, #0
 80051f4:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	2201      	movs	r2, #1
 80051fa:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 80051fe:	2300      	movs	r3, #0
}
 8005200:	4618      	mov	r0, r3
 8005202:	3708      	adds	r7, #8
 8005204:	46bd      	mov	sp, r7
 8005206:	bd80      	pop	{r7, pc}

08005208 <HAL_SPI_DeInit>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_DeInit(SPI_HandleTypeDef *hspi)
{
 8005208:	b580      	push	{r7, lr}
 800520a:	b082      	sub	sp, #8
 800520c:	af00      	add	r7, sp, #0
 800520e:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	2b00      	cmp	r3, #0
 8005214:	d101      	bne.n	800521a <HAL_SPI_DeInit+0x12>
  {
    return HAL_ERROR;
 8005216:	2301      	movs	r3, #1
 8005218:	e01a      	b.n	8005250 <HAL_SPI_DeInit+0x48>
  }

  /* Check SPI Instance parameter */
  assert_param(IS_SPI_ALL_INSTANCE(hspi->Instance));

  hspi->State = HAL_SPI_STATE_BUSY;
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	2202      	movs	r2, #2
 800521e:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the SPI Peripheral Clock */
  __HAL_SPI_DISABLE(hspi);
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	681b      	ldr	r3, [r3, #0]
 8005226:	681a      	ldr	r2, [r3, #0]
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	681b      	ldr	r3, [r3, #0]
 800522c:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8005230:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC... */
  hspi->MspDeInitCallback(hspi);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC... */
  HAL_SPI_MspDeInit(hspi);
 8005232:	6878      	ldr	r0, [r7, #4]
 8005234:	f7fd f836 	bl	80022a4 <HAL_SPI_MspDeInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	2200      	movs	r2, #0
 800523c:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State = HAL_SPI_STATE_RESET;
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	2200      	movs	r2, #0
 8005242:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Release Lock */
  __HAL_UNLOCK(hspi);
 8005246:	687b      	ldr	r3, [r7, #4]
 8005248:	2200      	movs	r2, #0
 800524a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  return HAL_OK;
 800524e:	2300      	movs	r3, #0
}
 8005250:	4618      	mov	r0, r3
 8005252:	3708      	adds	r7, #8
 8005254:	46bd      	mov	sp, r7
 8005256:	bd80      	pop	{r7, pc}

08005258 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005258:	b580      	push	{r7, lr}
 800525a:	b088      	sub	sp, #32
 800525c:	af00      	add	r7, sp, #0
 800525e:	60f8      	str	r0, [r7, #12]
 8005260:	60b9      	str	r1, [r7, #8]
 8005262:	603b      	str	r3, [r7, #0]
 8005264:	4613      	mov	r3, r2
 8005266:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005268:	f7fd f9f2 	bl	8002650 <HAL_GetTick>
 800526c:	61f8      	str	r0, [r7, #28]
  initial_TxXferCount = Size;
 800526e:	88fb      	ldrh	r3, [r7, #6]
 8005270:	837b      	strh	r3, [r7, #26]

  if (hspi->State != HAL_SPI_STATE_READY)
 8005272:	68fb      	ldr	r3, [r7, #12]
 8005274:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8005278:	b2db      	uxtb	r3, r3
 800527a:	2b01      	cmp	r3, #1
 800527c:	d001      	beq.n	8005282 <HAL_SPI_Transmit+0x2a>
  {
    return HAL_BUSY;
 800527e:	2302      	movs	r3, #2
 8005280:	e12a      	b.n	80054d8 <HAL_SPI_Transmit+0x280>
  }

  if ((pData == NULL) || (Size == 0U))
 8005282:	68bb      	ldr	r3, [r7, #8]
 8005284:	2b00      	cmp	r3, #0
 8005286:	d002      	beq.n	800528e <HAL_SPI_Transmit+0x36>
 8005288:	88fb      	ldrh	r3, [r7, #6]
 800528a:	2b00      	cmp	r3, #0
 800528c:	d101      	bne.n	8005292 <HAL_SPI_Transmit+0x3a>
  {
    return HAL_ERROR;
 800528e:	2301      	movs	r3, #1
 8005290:	e122      	b.n	80054d8 <HAL_SPI_Transmit+0x280>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8005292:	68fb      	ldr	r3, [r7, #12]
 8005294:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8005298:	2b01      	cmp	r3, #1
 800529a:	d101      	bne.n	80052a0 <HAL_SPI_Transmit+0x48>
 800529c:	2302      	movs	r3, #2
 800529e:	e11b      	b.n	80054d8 <HAL_SPI_Transmit+0x280>
 80052a0:	68fb      	ldr	r3, [r7, #12]
 80052a2:	2201      	movs	r2, #1
 80052a4:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80052a8:	68fb      	ldr	r3, [r7, #12]
 80052aa:	2203      	movs	r2, #3
 80052ac:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80052b0:	68fb      	ldr	r3, [r7, #12]
 80052b2:	2200      	movs	r2, #0
 80052b4:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 80052b6:	68fb      	ldr	r3, [r7, #12]
 80052b8:	68ba      	ldr	r2, [r7, #8]
 80052ba:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 80052bc:	68fb      	ldr	r3, [r7, #12]
 80052be:	88fa      	ldrh	r2, [r7, #6]
 80052c0:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 80052c2:	68fb      	ldr	r3, [r7, #12]
 80052c4:	88fa      	ldrh	r2, [r7, #6]
 80052c6:	86da      	strh	r2, [r3, #54]	@ 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80052c8:	68fb      	ldr	r3, [r7, #12]
 80052ca:	2200      	movs	r2, #0
 80052cc:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = 0U;
 80052ce:	68fb      	ldr	r3, [r7, #12]
 80052d0:	2200      	movs	r2, #0
 80052d2:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 80052d4:	68fb      	ldr	r3, [r7, #12]
 80052d6:	2200      	movs	r2, #0
 80052d8:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxISR       = NULL;
 80052da:	68fb      	ldr	r3, [r7, #12]
 80052dc:	2200      	movs	r2, #0
 80052de:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->RxISR       = NULL;
 80052e0:	68fb      	ldr	r3, [r7, #12]
 80052e2:	2200      	movs	r2, #0
 80052e4:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80052e6:	68fb      	ldr	r3, [r7, #12]
 80052e8:	689b      	ldr	r3, [r3, #8]
 80052ea:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80052ee:	d10f      	bne.n	8005310 <HAL_SPI_Transmit+0xb8>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80052f0:	68fb      	ldr	r3, [r7, #12]
 80052f2:	681b      	ldr	r3, [r3, #0]
 80052f4:	681a      	ldr	r2, [r3, #0]
 80052f6:	68fb      	ldr	r3, [r7, #12]
 80052f8:	681b      	ldr	r3, [r3, #0]
 80052fa:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80052fe:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8005300:	68fb      	ldr	r3, [r7, #12]
 8005302:	681b      	ldr	r3, [r3, #0]
 8005304:	681a      	ldr	r2, [r3, #0]
 8005306:	68fb      	ldr	r3, [r7, #12]
 8005308:	681b      	ldr	r3, [r3, #0]
 800530a:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800530e:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005310:	68fb      	ldr	r3, [r7, #12]
 8005312:	681b      	ldr	r3, [r3, #0]
 8005314:	681b      	ldr	r3, [r3, #0]
 8005316:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800531a:	2b40      	cmp	r3, #64	@ 0x40
 800531c:	d007      	beq.n	800532e <HAL_SPI_Transmit+0xd6>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800531e:	68fb      	ldr	r3, [r7, #12]
 8005320:	681b      	ldr	r3, [r3, #0]
 8005322:	681a      	ldr	r2, [r3, #0]
 8005324:	68fb      	ldr	r3, [r7, #12]
 8005326:	681b      	ldr	r3, [r3, #0]
 8005328:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800532c:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800532e:	68fb      	ldr	r3, [r7, #12]
 8005330:	68db      	ldr	r3, [r3, #12]
 8005332:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005336:	d152      	bne.n	80053de <HAL_SPI_Transmit+0x186>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005338:	68fb      	ldr	r3, [r7, #12]
 800533a:	685b      	ldr	r3, [r3, #4]
 800533c:	2b00      	cmp	r3, #0
 800533e:	d002      	beq.n	8005346 <HAL_SPI_Transmit+0xee>
 8005340:	8b7b      	ldrh	r3, [r7, #26]
 8005342:	2b01      	cmp	r3, #1
 8005344:	d145      	bne.n	80053d2 <HAL_SPI_Transmit+0x17a>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8005346:	68fb      	ldr	r3, [r7, #12]
 8005348:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800534a:	881a      	ldrh	r2, [r3, #0]
 800534c:	68fb      	ldr	r3, [r7, #12]
 800534e:	681b      	ldr	r3, [r3, #0]
 8005350:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8005352:	68fb      	ldr	r3, [r7, #12]
 8005354:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005356:	1c9a      	adds	r2, r3, #2
 8005358:	68fb      	ldr	r3, [r7, #12]
 800535a:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 800535c:	68fb      	ldr	r3, [r7, #12]
 800535e:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005360:	b29b      	uxth	r3, r3
 8005362:	3b01      	subs	r3, #1
 8005364:	b29a      	uxth	r2, r3
 8005366:	68fb      	ldr	r3, [r7, #12]
 8005368:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 800536a:	e032      	b.n	80053d2 <HAL_SPI_Transmit+0x17a>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800536c:	68fb      	ldr	r3, [r7, #12]
 800536e:	681b      	ldr	r3, [r3, #0]
 8005370:	689b      	ldr	r3, [r3, #8]
 8005372:	f003 0302 	and.w	r3, r3, #2
 8005376:	2b02      	cmp	r3, #2
 8005378:	d112      	bne.n	80053a0 <HAL_SPI_Transmit+0x148>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 800537a:	68fb      	ldr	r3, [r7, #12]
 800537c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800537e:	881a      	ldrh	r2, [r3, #0]
 8005380:	68fb      	ldr	r3, [r7, #12]
 8005382:	681b      	ldr	r3, [r3, #0]
 8005384:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005386:	68fb      	ldr	r3, [r7, #12]
 8005388:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800538a:	1c9a      	adds	r2, r3, #2
 800538c:	68fb      	ldr	r3, [r7, #12]
 800538e:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8005390:	68fb      	ldr	r3, [r7, #12]
 8005392:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005394:	b29b      	uxth	r3, r3
 8005396:	3b01      	subs	r3, #1
 8005398:	b29a      	uxth	r2, r3
 800539a:	68fb      	ldr	r3, [r7, #12]
 800539c:	86da      	strh	r2, [r3, #54]	@ 0x36
 800539e:	e018      	b.n	80053d2 <HAL_SPI_Transmit+0x17a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80053a0:	f7fd f956 	bl	8002650 <HAL_GetTick>
 80053a4:	4602      	mov	r2, r0
 80053a6:	69fb      	ldr	r3, [r7, #28]
 80053a8:	1ad3      	subs	r3, r2, r3
 80053aa:	683a      	ldr	r2, [r7, #0]
 80053ac:	429a      	cmp	r2, r3
 80053ae:	d803      	bhi.n	80053b8 <HAL_SPI_Transmit+0x160>
 80053b0:	683b      	ldr	r3, [r7, #0]
 80053b2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80053b6:	d102      	bne.n	80053be <HAL_SPI_Transmit+0x166>
 80053b8:	683b      	ldr	r3, [r7, #0]
 80053ba:	2b00      	cmp	r3, #0
 80053bc:	d109      	bne.n	80053d2 <HAL_SPI_Transmit+0x17a>
        {
          hspi->State = HAL_SPI_STATE_READY;
 80053be:	68fb      	ldr	r3, [r7, #12]
 80053c0:	2201      	movs	r2, #1
 80053c2:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 80053c6:	68fb      	ldr	r3, [r7, #12]
 80053c8:	2200      	movs	r2, #0
 80053ca:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 80053ce:	2303      	movs	r3, #3
 80053d0:	e082      	b.n	80054d8 <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 80053d2:	68fb      	ldr	r3, [r7, #12]
 80053d4:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80053d6:	b29b      	uxth	r3, r3
 80053d8:	2b00      	cmp	r3, #0
 80053da:	d1c7      	bne.n	800536c <HAL_SPI_Transmit+0x114>
 80053dc:	e053      	b.n	8005486 <HAL_SPI_Transmit+0x22e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80053de:	68fb      	ldr	r3, [r7, #12]
 80053e0:	685b      	ldr	r3, [r3, #4]
 80053e2:	2b00      	cmp	r3, #0
 80053e4:	d002      	beq.n	80053ec <HAL_SPI_Transmit+0x194>
 80053e6:	8b7b      	ldrh	r3, [r7, #26]
 80053e8:	2b01      	cmp	r3, #1
 80053ea:	d147      	bne.n	800547c <HAL_SPI_Transmit+0x224>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 80053ec:	68fb      	ldr	r3, [r7, #12]
 80053ee:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80053f0:	68fb      	ldr	r3, [r7, #12]
 80053f2:	681b      	ldr	r3, [r3, #0]
 80053f4:	330c      	adds	r3, #12
 80053f6:	7812      	ldrb	r2, [r2, #0]
 80053f8:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80053fa:	68fb      	ldr	r3, [r7, #12]
 80053fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80053fe:	1c5a      	adds	r2, r3, #1
 8005400:	68fb      	ldr	r3, [r7, #12]
 8005402:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8005404:	68fb      	ldr	r3, [r7, #12]
 8005406:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005408:	b29b      	uxth	r3, r3
 800540a:	3b01      	subs	r3, #1
 800540c:	b29a      	uxth	r2, r3
 800540e:	68fb      	ldr	r3, [r7, #12]
 8005410:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while (hspi->TxXferCount > 0U)
 8005412:	e033      	b.n	800547c <HAL_SPI_Transmit+0x224>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8005414:	68fb      	ldr	r3, [r7, #12]
 8005416:	681b      	ldr	r3, [r3, #0]
 8005418:	689b      	ldr	r3, [r3, #8]
 800541a:	f003 0302 	and.w	r3, r3, #2
 800541e:	2b02      	cmp	r3, #2
 8005420:	d113      	bne.n	800544a <HAL_SPI_Transmit+0x1f2>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8005422:	68fb      	ldr	r3, [r7, #12]
 8005424:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8005426:	68fb      	ldr	r3, [r7, #12]
 8005428:	681b      	ldr	r3, [r3, #0]
 800542a:	330c      	adds	r3, #12
 800542c:	7812      	ldrb	r2, [r2, #0]
 800542e:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8005430:	68fb      	ldr	r3, [r7, #12]
 8005432:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005434:	1c5a      	adds	r2, r3, #1
 8005436:	68fb      	ldr	r3, [r7, #12]
 8005438:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 800543a:	68fb      	ldr	r3, [r7, #12]
 800543c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800543e:	b29b      	uxth	r3, r3
 8005440:	3b01      	subs	r3, #1
 8005442:	b29a      	uxth	r2, r3
 8005444:	68fb      	ldr	r3, [r7, #12]
 8005446:	86da      	strh	r2, [r3, #54]	@ 0x36
 8005448:	e018      	b.n	800547c <HAL_SPI_Transmit+0x224>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800544a:	f7fd f901 	bl	8002650 <HAL_GetTick>
 800544e:	4602      	mov	r2, r0
 8005450:	69fb      	ldr	r3, [r7, #28]
 8005452:	1ad3      	subs	r3, r2, r3
 8005454:	683a      	ldr	r2, [r7, #0]
 8005456:	429a      	cmp	r2, r3
 8005458:	d803      	bhi.n	8005462 <HAL_SPI_Transmit+0x20a>
 800545a:	683b      	ldr	r3, [r7, #0]
 800545c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005460:	d102      	bne.n	8005468 <HAL_SPI_Transmit+0x210>
 8005462:	683b      	ldr	r3, [r7, #0]
 8005464:	2b00      	cmp	r3, #0
 8005466:	d109      	bne.n	800547c <HAL_SPI_Transmit+0x224>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8005468:	68fb      	ldr	r3, [r7, #12]
 800546a:	2201      	movs	r2, #1
 800546c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8005470:	68fb      	ldr	r3, [r7, #12]
 8005472:	2200      	movs	r2, #0
 8005474:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8005478:	2303      	movs	r3, #3
 800547a:	e02d      	b.n	80054d8 <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 800547c:	68fb      	ldr	r3, [r7, #12]
 800547e:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005480:	b29b      	uxth	r3, r3
 8005482:	2b00      	cmp	r3, #0
 8005484:	d1c6      	bne.n	8005414 <HAL_SPI_Transmit+0x1bc>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8005486:	69fa      	ldr	r2, [r7, #28]
 8005488:	6839      	ldr	r1, [r7, #0]
 800548a:	68f8      	ldr	r0, [r7, #12]
 800548c:	f000 fbe6 	bl	8005c5c <SPI_EndRxTxTransaction>
 8005490:	4603      	mov	r3, r0
 8005492:	2b00      	cmp	r3, #0
 8005494:	d002      	beq.n	800549c <HAL_SPI_Transmit+0x244>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005496:	68fb      	ldr	r3, [r7, #12]
 8005498:	2220      	movs	r2, #32
 800549a:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800549c:	68fb      	ldr	r3, [r7, #12]
 800549e:	689b      	ldr	r3, [r3, #8]
 80054a0:	2b00      	cmp	r3, #0
 80054a2:	d10a      	bne.n	80054ba <HAL_SPI_Transmit+0x262>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80054a4:	2300      	movs	r3, #0
 80054a6:	617b      	str	r3, [r7, #20]
 80054a8:	68fb      	ldr	r3, [r7, #12]
 80054aa:	681b      	ldr	r3, [r3, #0]
 80054ac:	68db      	ldr	r3, [r3, #12]
 80054ae:	617b      	str	r3, [r7, #20]
 80054b0:	68fb      	ldr	r3, [r7, #12]
 80054b2:	681b      	ldr	r3, [r3, #0]
 80054b4:	689b      	ldr	r3, [r3, #8]
 80054b6:	617b      	str	r3, [r7, #20]
 80054b8:	697b      	ldr	r3, [r7, #20]
  }

  hspi->State = HAL_SPI_STATE_READY;
 80054ba:	68fb      	ldr	r3, [r7, #12]
 80054bc:	2201      	movs	r2, #1
 80054be:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80054c2:	68fb      	ldr	r3, [r7, #12]
 80054c4:	2200      	movs	r2, #0
 80054c6:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80054ca:	68fb      	ldr	r3, [r7, #12]
 80054cc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80054ce:	2b00      	cmp	r3, #0
 80054d0:	d001      	beq.n	80054d6 <HAL_SPI_Transmit+0x27e>
  {
    return HAL_ERROR;
 80054d2:	2301      	movs	r3, #1
 80054d4:	e000      	b.n	80054d8 <HAL_SPI_Transmit+0x280>
  }
  else
  {
    return HAL_OK;
 80054d6:	2300      	movs	r3, #0
  }
}
 80054d8:	4618      	mov	r0, r3
 80054da:	3720      	adds	r7, #32
 80054dc:	46bd      	mov	sp, r7
 80054de:	bd80      	pop	{r7, pc}

080054e0 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80054e0:	b580      	push	{r7, lr}
 80054e2:	b088      	sub	sp, #32
 80054e4:	af02      	add	r7, sp, #8
 80054e6:	60f8      	str	r0, [r7, #12]
 80054e8:	60b9      	str	r1, [r7, #8]
 80054ea:	603b      	str	r3, [r7, #0]
 80054ec:	4613      	mov	r3, r2
 80054ee:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;

  if (hspi->State != HAL_SPI_STATE_READY)
 80054f0:	68fb      	ldr	r3, [r7, #12]
 80054f2:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80054f6:	b2db      	uxtb	r3, r3
 80054f8:	2b01      	cmp	r3, #1
 80054fa:	d001      	beq.n	8005500 <HAL_SPI_Receive+0x20>
  {
    return HAL_BUSY;
 80054fc:	2302      	movs	r3, #2
 80054fe:	e104      	b.n	800570a <HAL_SPI_Receive+0x22a>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8005500:	68fb      	ldr	r3, [r7, #12]
 8005502:	685b      	ldr	r3, [r3, #4]
 8005504:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8005508:	d112      	bne.n	8005530 <HAL_SPI_Receive+0x50>
 800550a:	68fb      	ldr	r3, [r7, #12]
 800550c:	689b      	ldr	r3, [r3, #8]
 800550e:	2b00      	cmp	r3, #0
 8005510:	d10e      	bne.n	8005530 <HAL_SPI_Receive+0x50>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8005512:	68fb      	ldr	r3, [r7, #12]
 8005514:	2204      	movs	r2, #4
 8005516:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 800551a:	88fa      	ldrh	r2, [r7, #6]
 800551c:	683b      	ldr	r3, [r7, #0]
 800551e:	9300      	str	r3, [sp, #0]
 8005520:	4613      	mov	r3, r2
 8005522:	68ba      	ldr	r2, [r7, #8]
 8005524:	68b9      	ldr	r1, [r7, #8]
 8005526:	68f8      	ldr	r0, [r7, #12]
 8005528:	f000 f8f3 	bl	8005712 <HAL_SPI_TransmitReceive>
 800552c:	4603      	mov	r3, r0
 800552e:	e0ec      	b.n	800570a <HAL_SPI_Receive+0x22a>
  }

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005530:	f7fd f88e 	bl	8002650 <HAL_GetTick>
 8005534:	6178      	str	r0, [r7, #20]

  if ((pData == NULL) || (Size == 0U))
 8005536:	68bb      	ldr	r3, [r7, #8]
 8005538:	2b00      	cmp	r3, #0
 800553a:	d002      	beq.n	8005542 <HAL_SPI_Receive+0x62>
 800553c:	88fb      	ldrh	r3, [r7, #6]
 800553e:	2b00      	cmp	r3, #0
 8005540:	d101      	bne.n	8005546 <HAL_SPI_Receive+0x66>
  {
    return HAL_ERROR;
 8005542:	2301      	movs	r3, #1
 8005544:	e0e1      	b.n	800570a <HAL_SPI_Receive+0x22a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8005546:	68fb      	ldr	r3, [r7, #12]
 8005548:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 800554c:	2b01      	cmp	r3, #1
 800554e:	d101      	bne.n	8005554 <HAL_SPI_Receive+0x74>
 8005550:	2302      	movs	r3, #2
 8005552:	e0da      	b.n	800570a <HAL_SPI_Receive+0x22a>
 8005554:	68fb      	ldr	r3, [r7, #12]
 8005556:	2201      	movs	r2, #1
 8005558:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 800555c:	68fb      	ldr	r3, [r7, #12]
 800555e:	2204      	movs	r2, #4
 8005560:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005564:	68fb      	ldr	r3, [r7, #12]
 8005566:	2200      	movs	r2, #0
 8005568:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 800556a:	68fb      	ldr	r3, [r7, #12]
 800556c:	68ba      	ldr	r2, [r7, #8]
 800556e:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = Size;
 8005570:	68fb      	ldr	r3, [r7, #12]
 8005572:	88fa      	ldrh	r2, [r7, #6]
 8005574:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = Size;
 8005576:	68fb      	ldr	r3, [r7, #12]
 8005578:	88fa      	ldrh	r2, [r7, #6]
 800557a:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 800557c:	68fb      	ldr	r3, [r7, #12]
 800557e:	2200      	movs	r2, #0
 8005580:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = 0U;
 8005582:	68fb      	ldr	r3, [r7, #12]
 8005584:	2200      	movs	r2, #0
 8005586:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = 0U;
 8005588:	68fb      	ldr	r3, [r7, #12]
 800558a:	2200      	movs	r2, #0
 800558c:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->RxISR       = NULL;
 800558e:	68fb      	ldr	r3, [r7, #12]
 8005590:	2200      	movs	r2, #0
 8005592:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 8005594:	68fb      	ldr	r3, [r7, #12]
 8005596:	2200      	movs	r2, #0
 8005598:	645a      	str	r2, [r3, #68]	@ 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800559a:	68fb      	ldr	r3, [r7, #12]
 800559c:	689b      	ldr	r3, [r3, #8]
 800559e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80055a2:	d10f      	bne.n	80055c4 <HAL_SPI_Receive+0xe4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80055a4:	68fb      	ldr	r3, [r7, #12]
 80055a6:	681b      	ldr	r3, [r3, #0]
 80055a8:	681a      	ldr	r2, [r3, #0]
 80055aa:	68fb      	ldr	r3, [r7, #12]
 80055ac:	681b      	ldr	r3, [r3, #0]
 80055ae:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80055b2:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 80055b4:	68fb      	ldr	r3, [r7, #12]
 80055b6:	681b      	ldr	r3, [r3, #0]
 80055b8:	681a      	ldr	r2, [r3, #0]
 80055ba:	68fb      	ldr	r3, [r7, #12]
 80055bc:	681b      	ldr	r3, [r3, #0]
 80055be:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 80055c2:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80055c4:	68fb      	ldr	r3, [r7, #12]
 80055c6:	681b      	ldr	r3, [r3, #0]
 80055c8:	681b      	ldr	r3, [r3, #0]
 80055ca:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80055ce:	2b40      	cmp	r3, #64	@ 0x40
 80055d0:	d007      	beq.n	80055e2 <HAL_SPI_Receive+0x102>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80055d2:	68fb      	ldr	r3, [r7, #12]
 80055d4:	681b      	ldr	r3, [r3, #0]
 80055d6:	681a      	ldr	r2, [r3, #0]
 80055d8:	68fb      	ldr	r3, [r7, #12]
 80055da:	681b      	ldr	r3, [r3, #0]
 80055dc:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80055e0:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 80055e2:	68fb      	ldr	r3, [r7, #12]
 80055e4:	68db      	ldr	r3, [r3, #12]
 80055e6:	2b00      	cmp	r3, #0
 80055e8:	d170      	bne.n	80056cc <HAL_SPI_Receive+0x1ec>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 80055ea:	e035      	b.n	8005658 <HAL_SPI_Receive+0x178>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80055ec:	68fb      	ldr	r3, [r7, #12]
 80055ee:	681b      	ldr	r3, [r3, #0]
 80055f0:	689b      	ldr	r3, [r3, #8]
 80055f2:	f003 0301 	and.w	r3, r3, #1
 80055f6:	2b01      	cmp	r3, #1
 80055f8:	d115      	bne.n	8005626 <HAL_SPI_Receive+0x146>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 80055fa:	68fb      	ldr	r3, [r7, #12]
 80055fc:	681b      	ldr	r3, [r3, #0]
 80055fe:	f103 020c 	add.w	r2, r3, #12
 8005602:	68fb      	ldr	r3, [r7, #12]
 8005604:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005606:	7812      	ldrb	r2, [r2, #0]
 8005608:	b2d2      	uxtb	r2, r2
 800560a:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800560c:	68fb      	ldr	r3, [r7, #12]
 800560e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005610:	1c5a      	adds	r2, r3, #1
 8005612:	68fb      	ldr	r3, [r7, #12]
 8005614:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8005616:	68fb      	ldr	r3, [r7, #12]
 8005618:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800561a:	b29b      	uxth	r3, r3
 800561c:	3b01      	subs	r3, #1
 800561e:	b29a      	uxth	r2, r3
 8005620:	68fb      	ldr	r3, [r7, #12]
 8005622:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8005624:	e018      	b.n	8005658 <HAL_SPI_Receive+0x178>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005626:	f7fd f813 	bl	8002650 <HAL_GetTick>
 800562a:	4602      	mov	r2, r0
 800562c:	697b      	ldr	r3, [r7, #20]
 800562e:	1ad3      	subs	r3, r2, r3
 8005630:	683a      	ldr	r2, [r7, #0]
 8005632:	429a      	cmp	r2, r3
 8005634:	d803      	bhi.n	800563e <HAL_SPI_Receive+0x15e>
 8005636:	683b      	ldr	r3, [r7, #0]
 8005638:	f1b3 3fff 	cmp.w	r3, #4294967295
 800563c:	d102      	bne.n	8005644 <HAL_SPI_Receive+0x164>
 800563e:	683b      	ldr	r3, [r7, #0]
 8005640:	2b00      	cmp	r3, #0
 8005642:	d109      	bne.n	8005658 <HAL_SPI_Receive+0x178>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8005644:	68fb      	ldr	r3, [r7, #12]
 8005646:	2201      	movs	r2, #1
 8005648:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 800564c:	68fb      	ldr	r3, [r7, #12]
 800564e:	2200      	movs	r2, #0
 8005650:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8005654:	2303      	movs	r3, #3
 8005656:	e058      	b.n	800570a <HAL_SPI_Receive+0x22a>
    while (hspi->RxXferCount > 0U)
 8005658:	68fb      	ldr	r3, [r7, #12]
 800565a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800565c:	b29b      	uxth	r3, r3
 800565e:	2b00      	cmp	r3, #0
 8005660:	d1c4      	bne.n	80055ec <HAL_SPI_Receive+0x10c>
 8005662:	e038      	b.n	80056d6 <HAL_SPI_Receive+0x1f6>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8005664:	68fb      	ldr	r3, [r7, #12]
 8005666:	681b      	ldr	r3, [r3, #0]
 8005668:	689b      	ldr	r3, [r3, #8]
 800566a:	f003 0301 	and.w	r3, r3, #1
 800566e:	2b01      	cmp	r3, #1
 8005670:	d113      	bne.n	800569a <HAL_SPI_Receive+0x1ba>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8005672:	68fb      	ldr	r3, [r7, #12]
 8005674:	681b      	ldr	r3, [r3, #0]
 8005676:	68da      	ldr	r2, [r3, #12]
 8005678:	68fb      	ldr	r3, [r7, #12]
 800567a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800567c:	b292      	uxth	r2, r2
 800567e:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8005680:	68fb      	ldr	r3, [r7, #12]
 8005682:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005684:	1c9a      	adds	r2, r3, #2
 8005686:	68fb      	ldr	r3, [r7, #12]
 8005688:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 800568a:	68fb      	ldr	r3, [r7, #12]
 800568c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800568e:	b29b      	uxth	r3, r3
 8005690:	3b01      	subs	r3, #1
 8005692:	b29a      	uxth	r2, r3
 8005694:	68fb      	ldr	r3, [r7, #12]
 8005696:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8005698:	e018      	b.n	80056cc <HAL_SPI_Receive+0x1ec>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800569a:	f7fc ffd9 	bl	8002650 <HAL_GetTick>
 800569e:	4602      	mov	r2, r0
 80056a0:	697b      	ldr	r3, [r7, #20]
 80056a2:	1ad3      	subs	r3, r2, r3
 80056a4:	683a      	ldr	r2, [r7, #0]
 80056a6:	429a      	cmp	r2, r3
 80056a8:	d803      	bhi.n	80056b2 <HAL_SPI_Receive+0x1d2>
 80056aa:	683b      	ldr	r3, [r7, #0]
 80056ac:	f1b3 3fff 	cmp.w	r3, #4294967295
 80056b0:	d102      	bne.n	80056b8 <HAL_SPI_Receive+0x1d8>
 80056b2:	683b      	ldr	r3, [r7, #0]
 80056b4:	2b00      	cmp	r3, #0
 80056b6:	d109      	bne.n	80056cc <HAL_SPI_Receive+0x1ec>
        {
          hspi->State = HAL_SPI_STATE_READY;
 80056b8:	68fb      	ldr	r3, [r7, #12]
 80056ba:	2201      	movs	r2, #1
 80056bc:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 80056c0:	68fb      	ldr	r3, [r7, #12]
 80056c2:	2200      	movs	r2, #0
 80056c4:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 80056c8:	2303      	movs	r3, #3
 80056ca:	e01e      	b.n	800570a <HAL_SPI_Receive+0x22a>
    while (hspi->RxXferCount > 0U)
 80056cc:	68fb      	ldr	r3, [r7, #12]
 80056ce:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80056d0:	b29b      	uxth	r3, r3
 80056d2:	2b00      	cmp	r3, #0
 80056d4:	d1c6      	bne.n	8005664 <HAL_SPI_Receive+0x184>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80056d6:	697a      	ldr	r2, [r7, #20]
 80056d8:	6839      	ldr	r1, [r7, #0]
 80056da:	68f8      	ldr	r0, [r7, #12]
 80056dc:	f000 fa58 	bl	8005b90 <SPI_EndRxTransaction>
 80056e0:	4603      	mov	r3, r0
 80056e2:	2b00      	cmp	r3, #0
 80056e4:	d002      	beq.n	80056ec <HAL_SPI_Receive+0x20c>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80056e6:	68fb      	ldr	r3, [r7, #12]
 80056e8:	2220      	movs	r2, #32
 80056ea:	655a      	str	r2, [r3, #84]	@ 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  hspi->State = HAL_SPI_STATE_READY;
 80056ec:	68fb      	ldr	r3, [r7, #12]
 80056ee:	2201      	movs	r2, #1
 80056f0:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 80056f4:	68fb      	ldr	r3, [r7, #12]
 80056f6:	2200      	movs	r2, #0
 80056f8:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80056fc:	68fb      	ldr	r3, [r7, #12]
 80056fe:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005700:	2b00      	cmp	r3, #0
 8005702:	d001      	beq.n	8005708 <HAL_SPI_Receive+0x228>
  {
    return HAL_ERROR;
 8005704:	2301      	movs	r3, #1
 8005706:	e000      	b.n	800570a <HAL_SPI_Receive+0x22a>
  }
  else
  {
    return HAL_OK;
 8005708:	2300      	movs	r3, #0
  }
}
 800570a:	4618      	mov	r0, r3
 800570c:	3718      	adds	r7, #24
 800570e:	46bd      	mov	sp, r7
 8005710:	bd80      	pop	{r7, pc}

08005712 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                          uint16_t Size, uint32_t Timeout)
{
 8005712:	b580      	push	{r7, lr}
 8005714:	b08a      	sub	sp, #40	@ 0x28
 8005716:	af00      	add	r7, sp, #0
 8005718:	60f8      	str	r0, [r7, #12]
 800571a:	60b9      	str	r1, [r7, #8]
 800571c:	607a      	str	r2, [r7, #4]
 800571e:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8005720:	2301      	movs	r3, #1
 8005722:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005724:	f7fc ff94 	bl	8002650 <HAL_GetTick>
 8005728:	6238      	str	r0, [r7, #32]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800572a:	68fb      	ldr	r3, [r7, #12]
 800572c:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8005730:	77fb      	strb	r3, [r7, #31]
  tmp_mode            = hspi->Init.Mode;
 8005732:	68fb      	ldr	r3, [r7, #12]
 8005734:	685b      	ldr	r3, [r3, #4]
 8005736:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 8005738:	887b      	ldrh	r3, [r7, #2]
 800573a:	82fb      	strh	r3, [r7, #22]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800573c:	7ffb      	ldrb	r3, [r7, #31]
 800573e:	2b01      	cmp	r3, #1
 8005740:	d00c      	beq.n	800575c <HAL_SPI_TransmitReceive+0x4a>
 8005742:	69bb      	ldr	r3, [r7, #24]
 8005744:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8005748:	d106      	bne.n	8005758 <HAL_SPI_TransmitReceive+0x46>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800574a:	68fb      	ldr	r3, [r7, #12]
 800574c:	689b      	ldr	r3, [r3, #8]
 800574e:	2b00      	cmp	r3, #0
 8005750:	d102      	bne.n	8005758 <HAL_SPI_TransmitReceive+0x46>
 8005752:	7ffb      	ldrb	r3, [r7, #31]
 8005754:	2b04      	cmp	r3, #4
 8005756:	d001      	beq.n	800575c <HAL_SPI_TransmitReceive+0x4a>
  {
    return HAL_BUSY;
 8005758:	2302      	movs	r3, #2
 800575a:	e17f      	b.n	8005a5c <HAL_SPI_TransmitReceive+0x34a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800575c:	68bb      	ldr	r3, [r7, #8]
 800575e:	2b00      	cmp	r3, #0
 8005760:	d005      	beq.n	800576e <HAL_SPI_TransmitReceive+0x5c>
 8005762:	687b      	ldr	r3, [r7, #4]
 8005764:	2b00      	cmp	r3, #0
 8005766:	d002      	beq.n	800576e <HAL_SPI_TransmitReceive+0x5c>
 8005768:	887b      	ldrh	r3, [r7, #2]
 800576a:	2b00      	cmp	r3, #0
 800576c:	d101      	bne.n	8005772 <HAL_SPI_TransmitReceive+0x60>
  {
    return HAL_ERROR;
 800576e:	2301      	movs	r3, #1
 8005770:	e174      	b.n	8005a5c <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8005772:	68fb      	ldr	r3, [r7, #12]
 8005774:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8005778:	2b01      	cmp	r3, #1
 800577a:	d101      	bne.n	8005780 <HAL_SPI_TransmitReceive+0x6e>
 800577c:	2302      	movs	r3, #2
 800577e:	e16d      	b.n	8005a5c <HAL_SPI_TransmitReceive+0x34a>
 8005780:	68fb      	ldr	r3, [r7, #12]
 8005782:	2201      	movs	r2, #1
 8005784:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8005788:	68fb      	ldr	r3, [r7, #12]
 800578a:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800578e:	b2db      	uxtb	r3, r3
 8005790:	2b04      	cmp	r3, #4
 8005792:	d003      	beq.n	800579c <HAL_SPI_TransmitReceive+0x8a>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8005794:	68fb      	ldr	r3, [r7, #12]
 8005796:	2205      	movs	r2, #5
 8005798:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800579c:	68fb      	ldr	r3, [r7, #12]
 800579e:	2200      	movs	r2, #0
 80057a0:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80057a2:	68fb      	ldr	r3, [r7, #12]
 80057a4:	687a      	ldr	r2, [r7, #4]
 80057a6:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferCount = Size;
 80057a8:	68fb      	ldr	r3, [r7, #12]
 80057aa:	887a      	ldrh	r2, [r7, #2]
 80057ac:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->RxXferSize  = Size;
 80057ae:	68fb      	ldr	r3, [r7, #12]
 80057b0:	887a      	ldrh	r2, [r7, #2]
 80057b2:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 80057b4:	68fb      	ldr	r3, [r7, #12]
 80057b6:	68ba      	ldr	r2, [r7, #8]
 80057b8:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferCount = Size;
 80057ba:	68fb      	ldr	r3, [r7, #12]
 80057bc:	887a      	ldrh	r2, [r7, #2]
 80057be:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->TxXferSize  = Size;
 80057c0:	68fb      	ldr	r3, [r7, #12]
 80057c2:	887a      	ldrh	r2, [r7, #2]
 80057c4:	869a      	strh	r2, [r3, #52]	@ 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80057c6:	68fb      	ldr	r3, [r7, #12]
 80057c8:	2200      	movs	r2, #0
 80057ca:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 80057cc:	68fb      	ldr	r3, [r7, #12]
 80057ce:	2200      	movs	r2, #0
 80057d0:	645a      	str	r2, [r3, #68]	@ 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80057d2:	68fb      	ldr	r3, [r7, #12]
 80057d4:	681b      	ldr	r3, [r3, #0]
 80057d6:	681b      	ldr	r3, [r3, #0]
 80057d8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80057dc:	2b40      	cmp	r3, #64	@ 0x40
 80057de:	d007      	beq.n	80057f0 <HAL_SPI_TransmitReceive+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80057e0:	68fb      	ldr	r3, [r7, #12]
 80057e2:	681b      	ldr	r3, [r3, #0]
 80057e4:	681a      	ldr	r2, [r3, #0]
 80057e6:	68fb      	ldr	r3, [r7, #12]
 80057e8:	681b      	ldr	r3, [r3, #0]
 80057ea:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80057ee:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80057f0:	68fb      	ldr	r3, [r7, #12]
 80057f2:	68db      	ldr	r3, [r3, #12]
 80057f4:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80057f8:	d17e      	bne.n	80058f8 <HAL_SPI_TransmitReceive+0x1e6>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80057fa:	68fb      	ldr	r3, [r7, #12]
 80057fc:	685b      	ldr	r3, [r3, #4]
 80057fe:	2b00      	cmp	r3, #0
 8005800:	d002      	beq.n	8005808 <HAL_SPI_TransmitReceive+0xf6>
 8005802:	8afb      	ldrh	r3, [r7, #22]
 8005804:	2b01      	cmp	r3, #1
 8005806:	d16c      	bne.n	80058e2 <HAL_SPI_TransmitReceive+0x1d0>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8005808:	68fb      	ldr	r3, [r7, #12]
 800580a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800580c:	881a      	ldrh	r2, [r3, #0]
 800580e:	68fb      	ldr	r3, [r7, #12]
 8005810:	681b      	ldr	r3, [r3, #0]
 8005812:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8005814:	68fb      	ldr	r3, [r7, #12]
 8005816:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005818:	1c9a      	adds	r2, r3, #2
 800581a:	68fb      	ldr	r3, [r7, #12]
 800581c:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 800581e:	68fb      	ldr	r3, [r7, #12]
 8005820:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005822:	b29b      	uxth	r3, r3
 8005824:	3b01      	subs	r3, #1
 8005826:	b29a      	uxth	r2, r3
 8005828:	68fb      	ldr	r3, [r7, #12]
 800582a:	86da      	strh	r2, [r3, #54]	@ 0x36
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800582c:	e059      	b.n	80058e2 <HAL_SPI_TransmitReceive+0x1d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800582e:	68fb      	ldr	r3, [r7, #12]
 8005830:	681b      	ldr	r3, [r3, #0]
 8005832:	689b      	ldr	r3, [r3, #8]
 8005834:	f003 0302 	and.w	r3, r3, #2
 8005838:	2b02      	cmp	r3, #2
 800583a:	d11b      	bne.n	8005874 <HAL_SPI_TransmitReceive+0x162>
 800583c:	68fb      	ldr	r3, [r7, #12]
 800583e:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005840:	b29b      	uxth	r3, r3
 8005842:	2b00      	cmp	r3, #0
 8005844:	d016      	beq.n	8005874 <HAL_SPI_TransmitReceive+0x162>
 8005846:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005848:	2b01      	cmp	r3, #1
 800584a:	d113      	bne.n	8005874 <HAL_SPI_TransmitReceive+0x162>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 800584c:	68fb      	ldr	r3, [r7, #12]
 800584e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005850:	881a      	ldrh	r2, [r3, #0]
 8005852:	68fb      	ldr	r3, [r7, #12]
 8005854:	681b      	ldr	r3, [r3, #0]
 8005856:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005858:	68fb      	ldr	r3, [r7, #12]
 800585a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800585c:	1c9a      	adds	r2, r3, #2
 800585e:	68fb      	ldr	r3, [r7, #12]
 8005860:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8005862:	68fb      	ldr	r3, [r7, #12]
 8005864:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005866:	b29b      	uxth	r3, r3
 8005868:	3b01      	subs	r3, #1
 800586a:	b29a      	uxth	r2, r3
 800586c:	68fb      	ldr	r3, [r7, #12]
 800586e:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8005870:	2300      	movs	r3, #0
 8005872:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8005874:	68fb      	ldr	r3, [r7, #12]
 8005876:	681b      	ldr	r3, [r3, #0]
 8005878:	689b      	ldr	r3, [r3, #8]
 800587a:	f003 0301 	and.w	r3, r3, #1
 800587e:	2b01      	cmp	r3, #1
 8005880:	d119      	bne.n	80058b6 <HAL_SPI_TransmitReceive+0x1a4>
 8005882:	68fb      	ldr	r3, [r7, #12]
 8005884:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005886:	b29b      	uxth	r3, r3
 8005888:	2b00      	cmp	r3, #0
 800588a:	d014      	beq.n	80058b6 <HAL_SPI_TransmitReceive+0x1a4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800588c:	68fb      	ldr	r3, [r7, #12]
 800588e:	681b      	ldr	r3, [r3, #0]
 8005890:	68da      	ldr	r2, [r3, #12]
 8005892:	68fb      	ldr	r3, [r7, #12]
 8005894:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005896:	b292      	uxth	r2, r2
 8005898:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800589a:	68fb      	ldr	r3, [r7, #12]
 800589c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800589e:	1c9a      	adds	r2, r3, #2
 80058a0:	68fb      	ldr	r3, [r7, #12]
 80058a2:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 80058a4:	68fb      	ldr	r3, [r7, #12]
 80058a6:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80058a8:	b29b      	uxth	r3, r3
 80058aa:	3b01      	subs	r3, #1
 80058ac:	b29a      	uxth	r2, r3
 80058ae:	68fb      	ldr	r3, [r7, #12]
 80058b0:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80058b2:	2301      	movs	r3, #1
 80058b4:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 80058b6:	f7fc fecb 	bl	8002650 <HAL_GetTick>
 80058ba:	4602      	mov	r2, r0
 80058bc:	6a3b      	ldr	r3, [r7, #32]
 80058be:	1ad3      	subs	r3, r2, r3
 80058c0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80058c2:	429a      	cmp	r2, r3
 80058c4:	d80d      	bhi.n	80058e2 <HAL_SPI_TransmitReceive+0x1d0>
 80058c6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80058c8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80058cc:	d009      	beq.n	80058e2 <HAL_SPI_TransmitReceive+0x1d0>
      {
        hspi->State = HAL_SPI_STATE_READY;
 80058ce:	68fb      	ldr	r3, [r7, #12]
 80058d0:	2201      	movs	r2, #1
 80058d2:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 80058d6:	68fb      	ldr	r3, [r7, #12]
 80058d8:	2200      	movs	r2, #0
 80058da:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 80058de:	2303      	movs	r3, #3
 80058e0:	e0bc      	b.n	8005a5c <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80058e2:	68fb      	ldr	r3, [r7, #12]
 80058e4:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80058e6:	b29b      	uxth	r3, r3
 80058e8:	2b00      	cmp	r3, #0
 80058ea:	d1a0      	bne.n	800582e <HAL_SPI_TransmitReceive+0x11c>
 80058ec:	68fb      	ldr	r3, [r7, #12]
 80058ee:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80058f0:	b29b      	uxth	r3, r3
 80058f2:	2b00      	cmp	r3, #0
 80058f4:	d19b      	bne.n	800582e <HAL_SPI_TransmitReceive+0x11c>
 80058f6:	e082      	b.n	80059fe <HAL_SPI_TransmitReceive+0x2ec>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80058f8:	68fb      	ldr	r3, [r7, #12]
 80058fa:	685b      	ldr	r3, [r3, #4]
 80058fc:	2b00      	cmp	r3, #0
 80058fe:	d002      	beq.n	8005906 <HAL_SPI_TransmitReceive+0x1f4>
 8005900:	8afb      	ldrh	r3, [r7, #22]
 8005902:	2b01      	cmp	r3, #1
 8005904:	d171      	bne.n	80059ea <HAL_SPI_TransmitReceive+0x2d8>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8005906:	68fb      	ldr	r3, [r7, #12]
 8005908:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800590a:	68fb      	ldr	r3, [r7, #12]
 800590c:	681b      	ldr	r3, [r3, #0]
 800590e:	330c      	adds	r3, #12
 8005910:	7812      	ldrb	r2, [r2, #0]
 8005912:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8005914:	68fb      	ldr	r3, [r7, #12]
 8005916:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005918:	1c5a      	adds	r2, r3, #1
 800591a:	68fb      	ldr	r3, [r7, #12]
 800591c:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 800591e:	68fb      	ldr	r3, [r7, #12]
 8005920:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005922:	b29b      	uxth	r3, r3
 8005924:	3b01      	subs	r3, #1
 8005926:	b29a      	uxth	r2, r3
 8005928:	68fb      	ldr	r3, [r7, #12]
 800592a:	86da      	strh	r2, [r3, #54]	@ 0x36
      {
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800592c:	e05d      	b.n	80059ea <HAL_SPI_TransmitReceive+0x2d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800592e:	68fb      	ldr	r3, [r7, #12]
 8005930:	681b      	ldr	r3, [r3, #0]
 8005932:	689b      	ldr	r3, [r3, #8]
 8005934:	f003 0302 	and.w	r3, r3, #2
 8005938:	2b02      	cmp	r3, #2
 800593a:	d11c      	bne.n	8005976 <HAL_SPI_TransmitReceive+0x264>
 800593c:	68fb      	ldr	r3, [r7, #12]
 800593e:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005940:	b29b      	uxth	r3, r3
 8005942:	2b00      	cmp	r3, #0
 8005944:	d017      	beq.n	8005976 <HAL_SPI_TransmitReceive+0x264>
 8005946:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005948:	2b01      	cmp	r3, #1
 800594a:	d114      	bne.n	8005976 <HAL_SPI_TransmitReceive+0x264>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 800594c:	68fb      	ldr	r3, [r7, #12]
 800594e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8005950:	68fb      	ldr	r3, [r7, #12]
 8005952:	681b      	ldr	r3, [r3, #0]
 8005954:	330c      	adds	r3, #12
 8005956:	7812      	ldrb	r2, [r2, #0]
 8005958:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 800595a:	68fb      	ldr	r3, [r7, #12]
 800595c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800595e:	1c5a      	adds	r2, r3, #1
 8005960:	68fb      	ldr	r3, [r7, #12]
 8005962:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8005964:	68fb      	ldr	r3, [r7, #12]
 8005966:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005968:	b29b      	uxth	r3, r3
 800596a:	3b01      	subs	r3, #1
 800596c:	b29a      	uxth	r2, r3
 800596e:	68fb      	ldr	r3, [r7, #12]
 8005970:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8005972:	2300      	movs	r3, #0
 8005974:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8005976:	68fb      	ldr	r3, [r7, #12]
 8005978:	681b      	ldr	r3, [r3, #0]
 800597a:	689b      	ldr	r3, [r3, #8]
 800597c:	f003 0301 	and.w	r3, r3, #1
 8005980:	2b01      	cmp	r3, #1
 8005982:	d119      	bne.n	80059b8 <HAL_SPI_TransmitReceive+0x2a6>
 8005984:	68fb      	ldr	r3, [r7, #12]
 8005986:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005988:	b29b      	uxth	r3, r3
 800598a:	2b00      	cmp	r3, #0
 800598c:	d014      	beq.n	80059b8 <HAL_SPI_TransmitReceive+0x2a6>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 800598e:	68fb      	ldr	r3, [r7, #12]
 8005990:	681b      	ldr	r3, [r3, #0]
 8005992:	68da      	ldr	r2, [r3, #12]
 8005994:	68fb      	ldr	r3, [r7, #12]
 8005996:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005998:	b2d2      	uxtb	r2, r2
 800599a:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 800599c:	68fb      	ldr	r3, [r7, #12]
 800599e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80059a0:	1c5a      	adds	r2, r3, #1
 80059a2:	68fb      	ldr	r3, [r7, #12]
 80059a4:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 80059a6:	68fb      	ldr	r3, [r7, #12]
 80059a8:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80059aa:	b29b      	uxth	r3, r3
 80059ac:	3b01      	subs	r3, #1
 80059ae:	b29a      	uxth	r2, r3
 80059b0:	68fb      	ldr	r3, [r7, #12]
 80059b2:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80059b4:	2301      	movs	r3, #1
 80059b6:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 80059b8:	f7fc fe4a 	bl	8002650 <HAL_GetTick>
 80059bc:	4602      	mov	r2, r0
 80059be:	6a3b      	ldr	r3, [r7, #32]
 80059c0:	1ad3      	subs	r3, r2, r3
 80059c2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80059c4:	429a      	cmp	r2, r3
 80059c6:	d803      	bhi.n	80059d0 <HAL_SPI_TransmitReceive+0x2be>
 80059c8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80059ca:	f1b3 3fff 	cmp.w	r3, #4294967295
 80059ce:	d102      	bne.n	80059d6 <HAL_SPI_TransmitReceive+0x2c4>
 80059d0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80059d2:	2b00      	cmp	r3, #0
 80059d4:	d109      	bne.n	80059ea <HAL_SPI_TransmitReceive+0x2d8>
      {
        hspi->State = HAL_SPI_STATE_READY;
 80059d6:	68fb      	ldr	r3, [r7, #12]
 80059d8:	2201      	movs	r2, #1
 80059da:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 80059de:	68fb      	ldr	r3, [r7, #12]
 80059e0:	2200      	movs	r2, #0
 80059e2:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 80059e6:	2303      	movs	r3, #3
 80059e8:	e038      	b.n	8005a5c <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80059ea:	68fb      	ldr	r3, [r7, #12]
 80059ec:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80059ee:	b29b      	uxth	r3, r3
 80059f0:	2b00      	cmp	r3, #0
 80059f2:	d19c      	bne.n	800592e <HAL_SPI_TransmitReceive+0x21c>
 80059f4:	68fb      	ldr	r3, [r7, #12]
 80059f6:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80059f8:	b29b      	uxth	r3, r3
 80059fa:	2b00      	cmp	r3, #0
 80059fc:	d197      	bne.n	800592e <HAL_SPI_TransmitReceive+0x21c>
    return HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80059fe:	6a3a      	ldr	r2, [r7, #32]
 8005a00:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8005a02:	68f8      	ldr	r0, [r7, #12]
 8005a04:	f000 f92a 	bl	8005c5c <SPI_EndRxTxTransaction>
 8005a08:	4603      	mov	r3, r0
 8005a0a:	2b00      	cmp	r3, #0
 8005a0c:	d008      	beq.n	8005a20 <HAL_SPI_TransmitReceive+0x30e>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005a0e:	68fb      	ldr	r3, [r7, #12]
 8005a10:	2220      	movs	r2, #32
 8005a12:	655a      	str	r2, [r3, #84]	@ 0x54
    __HAL_UNLOCK(hspi);
 8005a14:	68fb      	ldr	r3, [r7, #12]
 8005a16:	2200      	movs	r2, #0
 8005a18:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
    return HAL_ERROR;
 8005a1c:	2301      	movs	r3, #1
 8005a1e:	e01d      	b.n	8005a5c <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8005a20:	68fb      	ldr	r3, [r7, #12]
 8005a22:	689b      	ldr	r3, [r3, #8]
 8005a24:	2b00      	cmp	r3, #0
 8005a26:	d10a      	bne.n	8005a3e <HAL_SPI_TransmitReceive+0x32c>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8005a28:	2300      	movs	r3, #0
 8005a2a:	613b      	str	r3, [r7, #16]
 8005a2c:	68fb      	ldr	r3, [r7, #12]
 8005a2e:	681b      	ldr	r3, [r3, #0]
 8005a30:	68db      	ldr	r3, [r3, #12]
 8005a32:	613b      	str	r3, [r7, #16]
 8005a34:	68fb      	ldr	r3, [r7, #12]
 8005a36:	681b      	ldr	r3, [r3, #0]
 8005a38:	689b      	ldr	r3, [r3, #8]
 8005a3a:	613b      	str	r3, [r7, #16]
 8005a3c:	693b      	ldr	r3, [r7, #16]
  }


  hspi->State = HAL_SPI_STATE_READY;
 8005a3e:	68fb      	ldr	r3, [r7, #12]
 8005a40:	2201      	movs	r2, #1
 8005a42:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8005a46:	68fb      	ldr	r3, [r7, #12]
 8005a48:	2200      	movs	r2, #0
 8005a4a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005a4e:	68fb      	ldr	r3, [r7, #12]
 8005a50:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005a52:	2b00      	cmp	r3, #0
 8005a54:	d001      	beq.n	8005a5a <HAL_SPI_TransmitReceive+0x348>
  {
    return HAL_ERROR;
 8005a56:	2301      	movs	r3, #1
 8005a58:	e000      	b.n	8005a5c <HAL_SPI_TransmitReceive+0x34a>
  }
  else
  {
    return HAL_OK;
 8005a5a:	2300      	movs	r3, #0
  }
}
 8005a5c:	4618      	mov	r0, r3
 8005a5e:	3728      	adds	r7, #40	@ 0x28
 8005a60:	46bd      	mov	sp, r7
 8005a62:	bd80      	pop	{r7, pc}

08005a64 <HAL_SPI_GetState>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI state
  */
HAL_SPI_StateTypeDef HAL_SPI_GetState(const SPI_HandleTypeDef *hspi)
{
 8005a64:	b480      	push	{r7}
 8005a66:	b083      	sub	sp, #12
 8005a68:	af00      	add	r7, sp, #0
 8005a6a:	6078      	str	r0, [r7, #4]
  /* Return SPI handle state */
  return hspi->State;
 8005a6c:	687b      	ldr	r3, [r7, #4]
 8005a6e:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8005a72:	b2db      	uxtb	r3, r3
}
 8005a74:	4618      	mov	r0, r3
 8005a76:	370c      	adds	r7, #12
 8005a78:	46bd      	mov	sp, r7
 8005a7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a7e:	4770      	bx	lr

08005a80 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8005a80:	b580      	push	{r7, lr}
 8005a82:	b088      	sub	sp, #32
 8005a84:	af00      	add	r7, sp, #0
 8005a86:	60f8      	str	r0, [r7, #12]
 8005a88:	60b9      	str	r1, [r7, #8]
 8005a8a:	603b      	str	r3, [r7, #0]
 8005a8c:	4613      	mov	r3, r2
 8005a8e:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8005a90:	f7fc fdde 	bl	8002650 <HAL_GetTick>
 8005a94:	4602      	mov	r2, r0
 8005a96:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005a98:	1a9b      	subs	r3, r3, r2
 8005a9a:	683a      	ldr	r2, [r7, #0]
 8005a9c:	4413      	add	r3, r2
 8005a9e:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8005aa0:	f7fc fdd6 	bl	8002650 <HAL_GetTick>
 8005aa4:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8005aa6:	4b39      	ldr	r3, [pc, #228]	@ (8005b8c <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8005aa8:	681b      	ldr	r3, [r3, #0]
 8005aaa:	015b      	lsls	r3, r3, #5
 8005aac:	0d1b      	lsrs	r3, r3, #20
 8005aae:	69fa      	ldr	r2, [r7, #28]
 8005ab0:	fb02 f303 	mul.w	r3, r2, r3
 8005ab4:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005ab6:	e054      	b.n	8005b62 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8005ab8:	683b      	ldr	r3, [r7, #0]
 8005aba:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005abe:	d050      	beq.n	8005b62 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8005ac0:	f7fc fdc6 	bl	8002650 <HAL_GetTick>
 8005ac4:	4602      	mov	r2, r0
 8005ac6:	69bb      	ldr	r3, [r7, #24]
 8005ac8:	1ad3      	subs	r3, r2, r3
 8005aca:	69fa      	ldr	r2, [r7, #28]
 8005acc:	429a      	cmp	r2, r3
 8005ace:	d902      	bls.n	8005ad6 <SPI_WaitFlagStateUntilTimeout+0x56>
 8005ad0:	69fb      	ldr	r3, [r7, #28]
 8005ad2:	2b00      	cmp	r3, #0
 8005ad4:	d13d      	bne.n	8005b52 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8005ad6:	68fb      	ldr	r3, [r7, #12]
 8005ad8:	681b      	ldr	r3, [r3, #0]
 8005ada:	685a      	ldr	r2, [r3, #4]
 8005adc:	68fb      	ldr	r3, [r7, #12]
 8005ade:	681b      	ldr	r3, [r3, #0]
 8005ae0:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8005ae4:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005ae6:	68fb      	ldr	r3, [r7, #12]
 8005ae8:	685b      	ldr	r3, [r3, #4]
 8005aea:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8005aee:	d111      	bne.n	8005b14 <SPI_WaitFlagStateUntilTimeout+0x94>
 8005af0:	68fb      	ldr	r3, [r7, #12]
 8005af2:	689b      	ldr	r3, [r3, #8]
 8005af4:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005af8:	d004      	beq.n	8005b04 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005afa:	68fb      	ldr	r3, [r7, #12]
 8005afc:	689b      	ldr	r3, [r3, #8]
 8005afe:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005b02:	d107      	bne.n	8005b14 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8005b04:	68fb      	ldr	r3, [r7, #12]
 8005b06:	681b      	ldr	r3, [r3, #0]
 8005b08:	681a      	ldr	r2, [r3, #0]
 8005b0a:	68fb      	ldr	r3, [r7, #12]
 8005b0c:	681b      	ldr	r3, [r3, #0]
 8005b0e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8005b12:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8005b14:	68fb      	ldr	r3, [r7, #12]
 8005b16:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005b18:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005b1c:	d10f      	bne.n	8005b3e <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8005b1e:	68fb      	ldr	r3, [r7, #12]
 8005b20:	681b      	ldr	r3, [r3, #0]
 8005b22:	681a      	ldr	r2, [r3, #0]
 8005b24:	68fb      	ldr	r3, [r7, #12]
 8005b26:	681b      	ldr	r3, [r3, #0]
 8005b28:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8005b2c:	601a      	str	r2, [r3, #0]
 8005b2e:	68fb      	ldr	r3, [r7, #12]
 8005b30:	681b      	ldr	r3, [r3, #0]
 8005b32:	681a      	ldr	r2, [r3, #0]
 8005b34:	68fb      	ldr	r3, [r7, #12]
 8005b36:	681b      	ldr	r3, [r3, #0]
 8005b38:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8005b3c:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8005b3e:	68fb      	ldr	r3, [r7, #12]
 8005b40:	2201      	movs	r2, #1
 8005b42:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8005b46:	68fb      	ldr	r3, [r7, #12]
 8005b48:	2200      	movs	r2, #0
 8005b4a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 8005b4e:	2303      	movs	r3, #3
 8005b50:	e017      	b.n	8005b82 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8005b52:	697b      	ldr	r3, [r7, #20]
 8005b54:	2b00      	cmp	r3, #0
 8005b56:	d101      	bne.n	8005b5c <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8005b58:	2300      	movs	r3, #0
 8005b5a:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8005b5c:	697b      	ldr	r3, [r7, #20]
 8005b5e:	3b01      	subs	r3, #1
 8005b60:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005b62:	68fb      	ldr	r3, [r7, #12]
 8005b64:	681b      	ldr	r3, [r3, #0]
 8005b66:	689a      	ldr	r2, [r3, #8]
 8005b68:	68bb      	ldr	r3, [r7, #8]
 8005b6a:	4013      	ands	r3, r2
 8005b6c:	68ba      	ldr	r2, [r7, #8]
 8005b6e:	429a      	cmp	r2, r3
 8005b70:	bf0c      	ite	eq
 8005b72:	2301      	moveq	r3, #1
 8005b74:	2300      	movne	r3, #0
 8005b76:	b2db      	uxtb	r3, r3
 8005b78:	461a      	mov	r2, r3
 8005b7a:	79fb      	ldrb	r3, [r7, #7]
 8005b7c:	429a      	cmp	r2, r3
 8005b7e:	d19b      	bne.n	8005ab8 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8005b80:	2300      	movs	r3, #0
}
 8005b82:	4618      	mov	r0, r3
 8005b84:	3720      	adds	r7, #32
 8005b86:	46bd      	mov	sp, r7
 8005b88:	bd80      	pop	{r7, pc}
 8005b8a:	bf00      	nop
 8005b8c:	20000048 	.word	0x20000048

08005b90 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8005b90:	b580      	push	{r7, lr}
 8005b92:	b086      	sub	sp, #24
 8005b94:	af02      	add	r7, sp, #8
 8005b96:	60f8      	str	r0, [r7, #12]
 8005b98:	60b9      	str	r1, [r7, #8]
 8005b9a:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005b9c:	68fb      	ldr	r3, [r7, #12]
 8005b9e:	685b      	ldr	r3, [r3, #4]
 8005ba0:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8005ba4:	d111      	bne.n	8005bca <SPI_EndRxTransaction+0x3a>
 8005ba6:	68fb      	ldr	r3, [r7, #12]
 8005ba8:	689b      	ldr	r3, [r3, #8]
 8005baa:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005bae:	d004      	beq.n	8005bba <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005bb0:	68fb      	ldr	r3, [r7, #12]
 8005bb2:	689b      	ldr	r3, [r3, #8]
 8005bb4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005bb8:	d107      	bne.n	8005bca <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8005bba:	68fb      	ldr	r3, [r7, #12]
 8005bbc:	681b      	ldr	r3, [r3, #0]
 8005bbe:	681a      	ldr	r2, [r3, #0]
 8005bc0:	68fb      	ldr	r3, [r7, #12]
 8005bc2:	681b      	ldr	r3, [r3, #0]
 8005bc4:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8005bc8:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005bca:	68fb      	ldr	r3, [r7, #12]
 8005bcc:	685b      	ldr	r3, [r3, #4]
 8005bce:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8005bd2:	d12a      	bne.n	8005c2a <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 8005bd4:	68fb      	ldr	r3, [r7, #12]
 8005bd6:	689b      	ldr	r3, [r3, #8]
 8005bd8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005bdc:	d012      	beq.n	8005c04 <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8005bde:	687b      	ldr	r3, [r7, #4]
 8005be0:	9300      	str	r3, [sp, #0]
 8005be2:	68bb      	ldr	r3, [r7, #8]
 8005be4:	2200      	movs	r2, #0
 8005be6:	2180      	movs	r1, #128	@ 0x80
 8005be8:	68f8      	ldr	r0, [r7, #12]
 8005bea:	f7ff ff49 	bl	8005a80 <SPI_WaitFlagStateUntilTimeout>
 8005bee:	4603      	mov	r3, r0
 8005bf0:	2b00      	cmp	r3, #0
 8005bf2:	d02d      	beq.n	8005c50 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005bf4:	68fb      	ldr	r3, [r7, #12]
 8005bf6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005bf8:	f043 0220 	orr.w	r2, r3, #32
 8005bfc:	68fb      	ldr	r3, [r7, #12]
 8005bfe:	655a      	str	r2, [r3, #84]	@ 0x54
        return HAL_TIMEOUT;
 8005c00:	2303      	movs	r3, #3
 8005c02:	e026      	b.n	8005c52 <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8005c04:	687b      	ldr	r3, [r7, #4]
 8005c06:	9300      	str	r3, [sp, #0]
 8005c08:	68bb      	ldr	r3, [r7, #8]
 8005c0a:	2200      	movs	r2, #0
 8005c0c:	2101      	movs	r1, #1
 8005c0e:	68f8      	ldr	r0, [r7, #12]
 8005c10:	f7ff ff36 	bl	8005a80 <SPI_WaitFlagStateUntilTimeout>
 8005c14:	4603      	mov	r3, r0
 8005c16:	2b00      	cmp	r3, #0
 8005c18:	d01a      	beq.n	8005c50 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005c1a:	68fb      	ldr	r3, [r7, #12]
 8005c1c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005c1e:	f043 0220 	orr.w	r2, r3, #32
 8005c22:	68fb      	ldr	r3, [r7, #12]
 8005c24:	655a      	str	r2, [r3, #84]	@ 0x54
        return HAL_TIMEOUT;
 8005c26:	2303      	movs	r3, #3
 8005c28:	e013      	b.n	8005c52 <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8005c2a:	687b      	ldr	r3, [r7, #4]
 8005c2c:	9300      	str	r3, [sp, #0]
 8005c2e:	68bb      	ldr	r3, [r7, #8]
 8005c30:	2200      	movs	r2, #0
 8005c32:	2101      	movs	r1, #1
 8005c34:	68f8      	ldr	r0, [r7, #12]
 8005c36:	f7ff ff23 	bl	8005a80 <SPI_WaitFlagStateUntilTimeout>
 8005c3a:	4603      	mov	r3, r0
 8005c3c:	2b00      	cmp	r3, #0
 8005c3e:	d007      	beq.n	8005c50 <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005c40:	68fb      	ldr	r3, [r7, #12]
 8005c42:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005c44:	f043 0220 	orr.w	r2, r3, #32
 8005c48:	68fb      	ldr	r3, [r7, #12]
 8005c4a:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 8005c4c:	2303      	movs	r3, #3
 8005c4e:	e000      	b.n	8005c52 <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 8005c50:	2300      	movs	r3, #0
}
 8005c52:	4618      	mov	r0, r3
 8005c54:	3710      	adds	r7, #16
 8005c56:	46bd      	mov	sp, r7
 8005c58:	bd80      	pop	{r7, pc}
	...

08005c5c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8005c5c:	b580      	push	{r7, lr}
 8005c5e:	b088      	sub	sp, #32
 8005c60:	af02      	add	r7, sp, #8
 8005c62:	60f8      	str	r0, [r7, #12]
 8005c64:	60b9      	str	r1, [r7, #8]
 8005c66:	607a      	str	r2, [r7, #4]
  /* Wait until TXE flag */
  if(SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 8005c68:	687b      	ldr	r3, [r7, #4]
 8005c6a:	9300      	str	r3, [sp, #0]
 8005c6c:	68bb      	ldr	r3, [r7, #8]
 8005c6e:	2201      	movs	r2, #1
 8005c70:	2102      	movs	r1, #2
 8005c72:	68f8      	ldr	r0, [r7, #12]
 8005c74:	f7ff ff04 	bl	8005a80 <SPI_WaitFlagStateUntilTimeout>
 8005c78:	4603      	mov	r3, r0
 8005c7a:	2b00      	cmp	r3, #0
 8005c7c:	d007      	beq.n	8005c8e <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005c7e:	68fb      	ldr	r3, [r7, #12]
 8005c80:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005c82:	f043 0220 	orr.w	r2, r3, #32
 8005c86:	68fb      	ldr	r3, [r7, #12]
 8005c88:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 8005c8a:	2303      	movs	r3, #3
 8005c8c:	e032      	b.n	8005cf4 <SPI_EndRxTxTransaction+0x98>
  }

  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8005c8e:	4b1b      	ldr	r3, [pc, #108]	@ (8005cfc <SPI_EndRxTxTransaction+0xa0>)
 8005c90:	681b      	ldr	r3, [r3, #0]
 8005c92:	4a1b      	ldr	r2, [pc, #108]	@ (8005d00 <SPI_EndRxTxTransaction+0xa4>)
 8005c94:	fba2 2303 	umull	r2, r3, r2, r3
 8005c98:	0d5b      	lsrs	r3, r3, #21
 8005c9a:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8005c9e:	fb02 f303 	mul.w	r3, r2, r3
 8005ca2:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005ca4:	68fb      	ldr	r3, [r7, #12]
 8005ca6:	685b      	ldr	r3, [r3, #4]
 8005ca8:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8005cac:	d112      	bne.n	8005cd4 <SPI_EndRxTxTransaction+0x78>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8005cae:	687b      	ldr	r3, [r7, #4]
 8005cb0:	9300      	str	r3, [sp, #0]
 8005cb2:	68bb      	ldr	r3, [r7, #8]
 8005cb4:	2200      	movs	r2, #0
 8005cb6:	2180      	movs	r1, #128	@ 0x80
 8005cb8:	68f8      	ldr	r0, [r7, #12]
 8005cba:	f7ff fee1 	bl	8005a80 <SPI_WaitFlagStateUntilTimeout>
 8005cbe:	4603      	mov	r3, r0
 8005cc0:	2b00      	cmp	r3, #0
 8005cc2:	d016      	beq.n	8005cf2 <SPI_EndRxTxTransaction+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005cc4:	68fb      	ldr	r3, [r7, #12]
 8005cc6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005cc8:	f043 0220 	orr.w	r2, r3, #32
 8005ccc:	68fb      	ldr	r3, [r7, #12]
 8005cce:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 8005cd0:	2303      	movs	r3, #3
 8005cd2:	e00f      	b.n	8005cf4 <SPI_EndRxTxTransaction+0x98>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8005cd4:	697b      	ldr	r3, [r7, #20]
 8005cd6:	2b00      	cmp	r3, #0
 8005cd8:	d00a      	beq.n	8005cf0 <SPI_EndRxTxTransaction+0x94>
      {
        break;
      }
      count--;
 8005cda:	697b      	ldr	r3, [r7, #20]
 8005cdc:	3b01      	subs	r3, #1
 8005cde:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8005ce0:	68fb      	ldr	r3, [r7, #12]
 8005ce2:	681b      	ldr	r3, [r3, #0]
 8005ce4:	689b      	ldr	r3, [r3, #8]
 8005ce6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005cea:	2b80      	cmp	r3, #128	@ 0x80
 8005cec:	d0f2      	beq.n	8005cd4 <SPI_EndRxTxTransaction+0x78>
 8005cee:	e000      	b.n	8005cf2 <SPI_EndRxTxTransaction+0x96>
        break;
 8005cf0:	bf00      	nop
  }

  return HAL_OK;
 8005cf2:	2300      	movs	r3, #0
}
 8005cf4:	4618      	mov	r0, r3
 8005cf6:	3718      	adds	r7, #24
 8005cf8:	46bd      	mov	sp, r7
 8005cfa:	bd80      	pop	{r7, pc}
 8005cfc:	20000048 	.word	0x20000048
 8005d00:	165e9f81 	.word	0x165e9f81

08005d04 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005d04:	b580      	push	{r7, lr}
 8005d06:	b082      	sub	sp, #8
 8005d08:	af00      	add	r7, sp, #0
 8005d0a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005d0c:	687b      	ldr	r3, [r7, #4]
 8005d0e:	2b00      	cmp	r3, #0
 8005d10:	d101      	bne.n	8005d16 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005d12:	2301      	movs	r3, #1
 8005d14:	e042      	b.n	8005d9c <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8005d16:	687b      	ldr	r3, [r7, #4]
 8005d18:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005d1c:	b2db      	uxtb	r3, r3
 8005d1e:	2b00      	cmp	r3, #0
 8005d20:	d106      	bne.n	8005d30 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005d22:	687b      	ldr	r3, [r7, #4]
 8005d24:	2200      	movs	r2, #0
 8005d26:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005d2a:	6878      	ldr	r0, [r7, #4]
 8005d2c:	f7fc fad8 	bl	80022e0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005d30:	687b      	ldr	r3, [r7, #4]
 8005d32:	2224      	movs	r2, #36	@ 0x24
 8005d34:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8005d38:	687b      	ldr	r3, [r7, #4]
 8005d3a:	681b      	ldr	r3, [r3, #0]
 8005d3c:	68da      	ldr	r2, [r3, #12]
 8005d3e:	687b      	ldr	r3, [r7, #4]
 8005d40:	681b      	ldr	r3, [r3, #0]
 8005d42:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8005d46:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8005d48:	6878      	ldr	r0, [r7, #4]
 8005d4a:	f000 f82b 	bl	8005da4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005d4e:	687b      	ldr	r3, [r7, #4]
 8005d50:	681b      	ldr	r3, [r3, #0]
 8005d52:	691a      	ldr	r2, [r3, #16]
 8005d54:	687b      	ldr	r3, [r7, #4]
 8005d56:	681b      	ldr	r3, [r3, #0]
 8005d58:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8005d5c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005d5e:	687b      	ldr	r3, [r7, #4]
 8005d60:	681b      	ldr	r3, [r3, #0]
 8005d62:	695a      	ldr	r2, [r3, #20]
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	681b      	ldr	r3, [r3, #0]
 8005d68:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8005d6c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8005d6e:	687b      	ldr	r3, [r7, #4]
 8005d70:	681b      	ldr	r3, [r3, #0]
 8005d72:	68da      	ldr	r2, [r3, #12]
 8005d74:	687b      	ldr	r3, [r7, #4]
 8005d76:	681b      	ldr	r3, [r3, #0]
 8005d78:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8005d7c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005d7e:	687b      	ldr	r3, [r7, #4]
 8005d80:	2200      	movs	r2, #0
 8005d82:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8005d84:	687b      	ldr	r3, [r7, #4]
 8005d86:	2220      	movs	r2, #32
 8005d88:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8005d8c:	687b      	ldr	r3, [r7, #4]
 8005d8e:	2220      	movs	r2, #32
 8005d90:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005d94:	687b      	ldr	r3, [r7, #4]
 8005d96:	2200      	movs	r2, #0
 8005d98:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8005d9a:	2300      	movs	r3, #0
}
 8005d9c:	4618      	mov	r0, r3
 8005d9e:	3708      	adds	r7, #8
 8005da0:	46bd      	mov	sp, r7
 8005da2:	bd80      	pop	{r7, pc}

08005da4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005da4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005da8:	b0c0      	sub	sp, #256	@ 0x100
 8005daa:	af00      	add	r7, sp, #0
 8005dac:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005db0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005db4:	681b      	ldr	r3, [r3, #0]
 8005db6:	691b      	ldr	r3, [r3, #16]
 8005db8:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8005dbc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005dc0:	68d9      	ldr	r1, [r3, #12]
 8005dc2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005dc6:	681a      	ldr	r2, [r3, #0]
 8005dc8:	ea40 0301 	orr.w	r3, r0, r1
 8005dcc:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8005dce:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005dd2:	689a      	ldr	r2, [r3, #8]
 8005dd4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005dd8:	691b      	ldr	r3, [r3, #16]
 8005dda:	431a      	orrs	r2, r3
 8005ddc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005de0:	695b      	ldr	r3, [r3, #20]
 8005de2:	431a      	orrs	r2, r3
 8005de4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005de8:	69db      	ldr	r3, [r3, #28]
 8005dea:	4313      	orrs	r3, r2
 8005dec:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8005df0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005df4:	681b      	ldr	r3, [r3, #0]
 8005df6:	68db      	ldr	r3, [r3, #12]
 8005df8:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8005dfc:	f021 010c 	bic.w	r1, r1, #12
 8005e00:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005e04:	681a      	ldr	r2, [r3, #0]
 8005e06:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8005e0a:	430b      	orrs	r3, r1
 8005e0c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8005e0e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005e12:	681b      	ldr	r3, [r3, #0]
 8005e14:	695b      	ldr	r3, [r3, #20]
 8005e16:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8005e1a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005e1e:	6999      	ldr	r1, [r3, #24]
 8005e20:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005e24:	681a      	ldr	r2, [r3, #0]
 8005e26:	ea40 0301 	orr.w	r3, r0, r1
 8005e2a:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8005e2c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005e30:	681a      	ldr	r2, [r3, #0]
 8005e32:	4b8f      	ldr	r3, [pc, #572]	@ (8006070 <UART_SetConfig+0x2cc>)
 8005e34:	429a      	cmp	r2, r3
 8005e36:	d005      	beq.n	8005e44 <UART_SetConfig+0xa0>
 8005e38:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005e3c:	681a      	ldr	r2, [r3, #0]
 8005e3e:	4b8d      	ldr	r3, [pc, #564]	@ (8006074 <UART_SetConfig+0x2d0>)
 8005e40:	429a      	cmp	r2, r3
 8005e42:	d104      	bne.n	8005e4e <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8005e44:	f7fe fef2 	bl	8004c2c <HAL_RCC_GetPCLK2Freq>
 8005e48:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8005e4c:	e003      	b.n	8005e56 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8005e4e:	f7fe fed9 	bl	8004c04 <HAL_RCC_GetPCLK1Freq>
 8005e52:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005e56:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005e5a:	69db      	ldr	r3, [r3, #28]
 8005e5c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005e60:	f040 810c 	bne.w	800607c <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8005e64:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005e68:	2200      	movs	r2, #0
 8005e6a:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8005e6e:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8005e72:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8005e76:	4622      	mov	r2, r4
 8005e78:	462b      	mov	r3, r5
 8005e7a:	1891      	adds	r1, r2, r2
 8005e7c:	65b9      	str	r1, [r7, #88]	@ 0x58
 8005e7e:	415b      	adcs	r3, r3
 8005e80:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8005e82:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8005e86:	4621      	mov	r1, r4
 8005e88:	eb12 0801 	adds.w	r8, r2, r1
 8005e8c:	4629      	mov	r1, r5
 8005e8e:	eb43 0901 	adc.w	r9, r3, r1
 8005e92:	f04f 0200 	mov.w	r2, #0
 8005e96:	f04f 0300 	mov.w	r3, #0
 8005e9a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8005e9e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8005ea2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8005ea6:	4690      	mov	r8, r2
 8005ea8:	4699      	mov	r9, r3
 8005eaa:	4623      	mov	r3, r4
 8005eac:	eb18 0303 	adds.w	r3, r8, r3
 8005eb0:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8005eb4:	462b      	mov	r3, r5
 8005eb6:	eb49 0303 	adc.w	r3, r9, r3
 8005eba:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8005ebe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005ec2:	685b      	ldr	r3, [r3, #4]
 8005ec4:	2200      	movs	r2, #0
 8005ec6:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8005eca:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8005ece:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8005ed2:	460b      	mov	r3, r1
 8005ed4:	18db      	adds	r3, r3, r3
 8005ed6:	653b      	str	r3, [r7, #80]	@ 0x50
 8005ed8:	4613      	mov	r3, r2
 8005eda:	eb42 0303 	adc.w	r3, r2, r3
 8005ede:	657b      	str	r3, [r7, #84]	@ 0x54
 8005ee0:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8005ee4:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8005ee8:	f7fa f982 	bl	80001f0 <__aeabi_uldivmod>
 8005eec:	4602      	mov	r2, r0
 8005eee:	460b      	mov	r3, r1
 8005ef0:	4b61      	ldr	r3, [pc, #388]	@ (8006078 <UART_SetConfig+0x2d4>)
 8005ef2:	fba3 2302 	umull	r2, r3, r3, r2
 8005ef6:	095b      	lsrs	r3, r3, #5
 8005ef8:	011c      	lsls	r4, r3, #4
 8005efa:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005efe:	2200      	movs	r2, #0
 8005f00:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8005f04:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8005f08:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8005f0c:	4642      	mov	r2, r8
 8005f0e:	464b      	mov	r3, r9
 8005f10:	1891      	adds	r1, r2, r2
 8005f12:	64b9      	str	r1, [r7, #72]	@ 0x48
 8005f14:	415b      	adcs	r3, r3
 8005f16:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005f18:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8005f1c:	4641      	mov	r1, r8
 8005f1e:	eb12 0a01 	adds.w	sl, r2, r1
 8005f22:	4649      	mov	r1, r9
 8005f24:	eb43 0b01 	adc.w	fp, r3, r1
 8005f28:	f04f 0200 	mov.w	r2, #0
 8005f2c:	f04f 0300 	mov.w	r3, #0
 8005f30:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8005f34:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8005f38:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005f3c:	4692      	mov	sl, r2
 8005f3e:	469b      	mov	fp, r3
 8005f40:	4643      	mov	r3, r8
 8005f42:	eb1a 0303 	adds.w	r3, sl, r3
 8005f46:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8005f4a:	464b      	mov	r3, r9
 8005f4c:	eb4b 0303 	adc.w	r3, fp, r3
 8005f50:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8005f54:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005f58:	685b      	ldr	r3, [r3, #4]
 8005f5a:	2200      	movs	r2, #0
 8005f5c:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8005f60:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8005f64:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8005f68:	460b      	mov	r3, r1
 8005f6a:	18db      	adds	r3, r3, r3
 8005f6c:	643b      	str	r3, [r7, #64]	@ 0x40
 8005f6e:	4613      	mov	r3, r2
 8005f70:	eb42 0303 	adc.w	r3, r2, r3
 8005f74:	647b      	str	r3, [r7, #68]	@ 0x44
 8005f76:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8005f7a:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8005f7e:	f7fa f937 	bl	80001f0 <__aeabi_uldivmod>
 8005f82:	4602      	mov	r2, r0
 8005f84:	460b      	mov	r3, r1
 8005f86:	4611      	mov	r1, r2
 8005f88:	4b3b      	ldr	r3, [pc, #236]	@ (8006078 <UART_SetConfig+0x2d4>)
 8005f8a:	fba3 2301 	umull	r2, r3, r3, r1
 8005f8e:	095b      	lsrs	r3, r3, #5
 8005f90:	2264      	movs	r2, #100	@ 0x64
 8005f92:	fb02 f303 	mul.w	r3, r2, r3
 8005f96:	1acb      	subs	r3, r1, r3
 8005f98:	00db      	lsls	r3, r3, #3
 8005f9a:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8005f9e:	4b36      	ldr	r3, [pc, #216]	@ (8006078 <UART_SetConfig+0x2d4>)
 8005fa0:	fba3 2302 	umull	r2, r3, r3, r2
 8005fa4:	095b      	lsrs	r3, r3, #5
 8005fa6:	005b      	lsls	r3, r3, #1
 8005fa8:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8005fac:	441c      	add	r4, r3
 8005fae:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005fb2:	2200      	movs	r2, #0
 8005fb4:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8005fb8:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8005fbc:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8005fc0:	4642      	mov	r2, r8
 8005fc2:	464b      	mov	r3, r9
 8005fc4:	1891      	adds	r1, r2, r2
 8005fc6:	63b9      	str	r1, [r7, #56]	@ 0x38
 8005fc8:	415b      	adcs	r3, r3
 8005fca:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005fcc:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8005fd0:	4641      	mov	r1, r8
 8005fd2:	1851      	adds	r1, r2, r1
 8005fd4:	6339      	str	r1, [r7, #48]	@ 0x30
 8005fd6:	4649      	mov	r1, r9
 8005fd8:	414b      	adcs	r3, r1
 8005fda:	637b      	str	r3, [r7, #52]	@ 0x34
 8005fdc:	f04f 0200 	mov.w	r2, #0
 8005fe0:	f04f 0300 	mov.w	r3, #0
 8005fe4:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8005fe8:	4659      	mov	r1, fp
 8005fea:	00cb      	lsls	r3, r1, #3
 8005fec:	4651      	mov	r1, sl
 8005fee:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005ff2:	4651      	mov	r1, sl
 8005ff4:	00ca      	lsls	r2, r1, #3
 8005ff6:	4610      	mov	r0, r2
 8005ff8:	4619      	mov	r1, r3
 8005ffa:	4603      	mov	r3, r0
 8005ffc:	4642      	mov	r2, r8
 8005ffe:	189b      	adds	r3, r3, r2
 8006000:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8006004:	464b      	mov	r3, r9
 8006006:	460a      	mov	r2, r1
 8006008:	eb42 0303 	adc.w	r3, r2, r3
 800600c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8006010:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006014:	685b      	ldr	r3, [r3, #4]
 8006016:	2200      	movs	r2, #0
 8006018:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 800601c:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8006020:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8006024:	460b      	mov	r3, r1
 8006026:	18db      	adds	r3, r3, r3
 8006028:	62bb      	str	r3, [r7, #40]	@ 0x28
 800602a:	4613      	mov	r3, r2
 800602c:	eb42 0303 	adc.w	r3, r2, r3
 8006030:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8006032:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8006036:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 800603a:	f7fa f8d9 	bl	80001f0 <__aeabi_uldivmod>
 800603e:	4602      	mov	r2, r0
 8006040:	460b      	mov	r3, r1
 8006042:	4b0d      	ldr	r3, [pc, #52]	@ (8006078 <UART_SetConfig+0x2d4>)
 8006044:	fba3 1302 	umull	r1, r3, r3, r2
 8006048:	095b      	lsrs	r3, r3, #5
 800604a:	2164      	movs	r1, #100	@ 0x64
 800604c:	fb01 f303 	mul.w	r3, r1, r3
 8006050:	1ad3      	subs	r3, r2, r3
 8006052:	00db      	lsls	r3, r3, #3
 8006054:	3332      	adds	r3, #50	@ 0x32
 8006056:	4a08      	ldr	r2, [pc, #32]	@ (8006078 <UART_SetConfig+0x2d4>)
 8006058:	fba2 2303 	umull	r2, r3, r2, r3
 800605c:	095b      	lsrs	r3, r3, #5
 800605e:	f003 0207 	and.w	r2, r3, #7
 8006062:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006066:	681b      	ldr	r3, [r3, #0]
 8006068:	4422      	add	r2, r4
 800606a:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800606c:	e106      	b.n	800627c <UART_SetConfig+0x4d8>
 800606e:	bf00      	nop
 8006070:	40011000 	.word	0x40011000
 8006074:	40011400 	.word	0x40011400
 8006078:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800607c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006080:	2200      	movs	r2, #0
 8006082:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8006086:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 800608a:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 800608e:	4642      	mov	r2, r8
 8006090:	464b      	mov	r3, r9
 8006092:	1891      	adds	r1, r2, r2
 8006094:	6239      	str	r1, [r7, #32]
 8006096:	415b      	adcs	r3, r3
 8006098:	627b      	str	r3, [r7, #36]	@ 0x24
 800609a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800609e:	4641      	mov	r1, r8
 80060a0:	1854      	adds	r4, r2, r1
 80060a2:	4649      	mov	r1, r9
 80060a4:	eb43 0501 	adc.w	r5, r3, r1
 80060a8:	f04f 0200 	mov.w	r2, #0
 80060ac:	f04f 0300 	mov.w	r3, #0
 80060b0:	00eb      	lsls	r3, r5, #3
 80060b2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80060b6:	00e2      	lsls	r2, r4, #3
 80060b8:	4614      	mov	r4, r2
 80060ba:	461d      	mov	r5, r3
 80060bc:	4643      	mov	r3, r8
 80060be:	18e3      	adds	r3, r4, r3
 80060c0:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80060c4:	464b      	mov	r3, r9
 80060c6:	eb45 0303 	adc.w	r3, r5, r3
 80060ca:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 80060ce:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80060d2:	685b      	ldr	r3, [r3, #4]
 80060d4:	2200      	movs	r2, #0
 80060d6:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80060da:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 80060de:	f04f 0200 	mov.w	r2, #0
 80060e2:	f04f 0300 	mov.w	r3, #0
 80060e6:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 80060ea:	4629      	mov	r1, r5
 80060ec:	008b      	lsls	r3, r1, #2
 80060ee:	4621      	mov	r1, r4
 80060f0:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80060f4:	4621      	mov	r1, r4
 80060f6:	008a      	lsls	r2, r1, #2
 80060f8:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 80060fc:	f7fa f878 	bl	80001f0 <__aeabi_uldivmod>
 8006100:	4602      	mov	r2, r0
 8006102:	460b      	mov	r3, r1
 8006104:	4b60      	ldr	r3, [pc, #384]	@ (8006288 <UART_SetConfig+0x4e4>)
 8006106:	fba3 2302 	umull	r2, r3, r3, r2
 800610a:	095b      	lsrs	r3, r3, #5
 800610c:	011c      	lsls	r4, r3, #4
 800610e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006112:	2200      	movs	r2, #0
 8006114:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8006118:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 800611c:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8006120:	4642      	mov	r2, r8
 8006122:	464b      	mov	r3, r9
 8006124:	1891      	adds	r1, r2, r2
 8006126:	61b9      	str	r1, [r7, #24]
 8006128:	415b      	adcs	r3, r3
 800612a:	61fb      	str	r3, [r7, #28]
 800612c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8006130:	4641      	mov	r1, r8
 8006132:	1851      	adds	r1, r2, r1
 8006134:	6139      	str	r1, [r7, #16]
 8006136:	4649      	mov	r1, r9
 8006138:	414b      	adcs	r3, r1
 800613a:	617b      	str	r3, [r7, #20]
 800613c:	f04f 0200 	mov.w	r2, #0
 8006140:	f04f 0300 	mov.w	r3, #0
 8006144:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8006148:	4659      	mov	r1, fp
 800614a:	00cb      	lsls	r3, r1, #3
 800614c:	4651      	mov	r1, sl
 800614e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006152:	4651      	mov	r1, sl
 8006154:	00ca      	lsls	r2, r1, #3
 8006156:	4610      	mov	r0, r2
 8006158:	4619      	mov	r1, r3
 800615a:	4603      	mov	r3, r0
 800615c:	4642      	mov	r2, r8
 800615e:	189b      	adds	r3, r3, r2
 8006160:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8006164:	464b      	mov	r3, r9
 8006166:	460a      	mov	r2, r1
 8006168:	eb42 0303 	adc.w	r3, r2, r3
 800616c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8006170:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006174:	685b      	ldr	r3, [r3, #4]
 8006176:	2200      	movs	r2, #0
 8006178:	67bb      	str	r3, [r7, #120]	@ 0x78
 800617a:	67fa      	str	r2, [r7, #124]	@ 0x7c
 800617c:	f04f 0200 	mov.w	r2, #0
 8006180:	f04f 0300 	mov.w	r3, #0
 8006184:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8006188:	4649      	mov	r1, r9
 800618a:	008b      	lsls	r3, r1, #2
 800618c:	4641      	mov	r1, r8
 800618e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006192:	4641      	mov	r1, r8
 8006194:	008a      	lsls	r2, r1, #2
 8006196:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 800619a:	f7fa f829 	bl	80001f0 <__aeabi_uldivmod>
 800619e:	4602      	mov	r2, r0
 80061a0:	460b      	mov	r3, r1
 80061a2:	4611      	mov	r1, r2
 80061a4:	4b38      	ldr	r3, [pc, #224]	@ (8006288 <UART_SetConfig+0x4e4>)
 80061a6:	fba3 2301 	umull	r2, r3, r3, r1
 80061aa:	095b      	lsrs	r3, r3, #5
 80061ac:	2264      	movs	r2, #100	@ 0x64
 80061ae:	fb02 f303 	mul.w	r3, r2, r3
 80061b2:	1acb      	subs	r3, r1, r3
 80061b4:	011b      	lsls	r3, r3, #4
 80061b6:	3332      	adds	r3, #50	@ 0x32
 80061b8:	4a33      	ldr	r2, [pc, #204]	@ (8006288 <UART_SetConfig+0x4e4>)
 80061ba:	fba2 2303 	umull	r2, r3, r2, r3
 80061be:	095b      	lsrs	r3, r3, #5
 80061c0:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80061c4:	441c      	add	r4, r3
 80061c6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80061ca:	2200      	movs	r2, #0
 80061cc:	673b      	str	r3, [r7, #112]	@ 0x70
 80061ce:	677a      	str	r2, [r7, #116]	@ 0x74
 80061d0:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 80061d4:	4642      	mov	r2, r8
 80061d6:	464b      	mov	r3, r9
 80061d8:	1891      	adds	r1, r2, r2
 80061da:	60b9      	str	r1, [r7, #8]
 80061dc:	415b      	adcs	r3, r3
 80061de:	60fb      	str	r3, [r7, #12]
 80061e0:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80061e4:	4641      	mov	r1, r8
 80061e6:	1851      	adds	r1, r2, r1
 80061e8:	6039      	str	r1, [r7, #0]
 80061ea:	4649      	mov	r1, r9
 80061ec:	414b      	adcs	r3, r1
 80061ee:	607b      	str	r3, [r7, #4]
 80061f0:	f04f 0200 	mov.w	r2, #0
 80061f4:	f04f 0300 	mov.w	r3, #0
 80061f8:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80061fc:	4659      	mov	r1, fp
 80061fe:	00cb      	lsls	r3, r1, #3
 8006200:	4651      	mov	r1, sl
 8006202:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006206:	4651      	mov	r1, sl
 8006208:	00ca      	lsls	r2, r1, #3
 800620a:	4610      	mov	r0, r2
 800620c:	4619      	mov	r1, r3
 800620e:	4603      	mov	r3, r0
 8006210:	4642      	mov	r2, r8
 8006212:	189b      	adds	r3, r3, r2
 8006214:	66bb      	str	r3, [r7, #104]	@ 0x68
 8006216:	464b      	mov	r3, r9
 8006218:	460a      	mov	r2, r1
 800621a:	eb42 0303 	adc.w	r3, r2, r3
 800621e:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8006220:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006224:	685b      	ldr	r3, [r3, #4]
 8006226:	2200      	movs	r2, #0
 8006228:	663b      	str	r3, [r7, #96]	@ 0x60
 800622a:	667a      	str	r2, [r7, #100]	@ 0x64
 800622c:	f04f 0200 	mov.w	r2, #0
 8006230:	f04f 0300 	mov.w	r3, #0
 8006234:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8006238:	4649      	mov	r1, r9
 800623a:	008b      	lsls	r3, r1, #2
 800623c:	4641      	mov	r1, r8
 800623e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006242:	4641      	mov	r1, r8
 8006244:	008a      	lsls	r2, r1, #2
 8006246:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 800624a:	f7f9 ffd1 	bl	80001f0 <__aeabi_uldivmod>
 800624e:	4602      	mov	r2, r0
 8006250:	460b      	mov	r3, r1
 8006252:	4b0d      	ldr	r3, [pc, #52]	@ (8006288 <UART_SetConfig+0x4e4>)
 8006254:	fba3 1302 	umull	r1, r3, r3, r2
 8006258:	095b      	lsrs	r3, r3, #5
 800625a:	2164      	movs	r1, #100	@ 0x64
 800625c:	fb01 f303 	mul.w	r3, r1, r3
 8006260:	1ad3      	subs	r3, r2, r3
 8006262:	011b      	lsls	r3, r3, #4
 8006264:	3332      	adds	r3, #50	@ 0x32
 8006266:	4a08      	ldr	r2, [pc, #32]	@ (8006288 <UART_SetConfig+0x4e4>)
 8006268:	fba2 2303 	umull	r2, r3, r2, r3
 800626c:	095b      	lsrs	r3, r3, #5
 800626e:	f003 020f 	and.w	r2, r3, #15
 8006272:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006276:	681b      	ldr	r3, [r3, #0]
 8006278:	4422      	add	r2, r4
 800627a:	609a      	str	r2, [r3, #8]
}
 800627c:	bf00      	nop
 800627e:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8006282:	46bd      	mov	sp, r7
 8006284:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006288:	51eb851f 	.word	0x51eb851f

0800628c <FMC_SDRAM_Init>:
  * @param  Device Pointer to SDRAM device instance
  * @param  Init Pointer to SDRAM Initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_InitTypeDef *Init)
{
 800628c:	b480      	push	{r7}
 800628e:	b083      	sub	sp, #12
 8006290:	af00      	add	r7, sp, #0
 8006292:	6078      	str	r0, [r7, #4]
 8006294:	6039      	str	r1, [r7, #0]
  assert_param(IS_FMC_SDCLOCK_PERIOD(Init->SDClockPeriod));
  assert_param(IS_FMC_READ_BURST(Init->ReadBurst));
  assert_param(IS_FMC_READPIPE_DELAY(Init->ReadPipeDelay));

  /* Set SDRAM bank configuration parameters */
  if (Init->SDBank == FMC_SDRAM_BANK1)
 8006296:	683b      	ldr	r3, [r7, #0]
 8006298:	681b      	ldr	r3, [r3, #0]
 800629a:	2b00      	cmp	r3, #0
 800629c:	d123      	bne.n	80062e6 <FMC_SDRAM_Init+0x5a>
  {
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 800629e:	687b      	ldr	r3, [r7, #4]
 80062a0:	681b      	ldr	r3, [r3, #0]
 80062a2:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 80062a6:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 80062aa:	683a      	ldr	r2, [r7, #0]
 80062ac:	6851      	ldr	r1, [r2, #4]
 80062ae:	683a      	ldr	r2, [r7, #0]
 80062b0:	6892      	ldr	r2, [r2, #8]
 80062b2:	4311      	orrs	r1, r2
 80062b4:	683a      	ldr	r2, [r7, #0]
 80062b6:	68d2      	ldr	r2, [r2, #12]
 80062b8:	4311      	orrs	r1, r2
 80062ba:	683a      	ldr	r2, [r7, #0]
 80062bc:	6912      	ldr	r2, [r2, #16]
 80062be:	4311      	orrs	r1, r2
 80062c0:	683a      	ldr	r2, [r7, #0]
 80062c2:	6952      	ldr	r2, [r2, #20]
 80062c4:	4311      	orrs	r1, r2
 80062c6:	683a      	ldr	r2, [r7, #0]
 80062c8:	6992      	ldr	r2, [r2, #24]
 80062ca:	4311      	orrs	r1, r2
 80062cc:	683a      	ldr	r2, [r7, #0]
 80062ce:	69d2      	ldr	r2, [r2, #28]
 80062d0:	4311      	orrs	r1, r2
 80062d2:	683a      	ldr	r2, [r7, #0]
 80062d4:	6a12      	ldr	r2, [r2, #32]
 80062d6:	4311      	orrs	r1, r2
 80062d8:	683a      	ldr	r2, [r7, #0]
 80062da:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80062dc:	430a      	orrs	r2, r1
 80062de:	431a      	orrs	r2, r3
 80062e0:	687b      	ldr	r3, [r7, #4]
 80062e2:	601a      	str	r2, [r3, #0]
 80062e4:	e028      	b.n	8006338 <FMC_SDRAM_Init+0xac>
                Init->ReadBurst          |
                Init->ReadPipeDelay));
  }
  else /* FMC_Bank2_SDRAM */
  {
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 80062e6:	687b      	ldr	r3, [r7, #4]
 80062e8:	681b      	ldr	r3, [r3, #0]
 80062ea:	f423 42f8 	bic.w	r2, r3, #31744	@ 0x7c00
 80062ee:	683b      	ldr	r3, [r7, #0]
 80062f0:	69d9      	ldr	r1, [r3, #28]
 80062f2:	683b      	ldr	r3, [r7, #0]
 80062f4:	6a1b      	ldr	r3, [r3, #32]
 80062f6:	4319      	orrs	r1, r3
 80062f8:	683b      	ldr	r3, [r7, #0]
 80062fa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80062fc:	430b      	orrs	r3, r1
 80062fe:	431a      	orrs	r2, r3
 8006300:	687b      	ldr	r3, [r7, #4]
 8006302:	601a      	str	r2, [r3, #0]
               FMC_SDCR1_RPIPE,
               (Init->SDClockPeriod      |
                Init->ReadBurst          |
                Init->ReadPipeDelay));

    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK2],
 8006304:	687b      	ldr	r3, [r7, #4]
 8006306:	685b      	ldr	r3, [r3, #4]
 8006308:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 800630c:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 8006310:	683a      	ldr	r2, [r7, #0]
 8006312:	6851      	ldr	r1, [r2, #4]
 8006314:	683a      	ldr	r2, [r7, #0]
 8006316:	6892      	ldr	r2, [r2, #8]
 8006318:	4311      	orrs	r1, r2
 800631a:	683a      	ldr	r2, [r7, #0]
 800631c:	68d2      	ldr	r2, [r2, #12]
 800631e:	4311      	orrs	r1, r2
 8006320:	683a      	ldr	r2, [r7, #0]
 8006322:	6912      	ldr	r2, [r2, #16]
 8006324:	4311      	orrs	r1, r2
 8006326:	683a      	ldr	r2, [r7, #0]
 8006328:	6952      	ldr	r2, [r2, #20]
 800632a:	4311      	orrs	r1, r2
 800632c:	683a      	ldr	r2, [r7, #0]
 800632e:	6992      	ldr	r2, [r2, #24]
 8006330:	430a      	orrs	r2, r1
 8006332:	431a      	orrs	r2, r3
 8006334:	687b      	ldr	r3, [r7, #4]
 8006336:	605a      	str	r2, [r3, #4]
                Init->InternalBankNumber |
                Init->CASLatency         |
                Init->WriteProtection));
  }

  return HAL_OK;
 8006338:	2300      	movs	r3, #0
}
 800633a:	4618      	mov	r0, r3
 800633c:	370c      	adds	r7, #12
 800633e:	46bd      	mov	sp, r7
 8006340:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006344:	4770      	bx	lr

08006346 <FMC_SDRAM_Timing_Init>:
  * @param  Bank SDRAM bank number
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Timing_Init(FMC_SDRAM_TypeDef *Device,
                                        FMC_SDRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 8006346:	b480      	push	{r7}
 8006348:	b085      	sub	sp, #20
 800634a:	af00      	add	r7, sp, #0
 800634c:	60f8      	str	r0, [r7, #12]
 800634e:	60b9      	str	r1, [r7, #8]
 8006350:	607a      	str	r2, [r7, #4]
  assert_param(IS_FMC_RP_DELAY(Timing->RPDelay));
  assert_param(IS_FMC_RCD_DELAY(Timing->RCDDelay));
  assert_param(IS_FMC_SDRAM_BANK(Bank));

  /* Set SDRAM device timing parameters */
  if (Bank == FMC_SDRAM_BANK1)
 8006352:	687b      	ldr	r3, [r7, #4]
 8006354:	2b00      	cmp	r3, #0
 8006356:	d128      	bne.n	80063aa <FMC_SDRAM_Timing_Init+0x64>
  {
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 8006358:	68fb      	ldr	r3, [r7, #12]
 800635a:	689b      	ldr	r3, [r3, #8]
 800635c:	f003 4270 	and.w	r2, r3, #4026531840	@ 0xf0000000
 8006360:	68bb      	ldr	r3, [r7, #8]
 8006362:	681b      	ldr	r3, [r3, #0]
 8006364:	1e59      	subs	r1, r3, #1
 8006366:	68bb      	ldr	r3, [r7, #8]
 8006368:	685b      	ldr	r3, [r3, #4]
 800636a:	3b01      	subs	r3, #1
 800636c:	011b      	lsls	r3, r3, #4
 800636e:	4319      	orrs	r1, r3
 8006370:	68bb      	ldr	r3, [r7, #8]
 8006372:	689b      	ldr	r3, [r3, #8]
 8006374:	3b01      	subs	r3, #1
 8006376:	021b      	lsls	r3, r3, #8
 8006378:	4319      	orrs	r1, r3
 800637a:	68bb      	ldr	r3, [r7, #8]
 800637c:	68db      	ldr	r3, [r3, #12]
 800637e:	3b01      	subs	r3, #1
 8006380:	031b      	lsls	r3, r3, #12
 8006382:	4319      	orrs	r1, r3
 8006384:	68bb      	ldr	r3, [r7, #8]
 8006386:	691b      	ldr	r3, [r3, #16]
 8006388:	3b01      	subs	r3, #1
 800638a:	041b      	lsls	r3, r3, #16
 800638c:	4319      	orrs	r1, r3
 800638e:	68bb      	ldr	r3, [r7, #8]
 8006390:	695b      	ldr	r3, [r3, #20]
 8006392:	3b01      	subs	r3, #1
 8006394:	051b      	lsls	r3, r3, #20
 8006396:	4319      	orrs	r1, r3
 8006398:	68bb      	ldr	r3, [r7, #8]
 800639a:	699b      	ldr	r3, [r3, #24]
 800639c:	3b01      	subs	r3, #1
 800639e:	061b      	lsls	r3, r3, #24
 80063a0:	430b      	orrs	r3, r1
 80063a2:	431a      	orrs	r2, r3
 80063a4:	68fb      	ldr	r3, [r7, #12]
 80063a6:	609a      	str	r2, [r3, #8]
 80063a8:	e02f      	b.n	800640a <FMC_SDRAM_Timing_Init+0xc4>
                (((Timing->RPDelay) - 1U)              << FMC_SDTR1_TRP_Pos)  |
                (((Timing->RCDDelay) - 1U)             << FMC_SDTR1_TRCD_Pos)));
  }
  else /* FMC_Bank2_SDRAM */
  {
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 80063aa:	68fb      	ldr	r3, [r7, #12]
 80063ac:	689b      	ldr	r3, [r3, #8]
 80063ae:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 80063b2:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80063b6:	68ba      	ldr	r2, [r7, #8]
 80063b8:	68d2      	ldr	r2, [r2, #12]
 80063ba:	3a01      	subs	r2, #1
 80063bc:	0311      	lsls	r1, r2, #12
 80063be:	68ba      	ldr	r2, [r7, #8]
 80063c0:	6952      	ldr	r2, [r2, #20]
 80063c2:	3a01      	subs	r2, #1
 80063c4:	0512      	lsls	r2, r2, #20
 80063c6:	430a      	orrs	r2, r1
 80063c8:	431a      	orrs	r2, r3
 80063ca:	68fb      	ldr	r3, [r7, #12]
 80063cc:	609a      	str	r2, [r3, #8]
               FMC_SDTR1_TRC |
               FMC_SDTR1_TRP,
               (((Timing->RowCycleDelay) - 1U)         << FMC_SDTR1_TRC_Pos)  |
               (((Timing->RPDelay) - 1U)               << FMC_SDTR1_TRP_Pos));

    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK2],
 80063ce:	68fb      	ldr	r3, [r7, #12]
 80063d0:	68db      	ldr	r3, [r3, #12]
 80063d2:	f003 4270 	and.w	r2, r3, #4026531840	@ 0xf0000000
 80063d6:	68bb      	ldr	r3, [r7, #8]
 80063d8:	681b      	ldr	r3, [r3, #0]
 80063da:	1e59      	subs	r1, r3, #1
 80063dc:	68bb      	ldr	r3, [r7, #8]
 80063de:	685b      	ldr	r3, [r3, #4]
 80063e0:	3b01      	subs	r3, #1
 80063e2:	011b      	lsls	r3, r3, #4
 80063e4:	4319      	orrs	r1, r3
 80063e6:	68bb      	ldr	r3, [r7, #8]
 80063e8:	689b      	ldr	r3, [r3, #8]
 80063ea:	3b01      	subs	r3, #1
 80063ec:	021b      	lsls	r3, r3, #8
 80063ee:	4319      	orrs	r1, r3
 80063f0:	68bb      	ldr	r3, [r7, #8]
 80063f2:	691b      	ldr	r3, [r3, #16]
 80063f4:	3b01      	subs	r3, #1
 80063f6:	041b      	lsls	r3, r3, #16
 80063f8:	4319      	orrs	r1, r3
 80063fa:	68bb      	ldr	r3, [r7, #8]
 80063fc:	699b      	ldr	r3, [r3, #24]
 80063fe:	3b01      	subs	r3, #1
 8006400:	061b      	lsls	r3, r3, #24
 8006402:	430b      	orrs	r3, r1
 8006404:	431a      	orrs	r2, r3
 8006406:	68fb      	ldr	r3, [r7, #12]
 8006408:	60da      	str	r2, [r3, #12]
                (((Timing->SelfRefreshTime) - 1U)      << FMC_SDTR1_TRAS_Pos) |
                (((Timing->WriteRecoveryTime) - 1U)    << FMC_SDTR1_TWR_Pos)  |
                (((Timing->RCDDelay) - 1U)             << FMC_SDTR1_TRCD_Pos)));
  }

  return HAL_OK;
 800640a:	2300      	movs	r3, #0
}
 800640c:	4618      	mov	r0, r3
 800640e:	3714      	adds	r7, #20
 8006410:	46bd      	mov	sp, r7
 8006412:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006416:	4770      	bx	lr

08006418 <FMC_SDRAM_SendCommand>:
  * @param  Timeout Timeout wait value
  * @retval HAL state
  */
HAL_StatusTypeDef FMC_SDRAM_SendCommand(FMC_SDRAM_TypeDef *Device,
                                        FMC_SDRAM_CommandTypeDef *Command, uint32_t Timeout)
{
 8006418:	b580      	push	{r7, lr}
 800641a:	b086      	sub	sp, #24
 800641c:	af00      	add	r7, sp, #0
 800641e:	60f8      	str	r0, [r7, #12]
 8006420:	60b9      	str	r1, [r7, #8]
 8006422:	607a      	str	r2, [r7, #4]
  uint32_t tickstart = 0U;
 8006424:	2300      	movs	r3, #0
 8006426:	617b      	str	r3, [r7, #20]
  assert_param(IS_FMC_COMMAND_TARGET(Command->CommandTarget));
  assert_param(IS_FMC_AUTOREFRESH_NUMBER(Command->AutoRefreshNumber));
  assert_param(IS_FMC_MODE_REGISTER(Command->ModeRegisterDefinition));

  /* Set command register */
  MODIFY_REG(Device->SDCMR, (FMC_SDCMR_MODE | FMC_SDCMR_CTB2 | FMC_SDCMR_CTB1 | FMC_SDCMR_NRFS | FMC_SDCMR_MRD),
 8006428:	68fb      	ldr	r3, [r7, #12]
 800642a:	691b      	ldr	r3, [r3, #16]
 800642c:	0d9b      	lsrs	r3, r3, #22
 800642e:	059b      	lsls	r3, r3, #22
 8006430:	68ba      	ldr	r2, [r7, #8]
 8006432:	6811      	ldr	r1, [r2, #0]
 8006434:	68ba      	ldr	r2, [r7, #8]
 8006436:	6852      	ldr	r2, [r2, #4]
 8006438:	4311      	orrs	r1, r2
 800643a:	68ba      	ldr	r2, [r7, #8]
 800643c:	6892      	ldr	r2, [r2, #8]
 800643e:	3a01      	subs	r2, #1
 8006440:	0152      	lsls	r2, r2, #5
 8006442:	4311      	orrs	r1, r2
 8006444:	68ba      	ldr	r2, [r7, #8]
 8006446:	68d2      	ldr	r2, [r2, #12]
 8006448:	0252      	lsls	r2, r2, #9
 800644a:	430a      	orrs	r2, r1
 800644c:	431a      	orrs	r2, r3
 800644e:	68fb      	ldr	r3, [r7, #12]
 8006450:	611a      	str	r2, [r3, #16]
             ((Command->CommandMode) | (Command->CommandTarget) |
              (((Command->AutoRefreshNumber) - 1U) << FMC_SDCMR_NRFS_Pos) |
              ((Command->ModeRegisterDefinition) << FMC_SDCMR_MRD_Pos)));
  /* Get tick */
  tickstart = HAL_GetTick();
 8006452:	f7fc f8fd 	bl	8002650 <HAL_GetTick>
 8006456:	6178      	str	r0, [r7, #20]

  /* wait until command is send */
  while (HAL_IS_BIT_SET(Device->SDSR, FMC_SDSR_BUSY))
 8006458:	e010      	b.n	800647c <FMC_SDRAM_SendCommand+0x64>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800645a:	687b      	ldr	r3, [r7, #4]
 800645c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006460:	d00c      	beq.n	800647c <FMC_SDRAM_SendCommand+0x64>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 8006462:	687b      	ldr	r3, [r7, #4]
 8006464:	2b00      	cmp	r3, #0
 8006466:	d007      	beq.n	8006478 <FMC_SDRAM_SendCommand+0x60>
 8006468:	f7fc f8f2 	bl	8002650 <HAL_GetTick>
 800646c:	4602      	mov	r2, r0
 800646e:	697b      	ldr	r3, [r7, #20]
 8006470:	1ad3      	subs	r3, r2, r3
 8006472:	687a      	ldr	r2, [r7, #4]
 8006474:	429a      	cmp	r2, r3
 8006476:	d201      	bcs.n	800647c <FMC_SDRAM_SendCommand+0x64>
      {
        return HAL_TIMEOUT;
 8006478:	2303      	movs	r3, #3
 800647a:	e006      	b.n	800648a <FMC_SDRAM_SendCommand+0x72>
  while (HAL_IS_BIT_SET(Device->SDSR, FMC_SDSR_BUSY))
 800647c:	68fb      	ldr	r3, [r7, #12]
 800647e:	699b      	ldr	r3, [r3, #24]
 8006480:	f003 0320 	and.w	r3, r3, #32
 8006484:	2b20      	cmp	r3, #32
 8006486:	d0e8      	beq.n	800645a <FMC_SDRAM_SendCommand+0x42>
      }
    }
  }
  return HAL_OK;
 8006488:	2300      	movs	r3, #0
}
 800648a:	4618      	mov	r0, r3
 800648c:	3718      	adds	r7, #24
 800648e:	46bd      	mov	sp, r7
 8006490:	bd80      	pop	{r7, pc}

08006492 <FMC_SDRAM_ProgramRefreshRate>:
  * @param  Device Pointer to SDRAM device instance
  * @param  RefreshRate The SDRAM refresh rate value.
  * @retval HAL state
  */
HAL_StatusTypeDef FMC_SDRAM_ProgramRefreshRate(FMC_SDRAM_TypeDef *Device, uint32_t RefreshRate)
{
 8006492:	b480      	push	{r7}
 8006494:	b083      	sub	sp, #12
 8006496:	af00      	add	r7, sp, #0
 8006498:	6078      	str	r0, [r7, #4]
 800649a:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FMC_SDRAM_DEVICE(Device));
  assert_param(IS_FMC_REFRESH_RATE(RefreshRate));

  /* Set the refresh rate in command register */
  MODIFY_REG(Device->SDRTR, FMC_SDRTR_COUNT, (RefreshRate << FMC_SDRTR_COUNT_Pos));
 800649c:	687b      	ldr	r3, [r7, #4]
 800649e:	695b      	ldr	r3, [r3, #20]
 80064a0:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 80064a4:	f023 033e 	bic.w	r3, r3, #62	@ 0x3e
 80064a8:	683a      	ldr	r2, [r7, #0]
 80064aa:	0052      	lsls	r2, r2, #1
 80064ac:	431a      	orrs	r2, r3
 80064ae:	687b      	ldr	r3, [r7, #4]
 80064b0:	615a      	str	r2, [r3, #20]

  return HAL_OK;
 80064b2:	2300      	movs	r3, #0
}
 80064b4:	4618      	mov	r0, r3
 80064b6:	370c      	adds	r7, #12
 80064b8:	46bd      	mov	sp, r7
 80064ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064be:	4770      	bx	lr

080064c0 <__NVIC_SetPriority>:
{
 80064c0:	b480      	push	{r7}
 80064c2:	b083      	sub	sp, #12
 80064c4:	af00      	add	r7, sp, #0
 80064c6:	4603      	mov	r3, r0
 80064c8:	6039      	str	r1, [r7, #0]
 80064ca:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80064cc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80064d0:	2b00      	cmp	r3, #0
 80064d2:	db0a      	blt.n	80064ea <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80064d4:	683b      	ldr	r3, [r7, #0]
 80064d6:	b2da      	uxtb	r2, r3
 80064d8:	490c      	ldr	r1, [pc, #48]	@ (800650c <__NVIC_SetPriority+0x4c>)
 80064da:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80064de:	0112      	lsls	r2, r2, #4
 80064e0:	b2d2      	uxtb	r2, r2
 80064e2:	440b      	add	r3, r1
 80064e4:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 80064e8:	e00a      	b.n	8006500 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80064ea:	683b      	ldr	r3, [r7, #0]
 80064ec:	b2da      	uxtb	r2, r3
 80064ee:	4908      	ldr	r1, [pc, #32]	@ (8006510 <__NVIC_SetPriority+0x50>)
 80064f0:	79fb      	ldrb	r3, [r7, #7]
 80064f2:	f003 030f 	and.w	r3, r3, #15
 80064f6:	3b04      	subs	r3, #4
 80064f8:	0112      	lsls	r2, r2, #4
 80064fa:	b2d2      	uxtb	r2, r2
 80064fc:	440b      	add	r3, r1
 80064fe:	761a      	strb	r2, [r3, #24]
}
 8006500:	bf00      	nop
 8006502:	370c      	adds	r7, #12
 8006504:	46bd      	mov	sp, r7
 8006506:	f85d 7b04 	ldr.w	r7, [sp], #4
 800650a:	4770      	bx	lr
 800650c:	e000e100 	.word	0xe000e100
 8006510:	e000ed00 	.word	0xe000ed00

08006514 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8006514:	b580      	push	{r7, lr}
 8006516:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8006518:	2100      	movs	r1, #0
 800651a:	f06f 0004 	mvn.w	r0, #4
 800651e:	f7ff ffcf 	bl	80064c0 <__NVIC_SetPriority>
#endif
}
 8006522:	bf00      	nop
 8006524:	bd80      	pop	{r7, pc}
	...

08006528 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8006528:	b480      	push	{r7}
 800652a:	b083      	sub	sp, #12
 800652c:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800652e:	f3ef 8305 	mrs	r3, IPSR
 8006532:	603b      	str	r3, [r7, #0]
  return(result);
 8006534:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8006536:	2b00      	cmp	r3, #0
 8006538:	d003      	beq.n	8006542 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 800653a:	f06f 0305 	mvn.w	r3, #5
 800653e:	607b      	str	r3, [r7, #4]
 8006540:	e00c      	b.n	800655c <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 8006542:	4b0a      	ldr	r3, [pc, #40]	@ (800656c <osKernelInitialize+0x44>)
 8006544:	681b      	ldr	r3, [r3, #0]
 8006546:	2b00      	cmp	r3, #0
 8006548:	d105      	bne.n	8006556 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 800654a:	4b08      	ldr	r3, [pc, #32]	@ (800656c <osKernelInitialize+0x44>)
 800654c:	2201      	movs	r2, #1
 800654e:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8006550:	2300      	movs	r3, #0
 8006552:	607b      	str	r3, [r7, #4]
 8006554:	e002      	b.n	800655c <osKernelInitialize+0x34>
    } else {
      stat = osError;
 8006556:	f04f 33ff 	mov.w	r3, #4294967295
 800655a:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800655c:	687b      	ldr	r3, [r7, #4]
}
 800655e:	4618      	mov	r0, r3
 8006560:	370c      	adds	r7, #12
 8006562:	46bd      	mov	sp, r7
 8006564:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006568:	4770      	bx	lr
 800656a:	bf00      	nop
 800656c:	2000053c 	.word	0x2000053c

08006570 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8006570:	b580      	push	{r7, lr}
 8006572:	b082      	sub	sp, #8
 8006574:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006576:	f3ef 8305 	mrs	r3, IPSR
 800657a:	603b      	str	r3, [r7, #0]
  return(result);
 800657c:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800657e:	2b00      	cmp	r3, #0
 8006580:	d003      	beq.n	800658a <osKernelStart+0x1a>
    stat = osErrorISR;
 8006582:	f06f 0305 	mvn.w	r3, #5
 8006586:	607b      	str	r3, [r7, #4]
 8006588:	e010      	b.n	80065ac <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 800658a:	4b0b      	ldr	r3, [pc, #44]	@ (80065b8 <osKernelStart+0x48>)
 800658c:	681b      	ldr	r3, [r3, #0]
 800658e:	2b01      	cmp	r3, #1
 8006590:	d109      	bne.n	80065a6 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8006592:	f7ff ffbf 	bl	8006514 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8006596:	4b08      	ldr	r3, [pc, #32]	@ (80065b8 <osKernelStart+0x48>)
 8006598:	2202      	movs	r2, #2
 800659a:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 800659c:	f001 f892 	bl	80076c4 <vTaskStartScheduler>
      stat = osOK;
 80065a0:	2300      	movs	r3, #0
 80065a2:	607b      	str	r3, [r7, #4]
 80065a4:	e002      	b.n	80065ac <osKernelStart+0x3c>
    } else {
      stat = osError;
 80065a6:	f04f 33ff 	mov.w	r3, #4294967295
 80065aa:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 80065ac:	687b      	ldr	r3, [r7, #4]
}
 80065ae:	4618      	mov	r0, r3
 80065b0:	3708      	adds	r7, #8
 80065b2:	46bd      	mov	sp, r7
 80065b4:	bd80      	pop	{r7, pc}
 80065b6:	bf00      	nop
 80065b8:	2000053c 	.word	0x2000053c

080065bc <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 80065bc:	b580      	push	{r7, lr}
 80065be:	b08e      	sub	sp, #56	@ 0x38
 80065c0:	af04      	add	r7, sp, #16
 80065c2:	60f8      	str	r0, [r7, #12]
 80065c4:	60b9      	str	r1, [r7, #8]
 80065c6:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 80065c8:	2300      	movs	r3, #0
 80065ca:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80065cc:	f3ef 8305 	mrs	r3, IPSR
 80065d0:	617b      	str	r3, [r7, #20]
  return(result);
 80065d2:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 80065d4:	2b00      	cmp	r3, #0
 80065d6:	d17e      	bne.n	80066d6 <osThreadNew+0x11a>
 80065d8:	68fb      	ldr	r3, [r7, #12]
 80065da:	2b00      	cmp	r3, #0
 80065dc:	d07b      	beq.n	80066d6 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 80065de:	2380      	movs	r3, #128	@ 0x80
 80065e0:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 80065e2:	2318      	movs	r3, #24
 80065e4:	61fb      	str	r3, [r7, #28]

    name = NULL;
 80065e6:	2300      	movs	r3, #0
 80065e8:	627b      	str	r3, [r7, #36]	@ 0x24
    mem  = -1;
 80065ea:	f04f 33ff 	mov.w	r3, #4294967295
 80065ee:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 80065f0:	687b      	ldr	r3, [r7, #4]
 80065f2:	2b00      	cmp	r3, #0
 80065f4:	d045      	beq.n	8006682 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 80065f6:	687b      	ldr	r3, [r7, #4]
 80065f8:	681b      	ldr	r3, [r3, #0]
 80065fa:	2b00      	cmp	r3, #0
 80065fc:	d002      	beq.n	8006604 <osThreadNew+0x48>
        name = attr->name;
 80065fe:	687b      	ldr	r3, [r7, #4]
 8006600:	681b      	ldr	r3, [r3, #0]
 8006602:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (attr->priority != osPriorityNone) {
 8006604:	687b      	ldr	r3, [r7, #4]
 8006606:	699b      	ldr	r3, [r3, #24]
 8006608:	2b00      	cmp	r3, #0
 800660a:	d002      	beq.n	8006612 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 800660c:	687b      	ldr	r3, [r7, #4]
 800660e:	699b      	ldr	r3, [r3, #24]
 8006610:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8006612:	69fb      	ldr	r3, [r7, #28]
 8006614:	2b00      	cmp	r3, #0
 8006616:	d008      	beq.n	800662a <osThreadNew+0x6e>
 8006618:	69fb      	ldr	r3, [r7, #28]
 800661a:	2b38      	cmp	r3, #56	@ 0x38
 800661c:	d805      	bhi.n	800662a <osThreadNew+0x6e>
 800661e:	687b      	ldr	r3, [r7, #4]
 8006620:	685b      	ldr	r3, [r3, #4]
 8006622:	f003 0301 	and.w	r3, r3, #1
 8006626:	2b00      	cmp	r3, #0
 8006628:	d001      	beq.n	800662e <osThreadNew+0x72>
        return (NULL);
 800662a:	2300      	movs	r3, #0
 800662c:	e054      	b.n	80066d8 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 800662e:	687b      	ldr	r3, [r7, #4]
 8006630:	695b      	ldr	r3, [r3, #20]
 8006632:	2b00      	cmp	r3, #0
 8006634:	d003      	beq.n	800663e <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8006636:	687b      	ldr	r3, [r7, #4]
 8006638:	695b      	ldr	r3, [r3, #20]
 800663a:	089b      	lsrs	r3, r3, #2
 800663c:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800663e:	687b      	ldr	r3, [r7, #4]
 8006640:	689b      	ldr	r3, [r3, #8]
 8006642:	2b00      	cmp	r3, #0
 8006644:	d00e      	beq.n	8006664 <osThreadNew+0xa8>
 8006646:	687b      	ldr	r3, [r7, #4]
 8006648:	68db      	ldr	r3, [r3, #12]
 800664a:	2ba7      	cmp	r3, #167	@ 0xa7
 800664c:	d90a      	bls.n	8006664 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800664e:	687b      	ldr	r3, [r7, #4]
 8006650:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8006652:	2b00      	cmp	r3, #0
 8006654:	d006      	beq.n	8006664 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8006656:	687b      	ldr	r3, [r7, #4]
 8006658:	695b      	ldr	r3, [r3, #20]
 800665a:	2b00      	cmp	r3, #0
 800665c:	d002      	beq.n	8006664 <osThreadNew+0xa8>
        mem = 1;
 800665e:	2301      	movs	r3, #1
 8006660:	61bb      	str	r3, [r7, #24]
 8006662:	e010      	b.n	8006686 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8006664:	687b      	ldr	r3, [r7, #4]
 8006666:	689b      	ldr	r3, [r3, #8]
 8006668:	2b00      	cmp	r3, #0
 800666a:	d10c      	bne.n	8006686 <osThreadNew+0xca>
 800666c:	687b      	ldr	r3, [r7, #4]
 800666e:	68db      	ldr	r3, [r3, #12]
 8006670:	2b00      	cmp	r3, #0
 8006672:	d108      	bne.n	8006686 <osThreadNew+0xca>
 8006674:	687b      	ldr	r3, [r7, #4]
 8006676:	691b      	ldr	r3, [r3, #16]
 8006678:	2b00      	cmp	r3, #0
 800667a:	d104      	bne.n	8006686 <osThreadNew+0xca>
          mem = 0;
 800667c:	2300      	movs	r3, #0
 800667e:	61bb      	str	r3, [r7, #24]
 8006680:	e001      	b.n	8006686 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 8006682:	2300      	movs	r3, #0
 8006684:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8006686:	69bb      	ldr	r3, [r7, #24]
 8006688:	2b01      	cmp	r3, #1
 800668a:	d110      	bne.n	80066ae <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800668c:	687b      	ldr	r3, [r7, #4]
 800668e:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8006690:	687a      	ldr	r2, [r7, #4]
 8006692:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8006694:	9202      	str	r2, [sp, #8]
 8006696:	9301      	str	r3, [sp, #4]
 8006698:	69fb      	ldr	r3, [r7, #28]
 800669a:	9300      	str	r3, [sp, #0]
 800669c:	68bb      	ldr	r3, [r7, #8]
 800669e:	6a3a      	ldr	r2, [r7, #32]
 80066a0:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80066a2:	68f8      	ldr	r0, [r7, #12]
 80066a4:	f000 fe1a 	bl	80072dc <xTaskCreateStatic>
 80066a8:	4603      	mov	r3, r0
 80066aa:	613b      	str	r3, [r7, #16]
 80066ac:	e013      	b.n	80066d6 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 80066ae:	69bb      	ldr	r3, [r7, #24]
 80066b0:	2b00      	cmp	r3, #0
 80066b2:	d110      	bne.n	80066d6 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 80066b4:	6a3b      	ldr	r3, [r7, #32]
 80066b6:	b29a      	uxth	r2, r3
 80066b8:	f107 0310 	add.w	r3, r7, #16
 80066bc:	9301      	str	r3, [sp, #4]
 80066be:	69fb      	ldr	r3, [r7, #28]
 80066c0:	9300      	str	r3, [sp, #0]
 80066c2:	68bb      	ldr	r3, [r7, #8]
 80066c4:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80066c6:	68f8      	ldr	r0, [r7, #12]
 80066c8:	f000 fe68 	bl	800739c <xTaskCreate>
 80066cc:	4603      	mov	r3, r0
 80066ce:	2b01      	cmp	r3, #1
 80066d0:	d001      	beq.n	80066d6 <osThreadNew+0x11a>
            hTask = NULL;
 80066d2:	2300      	movs	r3, #0
 80066d4:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 80066d6:	693b      	ldr	r3, [r7, #16]
}
 80066d8:	4618      	mov	r0, r3
 80066da:	3728      	adds	r7, #40	@ 0x28
 80066dc:	46bd      	mov	sp, r7
 80066de:	bd80      	pop	{r7, pc}

080066e0 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 80066e0:	b580      	push	{r7, lr}
 80066e2:	b084      	sub	sp, #16
 80066e4:	af00      	add	r7, sp, #0
 80066e6:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80066e8:	f3ef 8305 	mrs	r3, IPSR
 80066ec:	60bb      	str	r3, [r7, #8]
  return(result);
 80066ee:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 80066f0:	2b00      	cmp	r3, #0
 80066f2:	d003      	beq.n	80066fc <osDelay+0x1c>
    stat = osErrorISR;
 80066f4:	f06f 0305 	mvn.w	r3, #5
 80066f8:	60fb      	str	r3, [r7, #12]
 80066fa:	e007      	b.n	800670c <osDelay+0x2c>
  }
  else {
    stat = osOK;
 80066fc:	2300      	movs	r3, #0
 80066fe:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8006700:	687b      	ldr	r3, [r7, #4]
 8006702:	2b00      	cmp	r3, #0
 8006704:	d002      	beq.n	800670c <osDelay+0x2c>
      vTaskDelay(ticks);
 8006706:	6878      	ldr	r0, [r7, #4]
 8006708:	f000 ffa6 	bl	8007658 <vTaskDelay>
    }
  }

  return (stat);
 800670c:	68fb      	ldr	r3, [r7, #12]
}
 800670e:	4618      	mov	r0, r3
 8006710:	3710      	adds	r7, #16
 8006712:	46bd      	mov	sp, r7
 8006714:	bd80      	pop	{r7, pc}
	...

08006718 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8006718:	b480      	push	{r7}
 800671a:	b085      	sub	sp, #20
 800671c:	af00      	add	r7, sp, #0
 800671e:	60f8      	str	r0, [r7, #12]
 8006720:	60b9      	str	r1, [r7, #8]
 8006722:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8006724:	68fb      	ldr	r3, [r7, #12]
 8006726:	4a07      	ldr	r2, [pc, #28]	@ (8006744 <vApplicationGetIdleTaskMemory+0x2c>)
 8006728:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800672a:	68bb      	ldr	r3, [r7, #8]
 800672c:	4a06      	ldr	r2, [pc, #24]	@ (8006748 <vApplicationGetIdleTaskMemory+0x30>)
 800672e:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8006730:	687b      	ldr	r3, [r7, #4]
 8006732:	2280      	movs	r2, #128	@ 0x80
 8006734:	601a      	str	r2, [r3, #0]
}
 8006736:	bf00      	nop
 8006738:	3714      	adds	r7, #20
 800673a:	46bd      	mov	sp, r7
 800673c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006740:	4770      	bx	lr
 8006742:	bf00      	nop
 8006744:	20000540 	.word	0x20000540
 8006748:	200005e8 	.word	0x200005e8

0800674c <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 800674c:	b480      	push	{r7}
 800674e:	b085      	sub	sp, #20
 8006750:	af00      	add	r7, sp, #0
 8006752:	60f8      	str	r0, [r7, #12]
 8006754:	60b9      	str	r1, [r7, #8]
 8006756:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8006758:	68fb      	ldr	r3, [r7, #12]
 800675a:	4a07      	ldr	r2, [pc, #28]	@ (8006778 <vApplicationGetTimerTaskMemory+0x2c>)
 800675c:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800675e:	68bb      	ldr	r3, [r7, #8]
 8006760:	4a06      	ldr	r2, [pc, #24]	@ (800677c <vApplicationGetTimerTaskMemory+0x30>)
 8006762:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8006764:	687b      	ldr	r3, [r7, #4]
 8006766:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800676a:	601a      	str	r2, [r3, #0]
}
 800676c:	bf00      	nop
 800676e:	3714      	adds	r7, #20
 8006770:	46bd      	mov	sp, r7
 8006772:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006776:	4770      	bx	lr
 8006778:	200007e8 	.word	0x200007e8
 800677c:	20000890 	.word	0x20000890

08006780 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8006780:	b480      	push	{r7}
 8006782:	b083      	sub	sp, #12
 8006784:	af00      	add	r7, sp, #0
 8006786:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006788:	687b      	ldr	r3, [r7, #4]
 800678a:	f103 0208 	add.w	r2, r3, #8
 800678e:	687b      	ldr	r3, [r7, #4]
 8006790:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8006792:	687b      	ldr	r3, [r7, #4]
 8006794:	f04f 32ff 	mov.w	r2, #4294967295
 8006798:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800679a:	687b      	ldr	r3, [r7, #4]
 800679c:	f103 0208 	add.w	r2, r3, #8
 80067a0:	687b      	ldr	r3, [r7, #4]
 80067a2:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80067a4:	687b      	ldr	r3, [r7, #4]
 80067a6:	f103 0208 	add.w	r2, r3, #8
 80067aa:	687b      	ldr	r3, [r7, #4]
 80067ac:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80067ae:	687b      	ldr	r3, [r7, #4]
 80067b0:	2200      	movs	r2, #0
 80067b2:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80067b4:	bf00      	nop
 80067b6:	370c      	adds	r7, #12
 80067b8:	46bd      	mov	sp, r7
 80067ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067be:	4770      	bx	lr

080067c0 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80067c0:	b480      	push	{r7}
 80067c2:	b083      	sub	sp, #12
 80067c4:	af00      	add	r7, sp, #0
 80067c6:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 80067c8:	687b      	ldr	r3, [r7, #4]
 80067ca:	2200      	movs	r2, #0
 80067cc:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80067ce:	bf00      	nop
 80067d0:	370c      	adds	r7, #12
 80067d2:	46bd      	mov	sp, r7
 80067d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067d8:	4770      	bx	lr

080067da <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80067da:	b480      	push	{r7}
 80067dc:	b085      	sub	sp, #20
 80067de:	af00      	add	r7, sp, #0
 80067e0:	6078      	str	r0, [r7, #4]
 80067e2:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80067e4:	687b      	ldr	r3, [r7, #4]
 80067e6:	685b      	ldr	r3, [r3, #4]
 80067e8:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80067ea:	683b      	ldr	r3, [r7, #0]
 80067ec:	68fa      	ldr	r2, [r7, #12]
 80067ee:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80067f0:	68fb      	ldr	r3, [r7, #12]
 80067f2:	689a      	ldr	r2, [r3, #8]
 80067f4:	683b      	ldr	r3, [r7, #0]
 80067f6:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80067f8:	68fb      	ldr	r3, [r7, #12]
 80067fa:	689b      	ldr	r3, [r3, #8]
 80067fc:	683a      	ldr	r2, [r7, #0]
 80067fe:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8006800:	68fb      	ldr	r3, [r7, #12]
 8006802:	683a      	ldr	r2, [r7, #0]
 8006804:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8006806:	683b      	ldr	r3, [r7, #0]
 8006808:	687a      	ldr	r2, [r7, #4]
 800680a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800680c:	687b      	ldr	r3, [r7, #4]
 800680e:	681b      	ldr	r3, [r3, #0]
 8006810:	1c5a      	adds	r2, r3, #1
 8006812:	687b      	ldr	r3, [r7, #4]
 8006814:	601a      	str	r2, [r3, #0]
}
 8006816:	bf00      	nop
 8006818:	3714      	adds	r7, #20
 800681a:	46bd      	mov	sp, r7
 800681c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006820:	4770      	bx	lr

08006822 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8006822:	b480      	push	{r7}
 8006824:	b085      	sub	sp, #20
 8006826:	af00      	add	r7, sp, #0
 8006828:	6078      	str	r0, [r7, #4]
 800682a:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800682c:	683b      	ldr	r3, [r7, #0]
 800682e:	681b      	ldr	r3, [r3, #0]
 8006830:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8006832:	68bb      	ldr	r3, [r7, #8]
 8006834:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006838:	d103      	bne.n	8006842 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800683a:	687b      	ldr	r3, [r7, #4]
 800683c:	691b      	ldr	r3, [r3, #16]
 800683e:	60fb      	str	r3, [r7, #12]
 8006840:	e00c      	b.n	800685c <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8006842:	687b      	ldr	r3, [r7, #4]
 8006844:	3308      	adds	r3, #8
 8006846:	60fb      	str	r3, [r7, #12]
 8006848:	e002      	b.n	8006850 <vListInsert+0x2e>
 800684a:	68fb      	ldr	r3, [r7, #12]
 800684c:	685b      	ldr	r3, [r3, #4]
 800684e:	60fb      	str	r3, [r7, #12]
 8006850:	68fb      	ldr	r3, [r7, #12]
 8006852:	685b      	ldr	r3, [r3, #4]
 8006854:	681b      	ldr	r3, [r3, #0]
 8006856:	68ba      	ldr	r2, [r7, #8]
 8006858:	429a      	cmp	r2, r3
 800685a:	d2f6      	bcs.n	800684a <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800685c:	68fb      	ldr	r3, [r7, #12]
 800685e:	685a      	ldr	r2, [r3, #4]
 8006860:	683b      	ldr	r3, [r7, #0]
 8006862:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8006864:	683b      	ldr	r3, [r7, #0]
 8006866:	685b      	ldr	r3, [r3, #4]
 8006868:	683a      	ldr	r2, [r7, #0]
 800686a:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800686c:	683b      	ldr	r3, [r7, #0]
 800686e:	68fa      	ldr	r2, [r7, #12]
 8006870:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8006872:	68fb      	ldr	r3, [r7, #12]
 8006874:	683a      	ldr	r2, [r7, #0]
 8006876:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8006878:	683b      	ldr	r3, [r7, #0]
 800687a:	687a      	ldr	r2, [r7, #4]
 800687c:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800687e:	687b      	ldr	r3, [r7, #4]
 8006880:	681b      	ldr	r3, [r3, #0]
 8006882:	1c5a      	adds	r2, r3, #1
 8006884:	687b      	ldr	r3, [r7, #4]
 8006886:	601a      	str	r2, [r3, #0]
}
 8006888:	bf00      	nop
 800688a:	3714      	adds	r7, #20
 800688c:	46bd      	mov	sp, r7
 800688e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006892:	4770      	bx	lr

08006894 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8006894:	b480      	push	{r7}
 8006896:	b085      	sub	sp, #20
 8006898:	af00      	add	r7, sp, #0
 800689a:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800689c:	687b      	ldr	r3, [r7, #4]
 800689e:	691b      	ldr	r3, [r3, #16]
 80068a0:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80068a2:	687b      	ldr	r3, [r7, #4]
 80068a4:	685b      	ldr	r3, [r3, #4]
 80068a6:	687a      	ldr	r2, [r7, #4]
 80068a8:	6892      	ldr	r2, [r2, #8]
 80068aa:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80068ac:	687b      	ldr	r3, [r7, #4]
 80068ae:	689b      	ldr	r3, [r3, #8]
 80068b0:	687a      	ldr	r2, [r7, #4]
 80068b2:	6852      	ldr	r2, [r2, #4]
 80068b4:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80068b6:	68fb      	ldr	r3, [r7, #12]
 80068b8:	685b      	ldr	r3, [r3, #4]
 80068ba:	687a      	ldr	r2, [r7, #4]
 80068bc:	429a      	cmp	r2, r3
 80068be:	d103      	bne.n	80068c8 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80068c0:	687b      	ldr	r3, [r7, #4]
 80068c2:	689a      	ldr	r2, [r3, #8]
 80068c4:	68fb      	ldr	r3, [r7, #12]
 80068c6:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 80068c8:	687b      	ldr	r3, [r7, #4]
 80068ca:	2200      	movs	r2, #0
 80068cc:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80068ce:	68fb      	ldr	r3, [r7, #12]
 80068d0:	681b      	ldr	r3, [r3, #0]
 80068d2:	1e5a      	subs	r2, r3, #1
 80068d4:	68fb      	ldr	r3, [r7, #12]
 80068d6:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80068d8:	68fb      	ldr	r3, [r7, #12]
 80068da:	681b      	ldr	r3, [r3, #0]
}
 80068dc:	4618      	mov	r0, r3
 80068de:	3714      	adds	r7, #20
 80068e0:	46bd      	mov	sp, r7
 80068e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068e6:	4770      	bx	lr

080068e8 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 80068e8:	b580      	push	{r7, lr}
 80068ea:	b084      	sub	sp, #16
 80068ec:	af00      	add	r7, sp, #0
 80068ee:	6078      	str	r0, [r7, #4]
 80068f0:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 80068f2:	687b      	ldr	r3, [r7, #4]
 80068f4:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80068f6:	68fb      	ldr	r3, [r7, #12]
 80068f8:	2b00      	cmp	r3, #0
 80068fa:	d10b      	bne.n	8006914 <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80068fc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006900:	f383 8811 	msr	BASEPRI, r3
 8006904:	f3bf 8f6f 	isb	sy
 8006908:	f3bf 8f4f 	dsb	sy
 800690c:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800690e:	bf00      	nop
 8006910:	bf00      	nop
 8006912:	e7fd      	b.n	8006910 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8006914:	f002 f8a8 	bl	8008a68 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8006918:	68fb      	ldr	r3, [r7, #12]
 800691a:	681a      	ldr	r2, [r3, #0]
 800691c:	68fb      	ldr	r3, [r7, #12]
 800691e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006920:	68f9      	ldr	r1, [r7, #12]
 8006922:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8006924:	fb01 f303 	mul.w	r3, r1, r3
 8006928:	441a      	add	r2, r3
 800692a:	68fb      	ldr	r3, [r7, #12]
 800692c:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800692e:	68fb      	ldr	r3, [r7, #12]
 8006930:	2200      	movs	r2, #0
 8006932:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8006934:	68fb      	ldr	r3, [r7, #12]
 8006936:	681a      	ldr	r2, [r3, #0]
 8006938:	68fb      	ldr	r3, [r7, #12]
 800693a:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800693c:	68fb      	ldr	r3, [r7, #12]
 800693e:	681a      	ldr	r2, [r3, #0]
 8006940:	68fb      	ldr	r3, [r7, #12]
 8006942:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006944:	3b01      	subs	r3, #1
 8006946:	68f9      	ldr	r1, [r7, #12]
 8006948:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 800694a:	fb01 f303 	mul.w	r3, r1, r3
 800694e:	441a      	add	r2, r3
 8006950:	68fb      	ldr	r3, [r7, #12]
 8006952:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8006954:	68fb      	ldr	r3, [r7, #12]
 8006956:	22ff      	movs	r2, #255	@ 0xff
 8006958:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800695c:	68fb      	ldr	r3, [r7, #12]
 800695e:	22ff      	movs	r2, #255	@ 0xff
 8006960:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 8006964:	683b      	ldr	r3, [r7, #0]
 8006966:	2b00      	cmp	r3, #0
 8006968:	d114      	bne.n	8006994 <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800696a:	68fb      	ldr	r3, [r7, #12]
 800696c:	691b      	ldr	r3, [r3, #16]
 800696e:	2b00      	cmp	r3, #0
 8006970:	d01a      	beq.n	80069a8 <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006972:	68fb      	ldr	r3, [r7, #12]
 8006974:	3310      	adds	r3, #16
 8006976:	4618      	mov	r0, r3
 8006978:	f001 f942 	bl	8007c00 <xTaskRemoveFromEventList>
 800697c:	4603      	mov	r3, r0
 800697e:	2b00      	cmp	r3, #0
 8006980:	d012      	beq.n	80069a8 <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8006982:	4b0d      	ldr	r3, [pc, #52]	@ (80069b8 <xQueueGenericReset+0xd0>)
 8006984:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006988:	601a      	str	r2, [r3, #0]
 800698a:	f3bf 8f4f 	dsb	sy
 800698e:	f3bf 8f6f 	isb	sy
 8006992:	e009      	b.n	80069a8 <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8006994:	68fb      	ldr	r3, [r7, #12]
 8006996:	3310      	adds	r3, #16
 8006998:	4618      	mov	r0, r3
 800699a:	f7ff fef1 	bl	8006780 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800699e:	68fb      	ldr	r3, [r7, #12]
 80069a0:	3324      	adds	r3, #36	@ 0x24
 80069a2:	4618      	mov	r0, r3
 80069a4:	f7ff feec 	bl	8006780 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 80069a8:	f002 f890 	bl	8008acc <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 80069ac:	2301      	movs	r3, #1
}
 80069ae:	4618      	mov	r0, r3
 80069b0:	3710      	adds	r7, #16
 80069b2:	46bd      	mov	sp, r7
 80069b4:	bd80      	pop	{r7, pc}
 80069b6:	bf00      	nop
 80069b8:	e000ed04 	.word	0xe000ed04

080069bc <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 80069bc:	b580      	push	{r7, lr}
 80069be:	b08e      	sub	sp, #56	@ 0x38
 80069c0:	af02      	add	r7, sp, #8
 80069c2:	60f8      	str	r0, [r7, #12]
 80069c4:	60b9      	str	r1, [r7, #8]
 80069c6:	607a      	str	r2, [r7, #4]
 80069c8:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80069ca:	68fb      	ldr	r3, [r7, #12]
 80069cc:	2b00      	cmp	r3, #0
 80069ce:	d10b      	bne.n	80069e8 <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 80069d0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80069d4:	f383 8811 	msr	BASEPRI, r3
 80069d8:	f3bf 8f6f 	isb	sy
 80069dc:	f3bf 8f4f 	dsb	sy
 80069e0:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 80069e2:	bf00      	nop
 80069e4:	bf00      	nop
 80069e6:	e7fd      	b.n	80069e4 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 80069e8:	683b      	ldr	r3, [r7, #0]
 80069ea:	2b00      	cmp	r3, #0
 80069ec:	d10b      	bne.n	8006a06 <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 80069ee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80069f2:	f383 8811 	msr	BASEPRI, r3
 80069f6:	f3bf 8f6f 	isb	sy
 80069fa:	f3bf 8f4f 	dsb	sy
 80069fe:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8006a00:	bf00      	nop
 8006a02:	bf00      	nop
 8006a04:	e7fd      	b.n	8006a02 <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8006a06:	687b      	ldr	r3, [r7, #4]
 8006a08:	2b00      	cmp	r3, #0
 8006a0a:	d002      	beq.n	8006a12 <xQueueGenericCreateStatic+0x56>
 8006a0c:	68bb      	ldr	r3, [r7, #8]
 8006a0e:	2b00      	cmp	r3, #0
 8006a10:	d001      	beq.n	8006a16 <xQueueGenericCreateStatic+0x5a>
 8006a12:	2301      	movs	r3, #1
 8006a14:	e000      	b.n	8006a18 <xQueueGenericCreateStatic+0x5c>
 8006a16:	2300      	movs	r3, #0
 8006a18:	2b00      	cmp	r3, #0
 8006a1a:	d10b      	bne.n	8006a34 <xQueueGenericCreateStatic+0x78>
	__asm volatile
 8006a1c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006a20:	f383 8811 	msr	BASEPRI, r3
 8006a24:	f3bf 8f6f 	isb	sy
 8006a28:	f3bf 8f4f 	dsb	sy
 8006a2c:	623b      	str	r3, [r7, #32]
}
 8006a2e:	bf00      	nop
 8006a30:	bf00      	nop
 8006a32:	e7fd      	b.n	8006a30 <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8006a34:	687b      	ldr	r3, [r7, #4]
 8006a36:	2b00      	cmp	r3, #0
 8006a38:	d102      	bne.n	8006a40 <xQueueGenericCreateStatic+0x84>
 8006a3a:	68bb      	ldr	r3, [r7, #8]
 8006a3c:	2b00      	cmp	r3, #0
 8006a3e:	d101      	bne.n	8006a44 <xQueueGenericCreateStatic+0x88>
 8006a40:	2301      	movs	r3, #1
 8006a42:	e000      	b.n	8006a46 <xQueueGenericCreateStatic+0x8a>
 8006a44:	2300      	movs	r3, #0
 8006a46:	2b00      	cmp	r3, #0
 8006a48:	d10b      	bne.n	8006a62 <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 8006a4a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006a4e:	f383 8811 	msr	BASEPRI, r3
 8006a52:	f3bf 8f6f 	isb	sy
 8006a56:	f3bf 8f4f 	dsb	sy
 8006a5a:	61fb      	str	r3, [r7, #28]
}
 8006a5c:	bf00      	nop
 8006a5e:	bf00      	nop
 8006a60:	e7fd      	b.n	8006a5e <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8006a62:	2350      	movs	r3, #80	@ 0x50
 8006a64:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8006a66:	697b      	ldr	r3, [r7, #20]
 8006a68:	2b50      	cmp	r3, #80	@ 0x50
 8006a6a:	d00b      	beq.n	8006a84 <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 8006a6c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006a70:	f383 8811 	msr	BASEPRI, r3
 8006a74:	f3bf 8f6f 	isb	sy
 8006a78:	f3bf 8f4f 	dsb	sy
 8006a7c:	61bb      	str	r3, [r7, #24]
}
 8006a7e:	bf00      	nop
 8006a80:	bf00      	nop
 8006a82:	e7fd      	b.n	8006a80 <xQueueGenericCreateStatic+0xc4>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8006a84:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8006a86:	683b      	ldr	r3, [r7, #0]
 8006a88:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 8006a8a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006a8c:	2b00      	cmp	r3, #0
 8006a8e:	d00d      	beq.n	8006aac <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8006a90:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006a92:	2201      	movs	r2, #1
 8006a94:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8006a98:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 8006a9c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006a9e:	9300      	str	r3, [sp, #0]
 8006aa0:	4613      	mov	r3, r2
 8006aa2:	687a      	ldr	r2, [r7, #4]
 8006aa4:	68b9      	ldr	r1, [r7, #8]
 8006aa6:	68f8      	ldr	r0, [r7, #12]
 8006aa8:	f000 f805 	bl	8006ab6 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8006aac:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 8006aae:	4618      	mov	r0, r3
 8006ab0:	3730      	adds	r7, #48	@ 0x30
 8006ab2:	46bd      	mov	sp, r7
 8006ab4:	bd80      	pop	{r7, pc}

08006ab6 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8006ab6:	b580      	push	{r7, lr}
 8006ab8:	b084      	sub	sp, #16
 8006aba:	af00      	add	r7, sp, #0
 8006abc:	60f8      	str	r0, [r7, #12]
 8006abe:	60b9      	str	r1, [r7, #8]
 8006ac0:	607a      	str	r2, [r7, #4]
 8006ac2:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8006ac4:	68bb      	ldr	r3, [r7, #8]
 8006ac6:	2b00      	cmp	r3, #0
 8006ac8:	d103      	bne.n	8006ad2 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8006aca:	69bb      	ldr	r3, [r7, #24]
 8006acc:	69ba      	ldr	r2, [r7, #24]
 8006ace:	601a      	str	r2, [r3, #0]
 8006ad0:	e002      	b.n	8006ad8 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8006ad2:	69bb      	ldr	r3, [r7, #24]
 8006ad4:	687a      	ldr	r2, [r7, #4]
 8006ad6:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8006ad8:	69bb      	ldr	r3, [r7, #24]
 8006ada:	68fa      	ldr	r2, [r7, #12]
 8006adc:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8006ade:	69bb      	ldr	r3, [r7, #24]
 8006ae0:	68ba      	ldr	r2, [r7, #8]
 8006ae2:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8006ae4:	2101      	movs	r1, #1
 8006ae6:	69b8      	ldr	r0, [r7, #24]
 8006ae8:	f7ff fefe 	bl	80068e8 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8006aec:	69bb      	ldr	r3, [r7, #24]
 8006aee:	78fa      	ldrb	r2, [r7, #3]
 8006af0:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8006af4:	bf00      	nop
 8006af6:	3710      	adds	r7, #16
 8006af8:	46bd      	mov	sp, r7
 8006afa:	bd80      	pop	{r7, pc}

08006afc <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8006afc:	b580      	push	{r7, lr}
 8006afe:	b08e      	sub	sp, #56	@ 0x38
 8006b00:	af00      	add	r7, sp, #0
 8006b02:	60f8      	str	r0, [r7, #12]
 8006b04:	60b9      	str	r1, [r7, #8]
 8006b06:	607a      	str	r2, [r7, #4]
 8006b08:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8006b0a:	2300      	movs	r3, #0
 8006b0c:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8006b0e:	68fb      	ldr	r3, [r7, #12]
 8006b10:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 8006b12:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006b14:	2b00      	cmp	r3, #0
 8006b16:	d10b      	bne.n	8006b30 <xQueueGenericSend+0x34>
	__asm volatile
 8006b18:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006b1c:	f383 8811 	msr	BASEPRI, r3
 8006b20:	f3bf 8f6f 	isb	sy
 8006b24:	f3bf 8f4f 	dsb	sy
 8006b28:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8006b2a:	bf00      	nop
 8006b2c:	bf00      	nop
 8006b2e:	e7fd      	b.n	8006b2c <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8006b30:	68bb      	ldr	r3, [r7, #8]
 8006b32:	2b00      	cmp	r3, #0
 8006b34:	d103      	bne.n	8006b3e <xQueueGenericSend+0x42>
 8006b36:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006b38:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006b3a:	2b00      	cmp	r3, #0
 8006b3c:	d101      	bne.n	8006b42 <xQueueGenericSend+0x46>
 8006b3e:	2301      	movs	r3, #1
 8006b40:	e000      	b.n	8006b44 <xQueueGenericSend+0x48>
 8006b42:	2300      	movs	r3, #0
 8006b44:	2b00      	cmp	r3, #0
 8006b46:	d10b      	bne.n	8006b60 <xQueueGenericSend+0x64>
	__asm volatile
 8006b48:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006b4c:	f383 8811 	msr	BASEPRI, r3
 8006b50:	f3bf 8f6f 	isb	sy
 8006b54:	f3bf 8f4f 	dsb	sy
 8006b58:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8006b5a:	bf00      	nop
 8006b5c:	bf00      	nop
 8006b5e:	e7fd      	b.n	8006b5c <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8006b60:	683b      	ldr	r3, [r7, #0]
 8006b62:	2b02      	cmp	r3, #2
 8006b64:	d103      	bne.n	8006b6e <xQueueGenericSend+0x72>
 8006b66:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006b68:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006b6a:	2b01      	cmp	r3, #1
 8006b6c:	d101      	bne.n	8006b72 <xQueueGenericSend+0x76>
 8006b6e:	2301      	movs	r3, #1
 8006b70:	e000      	b.n	8006b74 <xQueueGenericSend+0x78>
 8006b72:	2300      	movs	r3, #0
 8006b74:	2b00      	cmp	r3, #0
 8006b76:	d10b      	bne.n	8006b90 <xQueueGenericSend+0x94>
	__asm volatile
 8006b78:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006b7c:	f383 8811 	msr	BASEPRI, r3
 8006b80:	f3bf 8f6f 	isb	sy
 8006b84:	f3bf 8f4f 	dsb	sy
 8006b88:	623b      	str	r3, [r7, #32]
}
 8006b8a:	bf00      	nop
 8006b8c:	bf00      	nop
 8006b8e:	e7fd      	b.n	8006b8c <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8006b90:	f001 f9fc 	bl	8007f8c <xTaskGetSchedulerState>
 8006b94:	4603      	mov	r3, r0
 8006b96:	2b00      	cmp	r3, #0
 8006b98:	d102      	bne.n	8006ba0 <xQueueGenericSend+0xa4>
 8006b9a:	687b      	ldr	r3, [r7, #4]
 8006b9c:	2b00      	cmp	r3, #0
 8006b9e:	d101      	bne.n	8006ba4 <xQueueGenericSend+0xa8>
 8006ba0:	2301      	movs	r3, #1
 8006ba2:	e000      	b.n	8006ba6 <xQueueGenericSend+0xaa>
 8006ba4:	2300      	movs	r3, #0
 8006ba6:	2b00      	cmp	r3, #0
 8006ba8:	d10b      	bne.n	8006bc2 <xQueueGenericSend+0xc6>
	__asm volatile
 8006baa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006bae:	f383 8811 	msr	BASEPRI, r3
 8006bb2:	f3bf 8f6f 	isb	sy
 8006bb6:	f3bf 8f4f 	dsb	sy
 8006bba:	61fb      	str	r3, [r7, #28]
}
 8006bbc:	bf00      	nop
 8006bbe:	bf00      	nop
 8006bc0:	e7fd      	b.n	8006bbe <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8006bc2:	f001 ff51 	bl	8008a68 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8006bc6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006bc8:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8006bca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006bcc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006bce:	429a      	cmp	r2, r3
 8006bd0:	d302      	bcc.n	8006bd8 <xQueueGenericSend+0xdc>
 8006bd2:	683b      	ldr	r3, [r7, #0]
 8006bd4:	2b02      	cmp	r3, #2
 8006bd6:	d129      	bne.n	8006c2c <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8006bd8:	683a      	ldr	r2, [r7, #0]
 8006bda:	68b9      	ldr	r1, [r7, #8]
 8006bdc:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8006bde:	f000 fa0f 	bl	8007000 <prvCopyDataToQueue>
 8006be2:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8006be4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006be6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006be8:	2b00      	cmp	r3, #0
 8006bea:	d010      	beq.n	8006c0e <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006bec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006bee:	3324      	adds	r3, #36	@ 0x24
 8006bf0:	4618      	mov	r0, r3
 8006bf2:	f001 f805 	bl	8007c00 <xTaskRemoveFromEventList>
 8006bf6:	4603      	mov	r3, r0
 8006bf8:	2b00      	cmp	r3, #0
 8006bfa:	d013      	beq.n	8006c24 <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8006bfc:	4b3f      	ldr	r3, [pc, #252]	@ (8006cfc <xQueueGenericSend+0x200>)
 8006bfe:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006c02:	601a      	str	r2, [r3, #0]
 8006c04:	f3bf 8f4f 	dsb	sy
 8006c08:	f3bf 8f6f 	isb	sy
 8006c0c:	e00a      	b.n	8006c24 <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8006c0e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006c10:	2b00      	cmp	r3, #0
 8006c12:	d007      	beq.n	8006c24 <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8006c14:	4b39      	ldr	r3, [pc, #228]	@ (8006cfc <xQueueGenericSend+0x200>)
 8006c16:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006c1a:	601a      	str	r2, [r3, #0]
 8006c1c:	f3bf 8f4f 	dsb	sy
 8006c20:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8006c24:	f001 ff52 	bl	8008acc <vPortExitCritical>
				return pdPASS;
 8006c28:	2301      	movs	r3, #1
 8006c2a:	e063      	b.n	8006cf4 <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8006c2c:	687b      	ldr	r3, [r7, #4]
 8006c2e:	2b00      	cmp	r3, #0
 8006c30:	d103      	bne.n	8006c3a <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8006c32:	f001 ff4b 	bl	8008acc <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8006c36:	2300      	movs	r3, #0
 8006c38:	e05c      	b.n	8006cf4 <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8006c3a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006c3c:	2b00      	cmp	r3, #0
 8006c3e:	d106      	bne.n	8006c4e <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8006c40:	f107 0314 	add.w	r3, r7, #20
 8006c44:	4618      	mov	r0, r3
 8006c46:	f001 f83f 	bl	8007cc8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8006c4a:	2301      	movs	r3, #1
 8006c4c:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8006c4e:	f001 ff3d 	bl	8008acc <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8006c52:	f000 fda7 	bl	80077a4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8006c56:	f001 ff07 	bl	8008a68 <vPortEnterCritical>
 8006c5a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006c5c:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8006c60:	b25b      	sxtb	r3, r3
 8006c62:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006c66:	d103      	bne.n	8006c70 <xQueueGenericSend+0x174>
 8006c68:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006c6a:	2200      	movs	r2, #0
 8006c6c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8006c70:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006c72:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8006c76:	b25b      	sxtb	r3, r3
 8006c78:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006c7c:	d103      	bne.n	8006c86 <xQueueGenericSend+0x18a>
 8006c7e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006c80:	2200      	movs	r2, #0
 8006c82:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8006c86:	f001 ff21 	bl	8008acc <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8006c8a:	1d3a      	adds	r2, r7, #4
 8006c8c:	f107 0314 	add.w	r3, r7, #20
 8006c90:	4611      	mov	r1, r2
 8006c92:	4618      	mov	r0, r3
 8006c94:	f001 f82e 	bl	8007cf4 <xTaskCheckForTimeOut>
 8006c98:	4603      	mov	r3, r0
 8006c9a:	2b00      	cmp	r3, #0
 8006c9c:	d124      	bne.n	8006ce8 <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8006c9e:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8006ca0:	f000 faa6 	bl	80071f0 <prvIsQueueFull>
 8006ca4:	4603      	mov	r3, r0
 8006ca6:	2b00      	cmp	r3, #0
 8006ca8:	d018      	beq.n	8006cdc <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8006caa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006cac:	3310      	adds	r3, #16
 8006cae:	687a      	ldr	r2, [r7, #4]
 8006cb0:	4611      	mov	r1, r2
 8006cb2:	4618      	mov	r0, r3
 8006cb4:	f000 ff52 	bl	8007b5c <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8006cb8:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8006cba:	f000 fa31 	bl	8007120 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8006cbe:	f000 fd7f 	bl	80077c0 <xTaskResumeAll>
 8006cc2:	4603      	mov	r3, r0
 8006cc4:	2b00      	cmp	r3, #0
 8006cc6:	f47f af7c 	bne.w	8006bc2 <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 8006cca:	4b0c      	ldr	r3, [pc, #48]	@ (8006cfc <xQueueGenericSend+0x200>)
 8006ccc:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006cd0:	601a      	str	r2, [r3, #0]
 8006cd2:	f3bf 8f4f 	dsb	sy
 8006cd6:	f3bf 8f6f 	isb	sy
 8006cda:	e772      	b.n	8006bc2 <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8006cdc:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8006cde:	f000 fa1f 	bl	8007120 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8006ce2:	f000 fd6d 	bl	80077c0 <xTaskResumeAll>
 8006ce6:	e76c      	b.n	8006bc2 <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8006ce8:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8006cea:	f000 fa19 	bl	8007120 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8006cee:	f000 fd67 	bl	80077c0 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8006cf2:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8006cf4:	4618      	mov	r0, r3
 8006cf6:	3738      	adds	r7, #56	@ 0x38
 8006cf8:	46bd      	mov	sp, r7
 8006cfa:	bd80      	pop	{r7, pc}
 8006cfc:	e000ed04 	.word	0xe000ed04

08006d00 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8006d00:	b580      	push	{r7, lr}
 8006d02:	b090      	sub	sp, #64	@ 0x40
 8006d04:	af00      	add	r7, sp, #0
 8006d06:	60f8      	str	r0, [r7, #12]
 8006d08:	60b9      	str	r1, [r7, #8]
 8006d0a:	607a      	str	r2, [r7, #4]
 8006d0c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8006d0e:	68fb      	ldr	r3, [r7, #12]
 8006d10:	63bb      	str	r3, [r7, #56]	@ 0x38

	configASSERT( pxQueue );
 8006d12:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006d14:	2b00      	cmp	r3, #0
 8006d16:	d10b      	bne.n	8006d30 <xQueueGenericSendFromISR+0x30>
	__asm volatile
 8006d18:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006d1c:	f383 8811 	msr	BASEPRI, r3
 8006d20:	f3bf 8f6f 	isb	sy
 8006d24:	f3bf 8f4f 	dsb	sy
 8006d28:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8006d2a:	bf00      	nop
 8006d2c:	bf00      	nop
 8006d2e:	e7fd      	b.n	8006d2c <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8006d30:	68bb      	ldr	r3, [r7, #8]
 8006d32:	2b00      	cmp	r3, #0
 8006d34:	d103      	bne.n	8006d3e <xQueueGenericSendFromISR+0x3e>
 8006d36:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006d38:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006d3a:	2b00      	cmp	r3, #0
 8006d3c:	d101      	bne.n	8006d42 <xQueueGenericSendFromISR+0x42>
 8006d3e:	2301      	movs	r3, #1
 8006d40:	e000      	b.n	8006d44 <xQueueGenericSendFromISR+0x44>
 8006d42:	2300      	movs	r3, #0
 8006d44:	2b00      	cmp	r3, #0
 8006d46:	d10b      	bne.n	8006d60 <xQueueGenericSendFromISR+0x60>
	__asm volatile
 8006d48:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006d4c:	f383 8811 	msr	BASEPRI, r3
 8006d50:	f3bf 8f6f 	isb	sy
 8006d54:	f3bf 8f4f 	dsb	sy
 8006d58:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8006d5a:	bf00      	nop
 8006d5c:	bf00      	nop
 8006d5e:	e7fd      	b.n	8006d5c <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8006d60:	683b      	ldr	r3, [r7, #0]
 8006d62:	2b02      	cmp	r3, #2
 8006d64:	d103      	bne.n	8006d6e <xQueueGenericSendFromISR+0x6e>
 8006d66:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006d68:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006d6a:	2b01      	cmp	r3, #1
 8006d6c:	d101      	bne.n	8006d72 <xQueueGenericSendFromISR+0x72>
 8006d6e:	2301      	movs	r3, #1
 8006d70:	e000      	b.n	8006d74 <xQueueGenericSendFromISR+0x74>
 8006d72:	2300      	movs	r3, #0
 8006d74:	2b00      	cmp	r3, #0
 8006d76:	d10b      	bne.n	8006d90 <xQueueGenericSendFromISR+0x90>
	__asm volatile
 8006d78:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006d7c:	f383 8811 	msr	BASEPRI, r3
 8006d80:	f3bf 8f6f 	isb	sy
 8006d84:	f3bf 8f4f 	dsb	sy
 8006d88:	623b      	str	r3, [r7, #32]
}
 8006d8a:	bf00      	nop
 8006d8c:	bf00      	nop
 8006d8e:	e7fd      	b.n	8006d8c <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8006d90:	f001 ff4a 	bl	8008c28 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8006d94:	f3ef 8211 	mrs	r2, BASEPRI
 8006d98:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006d9c:	f383 8811 	msr	BASEPRI, r3
 8006da0:	f3bf 8f6f 	isb	sy
 8006da4:	f3bf 8f4f 	dsb	sy
 8006da8:	61fa      	str	r2, [r7, #28]
 8006daa:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8006dac:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8006dae:	637b      	str	r3, [r7, #52]	@ 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8006db0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006db2:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8006db4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006db6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006db8:	429a      	cmp	r2, r3
 8006dba:	d302      	bcc.n	8006dc2 <xQueueGenericSendFromISR+0xc2>
 8006dbc:	683b      	ldr	r3, [r7, #0]
 8006dbe:	2b02      	cmp	r3, #2
 8006dc0:	d12f      	bne.n	8006e22 <xQueueGenericSendFromISR+0x122>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8006dc2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006dc4:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8006dc8:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8006dcc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006dce:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006dd0:	62fb      	str	r3, [r7, #44]	@ 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8006dd2:	683a      	ldr	r2, [r7, #0]
 8006dd4:	68b9      	ldr	r1, [r7, #8]
 8006dd6:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8006dd8:	f000 f912 	bl	8007000 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8006ddc:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 8006de0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006de4:	d112      	bne.n	8006e0c <xQueueGenericSendFromISR+0x10c>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8006de6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006de8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006dea:	2b00      	cmp	r3, #0
 8006dec:	d016      	beq.n	8006e1c <xQueueGenericSendFromISR+0x11c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006dee:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006df0:	3324      	adds	r3, #36	@ 0x24
 8006df2:	4618      	mov	r0, r3
 8006df4:	f000 ff04 	bl	8007c00 <xTaskRemoveFromEventList>
 8006df8:	4603      	mov	r3, r0
 8006dfa:	2b00      	cmp	r3, #0
 8006dfc:	d00e      	beq.n	8006e1c <xQueueGenericSendFromISR+0x11c>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8006dfe:	687b      	ldr	r3, [r7, #4]
 8006e00:	2b00      	cmp	r3, #0
 8006e02:	d00b      	beq.n	8006e1c <xQueueGenericSendFromISR+0x11c>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8006e04:	687b      	ldr	r3, [r7, #4]
 8006e06:	2201      	movs	r2, #1
 8006e08:	601a      	str	r2, [r3, #0]
 8006e0a:	e007      	b.n	8006e1c <xQueueGenericSendFromISR+0x11c>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8006e0c:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8006e10:	3301      	adds	r3, #1
 8006e12:	b2db      	uxtb	r3, r3
 8006e14:	b25a      	sxtb	r2, r3
 8006e16:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006e18:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 8006e1c:	2301      	movs	r3, #1
 8006e1e:	63fb      	str	r3, [r7, #60]	@ 0x3c
		{
 8006e20:	e001      	b.n	8006e26 <xQueueGenericSendFromISR+0x126>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8006e22:	2300      	movs	r3, #0
 8006e24:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006e26:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006e28:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8006e2a:	697b      	ldr	r3, [r7, #20]
 8006e2c:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8006e30:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8006e32:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 8006e34:	4618      	mov	r0, r3
 8006e36:	3740      	adds	r7, #64	@ 0x40
 8006e38:	46bd      	mov	sp, r7
 8006e3a:	bd80      	pop	{r7, pc}

08006e3c <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8006e3c:	b580      	push	{r7, lr}
 8006e3e:	b08c      	sub	sp, #48	@ 0x30
 8006e40:	af00      	add	r7, sp, #0
 8006e42:	60f8      	str	r0, [r7, #12]
 8006e44:	60b9      	str	r1, [r7, #8]
 8006e46:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8006e48:	2300      	movs	r3, #0
 8006e4a:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8006e4c:	68fb      	ldr	r3, [r7, #12]
 8006e4e:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8006e50:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006e52:	2b00      	cmp	r3, #0
 8006e54:	d10b      	bne.n	8006e6e <xQueueReceive+0x32>
	__asm volatile
 8006e56:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006e5a:	f383 8811 	msr	BASEPRI, r3
 8006e5e:	f3bf 8f6f 	isb	sy
 8006e62:	f3bf 8f4f 	dsb	sy
 8006e66:	623b      	str	r3, [r7, #32]
}
 8006e68:	bf00      	nop
 8006e6a:	bf00      	nop
 8006e6c:	e7fd      	b.n	8006e6a <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8006e6e:	68bb      	ldr	r3, [r7, #8]
 8006e70:	2b00      	cmp	r3, #0
 8006e72:	d103      	bne.n	8006e7c <xQueueReceive+0x40>
 8006e74:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006e76:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006e78:	2b00      	cmp	r3, #0
 8006e7a:	d101      	bne.n	8006e80 <xQueueReceive+0x44>
 8006e7c:	2301      	movs	r3, #1
 8006e7e:	e000      	b.n	8006e82 <xQueueReceive+0x46>
 8006e80:	2300      	movs	r3, #0
 8006e82:	2b00      	cmp	r3, #0
 8006e84:	d10b      	bne.n	8006e9e <xQueueReceive+0x62>
	__asm volatile
 8006e86:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006e8a:	f383 8811 	msr	BASEPRI, r3
 8006e8e:	f3bf 8f6f 	isb	sy
 8006e92:	f3bf 8f4f 	dsb	sy
 8006e96:	61fb      	str	r3, [r7, #28]
}
 8006e98:	bf00      	nop
 8006e9a:	bf00      	nop
 8006e9c:	e7fd      	b.n	8006e9a <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8006e9e:	f001 f875 	bl	8007f8c <xTaskGetSchedulerState>
 8006ea2:	4603      	mov	r3, r0
 8006ea4:	2b00      	cmp	r3, #0
 8006ea6:	d102      	bne.n	8006eae <xQueueReceive+0x72>
 8006ea8:	687b      	ldr	r3, [r7, #4]
 8006eaa:	2b00      	cmp	r3, #0
 8006eac:	d101      	bne.n	8006eb2 <xQueueReceive+0x76>
 8006eae:	2301      	movs	r3, #1
 8006eb0:	e000      	b.n	8006eb4 <xQueueReceive+0x78>
 8006eb2:	2300      	movs	r3, #0
 8006eb4:	2b00      	cmp	r3, #0
 8006eb6:	d10b      	bne.n	8006ed0 <xQueueReceive+0x94>
	__asm volatile
 8006eb8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006ebc:	f383 8811 	msr	BASEPRI, r3
 8006ec0:	f3bf 8f6f 	isb	sy
 8006ec4:	f3bf 8f4f 	dsb	sy
 8006ec8:	61bb      	str	r3, [r7, #24]
}
 8006eca:	bf00      	nop
 8006ecc:	bf00      	nop
 8006ece:	e7fd      	b.n	8006ecc <xQueueReceive+0x90>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8006ed0:	f001 fdca 	bl	8008a68 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8006ed4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006ed6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006ed8:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8006eda:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006edc:	2b00      	cmp	r3, #0
 8006ede:	d01f      	beq.n	8006f20 <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8006ee0:	68b9      	ldr	r1, [r7, #8]
 8006ee2:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8006ee4:	f000 f8f6 	bl	80070d4 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8006ee8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006eea:	1e5a      	subs	r2, r3, #1
 8006eec:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006eee:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006ef0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006ef2:	691b      	ldr	r3, [r3, #16]
 8006ef4:	2b00      	cmp	r3, #0
 8006ef6:	d00f      	beq.n	8006f18 <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006ef8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006efa:	3310      	adds	r3, #16
 8006efc:	4618      	mov	r0, r3
 8006efe:	f000 fe7f 	bl	8007c00 <xTaskRemoveFromEventList>
 8006f02:	4603      	mov	r3, r0
 8006f04:	2b00      	cmp	r3, #0
 8006f06:	d007      	beq.n	8006f18 <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8006f08:	4b3c      	ldr	r3, [pc, #240]	@ (8006ffc <xQueueReceive+0x1c0>)
 8006f0a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006f0e:	601a      	str	r2, [r3, #0]
 8006f10:	f3bf 8f4f 	dsb	sy
 8006f14:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8006f18:	f001 fdd8 	bl	8008acc <vPortExitCritical>
				return pdPASS;
 8006f1c:	2301      	movs	r3, #1
 8006f1e:	e069      	b.n	8006ff4 <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8006f20:	687b      	ldr	r3, [r7, #4]
 8006f22:	2b00      	cmp	r3, #0
 8006f24:	d103      	bne.n	8006f2e <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8006f26:	f001 fdd1 	bl	8008acc <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8006f2a:	2300      	movs	r3, #0
 8006f2c:	e062      	b.n	8006ff4 <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8006f2e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006f30:	2b00      	cmp	r3, #0
 8006f32:	d106      	bne.n	8006f42 <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8006f34:	f107 0310 	add.w	r3, r7, #16
 8006f38:	4618      	mov	r0, r3
 8006f3a:	f000 fec5 	bl	8007cc8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8006f3e:	2301      	movs	r3, #1
 8006f40:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8006f42:	f001 fdc3 	bl	8008acc <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8006f46:	f000 fc2d 	bl	80077a4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8006f4a:	f001 fd8d 	bl	8008a68 <vPortEnterCritical>
 8006f4e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006f50:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8006f54:	b25b      	sxtb	r3, r3
 8006f56:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006f5a:	d103      	bne.n	8006f64 <xQueueReceive+0x128>
 8006f5c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006f5e:	2200      	movs	r2, #0
 8006f60:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8006f64:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006f66:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8006f6a:	b25b      	sxtb	r3, r3
 8006f6c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006f70:	d103      	bne.n	8006f7a <xQueueReceive+0x13e>
 8006f72:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006f74:	2200      	movs	r2, #0
 8006f76:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8006f7a:	f001 fda7 	bl	8008acc <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8006f7e:	1d3a      	adds	r2, r7, #4
 8006f80:	f107 0310 	add.w	r3, r7, #16
 8006f84:	4611      	mov	r1, r2
 8006f86:	4618      	mov	r0, r3
 8006f88:	f000 feb4 	bl	8007cf4 <xTaskCheckForTimeOut>
 8006f8c:	4603      	mov	r3, r0
 8006f8e:	2b00      	cmp	r3, #0
 8006f90:	d123      	bne.n	8006fda <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8006f92:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8006f94:	f000 f916 	bl	80071c4 <prvIsQueueEmpty>
 8006f98:	4603      	mov	r3, r0
 8006f9a:	2b00      	cmp	r3, #0
 8006f9c:	d017      	beq.n	8006fce <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8006f9e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006fa0:	3324      	adds	r3, #36	@ 0x24
 8006fa2:	687a      	ldr	r2, [r7, #4]
 8006fa4:	4611      	mov	r1, r2
 8006fa6:	4618      	mov	r0, r3
 8006fa8:	f000 fdd8 	bl	8007b5c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8006fac:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8006fae:	f000 f8b7 	bl	8007120 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8006fb2:	f000 fc05 	bl	80077c0 <xTaskResumeAll>
 8006fb6:	4603      	mov	r3, r0
 8006fb8:	2b00      	cmp	r3, #0
 8006fba:	d189      	bne.n	8006ed0 <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 8006fbc:	4b0f      	ldr	r3, [pc, #60]	@ (8006ffc <xQueueReceive+0x1c0>)
 8006fbe:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006fc2:	601a      	str	r2, [r3, #0]
 8006fc4:	f3bf 8f4f 	dsb	sy
 8006fc8:	f3bf 8f6f 	isb	sy
 8006fcc:	e780      	b.n	8006ed0 <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8006fce:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8006fd0:	f000 f8a6 	bl	8007120 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8006fd4:	f000 fbf4 	bl	80077c0 <xTaskResumeAll>
 8006fd8:	e77a      	b.n	8006ed0 <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8006fda:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8006fdc:	f000 f8a0 	bl	8007120 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8006fe0:	f000 fbee 	bl	80077c0 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8006fe4:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8006fe6:	f000 f8ed 	bl	80071c4 <prvIsQueueEmpty>
 8006fea:	4603      	mov	r3, r0
 8006fec:	2b00      	cmp	r3, #0
 8006fee:	f43f af6f 	beq.w	8006ed0 <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8006ff2:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8006ff4:	4618      	mov	r0, r3
 8006ff6:	3730      	adds	r7, #48	@ 0x30
 8006ff8:	46bd      	mov	sp, r7
 8006ffa:	bd80      	pop	{r7, pc}
 8006ffc:	e000ed04 	.word	0xe000ed04

08007000 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8007000:	b580      	push	{r7, lr}
 8007002:	b086      	sub	sp, #24
 8007004:	af00      	add	r7, sp, #0
 8007006:	60f8      	str	r0, [r7, #12]
 8007008:	60b9      	str	r1, [r7, #8]
 800700a:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800700c:	2300      	movs	r3, #0
 800700e:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8007010:	68fb      	ldr	r3, [r7, #12]
 8007012:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007014:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8007016:	68fb      	ldr	r3, [r7, #12]
 8007018:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800701a:	2b00      	cmp	r3, #0
 800701c:	d10d      	bne.n	800703a <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800701e:	68fb      	ldr	r3, [r7, #12]
 8007020:	681b      	ldr	r3, [r3, #0]
 8007022:	2b00      	cmp	r3, #0
 8007024:	d14d      	bne.n	80070c2 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8007026:	68fb      	ldr	r3, [r7, #12]
 8007028:	689b      	ldr	r3, [r3, #8]
 800702a:	4618      	mov	r0, r3
 800702c:	f000 ffcc 	bl	8007fc8 <xTaskPriorityDisinherit>
 8007030:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8007032:	68fb      	ldr	r3, [r7, #12]
 8007034:	2200      	movs	r2, #0
 8007036:	609a      	str	r2, [r3, #8]
 8007038:	e043      	b.n	80070c2 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800703a:	687b      	ldr	r3, [r7, #4]
 800703c:	2b00      	cmp	r3, #0
 800703e:	d119      	bne.n	8007074 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8007040:	68fb      	ldr	r3, [r7, #12]
 8007042:	6858      	ldr	r0, [r3, #4]
 8007044:	68fb      	ldr	r3, [r7, #12]
 8007046:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007048:	461a      	mov	r2, r3
 800704a:	68b9      	ldr	r1, [r7, #8]
 800704c:	f002 f8a8 	bl	80091a0 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8007050:	68fb      	ldr	r3, [r7, #12]
 8007052:	685a      	ldr	r2, [r3, #4]
 8007054:	68fb      	ldr	r3, [r7, #12]
 8007056:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007058:	441a      	add	r2, r3
 800705a:	68fb      	ldr	r3, [r7, #12]
 800705c:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800705e:	68fb      	ldr	r3, [r7, #12]
 8007060:	685a      	ldr	r2, [r3, #4]
 8007062:	68fb      	ldr	r3, [r7, #12]
 8007064:	689b      	ldr	r3, [r3, #8]
 8007066:	429a      	cmp	r2, r3
 8007068:	d32b      	bcc.n	80070c2 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800706a:	68fb      	ldr	r3, [r7, #12]
 800706c:	681a      	ldr	r2, [r3, #0]
 800706e:	68fb      	ldr	r3, [r7, #12]
 8007070:	605a      	str	r2, [r3, #4]
 8007072:	e026      	b.n	80070c2 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8007074:	68fb      	ldr	r3, [r7, #12]
 8007076:	68d8      	ldr	r0, [r3, #12]
 8007078:	68fb      	ldr	r3, [r7, #12]
 800707a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800707c:	461a      	mov	r2, r3
 800707e:	68b9      	ldr	r1, [r7, #8]
 8007080:	f002 f88e 	bl	80091a0 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8007084:	68fb      	ldr	r3, [r7, #12]
 8007086:	68da      	ldr	r2, [r3, #12]
 8007088:	68fb      	ldr	r3, [r7, #12]
 800708a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800708c:	425b      	negs	r3, r3
 800708e:	441a      	add	r2, r3
 8007090:	68fb      	ldr	r3, [r7, #12]
 8007092:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8007094:	68fb      	ldr	r3, [r7, #12]
 8007096:	68da      	ldr	r2, [r3, #12]
 8007098:	68fb      	ldr	r3, [r7, #12]
 800709a:	681b      	ldr	r3, [r3, #0]
 800709c:	429a      	cmp	r2, r3
 800709e:	d207      	bcs.n	80070b0 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 80070a0:	68fb      	ldr	r3, [r7, #12]
 80070a2:	689a      	ldr	r2, [r3, #8]
 80070a4:	68fb      	ldr	r3, [r7, #12]
 80070a6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80070a8:	425b      	negs	r3, r3
 80070aa:	441a      	add	r2, r3
 80070ac:	68fb      	ldr	r3, [r7, #12]
 80070ae:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 80070b0:	687b      	ldr	r3, [r7, #4]
 80070b2:	2b02      	cmp	r3, #2
 80070b4:	d105      	bne.n	80070c2 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80070b6:	693b      	ldr	r3, [r7, #16]
 80070b8:	2b00      	cmp	r3, #0
 80070ba:	d002      	beq.n	80070c2 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 80070bc:	693b      	ldr	r3, [r7, #16]
 80070be:	3b01      	subs	r3, #1
 80070c0:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80070c2:	693b      	ldr	r3, [r7, #16]
 80070c4:	1c5a      	adds	r2, r3, #1
 80070c6:	68fb      	ldr	r3, [r7, #12]
 80070c8:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 80070ca:	697b      	ldr	r3, [r7, #20]
}
 80070cc:	4618      	mov	r0, r3
 80070ce:	3718      	adds	r7, #24
 80070d0:	46bd      	mov	sp, r7
 80070d2:	bd80      	pop	{r7, pc}

080070d4 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 80070d4:	b580      	push	{r7, lr}
 80070d6:	b082      	sub	sp, #8
 80070d8:	af00      	add	r7, sp, #0
 80070da:	6078      	str	r0, [r7, #4]
 80070dc:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80070de:	687b      	ldr	r3, [r7, #4]
 80070e0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80070e2:	2b00      	cmp	r3, #0
 80070e4:	d018      	beq.n	8007118 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80070e6:	687b      	ldr	r3, [r7, #4]
 80070e8:	68da      	ldr	r2, [r3, #12]
 80070ea:	687b      	ldr	r3, [r7, #4]
 80070ec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80070ee:	441a      	add	r2, r3
 80070f0:	687b      	ldr	r3, [r7, #4]
 80070f2:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80070f4:	687b      	ldr	r3, [r7, #4]
 80070f6:	68da      	ldr	r2, [r3, #12]
 80070f8:	687b      	ldr	r3, [r7, #4]
 80070fa:	689b      	ldr	r3, [r3, #8]
 80070fc:	429a      	cmp	r2, r3
 80070fe:	d303      	bcc.n	8007108 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8007100:	687b      	ldr	r3, [r7, #4]
 8007102:	681a      	ldr	r2, [r3, #0]
 8007104:	687b      	ldr	r3, [r7, #4]
 8007106:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8007108:	687b      	ldr	r3, [r7, #4]
 800710a:	68d9      	ldr	r1, [r3, #12]
 800710c:	687b      	ldr	r3, [r7, #4]
 800710e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007110:	461a      	mov	r2, r3
 8007112:	6838      	ldr	r0, [r7, #0]
 8007114:	f002 f844 	bl	80091a0 <memcpy>
	}
}
 8007118:	bf00      	nop
 800711a:	3708      	adds	r7, #8
 800711c:	46bd      	mov	sp, r7
 800711e:	bd80      	pop	{r7, pc}

08007120 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8007120:	b580      	push	{r7, lr}
 8007122:	b084      	sub	sp, #16
 8007124:	af00      	add	r7, sp, #0
 8007126:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8007128:	f001 fc9e 	bl	8008a68 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800712c:	687b      	ldr	r3, [r7, #4]
 800712e:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8007132:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8007134:	e011      	b.n	800715a <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8007136:	687b      	ldr	r3, [r7, #4]
 8007138:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800713a:	2b00      	cmp	r3, #0
 800713c:	d012      	beq.n	8007164 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800713e:	687b      	ldr	r3, [r7, #4]
 8007140:	3324      	adds	r3, #36	@ 0x24
 8007142:	4618      	mov	r0, r3
 8007144:	f000 fd5c 	bl	8007c00 <xTaskRemoveFromEventList>
 8007148:	4603      	mov	r3, r0
 800714a:	2b00      	cmp	r3, #0
 800714c:	d001      	beq.n	8007152 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800714e:	f000 fe35 	bl	8007dbc <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8007152:	7bfb      	ldrb	r3, [r7, #15]
 8007154:	3b01      	subs	r3, #1
 8007156:	b2db      	uxtb	r3, r3
 8007158:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800715a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800715e:	2b00      	cmp	r3, #0
 8007160:	dce9      	bgt.n	8007136 <prvUnlockQueue+0x16>
 8007162:	e000      	b.n	8007166 <prvUnlockQueue+0x46>
					break;
 8007164:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8007166:	687b      	ldr	r3, [r7, #4]
 8007168:	22ff      	movs	r2, #255	@ 0xff
 800716a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 800716e:	f001 fcad 	bl	8008acc <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8007172:	f001 fc79 	bl	8008a68 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8007176:	687b      	ldr	r3, [r7, #4]
 8007178:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800717c:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800717e:	e011      	b.n	80071a4 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007180:	687b      	ldr	r3, [r7, #4]
 8007182:	691b      	ldr	r3, [r3, #16]
 8007184:	2b00      	cmp	r3, #0
 8007186:	d012      	beq.n	80071ae <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007188:	687b      	ldr	r3, [r7, #4]
 800718a:	3310      	adds	r3, #16
 800718c:	4618      	mov	r0, r3
 800718e:	f000 fd37 	bl	8007c00 <xTaskRemoveFromEventList>
 8007192:	4603      	mov	r3, r0
 8007194:	2b00      	cmp	r3, #0
 8007196:	d001      	beq.n	800719c <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8007198:	f000 fe10 	bl	8007dbc <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800719c:	7bbb      	ldrb	r3, [r7, #14]
 800719e:	3b01      	subs	r3, #1
 80071a0:	b2db      	uxtb	r3, r3
 80071a2:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80071a4:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80071a8:	2b00      	cmp	r3, #0
 80071aa:	dce9      	bgt.n	8007180 <prvUnlockQueue+0x60>
 80071ac:	e000      	b.n	80071b0 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 80071ae:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 80071b0:	687b      	ldr	r3, [r7, #4]
 80071b2:	22ff      	movs	r2, #255	@ 0xff
 80071b4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 80071b8:	f001 fc88 	bl	8008acc <vPortExitCritical>
}
 80071bc:	bf00      	nop
 80071be:	3710      	adds	r7, #16
 80071c0:	46bd      	mov	sp, r7
 80071c2:	bd80      	pop	{r7, pc}

080071c4 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 80071c4:	b580      	push	{r7, lr}
 80071c6:	b084      	sub	sp, #16
 80071c8:	af00      	add	r7, sp, #0
 80071ca:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80071cc:	f001 fc4c 	bl	8008a68 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 80071d0:	687b      	ldr	r3, [r7, #4]
 80071d2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80071d4:	2b00      	cmp	r3, #0
 80071d6:	d102      	bne.n	80071de <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 80071d8:	2301      	movs	r3, #1
 80071da:	60fb      	str	r3, [r7, #12]
 80071dc:	e001      	b.n	80071e2 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 80071de:	2300      	movs	r3, #0
 80071e0:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80071e2:	f001 fc73 	bl	8008acc <vPortExitCritical>

	return xReturn;
 80071e6:	68fb      	ldr	r3, [r7, #12]
}
 80071e8:	4618      	mov	r0, r3
 80071ea:	3710      	adds	r7, #16
 80071ec:	46bd      	mov	sp, r7
 80071ee:	bd80      	pop	{r7, pc}

080071f0 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 80071f0:	b580      	push	{r7, lr}
 80071f2:	b084      	sub	sp, #16
 80071f4:	af00      	add	r7, sp, #0
 80071f6:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80071f8:	f001 fc36 	bl	8008a68 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80071fc:	687b      	ldr	r3, [r7, #4]
 80071fe:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8007200:	687b      	ldr	r3, [r7, #4]
 8007202:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007204:	429a      	cmp	r2, r3
 8007206:	d102      	bne.n	800720e <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8007208:	2301      	movs	r3, #1
 800720a:	60fb      	str	r3, [r7, #12]
 800720c:	e001      	b.n	8007212 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800720e:	2300      	movs	r3, #0
 8007210:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8007212:	f001 fc5b 	bl	8008acc <vPortExitCritical>

	return xReturn;
 8007216:	68fb      	ldr	r3, [r7, #12]
}
 8007218:	4618      	mov	r0, r3
 800721a:	3710      	adds	r7, #16
 800721c:	46bd      	mov	sp, r7
 800721e:	bd80      	pop	{r7, pc}

08007220 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8007220:	b480      	push	{r7}
 8007222:	b085      	sub	sp, #20
 8007224:	af00      	add	r7, sp, #0
 8007226:	6078      	str	r0, [r7, #4]
 8007228:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800722a:	2300      	movs	r3, #0
 800722c:	60fb      	str	r3, [r7, #12]
 800722e:	e014      	b.n	800725a <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8007230:	4a0f      	ldr	r2, [pc, #60]	@ (8007270 <vQueueAddToRegistry+0x50>)
 8007232:	68fb      	ldr	r3, [r7, #12]
 8007234:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8007238:	2b00      	cmp	r3, #0
 800723a:	d10b      	bne.n	8007254 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800723c:	490c      	ldr	r1, [pc, #48]	@ (8007270 <vQueueAddToRegistry+0x50>)
 800723e:	68fb      	ldr	r3, [r7, #12]
 8007240:	683a      	ldr	r2, [r7, #0]
 8007242:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8007246:	4a0a      	ldr	r2, [pc, #40]	@ (8007270 <vQueueAddToRegistry+0x50>)
 8007248:	68fb      	ldr	r3, [r7, #12]
 800724a:	00db      	lsls	r3, r3, #3
 800724c:	4413      	add	r3, r2
 800724e:	687a      	ldr	r2, [r7, #4]
 8007250:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8007252:	e006      	b.n	8007262 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8007254:	68fb      	ldr	r3, [r7, #12]
 8007256:	3301      	adds	r3, #1
 8007258:	60fb      	str	r3, [r7, #12]
 800725a:	68fb      	ldr	r3, [r7, #12]
 800725c:	2b07      	cmp	r3, #7
 800725e:	d9e7      	bls.n	8007230 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8007260:	bf00      	nop
 8007262:	bf00      	nop
 8007264:	3714      	adds	r7, #20
 8007266:	46bd      	mov	sp, r7
 8007268:	f85d 7b04 	ldr.w	r7, [sp], #4
 800726c:	4770      	bx	lr
 800726e:	bf00      	nop
 8007270:	20000c90 	.word	0x20000c90

08007274 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8007274:	b580      	push	{r7, lr}
 8007276:	b086      	sub	sp, #24
 8007278:	af00      	add	r7, sp, #0
 800727a:	60f8      	str	r0, [r7, #12]
 800727c:	60b9      	str	r1, [r7, #8]
 800727e:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8007280:	68fb      	ldr	r3, [r7, #12]
 8007282:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8007284:	f001 fbf0 	bl	8008a68 <vPortEnterCritical>
 8007288:	697b      	ldr	r3, [r7, #20]
 800728a:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800728e:	b25b      	sxtb	r3, r3
 8007290:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007294:	d103      	bne.n	800729e <vQueueWaitForMessageRestricted+0x2a>
 8007296:	697b      	ldr	r3, [r7, #20]
 8007298:	2200      	movs	r2, #0
 800729a:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800729e:	697b      	ldr	r3, [r7, #20]
 80072a0:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80072a4:	b25b      	sxtb	r3, r3
 80072a6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80072aa:	d103      	bne.n	80072b4 <vQueueWaitForMessageRestricted+0x40>
 80072ac:	697b      	ldr	r3, [r7, #20]
 80072ae:	2200      	movs	r2, #0
 80072b0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80072b4:	f001 fc0a 	bl	8008acc <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 80072b8:	697b      	ldr	r3, [r7, #20]
 80072ba:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80072bc:	2b00      	cmp	r3, #0
 80072be:	d106      	bne.n	80072ce <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 80072c0:	697b      	ldr	r3, [r7, #20]
 80072c2:	3324      	adds	r3, #36	@ 0x24
 80072c4:	687a      	ldr	r2, [r7, #4]
 80072c6:	68b9      	ldr	r1, [r7, #8]
 80072c8:	4618      	mov	r0, r3
 80072ca:	f000 fc6d 	bl	8007ba8 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 80072ce:	6978      	ldr	r0, [r7, #20]
 80072d0:	f7ff ff26 	bl	8007120 <prvUnlockQueue>
	}
 80072d4:	bf00      	nop
 80072d6:	3718      	adds	r7, #24
 80072d8:	46bd      	mov	sp, r7
 80072da:	bd80      	pop	{r7, pc}

080072dc <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 80072dc:	b580      	push	{r7, lr}
 80072de:	b08e      	sub	sp, #56	@ 0x38
 80072e0:	af04      	add	r7, sp, #16
 80072e2:	60f8      	str	r0, [r7, #12]
 80072e4:	60b9      	str	r1, [r7, #8]
 80072e6:	607a      	str	r2, [r7, #4]
 80072e8:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 80072ea:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80072ec:	2b00      	cmp	r3, #0
 80072ee:	d10b      	bne.n	8007308 <xTaskCreateStatic+0x2c>
	__asm volatile
 80072f0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80072f4:	f383 8811 	msr	BASEPRI, r3
 80072f8:	f3bf 8f6f 	isb	sy
 80072fc:	f3bf 8f4f 	dsb	sy
 8007300:	623b      	str	r3, [r7, #32]
}
 8007302:	bf00      	nop
 8007304:	bf00      	nop
 8007306:	e7fd      	b.n	8007304 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8007308:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800730a:	2b00      	cmp	r3, #0
 800730c:	d10b      	bne.n	8007326 <xTaskCreateStatic+0x4a>
	__asm volatile
 800730e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007312:	f383 8811 	msr	BASEPRI, r3
 8007316:	f3bf 8f6f 	isb	sy
 800731a:	f3bf 8f4f 	dsb	sy
 800731e:	61fb      	str	r3, [r7, #28]
}
 8007320:	bf00      	nop
 8007322:	bf00      	nop
 8007324:	e7fd      	b.n	8007322 <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8007326:	23a8      	movs	r3, #168	@ 0xa8
 8007328:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800732a:	693b      	ldr	r3, [r7, #16]
 800732c:	2ba8      	cmp	r3, #168	@ 0xa8
 800732e:	d00b      	beq.n	8007348 <xTaskCreateStatic+0x6c>
	__asm volatile
 8007330:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007334:	f383 8811 	msr	BASEPRI, r3
 8007338:	f3bf 8f6f 	isb	sy
 800733c:	f3bf 8f4f 	dsb	sy
 8007340:	61bb      	str	r3, [r7, #24]
}
 8007342:	bf00      	nop
 8007344:	bf00      	nop
 8007346:	e7fd      	b.n	8007344 <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8007348:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800734a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800734c:	2b00      	cmp	r3, #0
 800734e:	d01e      	beq.n	800738e <xTaskCreateStatic+0xb2>
 8007350:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007352:	2b00      	cmp	r3, #0
 8007354:	d01b      	beq.n	800738e <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8007356:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007358:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800735a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800735c:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800735e:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8007360:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007362:	2202      	movs	r2, #2
 8007364:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8007368:	2300      	movs	r3, #0
 800736a:	9303      	str	r3, [sp, #12]
 800736c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800736e:	9302      	str	r3, [sp, #8]
 8007370:	f107 0314 	add.w	r3, r7, #20
 8007374:	9301      	str	r3, [sp, #4]
 8007376:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007378:	9300      	str	r3, [sp, #0]
 800737a:	683b      	ldr	r3, [r7, #0]
 800737c:	687a      	ldr	r2, [r7, #4]
 800737e:	68b9      	ldr	r1, [r7, #8]
 8007380:	68f8      	ldr	r0, [r7, #12]
 8007382:	f000 f851 	bl	8007428 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8007386:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8007388:	f000 f8f6 	bl	8007578 <prvAddNewTaskToReadyList>
 800738c:	e001      	b.n	8007392 <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 800738e:	2300      	movs	r3, #0
 8007390:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8007392:	697b      	ldr	r3, [r7, #20]
	}
 8007394:	4618      	mov	r0, r3
 8007396:	3728      	adds	r7, #40	@ 0x28
 8007398:	46bd      	mov	sp, r7
 800739a:	bd80      	pop	{r7, pc}

0800739c <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800739c:	b580      	push	{r7, lr}
 800739e:	b08c      	sub	sp, #48	@ 0x30
 80073a0:	af04      	add	r7, sp, #16
 80073a2:	60f8      	str	r0, [r7, #12]
 80073a4:	60b9      	str	r1, [r7, #8]
 80073a6:	603b      	str	r3, [r7, #0]
 80073a8:	4613      	mov	r3, r2
 80073aa:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80073ac:	88fb      	ldrh	r3, [r7, #6]
 80073ae:	009b      	lsls	r3, r3, #2
 80073b0:	4618      	mov	r0, r3
 80073b2:	f001 fc7b 	bl	8008cac <pvPortMalloc>
 80073b6:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 80073b8:	697b      	ldr	r3, [r7, #20]
 80073ba:	2b00      	cmp	r3, #0
 80073bc:	d00e      	beq.n	80073dc <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 80073be:	20a8      	movs	r0, #168	@ 0xa8
 80073c0:	f001 fc74 	bl	8008cac <pvPortMalloc>
 80073c4:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 80073c6:	69fb      	ldr	r3, [r7, #28]
 80073c8:	2b00      	cmp	r3, #0
 80073ca:	d003      	beq.n	80073d4 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 80073cc:	69fb      	ldr	r3, [r7, #28]
 80073ce:	697a      	ldr	r2, [r7, #20]
 80073d0:	631a      	str	r2, [r3, #48]	@ 0x30
 80073d2:	e005      	b.n	80073e0 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 80073d4:	6978      	ldr	r0, [r7, #20]
 80073d6:	f001 fd37 	bl	8008e48 <vPortFree>
 80073da:	e001      	b.n	80073e0 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 80073dc:	2300      	movs	r3, #0
 80073de:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 80073e0:	69fb      	ldr	r3, [r7, #28]
 80073e2:	2b00      	cmp	r3, #0
 80073e4:	d017      	beq.n	8007416 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80073e6:	69fb      	ldr	r3, [r7, #28]
 80073e8:	2200      	movs	r2, #0
 80073ea:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80073ee:	88fa      	ldrh	r2, [r7, #6]
 80073f0:	2300      	movs	r3, #0
 80073f2:	9303      	str	r3, [sp, #12]
 80073f4:	69fb      	ldr	r3, [r7, #28]
 80073f6:	9302      	str	r3, [sp, #8]
 80073f8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80073fa:	9301      	str	r3, [sp, #4]
 80073fc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80073fe:	9300      	str	r3, [sp, #0]
 8007400:	683b      	ldr	r3, [r7, #0]
 8007402:	68b9      	ldr	r1, [r7, #8]
 8007404:	68f8      	ldr	r0, [r7, #12]
 8007406:	f000 f80f 	bl	8007428 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800740a:	69f8      	ldr	r0, [r7, #28]
 800740c:	f000 f8b4 	bl	8007578 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8007410:	2301      	movs	r3, #1
 8007412:	61bb      	str	r3, [r7, #24]
 8007414:	e002      	b.n	800741c <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8007416:	f04f 33ff 	mov.w	r3, #4294967295
 800741a:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800741c:	69bb      	ldr	r3, [r7, #24]
	}
 800741e:	4618      	mov	r0, r3
 8007420:	3720      	adds	r7, #32
 8007422:	46bd      	mov	sp, r7
 8007424:	bd80      	pop	{r7, pc}
	...

08007428 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8007428:	b580      	push	{r7, lr}
 800742a:	b088      	sub	sp, #32
 800742c:	af00      	add	r7, sp, #0
 800742e:	60f8      	str	r0, [r7, #12]
 8007430:	60b9      	str	r1, [r7, #8]
 8007432:	607a      	str	r2, [r7, #4]
 8007434:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8007436:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007438:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 800743a:	687b      	ldr	r3, [r7, #4]
 800743c:	009b      	lsls	r3, r3, #2
 800743e:	461a      	mov	r2, r3
 8007440:	21a5      	movs	r1, #165	@ 0xa5
 8007442:	f001 fe21 	bl	8009088 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8007446:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007448:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800744a:	687b      	ldr	r3, [r7, #4]
 800744c:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8007450:	3b01      	subs	r3, #1
 8007452:	009b      	lsls	r3, r3, #2
 8007454:	4413      	add	r3, r2
 8007456:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8007458:	69bb      	ldr	r3, [r7, #24]
 800745a:	f023 0307 	bic.w	r3, r3, #7
 800745e:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8007460:	69bb      	ldr	r3, [r7, #24]
 8007462:	f003 0307 	and.w	r3, r3, #7
 8007466:	2b00      	cmp	r3, #0
 8007468:	d00b      	beq.n	8007482 <prvInitialiseNewTask+0x5a>
	__asm volatile
 800746a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800746e:	f383 8811 	msr	BASEPRI, r3
 8007472:	f3bf 8f6f 	isb	sy
 8007476:	f3bf 8f4f 	dsb	sy
 800747a:	617b      	str	r3, [r7, #20]
}
 800747c:	bf00      	nop
 800747e:	bf00      	nop
 8007480:	e7fd      	b.n	800747e <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8007482:	68bb      	ldr	r3, [r7, #8]
 8007484:	2b00      	cmp	r3, #0
 8007486:	d01f      	beq.n	80074c8 <prvInitialiseNewTask+0xa0>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8007488:	2300      	movs	r3, #0
 800748a:	61fb      	str	r3, [r7, #28]
 800748c:	e012      	b.n	80074b4 <prvInitialiseNewTask+0x8c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800748e:	68ba      	ldr	r2, [r7, #8]
 8007490:	69fb      	ldr	r3, [r7, #28]
 8007492:	4413      	add	r3, r2
 8007494:	7819      	ldrb	r1, [r3, #0]
 8007496:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007498:	69fb      	ldr	r3, [r7, #28]
 800749a:	4413      	add	r3, r2
 800749c:	3334      	adds	r3, #52	@ 0x34
 800749e:	460a      	mov	r2, r1
 80074a0:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 80074a2:	68ba      	ldr	r2, [r7, #8]
 80074a4:	69fb      	ldr	r3, [r7, #28]
 80074a6:	4413      	add	r3, r2
 80074a8:	781b      	ldrb	r3, [r3, #0]
 80074aa:	2b00      	cmp	r3, #0
 80074ac:	d006      	beq.n	80074bc <prvInitialiseNewTask+0x94>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80074ae:	69fb      	ldr	r3, [r7, #28]
 80074b0:	3301      	adds	r3, #1
 80074b2:	61fb      	str	r3, [r7, #28]
 80074b4:	69fb      	ldr	r3, [r7, #28]
 80074b6:	2b0f      	cmp	r3, #15
 80074b8:	d9e9      	bls.n	800748e <prvInitialiseNewTask+0x66>
 80074ba:	e000      	b.n	80074be <prvInitialiseNewTask+0x96>
			{
				break;
 80074bc:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80074be:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80074c0:	2200      	movs	r2, #0
 80074c2:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80074c6:	e003      	b.n	80074d0 <prvInitialiseNewTask+0xa8>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 80074c8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80074ca:	2200      	movs	r2, #0
 80074cc:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80074d0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80074d2:	2b37      	cmp	r3, #55	@ 0x37
 80074d4:	d901      	bls.n	80074da <prvInitialiseNewTask+0xb2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80074d6:	2337      	movs	r3, #55	@ 0x37
 80074d8:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80074da:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80074dc:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80074de:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80074e0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80074e2:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80074e4:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 80074e6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80074e8:	2200      	movs	r2, #0
 80074ea:	651a      	str	r2, [r3, #80]	@ 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80074ec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80074ee:	3304      	adds	r3, #4
 80074f0:	4618      	mov	r0, r3
 80074f2:	f7ff f965 	bl	80067c0 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80074f6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80074f8:	3318      	adds	r3, #24
 80074fa:	4618      	mov	r0, r3
 80074fc:	f7ff f960 	bl	80067c0 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8007500:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007502:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007504:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007506:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007508:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800750c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800750e:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8007510:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007512:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007514:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8007516:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007518:	2200      	movs	r2, #0
 800751a:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800751e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007520:	2200      	movs	r2, #0
 8007522:	f883 20a4 	strb.w	r2, [r3, #164]	@ 0xa4
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8007526:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007528:	3354      	adds	r3, #84	@ 0x54
 800752a:	224c      	movs	r2, #76	@ 0x4c
 800752c:	2100      	movs	r1, #0
 800752e:	4618      	mov	r0, r3
 8007530:	f001 fdaa 	bl	8009088 <memset>
 8007534:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007536:	4a0d      	ldr	r2, [pc, #52]	@ (800756c <prvInitialiseNewTask+0x144>)
 8007538:	659a      	str	r2, [r3, #88]	@ 0x58
 800753a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800753c:	4a0c      	ldr	r2, [pc, #48]	@ (8007570 <prvInitialiseNewTask+0x148>)
 800753e:	65da      	str	r2, [r3, #92]	@ 0x5c
 8007540:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007542:	4a0c      	ldr	r2, [pc, #48]	@ (8007574 <prvInitialiseNewTask+0x14c>)
 8007544:	661a      	str	r2, [r3, #96]	@ 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8007546:	683a      	ldr	r2, [r7, #0]
 8007548:	68f9      	ldr	r1, [r7, #12]
 800754a:	69b8      	ldr	r0, [r7, #24]
 800754c:	f001 f95a 	bl	8008804 <pxPortInitialiseStack>
 8007550:	4602      	mov	r2, r0
 8007552:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007554:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8007556:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007558:	2b00      	cmp	r3, #0
 800755a:	d002      	beq.n	8007562 <prvInitialiseNewTask+0x13a>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800755c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800755e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007560:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8007562:	bf00      	nop
 8007564:	3720      	adds	r7, #32
 8007566:	46bd      	mov	sp, r7
 8007568:	bd80      	pop	{r7, pc}
 800756a:	bf00      	nop
 800756c:	20004f24 	.word	0x20004f24
 8007570:	20004f8c 	.word	0x20004f8c
 8007574:	20004ff4 	.word	0x20004ff4

08007578 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8007578:	b580      	push	{r7, lr}
 800757a:	b082      	sub	sp, #8
 800757c:	af00      	add	r7, sp, #0
 800757e:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8007580:	f001 fa72 	bl	8008a68 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8007584:	4b2d      	ldr	r3, [pc, #180]	@ (800763c <prvAddNewTaskToReadyList+0xc4>)
 8007586:	681b      	ldr	r3, [r3, #0]
 8007588:	3301      	adds	r3, #1
 800758a:	4a2c      	ldr	r2, [pc, #176]	@ (800763c <prvAddNewTaskToReadyList+0xc4>)
 800758c:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800758e:	4b2c      	ldr	r3, [pc, #176]	@ (8007640 <prvAddNewTaskToReadyList+0xc8>)
 8007590:	681b      	ldr	r3, [r3, #0]
 8007592:	2b00      	cmp	r3, #0
 8007594:	d109      	bne.n	80075aa <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8007596:	4a2a      	ldr	r2, [pc, #168]	@ (8007640 <prvAddNewTaskToReadyList+0xc8>)
 8007598:	687b      	ldr	r3, [r7, #4]
 800759a:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800759c:	4b27      	ldr	r3, [pc, #156]	@ (800763c <prvAddNewTaskToReadyList+0xc4>)
 800759e:	681b      	ldr	r3, [r3, #0]
 80075a0:	2b01      	cmp	r3, #1
 80075a2:	d110      	bne.n	80075c6 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80075a4:	f000 fc2e 	bl	8007e04 <prvInitialiseTaskLists>
 80075a8:	e00d      	b.n	80075c6 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80075aa:	4b26      	ldr	r3, [pc, #152]	@ (8007644 <prvAddNewTaskToReadyList+0xcc>)
 80075ac:	681b      	ldr	r3, [r3, #0]
 80075ae:	2b00      	cmp	r3, #0
 80075b0:	d109      	bne.n	80075c6 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80075b2:	4b23      	ldr	r3, [pc, #140]	@ (8007640 <prvAddNewTaskToReadyList+0xc8>)
 80075b4:	681b      	ldr	r3, [r3, #0]
 80075b6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80075b8:	687b      	ldr	r3, [r7, #4]
 80075ba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80075bc:	429a      	cmp	r2, r3
 80075be:	d802      	bhi.n	80075c6 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80075c0:	4a1f      	ldr	r2, [pc, #124]	@ (8007640 <prvAddNewTaskToReadyList+0xc8>)
 80075c2:	687b      	ldr	r3, [r7, #4]
 80075c4:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80075c6:	4b20      	ldr	r3, [pc, #128]	@ (8007648 <prvAddNewTaskToReadyList+0xd0>)
 80075c8:	681b      	ldr	r3, [r3, #0]
 80075ca:	3301      	adds	r3, #1
 80075cc:	4a1e      	ldr	r2, [pc, #120]	@ (8007648 <prvAddNewTaskToReadyList+0xd0>)
 80075ce:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 80075d0:	4b1d      	ldr	r3, [pc, #116]	@ (8007648 <prvAddNewTaskToReadyList+0xd0>)
 80075d2:	681a      	ldr	r2, [r3, #0]
 80075d4:	687b      	ldr	r3, [r7, #4]
 80075d6:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80075d8:	687b      	ldr	r3, [r7, #4]
 80075da:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80075dc:	4b1b      	ldr	r3, [pc, #108]	@ (800764c <prvAddNewTaskToReadyList+0xd4>)
 80075de:	681b      	ldr	r3, [r3, #0]
 80075e0:	429a      	cmp	r2, r3
 80075e2:	d903      	bls.n	80075ec <prvAddNewTaskToReadyList+0x74>
 80075e4:	687b      	ldr	r3, [r7, #4]
 80075e6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80075e8:	4a18      	ldr	r2, [pc, #96]	@ (800764c <prvAddNewTaskToReadyList+0xd4>)
 80075ea:	6013      	str	r3, [r2, #0]
 80075ec:	687b      	ldr	r3, [r7, #4]
 80075ee:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80075f0:	4613      	mov	r3, r2
 80075f2:	009b      	lsls	r3, r3, #2
 80075f4:	4413      	add	r3, r2
 80075f6:	009b      	lsls	r3, r3, #2
 80075f8:	4a15      	ldr	r2, [pc, #84]	@ (8007650 <prvAddNewTaskToReadyList+0xd8>)
 80075fa:	441a      	add	r2, r3
 80075fc:	687b      	ldr	r3, [r7, #4]
 80075fe:	3304      	adds	r3, #4
 8007600:	4619      	mov	r1, r3
 8007602:	4610      	mov	r0, r2
 8007604:	f7ff f8e9 	bl	80067da <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8007608:	f001 fa60 	bl	8008acc <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800760c:	4b0d      	ldr	r3, [pc, #52]	@ (8007644 <prvAddNewTaskToReadyList+0xcc>)
 800760e:	681b      	ldr	r3, [r3, #0]
 8007610:	2b00      	cmp	r3, #0
 8007612:	d00e      	beq.n	8007632 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8007614:	4b0a      	ldr	r3, [pc, #40]	@ (8007640 <prvAddNewTaskToReadyList+0xc8>)
 8007616:	681b      	ldr	r3, [r3, #0]
 8007618:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800761a:	687b      	ldr	r3, [r7, #4]
 800761c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800761e:	429a      	cmp	r2, r3
 8007620:	d207      	bcs.n	8007632 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8007622:	4b0c      	ldr	r3, [pc, #48]	@ (8007654 <prvAddNewTaskToReadyList+0xdc>)
 8007624:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007628:	601a      	str	r2, [r3, #0]
 800762a:	f3bf 8f4f 	dsb	sy
 800762e:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8007632:	bf00      	nop
 8007634:	3708      	adds	r7, #8
 8007636:	46bd      	mov	sp, r7
 8007638:	bd80      	pop	{r7, pc}
 800763a:	bf00      	nop
 800763c:	200011a4 	.word	0x200011a4
 8007640:	20000cd0 	.word	0x20000cd0
 8007644:	200011b0 	.word	0x200011b0
 8007648:	200011c0 	.word	0x200011c0
 800764c:	200011ac 	.word	0x200011ac
 8007650:	20000cd4 	.word	0x20000cd4
 8007654:	e000ed04 	.word	0xe000ed04

08007658 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8007658:	b580      	push	{r7, lr}
 800765a:	b084      	sub	sp, #16
 800765c:	af00      	add	r7, sp, #0
 800765e:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8007660:	2300      	movs	r3, #0
 8007662:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8007664:	687b      	ldr	r3, [r7, #4]
 8007666:	2b00      	cmp	r3, #0
 8007668:	d018      	beq.n	800769c <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800766a:	4b14      	ldr	r3, [pc, #80]	@ (80076bc <vTaskDelay+0x64>)
 800766c:	681b      	ldr	r3, [r3, #0]
 800766e:	2b00      	cmp	r3, #0
 8007670:	d00b      	beq.n	800768a <vTaskDelay+0x32>
	__asm volatile
 8007672:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007676:	f383 8811 	msr	BASEPRI, r3
 800767a:	f3bf 8f6f 	isb	sy
 800767e:	f3bf 8f4f 	dsb	sy
 8007682:	60bb      	str	r3, [r7, #8]
}
 8007684:	bf00      	nop
 8007686:	bf00      	nop
 8007688:	e7fd      	b.n	8007686 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800768a:	f000 f88b 	bl	80077a4 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800768e:	2100      	movs	r1, #0
 8007690:	6878      	ldr	r0, [r7, #4]
 8007692:	f000 fd09 	bl	80080a8 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8007696:	f000 f893 	bl	80077c0 <xTaskResumeAll>
 800769a:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800769c:	68fb      	ldr	r3, [r7, #12]
 800769e:	2b00      	cmp	r3, #0
 80076a0:	d107      	bne.n	80076b2 <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 80076a2:	4b07      	ldr	r3, [pc, #28]	@ (80076c0 <vTaskDelay+0x68>)
 80076a4:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80076a8:	601a      	str	r2, [r3, #0]
 80076aa:	f3bf 8f4f 	dsb	sy
 80076ae:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80076b2:	bf00      	nop
 80076b4:	3710      	adds	r7, #16
 80076b6:	46bd      	mov	sp, r7
 80076b8:	bd80      	pop	{r7, pc}
 80076ba:	bf00      	nop
 80076bc:	200011cc 	.word	0x200011cc
 80076c0:	e000ed04 	.word	0xe000ed04

080076c4 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80076c4:	b580      	push	{r7, lr}
 80076c6:	b08a      	sub	sp, #40	@ 0x28
 80076c8:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 80076ca:	2300      	movs	r3, #0
 80076cc:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 80076ce:	2300      	movs	r3, #0
 80076d0:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 80076d2:	463a      	mov	r2, r7
 80076d4:	1d39      	adds	r1, r7, #4
 80076d6:	f107 0308 	add.w	r3, r7, #8
 80076da:	4618      	mov	r0, r3
 80076dc:	f7ff f81c 	bl	8006718 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 80076e0:	6839      	ldr	r1, [r7, #0]
 80076e2:	687b      	ldr	r3, [r7, #4]
 80076e4:	68ba      	ldr	r2, [r7, #8]
 80076e6:	9202      	str	r2, [sp, #8]
 80076e8:	9301      	str	r3, [sp, #4]
 80076ea:	2300      	movs	r3, #0
 80076ec:	9300      	str	r3, [sp, #0]
 80076ee:	2300      	movs	r3, #0
 80076f0:	460a      	mov	r2, r1
 80076f2:	4924      	ldr	r1, [pc, #144]	@ (8007784 <vTaskStartScheduler+0xc0>)
 80076f4:	4824      	ldr	r0, [pc, #144]	@ (8007788 <vTaskStartScheduler+0xc4>)
 80076f6:	f7ff fdf1 	bl	80072dc <xTaskCreateStatic>
 80076fa:	4603      	mov	r3, r0
 80076fc:	4a23      	ldr	r2, [pc, #140]	@ (800778c <vTaskStartScheduler+0xc8>)
 80076fe:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8007700:	4b22      	ldr	r3, [pc, #136]	@ (800778c <vTaskStartScheduler+0xc8>)
 8007702:	681b      	ldr	r3, [r3, #0]
 8007704:	2b00      	cmp	r3, #0
 8007706:	d002      	beq.n	800770e <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8007708:	2301      	movs	r3, #1
 800770a:	617b      	str	r3, [r7, #20]
 800770c:	e001      	b.n	8007712 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800770e:	2300      	movs	r3, #0
 8007710:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8007712:	697b      	ldr	r3, [r7, #20]
 8007714:	2b01      	cmp	r3, #1
 8007716:	d102      	bne.n	800771e <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8007718:	f000 fd1a 	bl	8008150 <xTimerCreateTimerTask>
 800771c:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800771e:	697b      	ldr	r3, [r7, #20]
 8007720:	2b01      	cmp	r3, #1
 8007722:	d11b      	bne.n	800775c <vTaskStartScheduler+0x98>
	__asm volatile
 8007724:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007728:	f383 8811 	msr	BASEPRI, r3
 800772c:	f3bf 8f6f 	isb	sy
 8007730:	f3bf 8f4f 	dsb	sy
 8007734:	613b      	str	r3, [r7, #16]
}
 8007736:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8007738:	4b15      	ldr	r3, [pc, #84]	@ (8007790 <vTaskStartScheduler+0xcc>)
 800773a:	681b      	ldr	r3, [r3, #0]
 800773c:	3354      	adds	r3, #84	@ 0x54
 800773e:	4a15      	ldr	r2, [pc, #84]	@ (8007794 <vTaskStartScheduler+0xd0>)
 8007740:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8007742:	4b15      	ldr	r3, [pc, #84]	@ (8007798 <vTaskStartScheduler+0xd4>)
 8007744:	f04f 32ff 	mov.w	r2, #4294967295
 8007748:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800774a:	4b14      	ldr	r3, [pc, #80]	@ (800779c <vTaskStartScheduler+0xd8>)
 800774c:	2201      	movs	r2, #1
 800774e:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8007750:	4b13      	ldr	r3, [pc, #76]	@ (80077a0 <vTaskStartScheduler+0xdc>)
 8007752:	2200      	movs	r2, #0
 8007754:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8007756:	f001 f8e3 	bl	8008920 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800775a:	e00f      	b.n	800777c <vTaskStartScheduler+0xb8>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800775c:	697b      	ldr	r3, [r7, #20]
 800775e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007762:	d10b      	bne.n	800777c <vTaskStartScheduler+0xb8>
	__asm volatile
 8007764:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007768:	f383 8811 	msr	BASEPRI, r3
 800776c:	f3bf 8f6f 	isb	sy
 8007770:	f3bf 8f4f 	dsb	sy
 8007774:	60fb      	str	r3, [r7, #12]
}
 8007776:	bf00      	nop
 8007778:	bf00      	nop
 800777a:	e7fd      	b.n	8007778 <vTaskStartScheduler+0xb4>
}
 800777c:	bf00      	nop
 800777e:	3718      	adds	r7, #24
 8007780:	46bd      	mov	sp, r7
 8007782:	bd80      	pop	{r7, pc}
 8007784:	080092a4 	.word	0x080092a4
 8007788:	08007dd5 	.word	0x08007dd5
 800778c:	200011c8 	.word	0x200011c8
 8007790:	20000cd0 	.word	0x20000cd0
 8007794:	20000058 	.word	0x20000058
 8007798:	200011c4 	.word	0x200011c4
 800779c:	200011b0 	.word	0x200011b0
 80077a0:	200011a8 	.word	0x200011a8

080077a4 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80077a4:	b480      	push	{r7}
 80077a6:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 80077a8:	4b04      	ldr	r3, [pc, #16]	@ (80077bc <vTaskSuspendAll+0x18>)
 80077aa:	681b      	ldr	r3, [r3, #0]
 80077ac:	3301      	adds	r3, #1
 80077ae:	4a03      	ldr	r2, [pc, #12]	@ (80077bc <vTaskSuspendAll+0x18>)
 80077b0:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 80077b2:	bf00      	nop
 80077b4:	46bd      	mov	sp, r7
 80077b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077ba:	4770      	bx	lr
 80077bc:	200011cc 	.word	0x200011cc

080077c0 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80077c0:	b580      	push	{r7, lr}
 80077c2:	b084      	sub	sp, #16
 80077c4:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 80077c6:	2300      	movs	r3, #0
 80077c8:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 80077ca:	2300      	movs	r3, #0
 80077cc:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 80077ce:	4b42      	ldr	r3, [pc, #264]	@ (80078d8 <xTaskResumeAll+0x118>)
 80077d0:	681b      	ldr	r3, [r3, #0]
 80077d2:	2b00      	cmp	r3, #0
 80077d4:	d10b      	bne.n	80077ee <xTaskResumeAll+0x2e>
	__asm volatile
 80077d6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80077da:	f383 8811 	msr	BASEPRI, r3
 80077de:	f3bf 8f6f 	isb	sy
 80077e2:	f3bf 8f4f 	dsb	sy
 80077e6:	603b      	str	r3, [r7, #0]
}
 80077e8:	bf00      	nop
 80077ea:	bf00      	nop
 80077ec:	e7fd      	b.n	80077ea <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 80077ee:	f001 f93b 	bl	8008a68 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 80077f2:	4b39      	ldr	r3, [pc, #228]	@ (80078d8 <xTaskResumeAll+0x118>)
 80077f4:	681b      	ldr	r3, [r3, #0]
 80077f6:	3b01      	subs	r3, #1
 80077f8:	4a37      	ldr	r2, [pc, #220]	@ (80078d8 <xTaskResumeAll+0x118>)
 80077fa:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80077fc:	4b36      	ldr	r3, [pc, #216]	@ (80078d8 <xTaskResumeAll+0x118>)
 80077fe:	681b      	ldr	r3, [r3, #0]
 8007800:	2b00      	cmp	r3, #0
 8007802:	d162      	bne.n	80078ca <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8007804:	4b35      	ldr	r3, [pc, #212]	@ (80078dc <xTaskResumeAll+0x11c>)
 8007806:	681b      	ldr	r3, [r3, #0]
 8007808:	2b00      	cmp	r3, #0
 800780a:	d05e      	beq.n	80078ca <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800780c:	e02f      	b.n	800786e <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800780e:	4b34      	ldr	r3, [pc, #208]	@ (80078e0 <xTaskResumeAll+0x120>)
 8007810:	68db      	ldr	r3, [r3, #12]
 8007812:	68db      	ldr	r3, [r3, #12]
 8007814:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8007816:	68fb      	ldr	r3, [r7, #12]
 8007818:	3318      	adds	r3, #24
 800781a:	4618      	mov	r0, r3
 800781c:	f7ff f83a 	bl	8006894 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007820:	68fb      	ldr	r3, [r7, #12]
 8007822:	3304      	adds	r3, #4
 8007824:	4618      	mov	r0, r3
 8007826:	f7ff f835 	bl	8006894 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800782a:	68fb      	ldr	r3, [r7, #12]
 800782c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800782e:	4b2d      	ldr	r3, [pc, #180]	@ (80078e4 <xTaskResumeAll+0x124>)
 8007830:	681b      	ldr	r3, [r3, #0]
 8007832:	429a      	cmp	r2, r3
 8007834:	d903      	bls.n	800783e <xTaskResumeAll+0x7e>
 8007836:	68fb      	ldr	r3, [r7, #12]
 8007838:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800783a:	4a2a      	ldr	r2, [pc, #168]	@ (80078e4 <xTaskResumeAll+0x124>)
 800783c:	6013      	str	r3, [r2, #0]
 800783e:	68fb      	ldr	r3, [r7, #12]
 8007840:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007842:	4613      	mov	r3, r2
 8007844:	009b      	lsls	r3, r3, #2
 8007846:	4413      	add	r3, r2
 8007848:	009b      	lsls	r3, r3, #2
 800784a:	4a27      	ldr	r2, [pc, #156]	@ (80078e8 <xTaskResumeAll+0x128>)
 800784c:	441a      	add	r2, r3
 800784e:	68fb      	ldr	r3, [r7, #12]
 8007850:	3304      	adds	r3, #4
 8007852:	4619      	mov	r1, r3
 8007854:	4610      	mov	r0, r2
 8007856:	f7fe ffc0 	bl	80067da <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800785a:	68fb      	ldr	r3, [r7, #12]
 800785c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800785e:	4b23      	ldr	r3, [pc, #140]	@ (80078ec <xTaskResumeAll+0x12c>)
 8007860:	681b      	ldr	r3, [r3, #0]
 8007862:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007864:	429a      	cmp	r2, r3
 8007866:	d302      	bcc.n	800786e <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 8007868:	4b21      	ldr	r3, [pc, #132]	@ (80078f0 <xTaskResumeAll+0x130>)
 800786a:	2201      	movs	r2, #1
 800786c:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800786e:	4b1c      	ldr	r3, [pc, #112]	@ (80078e0 <xTaskResumeAll+0x120>)
 8007870:	681b      	ldr	r3, [r3, #0]
 8007872:	2b00      	cmp	r3, #0
 8007874:	d1cb      	bne.n	800780e <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8007876:	68fb      	ldr	r3, [r7, #12]
 8007878:	2b00      	cmp	r3, #0
 800787a:	d001      	beq.n	8007880 <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800787c:	f000 fb66 	bl	8007f4c <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8007880:	4b1c      	ldr	r3, [pc, #112]	@ (80078f4 <xTaskResumeAll+0x134>)
 8007882:	681b      	ldr	r3, [r3, #0]
 8007884:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8007886:	687b      	ldr	r3, [r7, #4]
 8007888:	2b00      	cmp	r3, #0
 800788a:	d010      	beq.n	80078ae <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800788c:	f000 f846 	bl	800791c <xTaskIncrementTick>
 8007890:	4603      	mov	r3, r0
 8007892:	2b00      	cmp	r3, #0
 8007894:	d002      	beq.n	800789c <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 8007896:	4b16      	ldr	r3, [pc, #88]	@ (80078f0 <xTaskResumeAll+0x130>)
 8007898:	2201      	movs	r2, #1
 800789a:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800789c:	687b      	ldr	r3, [r7, #4]
 800789e:	3b01      	subs	r3, #1
 80078a0:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 80078a2:	687b      	ldr	r3, [r7, #4]
 80078a4:	2b00      	cmp	r3, #0
 80078a6:	d1f1      	bne.n	800788c <xTaskResumeAll+0xcc>

						xPendedTicks = 0;
 80078a8:	4b12      	ldr	r3, [pc, #72]	@ (80078f4 <xTaskResumeAll+0x134>)
 80078aa:	2200      	movs	r2, #0
 80078ac:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80078ae:	4b10      	ldr	r3, [pc, #64]	@ (80078f0 <xTaskResumeAll+0x130>)
 80078b0:	681b      	ldr	r3, [r3, #0]
 80078b2:	2b00      	cmp	r3, #0
 80078b4:	d009      	beq.n	80078ca <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 80078b6:	2301      	movs	r3, #1
 80078b8:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 80078ba:	4b0f      	ldr	r3, [pc, #60]	@ (80078f8 <xTaskResumeAll+0x138>)
 80078bc:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80078c0:	601a      	str	r2, [r3, #0]
 80078c2:	f3bf 8f4f 	dsb	sy
 80078c6:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80078ca:	f001 f8ff 	bl	8008acc <vPortExitCritical>

	return xAlreadyYielded;
 80078ce:	68bb      	ldr	r3, [r7, #8]
}
 80078d0:	4618      	mov	r0, r3
 80078d2:	3710      	adds	r7, #16
 80078d4:	46bd      	mov	sp, r7
 80078d6:	bd80      	pop	{r7, pc}
 80078d8:	200011cc 	.word	0x200011cc
 80078dc:	200011a4 	.word	0x200011a4
 80078e0:	20001164 	.word	0x20001164
 80078e4:	200011ac 	.word	0x200011ac
 80078e8:	20000cd4 	.word	0x20000cd4
 80078ec:	20000cd0 	.word	0x20000cd0
 80078f0:	200011b8 	.word	0x200011b8
 80078f4:	200011b4 	.word	0x200011b4
 80078f8:	e000ed04 	.word	0xe000ed04

080078fc <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 80078fc:	b480      	push	{r7}
 80078fe:	b083      	sub	sp, #12
 8007900:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8007902:	4b05      	ldr	r3, [pc, #20]	@ (8007918 <xTaskGetTickCount+0x1c>)
 8007904:	681b      	ldr	r3, [r3, #0]
 8007906:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8007908:	687b      	ldr	r3, [r7, #4]
}
 800790a:	4618      	mov	r0, r3
 800790c:	370c      	adds	r7, #12
 800790e:	46bd      	mov	sp, r7
 8007910:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007914:	4770      	bx	lr
 8007916:	bf00      	nop
 8007918:	200011a8 	.word	0x200011a8

0800791c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800791c:	b580      	push	{r7, lr}
 800791e:	b086      	sub	sp, #24
 8007920:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8007922:	2300      	movs	r3, #0
 8007924:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007926:	4b4f      	ldr	r3, [pc, #316]	@ (8007a64 <xTaskIncrementTick+0x148>)
 8007928:	681b      	ldr	r3, [r3, #0]
 800792a:	2b00      	cmp	r3, #0
 800792c:	f040 8090 	bne.w	8007a50 <xTaskIncrementTick+0x134>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8007930:	4b4d      	ldr	r3, [pc, #308]	@ (8007a68 <xTaskIncrementTick+0x14c>)
 8007932:	681b      	ldr	r3, [r3, #0]
 8007934:	3301      	adds	r3, #1
 8007936:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8007938:	4a4b      	ldr	r2, [pc, #300]	@ (8007a68 <xTaskIncrementTick+0x14c>)
 800793a:	693b      	ldr	r3, [r7, #16]
 800793c:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800793e:	693b      	ldr	r3, [r7, #16]
 8007940:	2b00      	cmp	r3, #0
 8007942:	d121      	bne.n	8007988 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 8007944:	4b49      	ldr	r3, [pc, #292]	@ (8007a6c <xTaskIncrementTick+0x150>)
 8007946:	681b      	ldr	r3, [r3, #0]
 8007948:	681b      	ldr	r3, [r3, #0]
 800794a:	2b00      	cmp	r3, #0
 800794c:	d00b      	beq.n	8007966 <xTaskIncrementTick+0x4a>
	__asm volatile
 800794e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007952:	f383 8811 	msr	BASEPRI, r3
 8007956:	f3bf 8f6f 	isb	sy
 800795a:	f3bf 8f4f 	dsb	sy
 800795e:	603b      	str	r3, [r7, #0]
}
 8007960:	bf00      	nop
 8007962:	bf00      	nop
 8007964:	e7fd      	b.n	8007962 <xTaskIncrementTick+0x46>
 8007966:	4b41      	ldr	r3, [pc, #260]	@ (8007a6c <xTaskIncrementTick+0x150>)
 8007968:	681b      	ldr	r3, [r3, #0]
 800796a:	60fb      	str	r3, [r7, #12]
 800796c:	4b40      	ldr	r3, [pc, #256]	@ (8007a70 <xTaskIncrementTick+0x154>)
 800796e:	681b      	ldr	r3, [r3, #0]
 8007970:	4a3e      	ldr	r2, [pc, #248]	@ (8007a6c <xTaskIncrementTick+0x150>)
 8007972:	6013      	str	r3, [r2, #0]
 8007974:	4a3e      	ldr	r2, [pc, #248]	@ (8007a70 <xTaskIncrementTick+0x154>)
 8007976:	68fb      	ldr	r3, [r7, #12]
 8007978:	6013      	str	r3, [r2, #0]
 800797a:	4b3e      	ldr	r3, [pc, #248]	@ (8007a74 <xTaskIncrementTick+0x158>)
 800797c:	681b      	ldr	r3, [r3, #0]
 800797e:	3301      	adds	r3, #1
 8007980:	4a3c      	ldr	r2, [pc, #240]	@ (8007a74 <xTaskIncrementTick+0x158>)
 8007982:	6013      	str	r3, [r2, #0]
 8007984:	f000 fae2 	bl	8007f4c <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8007988:	4b3b      	ldr	r3, [pc, #236]	@ (8007a78 <xTaskIncrementTick+0x15c>)
 800798a:	681b      	ldr	r3, [r3, #0]
 800798c:	693a      	ldr	r2, [r7, #16]
 800798e:	429a      	cmp	r2, r3
 8007990:	d349      	bcc.n	8007a26 <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007992:	4b36      	ldr	r3, [pc, #216]	@ (8007a6c <xTaskIncrementTick+0x150>)
 8007994:	681b      	ldr	r3, [r3, #0]
 8007996:	681b      	ldr	r3, [r3, #0]
 8007998:	2b00      	cmp	r3, #0
 800799a:	d104      	bne.n	80079a6 <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800799c:	4b36      	ldr	r3, [pc, #216]	@ (8007a78 <xTaskIncrementTick+0x15c>)
 800799e:	f04f 32ff 	mov.w	r2, #4294967295
 80079a2:	601a      	str	r2, [r3, #0]
					break;
 80079a4:	e03f      	b.n	8007a26 <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80079a6:	4b31      	ldr	r3, [pc, #196]	@ (8007a6c <xTaskIncrementTick+0x150>)
 80079a8:	681b      	ldr	r3, [r3, #0]
 80079aa:	68db      	ldr	r3, [r3, #12]
 80079ac:	68db      	ldr	r3, [r3, #12]
 80079ae:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80079b0:	68bb      	ldr	r3, [r7, #8]
 80079b2:	685b      	ldr	r3, [r3, #4]
 80079b4:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80079b6:	693a      	ldr	r2, [r7, #16]
 80079b8:	687b      	ldr	r3, [r7, #4]
 80079ba:	429a      	cmp	r2, r3
 80079bc:	d203      	bcs.n	80079c6 <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80079be:	4a2e      	ldr	r2, [pc, #184]	@ (8007a78 <xTaskIncrementTick+0x15c>)
 80079c0:	687b      	ldr	r3, [r7, #4]
 80079c2:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 80079c4:	e02f      	b.n	8007a26 <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80079c6:	68bb      	ldr	r3, [r7, #8]
 80079c8:	3304      	adds	r3, #4
 80079ca:	4618      	mov	r0, r3
 80079cc:	f7fe ff62 	bl	8006894 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80079d0:	68bb      	ldr	r3, [r7, #8]
 80079d2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80079d4:	2b00      	cmp	r3, #0
 80079d6:	d004      	beq.n	80079e2 <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80079d8:	68bb      	ldr	r3, [r7, #8]
 80079da:	3318      	adds	r3, #24
 80079dc:	4618      	mov	r0, r3
 80079de:	f7fe ff59 	bl	8006894 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80079e2:	68bb      	ldr	r3, [r7, #8]
 80079e4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80079e6:	4b25      	ldr	r3, [pc, #148]	@ (8007a7c <xTaskIncrementTick+0x160>)
 80079e8:	681b      	ldr	r3, [r3, #0]
 80079ea:	429a      	cmp	r2, r3
 80079ec:	d903      	bls.n	80079f6 <xTaskIncrementTick+0xda>
 80079ee:	68bb      	ldr	r3, [r7, #8]
 80079f0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80079f2:	4a22      	ldr	r2, [pc, #136]	@ (8007a7c <xTaskIncrementTick+0x160>)
 80079f4:	6013      	str	r3, [r2, #0]
 80079f6:	68bb      	ldr	r3, [r7, #8]
 80079f8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80079fa:	4613      	mov	r3, r2
 80079fc:	009b      	lsls	r3, r3, #2
 80079fe:	4413      	add	r3, r2
 8007a00:	009b      	lsls	r3, r3, #2
 8007a02:	4a1f      	ldr	r2, [pc, #124]	@ (8007a80 <xTaskIncrementTick+0x164>)
 8007a04:	441a      	add	r2, r3
 8007a06:	68bb      	ldr	r3, [r7, #8]
 8007a08:	3304      	adds	r3, #4
 8007a0a:	4619      	mov	r1, r3
 8007a0c:	4610      	mov	r0, r2
 8007a0e:	f7fe fee4 	bl	80067da <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8007a12:	68bb      	ldr	r3, [r7, #8]
 8007a14:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007a16:	4b1b      	ldr	r3, [pc, #108]	@ (8007a84 <xTaskIncrementTick+0x168>)
 8007a18:	681b      	ldr	r3, [r3, #0]
 8007a1a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007a1c:	429a      	cmp	r2, r3
 8007a1e:	d3b8      	bcc.n	8007992 <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 8007a20:	2301      	movs	r3, #1
 8007a22:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007a24:	e7b5      	b.n	8007992 <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8007a26:	4b17      	ldr	r3, [pc, #92]	@ (8007a84 <xTaskIncrementTick+0x168>)
 8007a28:	681b      	ldr	r3, [r3, #0]
 8007a2a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007a2c:	4914      	ldr	r1, [pc, #80]	@ (8007a80 <xTaskIncrementTick+0x164>)
 8007a2e:	4613      	mov	r3, r2
 8007a30:	009b      	lsls	r3, r3, #2
 8007a32:	4413      	add	r3, r2
 8007a34:	009b      	lsls	r3, r3, #2
 8007a36:	440b      	add	r3, r1
 8007a38:	681b      	ldr	r3, [r3, #0]
 8007a3a:	2b01      	cmp	r3, #1
 8007a3c:	d901      	bls.n	8007a42 <xTaskIncrementTick+0x126>
			{
				xSwitchRequired = pdTRUE;
 8007a3e:	2301      	movs	r3, #1
 8007a40:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8007a42:	4b11      	ldr	r3, [pc, #68]	@ (8007a88 <xTaskIncrementTick+0x16c>)
 8007a44:	681b      	ldr	r3, [r3, #0]
 8007a46:	2b00      	cmp	r3, #0
 8007a48:	d007      	beq.n	8007a5a <xTaskIncrementTick+0x13e>
			{
				xSwitchRequired = pdTRUE;
 8007a4a:	2301      	movs	r3, #1
 8007a4c:	617b      	str	r3, [r7, #20]
 8007a4e:	e004      	b.n	8007a5a <xTaskIncrementTick+0x13e>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8007a50:	4b0e      	ldr	r3, [pc, #56]	@ (8007a8c <xTaskIncrementTick+0x170>)
 8007a52:	681b      	ldr	r3, [r3, #0]
 8007a54:	3301      	adds	r3, #1
 8007a56:	4a0d      	ldr	r2, [pc, #52]	@ (8007a8c <xTaskIncrementTick+0x170>)
 8007a58:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8007a5a:	697b      	ldr	r3, [r7, #20]
}
 8007a5c:	4618      	mov	r0, r3
 8007a5e:	3718      	adds	r7, #24
 8007a60:	46bd      	mov	sp, r7
 8007a62:	bd80      	pop	{r7, pc}
 8007a64:	200011cc 	.word	0x200011cc
 8007a68:	200011a8 	.word	0x200011a8
 8007a6c:	2000115c 	.word	0x2000115c
 8007a70:	20001160 	.word	0x20001160
 8007a74:	200011bc 	.word	0x200011bc
 8007a78:	200011c4 	.word	0x200011c4
 8007a7c:	200011ac 	.word	0x200011ac
 8007a80:	20000cd4 	.word	0x20000cd4
 8007a84:	20000cd0 	.word	0x20000cd0
 8007a88:	200011b8 	.word	0x200011b8
 8007a8c:	200011b4 	.word	0x200011b4

08007a90 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8007a90:	b480      	push	{r7}
 8007a92:	b085      	sub	sp, #20
 8007a94:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8007a96:	4b2b      	ldr	r3, [pc, #172]	@ (8007b44 <vTaskSwitchContext+0xb4>)
 8007a98:	681b      	ldr	r3, [r3, #0]
 8007a9a:	2b00      	cmp	r3, #0
 8007a9c:	d003      	beq.n	8007aa6 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8007a9e:	4b2a      	ldr	r3, [pc, #168]	@ (8007b48 <vTaskSwitchContext+0xb8>)
 8007aa0:	2201      	movs	r2, #1
 8007aa2:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8007aa4:	e047      	b.n	8007b36 <vTaskSwitchContext+0xa6>
		xYieldPending = pdFALSE;
 8007aa6:	4b28      	ldr	r3, [pc, #160]	@ (8007b48 <vTaskSwitchContext+0xb8>)
 8007aa8:	2200      	movs	r2, #0
 8007aaa:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007aac:	4b27      	ldr	r3, [pc, #156]	@ (8007b4c <vTaskSwitchContext+0xbc>)
 8007aae:	681b      	ldr	r3, [r3, #0]
 8007ab0:	60fb      	str	r3, [r7, #12]
 8007ab2:	e011      	b.n	8007ad8 <vTaskSwitchContext+0x48>
 8007ab4:	68fb      	ldr	r3, [r7, #12]
 8007ab6:	2b00      	cmp	r3, #0
 8007ab8:	d10b      	bne.n	8007ad2 <vTaskSwitchContext+0x42>
	__asm volatile
 8007aba:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007abe:	f383 8811 	msr	BASEPRI, r3
 8007ac2:	f3bf 8f6f 	isb	sy
 8007ac6:	f3bf 8f4f 	dsb	sy
 8007aca:	607b      	str	r3, [r7, #4]
}
 8007acc:	bf00      	nop
 8007ace:	bf00      	nop
 8007ad0:	e7fd      	b.n	8007ace <vTaskSwitchContext+0x3e>
 8007ad2:	68fb      	ldr	r3, [r7, #12]
 8007ad4:	3b01      	subs	r3, #1
 8007ad6:	60fb      	str	r3, [r7, #12]
 8007ad8:	491d      	ldr	r1, [pc, #116]	@ (8007b50 <vTaskSwitchContext+0xc0>)
 8007ada:	68fa      	ldr	r2, [r7, #12]
 8007adc:	4613      	mov	r3, r2
 8007ade:	009b      	lsls	r3, r3, #2
 8007ae0:	4413      	add	r3, r2
 8007ae2:	009b      	lsls	r3, r3, #2
 8007ae4:	440b      	add	r3, r1
 8007ae6:	681b      	ldr	r3, [r3, #0]
 8007ae8:	2b00      	cmp	r3, #0
 8007aea:	d0e3      	beq.n	8007ab4 <vTaskSwitchContext+0x24>
 8007aec:	68fa      	ldr	r2, [r7, #12]
 8007aee:	4613      	mov	r3, r2
 8007af0:	009b      	lsls	r3, r3, #2
 8007af2:	4413      	add	r3, r2
 8007af4:	009b      	lsls	r3, r3, #2
 8007af6:	4a16      	ldr	r2, [pc, #88]	@ (8007b50 <vTaskSwitchContext+0xc0>)
 8007af8:	4413      	add	r3, r2
 8007afa:	60bb      	str	r3, [r7, #8]
 8007afc:	68bb      	ldr	r3, [r7, #8]
 8007afe:	685b      	ldr	r3, [r3, #4]
 8007b00:	685a      	ldr	r2, [r3, #4]
 8007b02:	68bb      	ldr	r3, [r7, #8]
 8007b04:	605a      	str	r2, [r3, #4]
 8007b06:	68bb      	ldr	r3, [r7, #8]
 8007b08:	685a      	ldr	r2, [r3, #4]
 8007b0a:	68bb      	ldr	r3, [r7, #8]
 8007b0c:	3308      	adds	r3, #8
 8007b0e:	429a      	cmp	r2, r3
 8007b10:	d104      	bne.n	8007b1c <vTaskSwitchContext+0x8c>
 8007b12:	68bb      	ldr	r3, [r7, #8]
 8007b14:	685b      	ldr	r3, [r3, #4]
 8007b16:	685a      	ldr	r2, [r3, #4]
 8007b18:	68bb      	ldr	r3, [r7, #8]
 8007b1a:	605a      	str	r2, [r3, #4]
 8007b1c:	68bb      	ldr	r3, [r7, #8]
 8007b1e:	685b      	ldr	r3, [r3, #4]
 8007b20:	68db      	ldr	r3, [r3, #12]
 8007b22:	4a0c      	ldr	r2, [pc, #48]	@ (8007b54 <vTaskSwitchContext+0xc4>)
 8007b24:	6013      	str	r3, [r2, #0]
 8007b26:	4a09      	ldr	r2, [pc, #36]	@ (8007b4c <vTaskSwitchContext+0xbc>)
 8007b28:	68fb      	ldr	r3, [r7, #12]
 8007b2a:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8007b2c:	4b09      	ldr	r3, [pc, #36]	@ (8007b54 <vTaskSwitchContext+0xc4>)
 8007b2e:	681b      	ldr	r3, [r3, #0]
 8007b30:	3354      	adds	r3, #84	@ 0x54
 8007b32:	4a09      	ldr	r2, [pc, #36]	@ (8007b58 <vTaskSwitchContext+0xc8>)
 8007b34:	6013      	str	r3, [r2, #0]
}
 8007b36:	bf00      	nop
 8007b38:	3714      	adds	r7, #20
 8007b3a:	46bd      	mov	sp, r7
 8007b3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b40:	4770      	bx	lr
 8007b42:	bf00      	nop
 8007b44:	200011cc 	.word	0x200011cc
 8007b48:	200011b8 	.word	0x200011b8
 8007b4c:	200011ac 	.word	0x200011ac
 8007b50:	20000cd4 	.word	0x20000cd4
 8007b54:	20000cd0 	.word	0x20000cd0
 8007b58:	20000058 	.word	0x20000058

08007b5c <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8007b5c:	b580      	push	{r7, lr}
 8007b5e:	b084      	sub	sp, #16
 8007b60:	af00      	add	r7, sp, #0
 8007b62:	6078      	str	r0, [r7, #4]
 8007b64:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8007b66:	687b      	ldr	r3, [r7, #4]
 8007b68:	2b00      	cmp	r3, #0
 8007b6a:	d10b      	bne.n	8007b84 <vTaskPlaceOnEventList+0x28>
	__asm volatile
 8007b6c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007b70:	f383 8811 	msr	BASEPRI, r3
 8007b74:	f3bf 8f6f 	isb	sy
 8007b78:	f3bf 8f4f 	dsb	sy
 8007b7c:	60fb      	str	r3, [r7, #12]
}
 8007b7e:	bf00      	nop
 8007b80:	bf00      	nop
 8007b82:	e7fd      	b.n	8007b80 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8007b84:	4b07      	ldr	r3, [pc, #28]	@ (8007ba4 <vTaskPlaceOnEventList+0x48>)
 8007b86:	681b      	ldr	r3, [r3, #0]
 8007b88:	3318      	adds	r3, #24
 8007b8a:	4619      	mov	r1, r3
 8007b8c:	6878      	ldr	r0, [r7, #4]
 8007b8e:	f7fe fe48 	bl	8006822 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8007b92:	2101      	movs	r1, #1
 8007b94:	6838      	ldr	r0, [r7, #0]
 8007b96:	f000 fa87 	bl	80080a8 <prvAddCurrentTaskToDelayedList>
}
 8007b9a:	bf00      	nop
 8007b9c:	3710      	adds	r7, #16
 8007b9e:	46bd      	mov	sp, r7
 8007ba0:	bd80      	pop	{r7, pc}
 8007ba2:	bf00      	nop
 8007ba4:	20000cd0 	.word	0x20000cd0

08007ba8 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8007ba8:	b580      	push	{r7, lr}
 8007baa:	b086      	sub	sp, #24
 8007bac:	af00      	add	r7, sp, #0
 8007bae:	60f8      	str	r0, [r7, #12]
 8007bb0:	60b9      	str	r1, [r7, #8]
 8007bb2:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8007bb4:	68fb      	ldr	r3, [r7, #12]
 8007bb6:	2b00      	cmp	r3, #0
 8007bb8:	d10b      	bne.n	8007bd2 <vTaskPlaceOnEventListRestricted+0x2a>
	__asm volatile
 8007bba:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007bbe:	f383 8811 	msr	BASEPRI, r3
 8007bc2:	f3bf 8f6f 	isb	sy
 8007bc6:	f3bf 8f4f 	dsb	sy
 8007bca:	617b      	str	r3, [r7, #20]
}
 8007bcc:	bf00      	nop
 8007bce:	bf00      	nop
 8007bd0:	e7fd      	b.n	8007bce <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8007bd2:	4b0a      	ldr	r3, [pc, #40]	@ (8007bfc <vTaskPlaceOnEventListRestricted+0x54>)
 8007bd4:	681b      	ldr	r3, [r3, #0]
 8007bd6:	3318      	adds	r3, #24
 8007bd8:	4619      	mov	r1, r3
 8007bda:	68f8      	ldr	r0, [r7, #12]
 8007bdc:	f7fe fdfd 	bl	80067da <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8007be0:	687b      	ldr	r3, [r7, #4]
 8007be2:	2b00      	cmp	r3, #0
 8007be4:	d002      	beq.n	8007bec <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 8007be6:	f04f 33ff 	mov.w	r3, #4294967295
 8007bea:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8007bec:	6879      	ldr	r1, [r7, #4]
 8007bee:	68b8      	ldr	r0, [r7, #8]
 8007bf0:	f000 fa5a 	bl	80080a8 <prvAddCurrentTaskToDelayedList>
	}
 8007bf4:	bf00      	nop
 8007bf6:	3718      	adds	r7, #24
 8007bf8:	46bd      	mov	sp, r7
 8007bfa:	bd80      	pop	{r7, pc}
 8007bfc:	20000cd0 	.word	0x20000cd0

08007c00 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8007c00:	b580      	push	{r7, lr}
 8007c02:	b086      	sub	sp, #24
 8007c04:	af00      	add	r7, sp, #0
 8007c06:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007c08:	687b      	ldr	r3, [r7, #4]
 8007c0a:	68db      	ldr	r3, [r3, #12]
 8007c0c:	68db      	ldr	r3, [r3, #12]
 8007c0e:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8007c10:	693b      	ldr	r3, [r7, #16]
 8007c12:	2b00      	cmp	r3, #0
 8007c14:	d10b      	bne.n	8007c2e <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 8007c16:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007c1a:	f383 8811 	msr	BASEPRI, r3
 8007c1e:	f3bf 8f6f 	isb	sy
 8007c22:	f3bf 8f4f 	dsb	sy
 8007c26:	60fb      	str	r3, [r7, #12]
}
 8007c28:	bf00      	nop
 8007c2a:	bf00      	nop
 8007c2c:	e7fd      	b.n	8007c2a <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8007c2e:	693b      	ldr	r3, [r7, #16]
 8007c30:	3318      	adds	r3, #24
 8007c32:	4618      	mov	r0, r3
 8007c34:	f7fe fe2e 	bl	8006894 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007c38:	4b1d      	ldr	r3, [pc, #116]	@ (8007cb0 <xTaskRemoveFromEventList+0xb0>)
 8007c3a:	681b      	ldr	r3, [r3, #0]
 8007c3c:	2b00      	cmp	r3, #0
 8007c3e:	d11d      	bne.n	8007c7c <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8007c40:	693b      	ldr	r3, [r7, #16]
 8007c42:	3304      	adds	r3, #4
 8007c44:	4618      	mov	r0, r3
 8007c46:	f7fe fe25 	bl	8006894 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8007c4a:	693b      	ldr	r3, [r7, #16]
 8007c4c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007c4e:	4b19      	ldr	r3, [pc, #100]	@ (8007cb4 <xTaskRemoveFromEventList+0xb4>)
 8007c50:	681b      	ldr	r3, [r3, #0]
 8007c52:	429a      	cmp	r2, r3
 8007c54:	d903      	bls.n	8007c5e <xTaskRemoveFromEventList+0x5e>
 8007c56:	693b      	ldr	r3, [r7, #16]
 8007c58:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007c5a:	4a16      	ldr	r2, [pc, #88]	@ (8007cb4 <xTaskRemoveFromEventList+0xb4>)
 8007c5c:	6013      	str	r3, [r2, #0]
 8007c5e:	693b      	ldr	r3, [r7, #16]
 8007c60:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007c62:	4613      	mov	r3, r2
 8007c64:	009b      	lsls	r3, r3, #2
 8007c66:	4413      	add	r3, r2
 8007c68:	009b      	lsls	r3, r3, #2
 8007c6a:	4a13      	ldr	r2, [pc, #76]	@ (8007cb8 <xTaskRemoveFromEventList+0xb8>)
 8007c6c:	441a      	add	r2, r3
 8007c6e:	693b      	ldr	r3, [r7, #16]
 8007c70:	3304      	adds	r3, #4
 8007c72:	4619      	mov	r1, r3
 8007c74:	4610      	mov	r0, r2
 8007c76:	f7fe fdb0 	bl	80067da <vListInsertEnd>
 8007c7a:	e005      	b.n	8007c88 <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8007c7c:	693b      	ldr	r3, [r7, #16]
 8007c7e:	3318      	adds	r3, #24
 8007c80:	4619      	mov	r1, r3
 8007c82:	480e      	ldr	r0, [pc, #56]	@ (8007cbc <xTaskRemoveFromEventList+0xbc>)
 8007c84:	f7fe fda9 	bl	80067da <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8007c88:	693b      	ldr	r3, [r7, #16]
 8007c8a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007c8c:	4b0c      	ldr	r3, [pc, #48]	@ (8007cc0 <xTaskRemoveFromEventList+0xc0>)
 8007c8e:	681b      	ldr	r3, [r3, #0]
 8007c90:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007c92:	429a      	cmp	r2, r3
 8007c94:	d905      	bls.n	8007ca2 <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8007c96:	2301      	movs	r3, #1
 8007c98:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8007c9a:	4b0a      	ldr	r3, [pc, #40]	@ (8007cc4 <xTaskRemoveFromEventList+0xc4>)
 8007c9c:	2201      	movs	r2, #1
 8007c9e:	601a      	str	r2, [r3, #0]
 8007ca0:	e001      	b.n	8007ca6 <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 8007ca2:	2300      	movs	r3, #0
 8007ca4:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8007ca6:	697b      	ldr	r3, [r7, #20]
}
 8007ca8:	4618      	mov	r0, r3
 8007caa:	3718      	adds	r7, #24
 8007cac:	46bd      	mov	sp, r7
 8007cae:	bd80      	pop	{r7, pc}
 8007cb0:	200011cc 	.word	0x200011cc
 8007cb4:	200011ac 	.word	0x200011ac
 8007cb8:	20000cd4 	.word	0x20000cd4
 8007cbc:	20001164 	.word	0x20001164
 8007cc0:	20000cd0 	.word	0x20000cd0
 8007cc4:	200011b8 	.word	0x200011b8

08007cc8 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8007cc8:	b480      	push	{r7}
 8007cca:	b083      	sub	sp, #12
 8007ccc:	af00      	add	r7, sp, #0
 8007cce:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8007cd0:	4b06      	ldr	r3, [pc, #24]	@ (8007cec <vTaskInternalSetTimeOutState+0x24>)
 8007cd2:	681a      	ldr	r2, [r3, #0]
 8007cd4:	687b      	ldr	r3, [r7, #4]
 8007cd6:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8007cd8:	4b05      	ldr	r3, [pc, #20]	@ (8007cf0 <vTaskInternalSetTimeOutState+0x28>)
 8007cda:	681a      	ldr	r2, [r3, #0]
 8007cdc:	687b      	ldr	r3, [r7, #4]
 8007cde:	605a      	str	r2, [r3, #4]
}
 8007ce0:	bf00      	nop
 8007ce2:	370c      	adds	r7, #12
 8007ce4:	46bd      	mov	sp, r7
 8007ce6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cea:	4770      	bx	lr
 8007cec:	200011bc 	.word	0x200011bc
 8007cf0:	200011a8 	.word	0x200011a8

08007cf4 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8007cf4:	b580      	push	{r7, lr}
 8007cf6:	b088      	sub	sp, #32
 8007cf8:	af00      	add	r7, sp, #0
 8007cfa:	6078      	str	r0, [r7, #4]
 8007cfc:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8007cfe:	687b      	ldr	r3, [r7, #4]
 8007d00:	2b00      	cmp	r3, #0
 8007d02:	d10b      	bne.n	8007d1c <xTaskCheckForTimeOut+0x28>
	__asm volatile
 8007d04:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007d08:	f383 8811 	msr	BASEPRI, r3
 8007d0c:	f3bf 8f6f 	isb	sy
 8007d10:	f3bf 8f4f 	dsb	sy
 8007d14:	613b      	str	r3, [r7, #16]
}
 8007d16:	bf00      	nop
 8007d18:	bf00      	nop
 8007d1a:	e7fd      	b.n	8007d18 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8007d1c:	683b      	ldr	r3, [r7, #0]
 8007d1e:	2b00      	cmp	r3, #0
 8007d20:	d10b      	bne.n	8007d3a <xTaskCheckForTimeOut+0x46>
	__asm volatile
 8007d22:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007d26:	f383 8811 	msr	BASEPRI, r3
 8007d2a:	f3bf 8f6f 	isb	sy
 8007d2e:	f3bf 8f4f 	dsb	sy
 8007d32:	60fb      	str	r3, [r7, #12]
}
 8007d34:	bf00      	nop
 8007d36:	bf00      	nop
 8007d38:	e7fd      	b.n	8007d36 <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 8007d3a:	f000 fe95 	bl	8008a68 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8007d3e:	4b1d      	ldr	r3, [pc, #116]	@ (8007db4 <xTaskCheckForTimeOut+0xc0>)
 8007d40:	681b      	ldr	r3, [r3, #0]
 8007d42:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8007d44:	687b      	ldr	r3, [r7, #4]
 8007d46:	685b      	ldr	r3, [r3, #4]
 8007d48:	69ba      	ldr	r2, [r7, #24]
 8007d4a:	1ad3      	subs	r3, r2, r3
 8007d4c:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8007d4e:	683b      	ldr	r3, [r7, #0]
 8007d50:	681b      	ldr	r3, [r3, #0]
 8007d52:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007d56:	d102      	bne.n	8007d5e <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8007d58:	2300      	movs	r3, #0
 8007d5a:	61fb      	str	r3, [r7, #28]
 8007d5c:	e023      	b.n	8007da6 <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8007d5e:	687b      	ldr	r3, [r7, #4]
 8007d60:	681a      	ldr	r2, [r3, #0]
 8007d62:	4b15      	ldr	r3, [pc, #84]	@ (8007db8 <xTaskCheckForTimeOut+0xc4>)
 8007d64:	681b      	ldr	r3, [r3, #0]
 8007d66:	429a      	cmp	r2, r3
 8007d68:	d007      	beq.n	8007d7a <xTaskCheckForTimeOut+0x86>
 8007d6a:	687b      	ldr	r3, [r7, #4]
 8007d6c:	685b      	ldr	r3, [r3, #4]
 8007d6e:	69ba      	ldr	r2, [r7, #24]
 8007d70:	429a      	cmp	r2, r3
 8007d72:	d302      	bcc.n	8007d7a <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8007d74:	2301      	movs	r3, #1
 8007d76:	61fb      	str	r3, [r7, #28]
 8007d78:	e015      	b.n	8007da6 <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8007d7a:	683b      	ldr	r3, [r7, #0]
 8007d7c:	681b      	ldr	r3, [r3, #0]
 8007d7e:	697a      	ldr	r2, [r7, #20]
 8007d80:	429a      	cmp	r2, r3
 8007d82:	d20b      	bcs.n	8007d9c <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8007d84:	683b      	ldr	r3, [r7, #0]
 8007d86:	681a      	ldr	r2, [r3, #0]
 8007d88:	697b      	ldr	r3, [r7, #20]
 8007d8a:	1ad2      	subs	r2, r2, r3
 8007d8c:	683b      	ldr	r3, [r7, #0]
 8007d8e:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8007d90:	6878      	ldr	r0, [r7, #4]
 8007d92:	f7ff ff99 	bl	8007cc8 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8007d96:	2300      	movs	r3, #0
 8007d98:	61fb      	str	r3, [r7, #28]
 8007d9a:	e004      	b.n	8007da6 <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 8007d9c:	683b      	ldr	r3, [r7, #0]
 8007d9e:	2200      	movs	r2, #0
 8007da0:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8007da2:	2301      	movs	r3, #1
 8007da4:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8007da6:	f000 fe91 	bl	8008acc <vPortExitCritical>

	return xReturn;
 8007daa:	69fb      	ldr	r3, [r7, #28]
}
 8007dac:	4618      	mov	r0, r3
 8007dae:	3720      	adds	r7, #32
 8007db0:	46bd      	mov	sp, r7
 8007db2:	bd80      	pop	{r7, pc}
 8007db4:	200011a8 	.word	0x200011a8
 8007db8:	200011bc 	.word	0x200011bc

08007dbc <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8007dbc:	b480      	push	{r7}
 8007dbe:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8007dc0:	4b03      	ldr	r3, [pc, #12]	@ (8007dd0 <vTaskMissedYield+0x14>)
 8007dc2:	2201      	movs	r2, #1
 8007dc4:	601a      	str	r2, [r3, #0]
}
 8007dc6:	bf00      	nop
 8007dc8:	46bd      	mov	sp, r7
 8007dca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dce:	4770      	bx	lr
 8007dd0:	200011b8 	.word	0x200011b8

08007dd4 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8007dd4:	b580      	push	{r7, lr}
 8007dd6:	b082      	sub	sp, #8
 8007dd8:	af00      	add	r7, sp, #0
 8007dda:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8007ddc:	f000 f852 	bl	8007e84 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8007de0:	4b06      	ldr	r3, [pc, #24]	@ (8007dfc <prvIdleTask+0x28>)
 8007de2:	681b      	ldr	r3, [r3, #0]
 8007de4:	2b01      	cmp	r3, #1
 8007de6:	d9f9      	bls.n	8007ddc <prvIdleTask+0x8>
			{
				taskYIELD();
 8007de8:	4b05      	ldr	r3, [pc, #20]	@ (8007e00 <prvIdleTask+0x2c>)
 8007dea:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007dee:	601a      	str	r2, [r3, #0]
 8007df0:	f3bf 8f4f 	dsb	sy
 8007df4:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8007df8:	e7f0      	b.n	8007ddc <prvIdleTask+0x8>
 8007dfa:	bf00      	nop
 8007dfc:	20000cd4 	.word	0x20000cd4
 8007e00:	e000ed04 	.word	0xe000ed04

08007e04 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8007e04:	b580      	push	{r7, lr}
 8007e06:	b082      	sub	sp, #8
 8007e08:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8007e0a:	2300      	movs	r3, #0
 8007e0c:	607b      	str	r3, [r7, #4]
 8007e0e:	e00c      	b.n	8007e2a <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8007e10:	687a      	ldr	r2, [r7, #4]
 8007e12:	4613      	mov	r3, r2
 8007e14:	009b      	lsls	r3, r3, #2
 8007e16:	4413      	add	r3, r2
 8007e18:	009b      	lsls	r3, r3, #2
 8007e1a:	4a12      	ldr	r2, [pc, #72]	@ (8007e64 <prvInitialiseTaskLists+0x60>)
 8007e1c:	4413      	add	r3, r2
 8007e1e:	4618      	mov	r0, r3
 8007e20:	f7fe fcae 	bl	8006780 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8007e24:	687b      	ldr	r3, [r7, #4]
 8007e26:	3301      	adds	r3, #1
 8007e28:	607b      	str	r3, [r7, #4]
 8007e2a:	687b      	ldr	r3, [r7, #4]
 8007e2c:	2b37      	cmp	r3, #55	@ 0x37
 8007e2e:	d9ef      	bls.n	8007e10 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8007e30:	480d      	ldr	r0, [pc, #52]	@ (8007e68 <prvInitialiseTaskLists+0x64>)
 8007e32:	f7fe fca5 	bl	8006780 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8007e36:	480d      	ldr	r0, [pc, #52]	@ (8007e6c <prvInitialiseTaskLists+0x68>)
 8007e38:	f7fe fca2 	bl	8006780 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8007e3c:	480c      	ldr	r0, [pc, #48]	@ (8007e70 <prvInitialiseTaskLists+0x6c>)
 8007e3e:	f7fe fc9f 	bl	8006780 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8007e42:	480c      	ldr	r0, [pc, #48]	@ (8007e74 <prvInitialiseTaskLists+0x70>)
 8007e44:	f7fe fc9c 	bl	8006780 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8007e48:	480b      	ldr	r0, [pc, #44]	@ (8007e78 <prvInitialiseTaskLists+0x74>)
 8007e4a:	f7fe fc99 	bl	8006780 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8007e4e:	4b0b      	ldr	r3, [pc, #44]	@ (8007e7c <prvInitialiseTaskLists+0x78>)
 8007e50:	4a05      	ldr	r2, [pc, #20]	@ (8007e68 <prvInitialiseTaskLists+0x64>)
 8007e52:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8007e54:	4b0a      	ldr	r3, [pc, #40]	@ (8007e80 <prvInitialiseTaskLists+0x7c>)
 8007e56:	4a05      	ldr	r2, [pc, #20]	@ (8007e6c <prvInitialiseTaskLists+0x68>)
 8007e58:	601a      	str	r2, [r3, #0]
}
 8007e5a:	bf00      	nop
 8007e5c:	3708      	adds	r7, #8
 8007e5e:	46bd      	mov	sp, r7
 8007e60:	bd80      	pop	{r7, pc}
 8007e62:	bf00      	nop
 8007e64:	20000cd4 	.word	0x20000cd4
 8007e68:	20001134 	.word	0x20001134
 8007e6c:	20001148 	.word	0x20001148
 8007e70:	20001164 	.word	0x20001164
 8007e74:	20001178 	.word	0x20001178
 8007e78:	20001190 	.word	0x20001190
 8007e7c:	2000115c 	.word	0x2000115c
 8007e80:	20001160 	.word	0x20001160

08007e84 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8007e84:	b580      	push	{r7, lr}
 8007e86:	b082      	sub	sp, #8
 8007e88:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8007e8a:	e019      	b.n	8007ec0 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8007e8c:	f000 fdec 	bl	8008a68 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007e90:	4b10      	ldr	r3, [pc, #64]	@ (8007ed4 <prvCheckTasksWaitingTermination+0x50>)
 8007e92:	68db      	ldr	r3, [r3, #12]
 8007e94:	68db      	ldr	r3, [r3, #12]
 8007e96:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007e98:	687b      	ldr	r3, [r7, #4]
 8007e9a:	3304      	adds	r3, #4
 8007e9c:	4618      	mov	r0, r3
 8007e9e:	f7fe fcf9 	bl	8006894 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8007ea2:	4b0d      	ldr	r3, [pc, #52]	@ (8007ed8 <prvCheckTasksWaitingTermination+0x54>)
 8007ea4:	681b      	ldr	r3, [r3, #0]
 8007ea6:	3b01      	subs	r3, #1
 8007ea8:	4a0b      	ldr	r2, [pc, #44]	@ (8007ed8 <prvCheckTasksWaitingTermination+0x54>)
 8007eaa:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8007eac:	4b0b      	ldr	r3, [pc, #44]	@ (8007edc <prvCheckTasksWaitingTermination+0x58>)
 8007eae:	681b      	ldr	r3, [r3, #0]
 8007eb0:	3b01      	subs	r3, #1
 8007eb2:	4a0a      	ldr	r2, [pc, #40]	@ (8007edc <prvCheckTasksWaitingTermination+0x58>)
 8007eb4:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8007eb6:	f000 fe09 	bl	8008acc <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8007eba:	6878      	ldr	r0, [r7, #4]
 8007ebc:	f000 f810 	bl	8007ee0 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8007ec0:	4b06      	ldr	r3, [pc, #24]	@ (8007edc <prvCheckTasksWaitingTermination+0x58>)
 8007ec2:	681b      	ldr	r3, [r3, #0]
 8007ec4:	2b00      	cmp	r3, #0
 8007ec6:	d1e1      	bne.n	8007e8c <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8007ec8:	bf00      	nop
 8007eca:	bf00      	nop
 8007ecc:	3708      	adds	r7, #8
 8007ece:	46bd      	mov	sp, r7
 8007ed0:	bd80      	pop	{r7, pc}
 8007ed2:	bf00      	nop
 8007ed4:	20001178 	.word	0x20001178
 8007ed8:	200011a4 	.word	0x200011a4
 8007edc:	2000118c 	.word	0x2000118c

08007ee0 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8007ee0:	b580      	push	{r7, lr}
 8007ee2:	b084      	sub	sp, #16
 8007ee4:	af00      	add	r7, sp, #0
 8007ee6:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8007ee8:	687b      	ldr	r3, [r7, #4]
 8007eea:	3354      	adds	r3, #84	@ 0x54
 8007eec:	4618      	mov	r0, r3
 8007eee:	f001 f8d3 	bl	8009098 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8007ef2:	687b      	ldr	r3, [r7, #4]
 8007ef4:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 8007ef8:	2b00      	cmp	r3, #0
 8007efa:	d108      	bne.n	8007f0e <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8007efc:	687b      	ldr	r3, [r7, #4]
 8007efe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007f00:	4618      	mov	r0, r3
 8007f02:	f000 ffa1 	bl	8008e48 <vPortFree>
				vPortFree( pxTCB );
 8007f06:	6878      	ldr	r0, [r7, #4]
 8007f08:	f000 ff9e 	bl	8008e48 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8007f0c:	e019      	b.n	8007f42 <prvDeleteTCB+0x62>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8007f0e:	687b      	ldr	r3, [r7, #4]
 8007f10:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 8007f14:	2b01      	cmp	r3, #1
 8007f16:	d103      	bne.n	8007f20 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8007f18:	6878      	ldr	r0, [r7, #4]
 8007f1a:	f000 ff95 	bl	8008e48 <vPortFree>
	}
 8007f1e:	e010      	b.n	8007f42 <prvDeleteTCB+0x62>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8007f20:	687b      	ldr	r3, [r7, #4]
 8007f22:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 8007f26:	2b02      	cmp	r3, #2
 8007f28:	d00b      	beq.n	8007f42 <prvDeleteTCB+0x62>
	__asm volatile
 8007f2a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007f2e:	f383 8811 	msr	BASEPRI, r3
 8007f32:	f3bf 8f6f 	isb	sy
 8007f36:	f3bf 8f4f 	dsb	sy
 8007f3a:	60fb      	str	r3, [r7, #12]
}
 8007f3c:	bf00      	nop
 8007f3e:	bf00      	nop
 8007f40:	e7fd      	b.n	8007f3e <prvDeleteTCB+0x5e>
	}
 8007f42:	bf00      	nop
 8007f44:	3710      	adds	r7, #16
 8007f46:	46bd      	mov	sp, r7
 8007f48:	bd80      	pop	{r7, pc}
	...

08007f4c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8007f4c:	b480      	push	{r7}
 8007f4e:	b083      	sub	sp, #12
 8007f50:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007f52:	4b0c      	ldr	r3, [pc, #48]	@ (8007f84 <prvResetNextTaskUnblockTime+0x38>)
 8007f54:	681b      	ldr	r3, [r3, #0]
 8007f56:	681b      	ldr	r3, [r3, #0]
 8007f58:	2b00      	cmp	r3, #0
 8007f5a:	d104      	bne.n	8007f66 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8007f5c:	4b0a      	ldr	r3, [pc, #40]	@ (8007f88 <prvResetNextTaskUnblockTime+0x3c>)
 8007f5e:	f04f 32ff 	mov.w	r2, #4294967295
 8007f62:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8007f64:	e008      	b.n	8007f78 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007f66:	4b07      	ldr	r3, [pc, #28]	@ (8007f84 <prvResetNextTaskUnblockTime+0x38>)
 8007f68:	681b      	ldr	r3, [r3, #0]
 8007f6a:	68db      	ldr	r3, [r3, #12]
 8007f6c:	68db      	ldr	r3, [r3, #12]
 8007f6e:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8007f70:	687b      	ldr	r3, [r7, #4]
 8007f72:	685b      	ldr	r3, [r3, #4]
 8007f74:	4a04      	ldr	r2, [pc, #16]	@ (8007f88 <prvResetNextTaskUnblockTime+0x3c>)
 8007f76:	6013      	str	r3, [r2, #0]
}
 8007f78:	bf00      	nop
 8007f7a:	370c      	adds	r7, #12
 8007f7c:	46bd      	mov	sp, r7
 8007f7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f82:	4770      	bx	lr
 8007f84:	2000115c 	.word	0x2000115c
 8007f88:	200011c4 	.word	0x200011c4

08007f8c <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8007f8c:	b480      	push	{r7}
 8007f8e:	b083      	sub	sp, #12
 8007f90:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8007f92:	4b0b      	ldr	r3, [pc, #44]	@ (8007fc0 <xTaskGetSchedulerState+0x34>)
 8007f94:	681b      	ldr	r3, [r3, #0]
 8007f96:	2b00      	cmp	r3, #0
 8007f98:	d102      	bne.n	8007fa0 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8007f9a:	2301      	movs	r3, #1
 8007f9c:	607b      	str	r3, [r7, #4]
 8007f9e:	e008      	b.n	8007fb2 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007fa0:	4b08      	ldr	r3, [pc, #32]	@ (8007fc4 <xTaskGetSchedulerState+0x38>)
 8007fa2:	681b      	ldr	r3, [r3, #0]
 8007fa4:	2b00      	cmp	r3, #0
 8007fa6:	d102      	bne.n	8007fae <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8007fa8:	2302      	movs	r3, #2
 8007faa:	607b      	str	r3, [r7, #4]
 8007fac:	e001      	b.n	8007fb2 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8007fae:	2300      	movs	r3, #0
 8007fb0:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8007fb2:	687b      	ldr	r3, [r7, #4]
	}
 8007fb4:	4618      	mov	r0, r3
 8007fb6:	370c      	adds	r7, #12
 8007fb8:	46bd      	mov	sp, r7
 8007fba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fbe:	4770      	bx	lr
 8007fc0:	200011b0 	.word	0x200011b0
 8007fc4:	200011cc 	.word	0x200011cc

08007fc8 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8007fc8:	b580      	push	{r7, lr}
 8007fca:	b086      	sub	sp, #24
 8007fcc:	af00      	add	r7, sp, #0
 8007fce:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8007fd0:	687b      	ldr	r3, [r7, #4]
 8007fd2:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8007fd4:	2300      	movs	r3, #0
 8007fd6:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8007fd8:	687b      	ldr	r3, [r7, #4]
 8007fda:	2b00      	cmp	r3, #0
 8007fdc:	d058      	beq.n	8008090 <xTaskPriorityDisinherit+0xc8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8007fde:	4b2f      	ldr	r3, [pc, #188]	@ (800809c <xTaskPriorityDisinherit+0xd4>)
 8007fe0:	681b      	ldr	r3, [r3, #0]
 8007fe2:	693a      	ldr	r2, [r7, #16]
 8007fe4:	429a      	cmp	r2, r3
 8007fe6:	d00b      	beq.n	8008000 <xTaskPriorityDisinherit+0x38>
	__asm volatile
 8007fe8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007fec:	f383 8811 	msr	BASEPRI, r3
 8007ff0:	f3bf 8f6f 	isb	sy
 8007ff4:	f3bf 8f4f 	dsb	sy
 8007ff8:	60fb      	str	r3, [r7, #12]
}
 8007ffa:	bf00      	nop
 8007ffc:	bf00      	nop
 8007ffe:	e7fd      	b.n	8007ffc <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8008000:	693b      	ldr	r3, [r7, #16]
 8008002:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008004:	2b00      	cmp	r3, #0
 8008006:	d10b      	bne.n	8008020 <xTaskPriorityDisinherit+0x58>
	__asm volatile
 8008008:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800800c:	f383 8811 	msr	BASEPRI, r3
 8008010:	f3bf 8f6f 	isb	sy
 8008014:	f3bf 8f4f 	dsb	sy
 8008018:	60bb      	str	r3, [r7, #8]
}
 800801a:	bf00      	nop
 800801c:	bf00      	nop
 800801e:	e7fd      	b.n	800801c <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 8008020:	693b      	ldr	r3, [r7, #16]
 8008022:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008024:	1e5a      	subs	r2, r3, #1
 8008026:	693b      	ldr	r3, [r7, #16]
 8008028:	651a      	str	r2, [r3, #80]	@ 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800802a:	693b      	ldr	r3, [r7, #16]
 800802c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800802e:	693b      	ldr	r3, [r7, #16]
 8008030:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008032:	429a      	cmp	r2, r3
 8008034:	d02c      	beq.n	8008090 <xTaskPriorityDisinherit+0xc8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8008036:	693b      	ldr	r3, [r7, #16]
 8008038:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800803a:	2b00      	cmp	r3, #0
 800803c:	d128      	bne.n	8008090 <xTaskPriorityDisinherit+0xc8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800803e:	693b      	ldr	r3, [r7, #16]
 8008040:	3304      	adds	r3, #4
 8008042:	4618      	mov	r0, r3
 8008044:	f7fe fc26 	bl	8006894 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8008048:	693b      	ldr	r3, [r7, #16]
 800804a:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800804c:	693b      	ldr	r3, [r7, #16]
 800804e:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008050:	693b      	ldr	r3, [r7, #16]
 8008052:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008054:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8008058:	693b      	ldr	r3, [r7, #16]
 800805a:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800805c:	693b      	ldr	r3, [r7, #16]
 800805e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008060:	4b0f      	ldr	r3, [pc, #60]	@ (80080a0 <xTaskPriorityDisinherit+0xd8>)
 8008062:	681b      	ldr	r3, [r3, #0]
 8008064:	429a      	cmp	r2, r3
 8008066:	d903      	bls.n	8008070 <xTaskPriorityDisinherit+0xa8>
 8008068:	693b      	ldr	r3, [r7, #16]
 800806a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800806c:	4a0c      	ldr	r2, [pc, #48]	@ (80080a0 <xTaskPriorityDisinherit+0xd8>)
 800806e:	6013      	str	r3, [r2, #0]
 8008070:	693b      	ldr	r3, [r7, #16]
 8008072:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008074:	4613      	mov	r3, r2
 8008076:	009b      	lsls	r3, r3, #2
 8008078:	4413      	add	r3, r2
 800807a:	009b      	lsls	r3, r3, #2
 800807c:	4a09      	ldr	r2, [pc, #36]	@ (80080a4 <xTaskPriorityDisinherit+0xdc>)
 800807e:	441a      	add	r2, r3
 8008080:	693b      	ldr	r3, [r7, #16]
 8008082:	3304      	adds	r3, #4
 8008084:	4619      	mov	r1, r3
 8008086:	4610      	mov	r0, r2
 8008088:	f7fe fba7 	bl	80067da <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800808c:	2301      	movs	r3, #1
 800808e:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8008090:	697b      	ldr	r3, [r7, #20]
	}
 8008092:	4618      	mov	r0, r3
 8008094:	3718      	adds	r7, #24
 8008096:	46bd      	mov	sp, r7
 8008098:	bd80      	pop	{r7, pc}
 800809a:	bf00      	nop
 800809c:	20000cd0 	.word	0x20000cd0
 80080a0:	200011ac 	.word	0x200011ac
 80080a4:	20000cd4 	.word	0x20000cd4

080080a8 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80080a8:	b580      	push	{r7, lr}
 80080aa:	b084      	sub	sp, #16
 80080ac:	af00      	add	r7, sp, #0
 80080ae:	6078      	str	r0, [r7, #4]
 80080b0:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80080b2:	4b21      	ldr	r3, [pc, #132]	@ (8008138 <prvAddCurrentTaskToDelayedList+0x90>)
 80080b4:	681b      	ldr	r3, [r3, #0]
 80080b6:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80080b8:	4b20      	ldr	r3, [pc, #128]	@ (800813c <prvAddCurrentTaskToDelayedList+0x94>)
 80080ba:	681b      	ldr	r3, [r3, #0]
 80080bc:	3304      	adds	r3, #4
 80080be:	4618      	mov	r0, r3
 80080c0:	f7fe fbe8 	bl	8006894 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80080c4:	687b      	ldr	r3, [r7, #4]
 80080c6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80080ca:	d10a      	bne.n	80080e2 <prvAddCurrentTaskToDelayedList+0x3a>
 80080cc:	683b      	ldr	r3, [r7, #0]
 80080ce:	2b00      	cmp	r3, #0
 80080d0:	d007      	beq.n	80080e2 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80080d2:	4b1a      	ldr	r3, [pc, #104]	@ (800813c <prvAddCurrentTaskToDelayedList+0x94>)
 80080d4:	681b      	ldr	r3, [r3, #0]
 80080d6:	3304      	adds	r3, #4
 80080d8:	4619      	mov	r1, r3
 80080da:	4819      	ldr	r0, [pc, #100]	@ (8008140 <prvAddCurrentTaskToDelayedList+0x98>)
 80080dc:	f7fe fb7d 	bl	80067da <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80080e0:	e026      	b.n	8008130 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 80080e2:	68fa      	ldr	r2, [r7, #12]
 80080e4:	687b      	ldr	r3, [r7, #4]
 80080e6:	4413      	add	r3, r2
 80080e8:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80080ea:	4b14      	ldr	r3, [pc, #80]	@ (800813c <prvAddCurrentTaskToDelayedList+0x94>)
 80080ec:	681b      	ldr	r3, [r3, #0]
 80080ee:	68ba      	ldr	r2, [r7, #8]
 80080f0:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 80080f2:	68ba      	ldr	r2, [r7, #8]
 80080f4:	68fb      	ldr	r3, [r7, #12]
 80080f6:	429a      	cmp	r2, r3
 80080f8:	d209      	bcs.n	800810e <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80080fa:	4b12      	ldr	r3, [pc, #72]	@ (8008144 <prvAddCurrentTaskToDelayedList+0x9c>)
 80080fc:	681a      	ldr	r2, [r3, #0]
 80080fe:	4b0f      	ldr	r3, [pc, #60]	@ (800813c <prvAddCurrentTaskToDelayedList+0x94>)
 8008100:	681b      	ldr	r3, [r3, #0]
 8008102:	3304      	adds	r3, #4
 8008104:	4619      	mov	r1, r3
 8008106:	4610      	mov	r0, r2
 8008108:	f7fe fb8b 	bl	8006822 <vListInsert>
}
 800810c:	e010      	b.n	8008130 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800810e:	4b0e      	ldr	r3, [pc, #56]	@ (8008148 <prvAddCurrentTaskToDelayedList+0xa0>)
 8008110:	681a      	ldr	r2, [r3, #0]
 8008112:	4b0a      	ldr	r3, [pc, #40]	@ (800813c <prvAddCurrentTaskToDelayedList+0x94>)
 8008114:	681b      	ldr	r3, [r3, #0]
 8008116:	3304      	adds	r3, #4
 8008118:	4619      	mov	r1, r3
 800811a:	4610      	mov	r0, r2
 800811c:	f7fe fb81 	bl	8006822 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8008120:	4b0a      	ldr	r3, [pc, #40]	@ (800814c <prvAddCurrentTaskToDelayedList+0xa4>)
 8008122:	681b      	ldr	r3, [r3, #0]
 8008124:	68ba      	ldr	r2, [r7, #8]
 8008126:	429a      	cmp	r2, r3
 8008128:	d202      	bcs.n	8008130 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800812a:	4a08      	ldr	r2, [pc, #32]	@ (800814c <prvAddCurrentTaskToDelayedList+0xa4>)
 800812c:	68bb      	ldr	r3, [r7, #8]
 800812e:	6013      	str	r3, [r2, #0]
}
 8008130:	bf00      	nop
 8008132:	3710      	adds	r7, #16
 8008134:	46bd      	mov	sp, r7
 8008136:	bd80      	pop	{r7, pc}
 8008138:	200011a8 	.word	0x200011a8
 800813c:	20000cd0 	.word	0x20000cd0
 8008140:	20001190 	.word	0x20001190
 8008144:	20001160 	.word	0x20001160
 8008148:	2000115c 	.word	0x2000115c
 800814c:	200011c4 	.word	0x200011c4

08008150 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8008150:	b580      	push	{r7, lr}
 8008152:	b08a      	sub	sp, #40	@ 0x28
 8008154:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8008156:	2300      	movs	r3, #0
 8008158:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800815a:	f000 fb13 	bl	8008784 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800815e:	4b1d      	ldr	r3, [pc, #116]	@ (80081d4 <xTimerCreateTimerTask+0x84>)
 8008160:	681b      	ldr	r3, [r3, #0]
 8008162:	2b00      	cmp	r3, #0
 8008164:	d021      	beq.n	80081aa <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8008166:	2300      	movs	r3, #0
 8008168:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800816a:	2300      	movs	r3, #0
 800816c:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800816e:	1d3a      	adds	r2, r7, #4
 8008170:	f107 0108 	add.w	r1, r7, #8
 8008174:	f107 030c 	add.w	r3, r7, #12
 8008178:	4618      	mov	r0, r3
 800817a:	f7fe fae7 	bl	800674c <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800817e:	6879      	ldr	r1, [r7, #4]
 8008180:	68bb      	ldr	r3, [r7, #8]
 8008182:	68fa      	ldr	r2, [r7, #12]
 8008184:	9202      	str	r2, [sp, #8]
 8008186:	9301      	str	r3, [sp, #4]
 8008188:	2302      	movs	r3, #2
 800818a:	9300      	str	r3, [sp, #0]
 800818c:	2300      	movs	r3, #0
 800818e:	460a      	mov	r2, r1
 8008190:	4911      	ldr	r1, [pc, #68]	@ (80081d8 <xTimerCreateTimerTask+0x88>)
 8008192:	4812      	ldr	r0, [pc, #72]	@ (80081dc <xTimerCreateTimerTask+0x8c>)
 8008194:	f7ff f8a2 	bl	80072dc <xTaskCreateStatic>
 8008198:	4603      	mov	r3, r0
 800819a:	4a11      	ldr	r2, [pc, #68]	@ (80081e0 <xTimerCreateTimerTask+0x90>)
 800819c:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800819e:	4b10      	ldr	r3, [pc, #64]	@ (80081e0 <xTimerCreateTimerTask+0x90>)
 80081a0:	681b      	ldr	r3, [r3, #0]
 80081a2:	2b00      	cmp	r3, #0
 80081a4:	d001      	beq.n	80081aa <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 80081a6:	2301      	movs	r3, #1
 80081a8:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 80081aa:	697b      	ldr	r3, [r7, #20]
 80081ac:	2b00      	cmp	r3, #0
 80081ae:	d10b      	bne.n	80081c8 <xTimerCreateTimerTask+0x78>
	__asm volatile
 80081b0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80081b4:	f383 8811 	msr	BASEPRI, r3
 80081b8:	f3bf 8f6f 	isb	sy
 80081bc:	f3bf 8f4f 	dsb	sy
 80081c0:	613b      	str	r3, [r7, #16]
}
 80081c2:	bf00      	nop
 80081c4:	bf00      	nop
 80081c6:	e7fd      	b.n	80081c4 <xTimerCreateTimerTask+0x74>
	return xReturn;
 80081c8:	697b      	ldr	r3, [r7, #20]
}
 80081ca:	4618      	mov	r0, r3
 80081cc:	3718      	adds	r7, #24
 80081ce:	46bd      	mov	sp, r7
 80081d0:	bd80      	pop	{r7, pc}
 80081d2:	bf00      	nop
 80081d4:	20001200 	.word	0x20001200
 80081d8:	080092ac 	.word	0x080092ac
 80081dc:	0800831d 	.word	0x0800831d
 80081e0:	20001204 	.word	0x20001204

080081e4 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 80081e4:	b580      	push	{r7, lr}
 80081e6:	b08a      	sub	sp, #40	@ 0x28
 80081e8:	af00      	add	r7, sp, #0
 80081ea:	60f8      	str	r0, [r7, #12]
 80081ec:	60b9      	str	r1, [r7, #8]
 80081ee:	607a      	str	r2, [r7, #4]
 80081f0:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 80081f2:	2300      	movs	r3, #0
 80081f4:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 80081f6:	68fb      	ldr	r3, [r7, #12]
 80081f8:	2b00      	cmp	r3, #0
 80081fa:	d10b      	bne.n	8008214 <xTimerGenericCommand+0x30>
	__asm volatile
 80081fc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008200:	f383 8811 	msr	BASEPRI, r3
 8008204:	f3bf 8f6f 	isb	sy
 8008208:	f3bf 8f4f 	dsb	sy
 800820c:	623b      	str	r3, [r7, #32]
}
 800820e:	bf00      	nop
 8008210:	bf00      	nop
 8008212:	e7fd      	b.n	8008210 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8008214:	4b19      	ldr	r3, [pc, #100]	@ (800827c <xTimerGenericCommand+0x98>)
 8008216:	681b      	ldr	r3, [r3, #0]
 8008218:	2b00      	cmp	r3, #0
 800821a:	d02a      	beq.n	8008272 <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800821c:	68bb      	ldr	r3, [r7, #8]
 800821e:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8008220:	687b      	ldr	r3, [r7, #4]
 8008222:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8008224:	68fb      	ldr	r3, [r7, #12]
 8008226:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8008228:	68bb      	ldr	r3, [r7, #8]
 800822a:	2b05      	cmp	r3, #5
 800822c:	dc18      	bgt.n	8008260 <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800822e:	f7ff fead 	bl	8007f8c <xTaskGetSchedulerState>
 8008232:	4603      	mov	r3, r0
 8008234:	2b02      	cmp	r3, #2
 8008236:	d109      	bne.n	800824c <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8008238:	4b10      	ldr	r3, [pc, #64]	@ (800827c <xTimerGenericCommand+0x98>)
 800823a:	6818      	ldr	r0, [r3, #0]
 800823c:	f107 0110 	add.w	r1, r7, #16
 8008240:	2300      	movs	r3, #0
 8008242:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008244:	f7fe fc5a 	bl	8006afc <xQueueGenericSend>
 8008248:	6278      	str	r0, [r7, #36]	@ 0x24
 800824a:	e012      	b.n	8008272 <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800824c:	4b0b      	ldr	r3, [pc, #44]	@ (800827c <xTimerGenericCommand+0x98>)
 800824e:	6818      	ldr	r0, [r3, #0]
 8008250:	f107 0110 	add.w	r1, r7, #16
 8008254:	2300      	movs	r3, #0
 8008256:	2200      	movs	r2, #0
 8008258:	f7fe fc50 	bl	8006afc <xQueueGenericSend>
 800825c:	6278      	str	r0, [r7, #36]	@ 0x24
 800825e:	e008      	b.n	8008272 <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8008260:	4b06      	ldr	r3, [pc, #24]	@ (800827c <xTimerGenericCommand+0x98>)
 8008262:	6818      	ldr	r0, [r3, #0]
 8008264:	f107 0110 	add.w	r1, r7, #16
 8008268:	2300      	movs	r3, #0
 800826a:	683a      	ldr	r2, [r7, #0]
 800826c:	f7fe fd48 	bl	8006d00 <xQueueGenericSendFromISR>
 8008270:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8008272:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8008274:	4618      	mov	r0, r3
 8008276:	3728      	adds	r7, #40	@ 0x28
 8008278:	46bd      	mov	sp, r7
 800827a:	bd80      	pop	{r7, pc}
 800827c:	20001200 	.word	0x20001200

08008280 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8008280:	b580      	push	{r7, lr}
 8008282:	b088      	sub	sp, #32
 8008284:	af02      	add	r7, sp, #8
 8008286:	6078      	str	r0, [r7, #4]
 8008288:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800828a:	4b23      	ldr	r3, [pc, #140]	@ (8008318 <prvProcessExpiredTimer+0x98>)
 800828c:	681b      	ldr	r3, [r3, #0]
 800828e:	68db      	ldr	r3, [r3, #12]
 8008290:	68db      	ldr	r3, [r3, #12]
 8008292:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8008294:	697b      	ldr	r3, [r7, #20]
 8008296:	3304      	adds	r3, #4
 8008298:	4618      	mov	r0, r3
 800829a:	f7fe fafb 	bl	8006894 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800829e:	697b      	ldr	r3, [r7, #20]
 80082a0:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80082a4:	f003 0304 	and.w	r3, r3, #4
 80082a8:	2b00      	cmp	r3, #0
 80082aa:	d023      	beq.n	80082f4 <prvProcessExpiredTimer+0x74>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 80082ac:	697b      	ldr	r3, [r7, #20]
 80082ae:	699a      	ldr	r2, [r3, #24]
 80082b0:	687b      	ldr	r3, [r7, #4]
 80082b2:	18d1      	adds	r1, r2, r3
 80082b4:	687b      	ldr	r3, [r7, #4]
 80082b6:	683a      	ldr	r2, [r7, #0]
 80082b8:	6978      	ldr	r0, [r7, #20]
 80082ba:	f000 f8d5 	bl	8008468 <prvInsertTimerInActiveList>
 80082be:	4603      	mov	r3, r0
 80082c0:	2b00      	cmp	r3, #0
 80082c2:	d020      	beq.n	8008306 <prvProcessExpiredTimer+0x86>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80082c4:	2300      	movs	r3, #0
 80082c6:	9300      	str	r3, [sp, #0]
 80082c8:	2300      	movs	r3, #0
 80082ca:	687a      	ldr	r2, [r7, #4]
 80082cc:	2100      	movs	r1, #0
 80082ce:	6978      	ldr	r0, [r7, #20]
 80082d0:	f7ff ff88 	bl	80081e4 <xTimerGenericCommand>
 80082d4:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 80082d6:	693b      	ldr	r3, [r7, #16]
 80082d8:	2b00      	cmp	r3, #0
 80082da:	d114      	bne.n	8008306 <prvProcessExpiredTimer+0x86>
	__asm volatile
 80082dc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80082e0:	f383 8811 	msr	BASEPRI, r3
 80082e4:	f3bf 8f6f 	isb	sy
 80082e8:	f3bf 8f4f 	dsb	sy
 80082ec:	60fb      	str	r3, [r7, #12]
}
 80082ee:	bf00      	nop
 80082f0:	bf00      	nop
 80082f2:	e7fd      	b.n	80082f0 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80082f4:	697b      	ldr	r3, [r7, #20]
 80082f6:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80082fa:	f023 0301 	bic.w	r3, r3, #1
 80082fe:	b2da      	uxtb	r2, r3
 8008300:	697b      	ldr	r3, [r7, #20]
 8008302:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8008306:	697b      	ldr	r3, [r7, #20]
 8008308:	6a1b      	ldr	r3, [r3, #32]
 800830a:	6978      	ldr	r0, [r7, #20]
 800830c:	4798      	blx	r3
}
 800830e:	bf00      	nop
 8008310:	3718      	adds	r7, #24
 8008312:	46bd      	mov	sp, r7
 8008314:	bd80      	pop	{r7, pc}
 8008316:	bf00      	nop
 8008318:	200011f8 	.word	0x200011f8

0800831c <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800831c:	b580      	push	{r7, lr}
 800831e:	b084      	sub	sp, #16
 8008320:	af00      	add	r7, sp, #0
 8008322:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8008324:	f107 0308 	add.w	r3, r7, #8
 8008328:	4618      	mov	r0, r3
 800832a:	f000 f859 	bl	80083e0 <prvGetNextExpireTime>
 800832e:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8008330:	68bb      	ldr	r3, [r7, #8]
 8008332:	4619      	mov	r1, r3
 8008334:	68f8      	ldr	r0, [r7, #12]
 8008336:	f000 f805 	bl	8008344 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800833a:	f000 f8d7 	bl	80084ec <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800833e:	bf00      	nop
 8008340:	e7f0      	b.n	8008324 <prvTimerTask+0x8>
	...

08008344 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8008344:	b580      	push	{r7, lr}
 8008346:	b084      	sub	sp, #16
 8008348:	af00      	add	r7, sp, #0
 800834a:	6078      	str	r0, [r7, #4]
 800834c:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800834e:	f7ff fa29 	bl	80077a4 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8008352:	f107 0308 	add.w	r3, r7, #8
 8008356:	4618      	mov	r0, r3
 8008358:	f000 f866 	bl	8008428 <prvSampleTimeNow>
 800835c:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800835e:	68bb      	ldr	r3, [r7, #8]
 8008360:	2b00      	cmp	r3, #0
 8008362:	d130      	bne.n	80083c6 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8008364:	683b      	ldr	r3, [r7, #0]
 8008366:	2b00      	cmp	r3, #0
 8008368:	d10a      	bne.n	8008380 <prvProcessTimerOrBlockTask+0x3c>
 800836a:	687a      	ldr	r2, [r7, #4]
 800836c:	68fb      	ldr	r3, [r7, #12]
 800836e:	429a      	cmp	r2, r3
 8008370:	d806      	bhi.n	8008380 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8008372:	f7ff fa25 	bl	80077c0 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8008376:	68f9      	ldr	r1, [r7, #12]
 8008378:	6878      	ldr	r0, [r7, #4]
 800837a:	f7ff ff81 	bl	8008280 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800837e:	e024      	b.n	80083ca <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8008380:	683b      	ldr	r3, [r7, #0]
 8008382:	2b00      	cmp	r3, #0
 8008384:	d008      	beq.n	8008398 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8008386:	4b13      	ldr	r3, [pc, #76]	@ (80083d4 <prvProcessTimerOrBlockTask+0x90>)
 8008388:	681b      	ldr	r3, [r3, #0]
 800838a:	681b      	ldr	r3, [r3, #0]
 800838c:	2b00      	cmp	r3, #0
 800838e:	d101      	bne.n	8008394 <prvProcessTimerOrBlockTask+0x50>
 8008390:	2301      	movs	r3, #1
 8008392:	e000      	b.n	8008396 <prvProcessTimerOrBlockTask+0x52>
 8008394:	2300      	movs	r3, #0
 8008396:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8008398:	4b0f      	ldr	r3, [pc, #60]	@ (80083d8 <prvProcessTimerOrBlockTask+0x94>)
 800839a:	6818      	ldr	r0, [r3, #0]
 800839c:	687a      	ldr	r2, [r7, #4]
 800839e:	68fb      	ldr	r3, [r7, #12]
 80083a0:	1ad3      	subs	r3, r2, r3
 80083a2:	683a      	ldr	r2, [r7, #0]
 80083a4:	4619      	mov	r1, r3
 80083a6:	f7fe ff65 	bl	8007274 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 80083aa:	f7ff fa09 	bl	80077c0 <xTaskResumeAll>
 80083ae:	4603      	mov	r3, r0
 80083b0:	2b00      	cmp	r3, #0
 80083b2:	d10a      	bne.n	80083ca <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 80083b4:	4b09      	ldr	r3, [pc, #36]	@ (80083dc <prvProcessTimerOrBlockTask+0x98>)
 80083b6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80083ba:	601a      	str	r2, [r3, #0]
 80083bc:	f3bf 8f4f 	dsb	sy
 80083c0:	f3bf 8f6f 	isb	sy
}
 80083c4:	e001      	b.n	80083ca <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 80083c6:	f7ff f9fb 	bl	80077c0 <xTaskResumeAll>
}
 80083ca:	bf00      	nop
 80083cc:	3710      	adds	r7, #16
 80083ce:	46bd      	mov	sp, r7
 80083d0:	bd80      	pop	{r7, pc}
 80083d2:	bf00      	nop
 80083d4:	200011fc 	.word	0x200011fc
 80083d8:	20001200 	.word	0x20001200
 80083dc:	e000ed04 	.word	0xe000ed04

080083e0 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 80083e0:	b480      	push	{r7}
 80083e2:	b085      	sub	sp, #20
 80083e4:	af00      	add	r7, sp, #0
 80083e6:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 80083e8:	4b0e      	ldr	r3, [pc, #56]	@ (8008424 <prvGetNextExpireTime+0x44>)
 80083ea:	681b      	ldr	r3, [r3, #0]
 80083ec:	681b      	ldr	r3, [r3, #0]
 80083ee:	2b00      	cmp	r3, #0
 80083f0:	d101      	bne.n	80083f6 <prvGetNextExpireTime+0x16>
 80083f2:	2201      	movs	r2, #1
 80083f4:	e000      	b.n	80083f8 <prvGetNextExpireTime+0x18>
 80083f6:	2200      	movs	r2, #0
 80083f8:	687b      	ldr	r3, [r7, #4]
 80083fa:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 80083fc:	687b      	ldr	r3, [r7, #4]
 80083fe:	681b      	ldr	r3, [r3, #0]
 8008400:	2b00      	cmp	r3, #0
 8008402:	d105      	bne.n	8008410 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8008404:	4b07      	ldr	r3, [pc, #28]	@ (8008424 <prvGetNextExpireTime+0x44>)
 8008406:	681b      	ldr	r3, [r3, #0]
 8008408:	68db      	ldr	r3, [r3, #12]
 800840a:	681b      	ldr	r3, [r3, #0]
 800840c:	60fb      	str	r3, [r7, #12]
 800840e:	e001      	b.n	8008414 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8008410:	2300      	movs	r3, #0
 8008412:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8008414:	68fb      	ldr	r3, [r7, #12]
}
 8008416:	4618      	mov	r0, r3
 8008418:	3714      	adds	r7, #20
 800841a:	46bd      	mov	sp, r7
 800841c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008420:	4770      	bx	lr
 8008422:	bf00      	nop
 8008424:	200011f8 	.word	0x200011f8

08008428 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8008428:	b580      	push	{r7, lr}
 800842a:	b084      	sub	sp, #16
 800842c:	af00      	add	r7, sp, #0
 800842e:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8008430:	f7ff fa64 	bl	80078fc <xTaskGetTickCount>
 8008434:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8008436:	4b0b      	ldr	r3, [pc, #44]	@ (8008464 <prvSampleTimeNow+0x3c>)
 8008438:	681b      	ldr	r3, [r3, #0]
 800843a:	68fa      	ldr	r2, [r7, #12]
 800843c:	429a      	cmp	r2, r3
 800843e:	d205      	bcs.n	800844c <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8008440:	f000 f93a 	bl	80086b8 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8008444:	687b      	ldr	r3, [r7, #4]
 8008446:	2201      	movs	r2, #1
 8008448:	601a      	str	r2, [r3, #0]
 800844a:	e002      	b.n	8008452 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800844c:	687b      	ldr	r3, [r7, #4]
 800844e:	2200      	movs	r2, #0
 8008450:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8008452:	4a04      	ldr	r2, [pc, #16]	@ (8008464 <prvSampleTimeNow+0x3c>)
 8008454:	68fb      	ldr	r3, [r7, #12]
 8008456:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8008458:	68fb      	ldr	r3, [r7, #12]
}
 800845a:	4618      	mov	r0, r3
 800845c:	3710      	adds	r7, #16
 800845e:	46bd      	mov	sp, r7
 8008460:	bd80      	pop	{r7, pc}
 8008462:	bf00      	nop
 8008464:	20001208 	.word	0x20001208

08008468 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8008468:	b580      	push	{r7, lr}
 800846a:	b086      	sub	sp, #24
 800846c:	af00      	add	r7, sp, #0
 800846e:	60f8      	str	r0, [r7, #12]
 8008470:	60b9      	str	r1, [r7, #8]
 8008472:	607a      	str	r2, [r7, #4]
 8008474:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8008476:	2300      	movs	r3, #0
 8008478:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800847a:	68fb      	ldr	r3, [r7, #12]
 800847c:	68ba      	ldr	r2, [r7, #8]
 800847e:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8008480:	68fb      	ldr	r3, [r7, #12]
 8008482:	68fa      	ldr	r2, [r7, #12]
 8008484:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8008486:	68ba      	ldr	r2, [r7, #8]
 8008488:	687b      	ldr	r3, [r7, #4]
 800848a:	429a      	cmp	r2, r3
 800848c:	d812      	bhi.n	80084b4 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800848e:	687a      	ldr	r2, [r7, #4]
 8008490:	683b      	ldr	r3, [r7, #0]
 8008492:	1ad2      	subs	r2, r2, r3
 8008494:	68fb      	ldr	r3, [r7, #12]
 8008496:	699b      	ldr	r3, [r3, #24]
 8008498:	429a      	cmp	r2, r3
 800849a:	d302      	bcc.n	80084a2 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800849c:	2301      	movs	r3, #1
 800849e:	617b      	str	r3, [r7, #20]
 80084a0:	e01b      	b.n	80084da <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 80084a2:	4b10      	ldr	r3, [pc, #64]	@ (80084e4 <prvInsertTimerInActiveList+0x7c>)
 80084a4:	681a      	ldr	r2, [r3, #0]
 80084a6:	68fb      	ldr	r3, [r7, #12]
 80084a8:	3304      	adds	r3, #4
 80084aa:	4619      	mov	r1, r3
 80084ac:	4610      	mov	r0, r2
 80084ae:	f7fe f9b8 	bl	8006822 <vListInsert>
 80084b2:	e012      	b.n	80084da <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 80084b4:	687a      	ldr	r2, [r7, #4]
 80084b6:	683b      	ldr	r3, [r7, #0]
 80084b8:	429a      	cmp	r2, r3
 80084ba:	d206      	bcs.n	80084ca <prvInsertTimerInActiveList+0x62>
 80084bc:	68ba      	ldr	r2, [r7, #8]
 80084be:	683b      	ldr	r3, [r7, #0]
 80084c0:	429a      	cmp	r2, r3
 80084c2:	d302      	bcc.n	80084ca <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 80084c4:	2301      	movs	r3, #1
 80084c6:	617b      	str	r3, [r7, #20]
 80084c8:	e007      	b.n	80084da <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80084ca:	4b07      	ldr	r3, [pc, #28]	@ (80084e8 <prvInsertTimerInActiveList+0x80>)
 80084cc:	681a      	ldr	r2, [r3, #0]
 80084ce:	68fb      	ldr	r3, [r7, #12]
 80084d0:	3304      	adds	r3, #4
 80084d2:	4619      	mov	r1, r3
 80084d4:	4610      	mov	r0, r2
 80084d6:	f7fe f9a4 	bl	8006822 <vListInsert>
		}
	}

	return xProcessTimerNow;
 80084da:	697b      	ldr	r3, [r7, #20]
}
 80084dc:	4618      	mov	r0, r3
 80084de:	3718      	adds	r7, #24
 80084e0:	46bd      	mov	sp, r7
 80084e2:	bd80      	pop	{r7, pc}
 80084e4:	200011fc 	.word	0x200011fc
 80084e8:	200011f8 	.word	0x200011f8

080084ec <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 80084ec:	b580      	push	{r7, lr}
 80084ee:	b08e      	sub	sp, #56	@ 0x38
 80084f0:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80084f2:	e0ce      	b.n	8008692 <prvProcessReceivedCommands+0x1a6>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 80084f4:	687b      	ldr	r3, [r7, #4]
 80084f6:	2b00      	cmp	r3, #0
 80084f8:	da19      	bge.n	800852e <prvProcessReceivedCommands+0x42>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 80084fa:	1d3b      	adds	r3, r7, #4
 80084fc:	3304      	adds	r3, #4
 80084fe:	62fb      	str	r3, [r7, #44]	@ 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8008500:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008502:	2b00      	cmp	r3, #0
 8008504:	d10b      	bne.n	800851e <prvProcessReceivedCommands+0x32>
	__asm volatile
 8008506:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800850a:	f383 8811 	msr	BASEPRI, r3
 800850e:	f3bf 8f6f 	isb	sy
 8008512:	f3bf 8f4f 	dsb	sy
 8008516:	61fb      	str	r3, [r7, #28]
}
 8008518:	bf00      	nop
 800851a:	bf00      	nop
 800851c:	e7fd      	b.n	800851a <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800851e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008520:	681b      	ldr	r3, [r3, #0]
 8008522:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8008524:	6850      	ldr	r0, [r2, #4]
 8008526:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8008528:	6892      	ldr	r2, [r2, #8]
 800852a:	4611      	mov	r1, r2
 800852c:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800852e:	687b      	ldr	r3, [r7, #4]
 8008530:	2b00      	cmp	r3, #0
 8008532:	f2c0 80ae 	blt.w	8008692 <prvProcessReceivedCommands+0x1a6>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8008536:	68fb      	ldr	r3, [r7, #12]
 8008538:	62bb      	str	r3, [r7, #40]	@ 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800853a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800853c:	695b      	ldr	r3, [r3, #20]
 800853e:	2b00      	cmp	r3, #0
 8008540:	d004      	beq.n	800854c <prvProcessReceivedCommands+0x60>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8008542:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008544:	3304      	adds	r3, #4
 8008546:	4618      	mov	r0, r3
 8008548:	f7fe f9a4 	bl	8006894 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800854c:	463b      	mov	r3, r7
 800854e:	4618      	mov	r0, r3
 8008550:	f7ff ff6a 	bl	8008428 <prvSampleTimeNow>
 8008554:	6278      	str	r0, [r7, #36]	@ 0x24

			switch( xMessage.xMessageID )
 8008556:	687b      	ldr	r3, [r7, #4]
 8008558:	2b09      	cmp	r3, #9
 800855a:	f200 8097 	bhi.w	800868c <prvProcessReceivedCommands+0x1a0>
 800855e:	a201      	add	r2, pc, #4	@ (adr r2, 8008564 <prvProcessReceivedCommands+0x78>)
 8008560:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008564:	0800858d 	.word	0x0800858d
 8008568:	0800858d 	.word	0x0800858d
 800856c:	0800858d 	.word	0x0800858d
 8008570:	08008603 	.word	0x08008603
 8008574:	08008617 	.word	0x08008617
 8008578:	08008663 	.word	0x08008663
 800857c:	0800858d 	.word	0x0800858d
 8008580:	0800858d 	.word	0x0800858d
 8008584:	08008603 	.word	0x08008603
 8008588:	08008617 	.word	0x08008617
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800858c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800858e:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8008592:	f043 0301 	orr.w	r3, r3, #1
 8008596:	b2da      	uxtb	r2, r3
 8008598:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800859a:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800859e:	68ba      	ldr	r2, [r7, #8]
 80085a0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80085a2:	699b      	ldr	r3, [r3, #24]
 80085a4:	18d1      	adds	r1, r2, r3
 80085a6:	68bb      	ldr	r3, [r7, #8]
 80085a8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80085aa:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80085ac:	f7ff ff5c 	bl	8008468 <prvInsertTimerInActiveList>
 80085b0:	4603      	mov	r3, r0
 80085b2:	2b00      	cmp	r3, #0
 80085b4:	d06c      	beq.n	8008690 <prvProcessReceivedCommands+0x1a4>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80085b6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80085b8:	6a1b      	ldr	r3, [r3, #32]
 80085ba:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80085bc:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80085be:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80085c0:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80085c4:	f003 0304 	and.w	r3, r3, #4
 80085c8:	2b00      	cmp	r3, #0
 80085ca:	d061      	beq.n	8008690 <prvProcessReceivedCommands+0x1a4>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 80085cc:	68ba      	ldr	r2, [r7, #8]
 80085ce:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80085d0:	699b      	ldr	r3, [r3, #24]
 80085d2:	441a      	add	r2, r3
 80085d4:	2300      	movs	r3, #0
 80085d6:	9300      	str	r3, [sp, #0]
 80085d8:	2300      	movs	r3, #0
 80085da:	2100      	movs	r1, #0
 80085dc:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80085de:	f7ff fe01 	bl	80081e4 <xTimerGenericCommand>
 80085e2:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 80085e4:	6a3b      	ldr	r3, [r7, #32]
 80085e6:	2b00      	cmp	r3, #0
 80085e8:	d152      	bne.n	8008690 <prvProcessReceivedCommands+0x1a4>
	__asm volatile
 80085ea:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80085ee:	f383 8811 	msr	BASEPRI, r3
 80085f2:	f3bf 8f6f 	isb	sy
 80085f6:	f3bf 8f4f 	dsb	sy
 80085fa:	61bb      	str	r3, [r7, #24]
}
 80085fc:	bf00      	nop
 80085fe:	bf00      	nop
 8008600:	e7fd      	b.n	80085fe <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8008602:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008604:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8008608:	f023 0301 	bic.w	r3, r3, #1
 800860c:	b2da      	uxtb	r2, r3
 800860e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008610:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 8008614:	e03d      	b.n	8008692 <prvProcessReceivedCommands+0x1a6>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8008616:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008618:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800861c:	f043 0301 	orr.w	r3, r3, #1
 8008620:	b2da      	uxtb	r2, r3
 8008622:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008624:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8008628:	68ba      	ldr	r2, [r7, #8]
 800862a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800862c:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800862e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008630:	699b      	ldr	r3, [r3, #24]
 8008632:	2b00      	cmp	r3, #0
 8008634:	d10b      	bne.n	800864e <prvProcessReceivedCommands+0x162>
	__asm volatile
 8008636:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800863a:	f383 8811 	msr	BASEPRI, r3
 800863e:	f3bf 8f6f 	isb	sy
 8008642:	f3bf 8f4f 	dsb	sy
 8008646:	617b      	str	r3, [r7, #20]
}
 8008648:	bf00      	nop
 800864a:	bf00      	nop
 800864c:	e7fd      	b.n	800864a <prvProcessReceivedCommands+0x15e>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800864e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008650:	699a      	ldr	r2, [r3, #24]
 8008652:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008654:	18d1      	adds	r1, r2, r3
 8008656:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008658:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800865a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800865c:	f7ff ff04 	bl	8008468 <prvInsertTimerInActiveList>
					break;
 8008660:	e017      	b.n	8008692 <prvProcessReceivedCommands+0x1a6>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8008662:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008664:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8008668:	f003 0302 	and.w	r3, r3, #2
 800866c:	2b00      	cmp	r3, #0
 800866e:	d103      	bne.n	8008678 <prvProcessReceivedCommands+0x18c>
						{
							vPortFree( pxTimer );
 8008670:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8008672:	f000 fbe9 	bl	8008e48 <vPortFree>
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8008676:	e00c      	b.n	8008692 <prvProcessReceivedCommands+0x1a6>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8008678:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800867a:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800867e:	f023 0301 	bic.w	r3, r3, #1
 8008682:	b2da      	uxtb	r2, r3
 8008684:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008686:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 800868a:	e002      	b.n	8008692 <prvProcessReceivedCommands+0x1a6>

				default	:
					/* Don't expect to get here. */
					break;
 800868c:	bf00      	nop
 800868e:	e000      	b.n	8008692 <prvProcessReceivedCommands+0x1a6>
					break;
 8008690:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8008692:	4b08      	ldr	r3, [pc, #32]	@ (80086b4 <prvProcessReceivedCommands+0x1c8>)
 8008694:	681b      	ldr	r3, [r3, #0]
 8008696:	1d39      	adds	r1, r7, #4
 8008698:	2200      	movs	r2, #0
 800869a:	4618      	mov	r0, r3
 800869c:	f7fe fbce 	bl	8006e3c <xQueueReceive>
 80086a0:	4603      	mov	r3, r0
 80086a2:	2b00      	cmp	r3, #0
 80086a4:	f47f af26 	bne.w	80084f4 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 80086a8:	bf00      	nop
 80086aa:	bf00      	nop
 80086ac:	3730      	adds	r7, #48	@ 0x30
 80086ae:	46bd      	mov	sp, r7
 80086b0:	bd80      	pop	{r7, pc}
 80086b2:	bf00      	nop
 80086b4:	20001200 	.word	0x20001200

080086b8 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 80086b8:	b580      	push	{r7, lr}
 80086ba:	b088      	sub	sp, #32
 80086bc:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80086be:	e049      	b.n	8008754 <prvSwitchTimerLists+0x9c>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80086c0:	4b2e      	ldr	r3, [pc, #184]	@ (800877c <prvSwitchTimerLists+0xc4>)
 80086c2:	681b      	ldr	r3, [r3, #0]
 80086c4:	68db      	ldr	r3, [r3, #12]
 80086c6:	681b      	ldr	r3, [r3, #0]
 80086c8:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80086ca:	4b2c      	ldr	r3, [pc, #176]	@ (800877c <prvSwitchTimerLists+0xc4>)
 80086cc:	681b      	ldr	r3, [r3, #0]
 80086ce:	68db      	ldr	r3, [r3, #12]
 80086d0:	68db      	ldr	r3, [r3, #12]
 80086d2:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80086d4:	68fb      	ldr	r3, [r7, #12]
 80086d6:	3304      	adds	r3, #4
 80086d8:	4618      	mov	r0, r3
 80086da:	f7fe f8db 	bl	8006894 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80086de:	68fb      	ldr	r3, [r7, #12]
 80086e0:	6a1b      	ldr	r3, [r3, #32]
 80086e2:	68f8      	ldr	r0, [r7, #12]
 80086e4:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80086e6:	68fb      	ldr	r3, [r7, #12]
 80086e8:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80086ec:	f003 0304 	and.w	r3, r3, #4
 80086f0:	2b00      	cmp	r3, #0
 80086f2:	d02f      	beq.n	8008754 <prvSwitchTimerLists+0x9c>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 80086f4:	68fb      	ldr	r3, [r7, #12]
 80086f6:	699b      	ldr	r3, [r3, #24]
 80086f8:	693a      	ldr	r2, [r7, #16]
 80086fa:	4413      	add	r3, r2
 80086fc:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 80086fe:	68ba      	ldr	r2, [r7, #8]
 8008700:	693b      	ldr	r3, [r7, #16]
 8008702:	429a      	cmp	r2, r3
 8008704:	d90e      	bls.n	8008724 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8008706:	68fb      	ldr	r3, [r7, #12]
 8008708:	68ba      	ldr	r2, [r7, #8]
 800870a:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800870c:	68fb      	ldr	r3, [r7, #12]
 800870e:	68fa      	ldr	r2, [r7, #12]
 8008710:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8008712:	4b1a      	ldr	r3, [pc, #104]	@ (800877c <prvSwitchTimerLists+0xc4>)
 8008714:	681a      	ldr	r2, [r3, #0]
 8008716:	68fb      	ldr	r3, [r7, #12]
 8008718:	3304      	adds	r3, #4
 800871a:	4619      	mov	r1, r3
 800871c:	4610      	mov	r0, r2
 800871e:	f7fe f880 	bl	8006822 <vListInsert>
 8008722:	e017      	b.n	8008754 <prvSwitchTimerLists+0x9c>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8008724:	2300      	movs	r3, #0
 8008726:	9300      	str	r3, [sp, #0]
 8008728:	2300      	movs	r3, #0
 800872a:	693a      	ldr	r2, [r7, #16]
 800872c:	2100      	movs	r1, #0
 800872e:	68f8      	ldr	r0, [r7, #12]
 8008730:	f7ff fd58 	bl	80081e4 <xTimerGenericCommand>
 8008734:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8008736:	687b      	ldr	r3, [r7, #4]
 8008738:	2b00      	cmp	r3, #0
 800873a:	d10b      	bne.n	8008754 <prvSwitchTimerLists+0x9c>
	__asm volatile
 800873c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008740:	f383 8811 	msr	BASEPRI, r3
 8008744:	f3bf 8f6f 	isb	sy
 8008748:	f3bf 8f4f 	dsb	sy
 800874c:	603b      	str	r3, [r7, #0]
}
 800874e:	bf00      	nop
 8008750:	bf00      	nop
 8008752:	e7fd      	b.n	8008750 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8008754:	4b09      	ldr	r3, [pc, #36]	@ (800877c <prvSwitchTimerLists+0xc4>)
 8008756:	681b      	ldr	r3, [r3, #0]
 8008758:	681b      	ldr	r3, [r3, #0]
 800875a:	2b00      	cmp	r3, #0
 800875c:	d1b0      	bne.n	80086c0 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800875e:	4b07      	ldr	r3, [pc, #28]	@ (800877c <prvSwitchTimerLists+0xc4>)
 8008760:	681b      	ldr	r3, [r3, #0]
 8008762:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8008764:	4b06      	ldr	r3, [pc, #24]	@ (8008780 <prvSwitchTimerLists+0xc8>)
 8008766:	681b      	ldr	r3, [r3, #0]
 8008768:	4a04      	ldr	r2, [pc, #16]	@ (800877c <prvSwitchTimerLists+0xc4>)
 800876a:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800876c:	4a04      	ldr	r2, [pc, #16]	@ (8008780 <prvSwitchTimerLists+0xc8>)
 800876e:	697b      	ldr	r3, [r7, #20]
 8008770:	6013      	str	r3, [r2, #0]
}
 8008772:	bf00      	nop
 8008774:	3718      	adds	r7, #24
 8008776:	46bd      	mov	sp, r7
 8008778:	bd80      	pop	{r7, pc}
 800877a:	bf00      	nop
 800877c:	200011f8 	.word	0x200011f8
 8008780:	200011fc 	.word	0x200011fc

08008784 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8008784:	b580      	push	{r7, lr}
 8008786:	b082      	sub	sp, #8
 8008788:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800878a:	f000 f96d 	bl	8008a68 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800878e:	4b15      	ldr	r3, [pc, #84]	@ (80087e4 <prvCheckForValidListAndQueue+0x60>)
 8008790:	681b      	ldr	r3, [r3, #0]
 8008792:	2b00      	cmp	r3, #0
 8008794:	d120      	bne.n	80087d8 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8008796:	4814      	ldr	r0, [pc, #80]	@ (80087e8 <prvCheckForValidListAndQueue+0x64>)
 8008798:	f7fd fff2 	bl	8006780 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800879c:	4813      	ldr	r0, [pc, #76]	@ (80087ec <prvCheckForValidListAndQueue+0x68>)
 800879e:	f7fd ffef 	bl	8006780 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 80087a2:	4b13      	ldr	r3, [pc, #76]	@ (80087f0 <prvCheckForValidListAndQueue+0x6c>)
 80087a4:	4a10      	ldr	r2, [pc, #64]	@ (80087e8 <prvCheckForValidListAndQueue+0x64>)
 80087a6:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 80087a8:	4b12      	ldr	r3, [pc, #72]	@ (80087f4 <prvCheckForValidListAndQueue+0x70>)
 80087aa:	4a10      	ldr	r2, [pc, #64]	@ (80087ec <prvCheckForValidListAndQueue+0x68>)
 80087ac:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 80087ae:	2300      	movs	r3, #0
 80087b0:	9300      	str	r3, [sp, #0]
 80087b2:	4b11      	ldr	r3, [pc, #68]	@ (80087f8 <prvCheckForValidListAndQueue+0x74>)
 80087b4:	4a11      	ldr	r2, [pc, #68]	@ (80087fc <prvCheckForValidListAndQueue+0x78>)
 80087b6:	2110      	movs	r1, #16
 80087b8:	200a      	movs	r0, #10
 80087ba:	f7fe f8ff 	bl	80069bc <xQueueGenericCreateStatic>
 80087be:	4603      	mov	r3, r0
 80087c0:	4a08      	ldr	r2, [pc, #32]	@ (80087e4 <prvCheckForValidListAndQueue+0x60>)
 80087c2:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 80087c4:	4b07      	ldr	r3, [pc, #28]	@ (80087e4 <prvCheckForValidListAndQueue+0x60>)
 80087c6:	681b      	ldr	r3, [r3, #0]
 80087c8:	2b00      	cmp	r3, #0
 80087ca:	d005      	beq.n	80087d8 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 80087cc:	4b05      	ldr	r3, [pc, #20]	@ (80087e4 <prvCheckForValidListAndQueue+0x60>)
 80087ce:	681b      	ldr	r3, [r3, #0]
 80087d0:	490b      	ldr	r1, [pc, #44]	@ (8008800 <prvCheckForValidListAndQueue+0x7c>)
 80087d2:	4618      	mov	r0, r3
 80087d4:	f7fe fd24 	bl	8007220 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80087d8:	f000 f978 	bl	8008acc <vPortExitCritical>
}
 80087dc:	bf00      	nop
 80087de:	46bd      	mov	sp, r7
 80087e0:	bd80      	pop	{r7, pc}
 80087e2:	bf00      	nop
 80087e4:	20001200 	.word	0x20001200
 80087e8:	200011d0 	.word	0x200011d0
 80087ec:	200011e4 	.word	0x200011e4
 80087f0:	200011f8 	.word	0x200011f8
 80087f4:	200011fc 	.word	0x200011fc
 80087f8:	200012ac 	.word	0x200012ac
 80087fc:	2000120c 	.word	0x2000120c
 8008800:	080092b4 	.word	0x080092b4

08008804 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8008804:	b480      	push	{r7}
 8008806:	b085      	sub	sp, #20
 8008808:	af00      	add	r7, sp, #0
 800880a:	60f8      	str	r0, [r7, #12]
 800880c:	60b9      	str	r1, [r7, #8]
 800880e:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8008810:	68fb      	ldr	r3, [r7, #12]
 8008812:	3b04      	subs	r3, #4
 8008814:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8008816:	68fb      	ldr	r3, [r7, #12]
 8008818:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 800881c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800881e:	68fb      	ldr	r3, [r7, #12]
 8008820:	3b04      	subs	r3, #4
 8008822:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8008824:	68bb      	ldr	r3, [r7, #8]
 8008826:	f023 0201 	bic.w	r2, r3, #1
 800882a:	68fb      	ldr	r3, [r7, #12]
 800882c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800882e:	68fb      	ldr	r3, [r7, #12]
 8008830:	3b04      	subs	r3, #4
 8008832:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8008834:	4a0c      	ldr	r2, [pc, #48]	@ (8008868 <pxPortInitialiseStack+0x64>)
 8008836:	68fb      	ldr	r3, [r7, #12]
 8008838:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800883a:	68fb      	ldr	r3, [r7, #12]
 800883c:	3b14      	subs	r3, #20
 800883e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8008840:	687a      	ldr	r2, [r7, #4]
 8008842:	68fb      	ldr	r3, [r7, #12]
 8008844:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8008846:	68fb      	ldr	r3, [r7, #12]
 8008848:	3b04      	subs	r3, #4
 800884a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800884c:	68fb      	ldr	r3, [r7, #12]
 800884e:	f06f 0202 	mvn.w	r2, #2
 8008852:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8008854:	68fb      	ldr	r3, [r7, #12]
 8008856:	3b20      	subs	r3, #32
 8008858:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800885a:	68fb      	ldr	r3, [r7, #12]
}
 800885c:	4618      	mov	r0, r3
 800885e:	3714      	adds	r7, #20
 8008860:	46bd      	mov	sp, r7
 8008862:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008866:	4770      	bx	lr
 8008868:	0800886d 	.word	0x0800886d

0800886c <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800886c:	b480      	push	{r7}
 800886e:	b085      	sub	sp, #20
 8008870:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8008872:	2300      	movs	r3, #0
 8008874:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8008876:	4b13      	ldr	r3, [pc, #76]	@ (80088c4 <prvTaskExitError+0x58>)
 8008878:	681b      	ldr	r3, [r3, #0]
 800887a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800887e:	d00b      	beq.n	8008898 <prvTaskExitError+0x2c>
	__asm volatile
 8008880:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008884:	f383 8811 	msr	BASEPRI, r3
 8008888:	f3bf 8f6f 	isb	sy
 800888c:	f3bf 8f4f 	dsb	sy
 8008890:	60fb      	str	r3, [r7, #12]
}
 8008892:	bf00      	nop
 8008894:	bf00      	nop
 8008896:	e7fd      	b.n	8008894 <prvTaskExitError+0x28>
	__asm volatile
 8008898:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800889c:	f383 8811 	msr	BASEPRI, r3
 80088a0:	f3bf 8f6f 	isb	sy
 80088a4:	f3bf 8f4f 	dsb	sy
 80088a8:	60bb      	str	r3, [r7, #8]
}
 80088aa:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 80088ac:	bf00      	nop
 80088ae:	687b      	ldr	r3, [r7, #4]
 80088b0:	2b00      	cmp	r3, #0
 80088b2:	d0fc      	beq.n	80088ae <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 80088b4:	bf00      	nop
 80088b6:	bf00      	nop
 80088b8:	3714      	adds	r7, #20
 80088ba:	46bd      	mov	sp, r7
 80088bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088c0:	4770      	bx	lr
 80088c2:	bf00      	nop
 80088c4:	20000054 	.word	0x20000054
	...

080088d0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 80088d0:	4b07      	ldr	r3, [pc, #28]	@ (80088f0 <pxCurrentTCBConst2>)
 80088d2:	6819      	ldr	r1, [r3, #0]
 80088d4:	6808      	ldr	r0, [r1, #0]
 80088d6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80088da:	f380 8809 	msr	PSP, r0
 80088de:	f3bf 8f6f 	isb	sy
 80088e2:	f04f 0000 	mov.w	r0, #0
 80088e6:	f380 8811 	msr	BASEPRI, r0
 80088ea:	4770      	bx	lr
 80088ec:	f3af 8000 	nop.w

080088f0 <pxCurrentTCBConst2>:
 80088f0:	20000cd0 	.word	0x20000cd0
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 80088f4:	bf00      	nop
 80088f6:	bf00      	nop

080088f8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 80088f8:	4808      	ldr	r0, [pc, #32]	@ (800891c <prvPortStartFirstTask+0x24>)
 80088fa:	6800      	ldr	r0, [r0, #0]
 80088fc:	6800      	ldr	r0, [r0, #0]
 80088fe:	f380 8808 	msr	MSP, r0
 8008902:	f04f 0000 	mov.w	r0, #0
 8008906:	f380 8814 	msr	CONTROL, r0
 800890a:	b662      	cpsie	i
 800890c:	b661      	cpsie	f
 800890e:	f3bf 8f4f 	dsb	sy
 8008912:	f3bf 8f6f 	isb	sy
 8008916:	df00      	svc	0
 8008918:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800891a:	bf00      	nop
 800891c:	e000ed08 	.word	0xe000ed08

08008920 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8008920:	b580      	push	{r7, lr}
 8008922:	b086      	sub	sp, #24
 8008924:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8008926:	4b47      	ldr	r3, [pc, #284]	@ (8008a44 <xPortStartScheduler+0x124>)
 8008928:	681b      	ldr	r3, [r3, #0]
 800892a:	4a47      	ldr	r2, [pc, #284]	@ (8008a48 <xPortStartScheduler+0x128>)
 800892c:	4293      	cmp	r3, r2
 800892e:	d10b      	bne.n	8008948 <xPortStartScheduler+0x28>
	__asm volatile
 8008930:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008934:	f383 8811 	msr	BASEPRI, r3
 8008938:	f3bf 8f6f 	isb	sy
 800893c:	f3bf 8f4f 	dsb	sy
 8008940:	60fb      	str	r3, [r7, #12]
}
 8008942:	bf00      	nop
 8008944:	bf00      	nop
 8008946:	e7fd      	b.n	8008944 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8008948:	4b3e      	ldr	r3, [pc, #248]	@ (8008a44 <xPortStartScheduler+0x124>)
 800894a:	681b      	ldr	r3, [r3, #0]
 800894c:	4a3f      	ldr	r2, [pc, #252]	@ (8008a4c <xPortStartScheduler+0x12c>)
 800894e:	4293      	cmp	r3, r2
 8008950:	d10b      	bne.n	800896a <xPortStartScheduler+0x4a>
	__asm volatile
 8008952:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008956:	f383 8811 	msr	BASEPRI, r3
 800895a:	f3bf 8f6f 	isb	sy
 800895e:	f3bf 8f4f 	dsb	sy
 8008962:	613b      	str	r3, [r7, #16]
}
 8008964:	bf00      	nop
 8008966:	bf00      	nop
 8008968:	e7fd      	b.n	8008966 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800896a:	4b39      	ldr	r3, [pc, #228]	@ (8008a50 <xPortStartScheduler+0x130>)
 800896c:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800896e:	697b      	ldr	r3, [r7, #20]
 8008970:	781b      	ldrb	r3, [r3, #0]
 8008972:	b2db      	uxtb	r3, r3
 8008974:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8008976:	697b      	ldr	r3, [r7, #20]
 8008978:	22ff      	movs	r2, #255	@ 0xff
 800897a:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800897c:	697b      	ldr	r3, [r7, #20]
 800897e:	781b      	ldrb	r3, [r3, #0]
 8008980:	b2db      	uxtb	r3, r3
 8008982:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8008984:	78fb      	ldrb	r3, [r7, #3]
 8008986:	b2db      	uxtb	r3, r3
 8008988:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 800898c:	b2da      	uxtb	r2, r3
 800898e:	4b31      	ldr	r3, [pc, #196]	@ (8008a54 <xPortStartScheduler+0x134>)
 8008990:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8008992:	4b31      	ldr	r3, [pc, #196]	@ (8008a58 <xPortStartScheduler+0x138>)
 8008994:	2207      	movs	r2, #7
 8008996:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8008998:	e009      	b.n	80089ae <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 800899a:	4b2f      	ldr	r3, [pc, #188]	@ (8008a58 <xPortStartScheduler+0x138>)
 800899c:	681b      	ldr	r3, [r3, #0]
 800899e:	3b01      	subs	r3, #1
 80089a0:	4a2d      	ldr	r2, [pc, #180]	@ (8008a58 <xPortStartScheduler+0x138>)
 80089a2:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80089a4:	78fb      	ldrb	r3, [r7, #3]
 80089a6:	b2db      	uxtb	r3, r3
 80089a8:	005b      	lsls	r3, r3, #1
 80089aa:	b2db      	uxtb	r3, r3
 80089ac:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80089ae:	78fb      	ldrb	r3, [r7, #3]
 80089b0:	b2db      	uxtb	r3, r3
 80089b2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80089b6:	2b80      	cmp	r3, #128	@ 0x80
 80089b8:	d0ef      	beq.n	800899a <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80089ba:	4b27      	ldr	r3, [pc, #156]	@ (8008a58 <xPortStartScheduler+0x138>)
 80089bc:	681b      	ldr	r3, [r3, #0]
 80089be:	f1c3 0307 	rsb	r3, r3, #7
 80089c2:	2b04      	cmp	r3, #4
 80089c4:	d00b      	beq.n	80089de <xPortStartScheduler+0xbe>
	__asm volatile
 80089c6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80089ca:	f383 8811 	msr	BASEPRI, r3
 80089ce:	f3bf 8f6f 	isb	sy
 80089d2:	f3bf 8f4f 	dsb	sy
 80089d6:	60bb      	str	r3, [r7, #8]
}
 80089d8:	bf00      	nop
 80089da:	bf00      	nop
 80089dc:	e7fd      	b.n	80089da <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80089de:	4b1e      	ldr	r3, [pc, #120]	@ (8008a58 <xPortStartScheduler+0x138>)
 80089e0:	681b      	ldr	r3, [r3, #0]
 80089e2:	021b      	lsls	r3, r3, #8
 80089e4:	4a1c      	ldr	r2, [pc, #112]	@ (8008a58 <xPortStartScheduler+0x138>)
 80089e6:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80089e8:	4b1b      	ldr	r3, [pc, #108]	@ (8008a58 <xPortStartScheduler+0x138>)
 80089ea:	681b      	ldr	r3, [r3, #0]
 80089ec:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 80089f0:	4a19      	ldr	r2, [pc, #100]	@ (8008a58 <xPortStartScheduler+0x138>)
 80089f2:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80089f4:	687b      	ldr	r3, [r7, #4]
 80089f6:	b2da      	uxtb	r2, r3
 80089f8:	697b      	ldr	r3, [r7, #20]
 80089fa:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80089fc:	4b17      	ldr	r3, [pc, #92]	@ (8008a5c <xPortStartScheduler+0x13c>)
 80089fe:	681b      	ldr	r3, [r3, #0]
 8008a00:	4a16      	ldr	r2, [pc, #88]	@ (8008a5c <xPortStartScheduler+0x13c>)
 8008a02:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8008a06:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8008a08:	4b14      	ldr	r3, [pc, #80]	@ (8008a5c <xPortStartScheduler+0x13c>)
 8008a0a:	681b      	ldr	r3, [r3, #0]
 8008a0c:	4a13      	ldr	r2, [pc, #76]	@ (8008a5c <xPortStartScheduler+0x13c>)
 8008a0e:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 8008a12:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8008a14:	f000 f8da 	bl	8008bcc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8008a18:	4b11      	ldr	r3, [pc, #68]	@ (8008a60 <xPortStartScheduler+0x140>)
 8008a1a:	2200      	movs	r2, #0
 8008a1c:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8008a1e:	f000 f8f9 	bl	8008c14 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8008a22:	4b10      	ldr	r3, [pc, #64]	@ (8008a64 <xPortStartScheduler+0x144>)
 8008a24:	681b      	ldr	r3, [r3, #0]
 8008a26:	4a0f      	ldr	r2, [pc, #60]	@ (8008a64 <xPortStartScheduler+0x144>)
 8008a28:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 8008a2c:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8008a2e:	f7ff ff63 	bl	80088f8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8008a32:	f7ff f82d 	bl	8007a90 <vTaskSwitchContext>
	prvTaskExitError();
 8008a36:	f7ff ff19 	bl	800886c <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8008a3a:	2300      	movs	r3, #0
}
 8008a3c:	4618      	mov	r0, r3
 8008a3e:	3718      	adds	r7, #24
 8008a40:	46bd      	mov	sp, r7
 8008a42:	bd80      	pop	{r7, pc}
 8008a44:	e000ed00 	.word	0xe000ed00
 8008a48:	410fc271 	.word	0x410fc271
 8008a4c:	410fc270 	.word	0x410fc270
 8008a50:	e000e400 	.word	0xe000e400
 8008a54:	200012fc 	.word	0x200012fc
 8008a58:	20001300 	.word	0x20001300
 8008a5c:	e000ed20 	.word	0xe000ed20
 8008a60:	20000054 	.word	0x20000054
 8008a64:	e000ef34 	.word	0xe000ef34

08008a68 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8008a68:	b480      	push	{r7}
 8008a6a:	b083      	sub	sp, #12
 8008a6c:	af00      	add	r7, sp, #0
	__asm volatile
 8008a6e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008a72:	f383 8811 	msr	BASEPRI, r3
 8008a76:	f3bf 8f6f 	isb	sy
 8008a7a:	f3bf 8f4f 	dsb	sy
 8008a7e:	607b      	str	r3, [r7, #4]
}
 8008a80:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8008a82:	4b10      	ldr	r3, [pc, #64]	@ (8008ac4 <vPortEnterCritical+0x5c>)
 8008a84:	681b      	ldr	r3, [r3, #0]
 8008a86:	3301      	adds	r3, #1
 8008a88:	4a0e      	ldr	r2, [pc, #56]	@ (8008ac4 <vPortEnterCritical+0x5c>)
 8008a8a:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8008a8c:	4b0d      	ldr	r3, [pc, #52]	@ (8008ac4 <vPortEnterCritical+0x5c>)
 8008a8e:	681b      	ldr	r3, [r3, #0]
 8008a90:	2b01      	cmp	r3, #1
 8008a92:	d110      	bne.n	8008ab6 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8008a94:	4b0c      	ldr	r3, [pc, #48]	@ (8008ac8 <vPortEnterCritical+0x60>)
 8008a96:	681b      	ldr	r3, [r3, #0]
 8008a98:	b2db      	uxtb	r3, r3
 8008a9a:	2b00      	cmp	r3, #0
 8008a9c:	d00b      	beq.n	8008ab6 <vPortEnterCritical+0x4e>
	__asm volatile
 8008a9e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008aa2:	f383 8811 	msr	BASEPRI, r3
 8008aa6:	f3bf 8f6f 	isb	sy
 8008aaa:	f3bf 8f4f 	dsb	sy
 8008aae:	603b      	str	r3, [r7, #0]
}
 8008ab0:	bf00      	nop
 8008ab2:	bf00      	nop
 8008ab4:	e7fd      	b.n	8008ab2 <vPortEnterCritical+0x4a>
	}
}
 8008ab6:	bf00      	nop
 8008ab8:	370c      	adds	r7, #12
 8008aba:	46bd      	mov	sp, r7
 8008abc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ac0:	4770      	bx	lr
 8008ac2:	bf00      	nop
 8008ac4:	20000054 	.word	0x20000054
 8008ac8:	e000ed04 	.word	0xe000ed04

08008acc <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8008acc:	b480      	push	{r7}
 8008ace:	b083      	sub	sp, #12
 8008ad0:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8008ad2:	4b12      	ldr	r3, [pc, #72]	@ (8008b1c <vPortExitCritical+0x50>)
 8008ad4:	681b      	ldr	r3, [r3, #0]
 8008ad6:	2b00      	cmp	r3, #0
 8008ad8:	d10b      	bne.n	8008af2 <vPortExitCritical+0x26>
	__asm volatile
 8008ada:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008ade:	f383 8811 	msr	BASEPRI, r3
 8008ae2:	f3bf 8f6f 	isb	sy
 8008ae6:	f3bf 8f4f 	dsb	sy
 8008aea:	607b      	str	r3, [r7, #4]
}
 8008aec:	bf00      	nop
 8008aee:	bf00      	nop
 8008af0:	e7fd      	b.n	8008aee <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8008af2:	4b0a      	ldr	r3, [pc, #40]	@ (8008b1c <vPortExitCritical+0x50>)
 8008af4:	681b      	ldr	r3, [r3, #0]
 8008af6:	3b01      	subs	r3, #1
 8008af8:	4a08      	ldr	r2, [pc, #32]	@ (8008b1c <vPortExitCritical+0x50>)
 8008afa:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8008afc:	4b07      	ldr	r3, [pc, #28]	@ (8008b1c <vPortExitCritical+0x50>)
 8008afe:	681b      	ldr	r3, [r3, #0]
 8008b00:	2b00      	cmp	r3, #0
 8008b02:	d105      	bne.n	8008b10 <vPortExitCritical+0x44>
 8008b04:	2300      	movs	r3, #0
 8008b06:	603b      	str	r3, [r7, #0]
	__asm volatile
 8008b08:	683b      	ldr	r3, [r7, #0]
 8008b0a:	f383 8811 	msr	BASEPRI, r3
}
 8008b0e:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8008b10:	bf00      	nop
 8008b12:	370c      	adds	r7, #12
 8008b14:	46bd      	mov	sp, r7
 8008b16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b1a:	4770      	bx	lr
 8008b1c:	20000054 	.word	0x20000054

08008b20 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8008b20:	f3ef 8009 	mrs	r0, PSP
 8008b24:	f3bf 8f6f 	isb	sy
 8008b28:	4b15      	ldr	r3, [pc, #84]	@ (8008b80 <pxCurrentTCBConst>)
 8008b2a:	681a      	ldr	r2, [r3, #0]
 8008b2c:	f01e 0f10 	tst.w	lr, #16
 8008b30:	bf08      	it	eq
 8008b32:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8008b36:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008b3a:	6010      	str	r0, [r2, #0]
 8008b3c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8008b40:	f04f 0050 	mov.w	r0, #80	@ 0x50
 8008b44:	f380 8811 	msr	BASEPRI, r0
 8008b48:	f3bf 8f4f 	dsb	sy
 8008b4c:	f3bf 8f6f 	isb	sy
 8008b50:	f7fe ff9e 	bl	8007a90 <vTaskSwitchContext>
 8008b54:	f04f 0000 	mov.w	r0, #0
 8008b58:	f380 8811 	msr	BASEPRI, r0
 8008b5c:	bc09      	pop	{r0, r3}
 8008b5e:	6819      	ldr	r1, [r3, #0]
 8008b60:	6808      	ldr	r0, [r1, #0]
 8008b62:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008b66:	f01e 0f10 	tst.w	lr, #16
 8008b6a:	bf08      	it	eq
 8008b6c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8008b70:	f380 8809 	msr	PSP, r0
 8008b74:	f3bf 8f6f 	isb	sy
 8008b78:	4770      	bx	lr
 8008b7a:	bf00      	nop
 8008b7c:	f3af 8000 	nop.w

08008b80 <pxCurrentTCBConst>:
 8008b80:	20000cd0 	.word	0x20000cd0
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8008b84:	bf00      	nop
 8008b86:	bf00      	nop

08008b88 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8008b88:	b580      	push	{r7, lr}
 8008b8a:	b082      	sub	sp, #8
 8008b8c:	af00      	add	r7, sp, #0
	__asm volatile
 8008b8e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008b92:	f383 8811 	msr	BASEPRI, r3
 8008b96:	f3bf 8f6f 	isb	sy
 8008b9a:	f3bf 8f4f 	dsb	sy
 8008b9e:	607b      	str	r3, [r7, #4]
}
 8008ba0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8008ba2:	f7fe febb 	bl	800791c <xTaskIncrementTick>
 8008ba6:	4603      	mov	r3, r0
 8008ba8:	2b00      	cmp	r3, #0
 8008baa:	d003      	beq.n	8008bb4 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8008bac:	4b06      	ldr	r3, [pc, #24]	@ (8008bc8 <xPortSysTickHandler+0x40>)
 8008bae:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008bb2:	601a      	str	r2, [r3, #0]
 8008bb4:	2300      	movs	r3, #0
 8008bb6:	603b      	str	r3, [r7, #0]
	__asm volatile
 8008bb8:	683b      	ldr	r3, [r7, #0]
 8008bba:	f383 8811 	msr	BASEPRI, r3
}
 8008bbe:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8008bc0:	bf00      	nop
 8008bc2:	3708      	adds	r7, #8
 8008bc4:	46bd      	mov	sp, r7
 8008bc6:	bd80      	pop	{r7, pc}
 8008bc8:	e000ed04 	.word	0xe000ed04

08008bcc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8008bcc:	b480      	push	{r7}
 8008bce:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8008bd0:	4b0b      	ldr	r3, [pc, #44]	@ (8008c00 <vPortSetupTimerInterrupt+0x34>)
 8008bd2:	2200      	movs	r2, #0
 8008bd4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8008bd6:	4b0b      	ldr	r3, [pc, #44]	@ (8008c04 <vPortSetupTimerInterrupt+0x38>)
 8008bd8:	2200      	movs	r2, #0
 8008bda:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8008bdc:	4b0a      	ldr	r3, [pc, #40]	@ (8008c08 <vPortSetupTimerInterrupt+0x3c>)
 8008bde:	681b      	ldr	r3, [r3, #0]
 8008be0:	4a0a      	ldr	r2, [pc, #40]	@ (8008c0c <vPortSetupTimerInterrupt+0x40>)
 8008be2:	fba2 2303 	umull	r2, r3, r2, r3
 8008be6:	099b      	lsrs	r3, r3, #6
 8008be8:	4a09      	ldr	r2, [pc, #36]	@ (8008c10 <vPortSetupTimerInterrupt+0x44>)
 8008bea:	3b01      	subs	r3, #1
 8008bec:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8008bee:	4b04      	ldr	r3, [pc, #16]	@ (8008c00 <vPortSetupTimerInterrupt+0x34>)
 8008bf0:	2207      	movs	r2, #7
 8008bf2:	601a      	str	r2, [r3, #0]
}
 8008bf4:	bf00      	nop
 8008bf6:	46bd      	mov	sp, r7
 8008bf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bfc:	4770      	bx	lr
 8008bfe:	bf00      	nop
 8008c00:	e000e010 	.word	0xe000e010
 8008c04:	e000e018 	.word	0xe000e018
 8008c08:	20000048 	.word	0x20000048
 8008c0c:	10624dd3 	.word	0x10624dd3
 8008c10:	e000e014 	.word	0xe000e014

08008c14 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8008c14:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 8008c24 <vPortEnableVFP+0x10>
 8008c18:	6801      	ldr	r1, [r0, #0]
 8008c1a:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8008c1e:	6001      	str	r1, [r0, #0]
 8008c20:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8008c22:	bf00      	nop
 8008c24:	e000ed88 	.word	0xe000ed88

08008c28 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8008c28:	b480      	push	{r7}
 8008c2a:	b085      	sub	sp, #20
 8008c2c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8008c2e:	f3ef 8305 	mrs	r3, IPSR
 8008c32:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8008c34:	68fb      	ldr	r3, [r7, #12]
 8008c36:	2b0f      	cmp	r3, #15
 8008c38:	d915      	bls.n	8008c66 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8008c3a:	4a18      	ldr	r2, [pc, #96]	@ (8008c9c <vPortValidateInterruptPriority+0x74>)
 8008c3c:	68fb      	ldr	r3, [r7, #12]
 8008c3e:	4413      	add	r3, r2
 8008c40:	781b      	ldrb	r3, [r3, #0]
 8008c42:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8008c44:	4b16      	ldr	r3, [pc, #88]	@ (8008ca0 <vPortValidateInterruptPriority+0x78>)
 8008c46:	781b      	ldrb	r3, [r3, #0]
 8008c48:	7afa      	ldrb	r2, [r7, #11]
 8008c4a:	429a      	cmp	r2, r3
 8008c4c:	d20b      	bcs.n	8008c66 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 8008c4e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008c52:	f383 8811 	msr	BASEPRI, r3
 8008c56:	f3bf 8f6f 	isb	sy
 8008c5a:	f3bf 8f4f 	dsb	sy
 8008c5e:	607b      	str	r3, [r7, #4]
}
 8008c60:	bf00      	nop
 8008c62:	bf00      	nop
 8008c64:	e7fd      	b.n	8008c62 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8008c66:	4b0f      	ldr	r3, [pc, #60]	@ (8008ca4 <vPortValidateInterruptPriority+0x7c>)
 8008c68:	681b      	ldr	r3, [r3, #0]
 8008c6a:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8008c6e:	4b0e      	ldr	r3, [pc, #56]	@ (8008ca8 <vPortValidateInterruptPriority+0x80>)
 8008c70:	681b      	ldr	r3, [r3, #0]
 8008c72:	429a      	cmp	r2, r3
 8008c74:	d90b      	bls.n	8008c8e <vPortValidateInterruptPriority+0x66>
	__asm volatile
 8008c76:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008c7a:	f383 8811 	msr	BASEPRI, r3
 8008c7e:	f3bf 8f6f 	isb	sy
 8008c82:	f3bf 8f4f 	dsb	sy
 8008c86:	603b      	str	r3, [r7, #0]
}
 8008c88:	bf00      	nop
 8008c8a:	bf00      	nop
 8008c8c:	e7fd      	b.n	8008c8a <vPortValidateInterruptPriority+0x62>
	}
 8008c8e:	bf00      	nop
 8008c90:	3714      	adds	r7, #20
 8008c92:	46bd      	mov	sp, r7
 8008c94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c98:	4770      	bx	lr
 8008c9a:	bf00      	nop
 8008c9c:	e000e3f0 	.word	0xe000e3f0
 8008ca0:	200012fc 	.word	0x200012fc
 8008ca4:	e000ed0c 	.word	0xe000ed0c
 8008ca8:	20001300 	.word	0x20001300

08008cac <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8008cac:	b580      	push	{r7, lr}
 8008cae:	b08a      	sub	sp, #40	@ 0x28
 8008cb0:	af00      	add	r7, sp, #0
 8008cb2:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8008cb4:	2300      	movs	r3, #0
 8008cb6:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8008cb8:	f7fe fd74 	bl	80077a4 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8008cbc:	4b5c      	ldr	r3, [pc, #368]	@ (8008e30 <pvPortMalloc+0x184>)
 8008cbe:	681b      	ldr	r3, [r3, #0]
 8008cc0:	2b00      	cmp	r3, #0
 8008cc2:	d101      	bne.n	8008cc8 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8008cc4:	f000 f924 	bl	8008f10 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8008cc8:	4b5a      	ldr	r3, [pc, #360]	@ (8008e34 <pvPortMalloc+0x188>)
 8008cca:	681a      	ldr	r2, [r3, #0]
 8008ccc:	687b      	ldr	r3, [r7, #4]
 8008cce:	4013      	ands	r3, r2
 8008cd0:	2b00      	cmp	r3, #0
 8008cd2:	f040 8095 	bne.w	8008e00 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8008cd6:	687b      	ldr	r3, [r7, #4]
 8008cd8:	2b00      	cmp	r3, #0
 8008cda:	d01e      	beq.n	8008d1a <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 8008cdc:	2208      	movs	r2, #8
 8008cde:	687b      	ldr	r3, [r7, #4]
 8008ce0:	4413      	add	r3, r2
 8008ce2:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8008ce4:	687b      	ldr	r3, [r7, #4]
 8008ce6:	f003 0307 	and.w	r3, r3, #7
 8008cea:	2b00      	cmp	r3, #0
 8008cec:	d015      	beq.n	8008d1a <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8008cee:	687b      	ldr	r3, [r7, #4]
 8008cf0:	f023 0307 	bic.w	r3, r3, #7
 8008cf4:	3308      	adds	r3, #8
 8008cf6:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8008cf8:	687b      	ldr	r3, [r7, #4]
 8008cfa:	f003 0307 	and.w	r3, r3, #7
 8008cfe:	2b00      	cmp	r3, #0
 8008d00:	d00b      	beq.n	8008d1a <pvPortMalloc+0x6e>
	__asm volatile
 8008d02:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008d06:	f383 8811 	msr	BASEPRI, r3
 8008d0a:	f3bf 8f6f 	isb	sy
 8008d0e:	f3bf 8f4f 	dsb	sy
 8008d12:	617b      	str	r3, [r7, #20]
}
 8008d14:	bf00      	nop
 8008d16:	bf00      	nop
 8008d18:	e7fd      	b.n	8008d16 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8008d1a:	687b      	ldr	r3, [r7, #4]
 8008d1c:	2b00      	cmp	r3, #0
 8008d1e:	d06f      	beq.n	8008e00 <pvPortMalloc+0x154>
 8008d20:	4b45      	ldr	r3, [pc, #276]	@ (8008e38 <pvPortMalloc+0x18c>)
 8008d22:	681b      	ldr	r3, [r3, #0]
 8008d24:	687a      	ldr	r2, [r7, #4]
 8008d26:	429a      	cmp	r2, r3
 8008d28:	d86a      	bhi.n	8008e00 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8008d2a:	4b44      	ldr	r3, [pc, #272]	@ (8008e3c <pvPortMalloc+0x190>)
 8008d2c:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8008d2e:	4b43      	ldr	r3, [pc, #268]	@ (8008e3c <pvPortMalloc+0x190>)
 8008d30:	681b      	ldr	r3, [r3, #0]
 8008d32:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8008d34:	e004      	b.n	8008d40 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 8008d36:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008d38:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8008d3a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008d3c:	681b      	ldr	r3, [r3, #0]
 8008d3e:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8008d40:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008d42:	685b      	ldr	r3, [r3, #4]
 8008d44:	687a      	ldr	r2, [r7, #4]
 8008d46:	429a      	cmp	r2, r3
 8008d48:	d903      	bls.n	8008d52 <pvPortMalloc+0xa6>
 8008d4a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008d4c:	681b      	ldr	r3, [r3, #0]
 8008d4e:	2b00      	cmp	r3, #0
 8008d50:	d1f1      	bne.n	8008d36 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8008d52:	4b37      	ldr	r3, [pc, #220]	@ (8008e30 <pvPortMalloc+0x184>)
 8008d54:	681b      	ldr	r3, [r3, #0]
 8008d56:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008d58:	429a      	cmp	r2, r3
 8008d5a:	d051      	beq.n	8008e00 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8008d5c:	6a3b      	ldr	r3, [r7, #32]
 8008d5e:	681b      	ldr	r3, [r3, #0]
 8008d60:	2208      	movs	r2, #8
 8008d62:	4413      	add	r3, r2
 8008d64:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8008d66:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008d68:	681a      	ldr	r2, [r3, #0]
 8008d6a:	6a3b      	ldr	r3, [r7, #32]
 8008d6c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8008d6e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008d70:	685a      	ldr	r2, [r3, #4]
 8008d72:	687b      	ldr	r3, [r7, #4]
 8008d74:	1ad2      	subs	r2, r2, r3
 8008d76:	2308      	movs	r3, #8
 8008d78:	005b      	lsls	r3, r3, #1
 8008d7a:	429a      	cmp	r2, r3
 8008d7c:	d920      	bls.n	8008dc0 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8008d7e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008d80:	687b      	ldr	r3, [r7, #4]
 8008d82:	4413      	add	r3, r2
 8008d84:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8008d86:	69bb      	ldr	r3, [r7, #24]
 8008d88:	f003 0307 	and.w	r3, r3, #7
 8008d8c:	2b00      	cmp	r3, #0
 8008d8e:	d00b      	beq.n	8008da8 <pvPortMalloc+0xfc>
	__asm volatile
 8008d90:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008d94:	f383 8811 	msr	BASEPRI, r3
 8008d98:	f3bf 8f6f 	isb	sy
 8008d9c:	f3bf 8f4f 	dsb	sy
 8008da0:	613b      	str	r3, [r7, #16]
}
 8008da2:	bf00      	nop
 8008da4:	bf00      	nop
 8008da6:	e7fd      	b.n	8008da4 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8008da8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008daa:	685a      	ldr	r2, [r3, #4]
 8008dac:	687b      	ldr	r3, [r7, #4]
 8008dae:	1ad2      	subs	r2, r2, r3
 8008db0:	69bb      	ldr	r3, [r7, #24]
 8008db2:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8008db4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008db6:	687a      	ldr	r2, [r7, #4]
 8008db8:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8008dba:	69b8      	ldr	r0, [r7, #24]
 8008dbc:	f000 f90a 	bl	8008fd4 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8008dc0:	4b1d      	ldr	r3, [pc, #116]	@ (8008e38 <pvPortMalloc+0x18c>)
 8008dc2:	681a      	ldr	r2, [r3, #0]
 8008dc4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008dc6:	685b      	ldr	r3, [r3, #4]
 8008dc8:	1ad3      	subs	r3, r2, r3
 8008dca:	4a1b      	ldr	r2, [pc, #108]	@ (8008e38 <pvPortMalloc+0x18c>)
 8008dcc:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8008dce:	4b1a      	ldr	r3, [pc, #104]	@ (8008e38 <pvPortMalloc+0x18c>)
 8008dd0:	681a      	ldr	r2, [r3, #0]
 8008dd2:	4b1b      	ldr	r3, [pc, #108]	@ (8008e40 <pvPortMalloc+0x194>)
 8008dd4:	681b      	ldr	r3, [r3, #0]
 8008dd6:	429a      	cmp	r2, r3
 8008dd8:	d203      	bcs.n	8008de2 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8008dda:	4b17      	ldr	r3, [pc, #92]	@ (8008e38 <pvPortMalloc+0x18c>)
 8008ddc:	681b      	ldr	r3, [r3, #0]
 8008dde:	4a18      	ldr	r2, [pc, #96]	@ (8008e40 <pvPortMalloc+0x194>)
 8008de0:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8008de2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008de4:	685a      	ldr	r2, [r3, #4]
 8008de6:	4b13      	ldr	r3, [pc, #76]	@ (8008e34 <pvPortMalloc+0x188>)
 8008de8:	681b      	ldr	r3, [r3, #0]
 8008dea:	431a      	orrs	r2, r3
 8008dec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008dee:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8008df0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008df2:	2200      	movs	r2, #0
 8008df4:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8008df6:	4b13      	ldr	r3, [pc, #76]	@ (8008e44 <pvPortMalloc+0x198>)
 8008df8:	681b      	ldr	r3, [r3, #0]
 8008dfa:	3301      	adds	r3, #1
 8008dfc:	4a11      	ldr	r2, [pc, #68]	@ (8008e44 <pvPortMalloc+0x198>)
 8008dfe:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8008e00:	f7fe fcde 	bl	80077c0 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8008e04:	69fb      	ldr	r3, [r7, #28]
 8008e06:	f003 0307 	and.w	r3, r3, #7
 8008e0a:	2b00      	cmp	r3, #0
 8008e0c:	d00b      	beq.n	8008e26 <pvPortMalloc+0x17a>
	__asm volatile
 8008e0e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008e12:	f383 8811 	msr	BASEPRI, r3
 8008e16:	f3bf 8f6f 	isb	sy
 8008e1a:	f3bf 8f4f 	dsb	sy
 8008e1e:	60fb      	str	r3, [r7, #12]
}
 8008e20:	bf00      	nop
 8008e22:	bf00      	nop
 8008e24:	e7fd      	b.n	8008e22 <pvPortMalloc+0x176>
	return pvReturn;
 8008e26:	69fb      	ldr	r3, [r7, #28]
}
 8008e28:	4618      	mov	r0, r3
 8008e2a:	3728      	adds	r7, #40	@ 0x28
 8008e2c:	46bd      	mov	sp, r7
 8008e2e:	bd80      	pop	{r7, pc}
 8008e30:	20004f0c 	.word	0x20004f0c
 8008e34:	20004f20 	.word	0x20004f20
 8008e38:	20004f10 	.word	0x20004f10
 8008e3c:	20004f04 	.word	0x20004f04
 8008e40:	20004f14 	.word	0x20004f14
 8008e44:	20004f18 	.word	0x20004f18

08008e48 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8008e48:	b580      	push	{r7, lr}
 8008e4a:	b086      	sub	sp, #24
 8008e4c:	af00      	add	r7, sp, #0
 8008e4e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8008e50:	687b      	ldr	r3, [r7, #4]
 8008e52:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8008e54:	687b      	ldr	r3, [r7, #4]
 8008e56:	2b00      	cmp	r3, #0
 8008e58:	d04f      	beq.n	8008efa <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8008e5a:	2308      	movs	r3, #8
 8008e5c:	425b      	negs	r3, r3
 8008e5e:	697a      	ldr	r2, [r7, #20]
 8008e60:	4413      	add	r3, r2
 8008e62:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8008e64:	697b      	ldr	r3, [r7, #20]
 8008e66:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8008e68:	693b      	ldr	r3, [r7, #16]
 8008e6a:	685a      	ldr	r2, [r3, #4]
 8008e6c:	4b25      	ldr	r3, [pc, #148]	@ (8008f04 <vPortFree+0xbc>)
 8008e6e:	681b      	ldr	r3, [r3, #0]
 8008e70:	4013      	ands	r3, r2
 8008e72:	2b00      	cmp	r3, #0
 8008e74:	d10b      	bne.n	8008e8e <vPortFree+0x46>
	__asm volatile
 8008e76:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008e7a:	f383 8811 	msr	BASEPRI, r3
 8008e7e:	f3bf 8f6f 	isb	sy
 8008e82:	f3bf 8f4f 	dsb	sy
 8008e86:	60fb      	str	r3, [r7, #12]
}
 8008e88:	bf00      	nop
 8008e8a:	bf00      	nop
 8008e8c:	e7fd      	b.n	8008e8a <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8008e8e:	693b      	ldr	r3, [r7, #16]
 8008e90:	681b      	ldr	r3, [r3, #0]
 8008e92:	2b00      	cmp	r3, #0
 8008e94:	d00b      	beq.n	8008eae <vPortFree+0x66>
	__asm volatile
 8008e96:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008e9a:	f383 8811 	msr	BASEPRI, r3
 8008e9e:	f3bf 8f6f 	isb	sy
 8008ea2:	f3bf 8f4f 	dsb	sy
 8008ea6:	60bb      	str	r3, [r7, #8]
}
 8008ea8:	bf00      	nop
 8008eaa:	bf00      	nop
 8008eac:	e7fd      	b.n	8008eaa <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8008eae:	693b      	ldr	r3, [r7, #16]
 8008eb0:	685a      	ldr	r2, [r3, #4]
 8008eb2:	4b14      	ldr	r3, [pc, #80]	@ (8008f04 <vPortFree+0xbc>)
 8008eb4:	681b      	ldr	r3, [r3, #0]
 8008eb6:	4013      	ands	r3, r2
 8008eb8:	2b00      	cmp	r3, #0
 8008eba:	d01e      	beq.n	8008efa <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8008ebc:	693b      	ldr	r3, [r7, #16]
 8008ebe:	681b      	ldr	r3, [r3, #0]
 8008ec0:	2b00      	cmp	r3, #0
 8008ec2:	d11a      	bne.n	8008efa <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8008ec4:	693b      	ldr	r3, [r7, #16]
 8008ec6:	685a      	ldr	r2, [r3, #4]
 8008ec8:	4b0e      	ldr	r3, [pc, #56]	@ (8008f04 <vPortFree+0xbc>)
 8008eca:	681b      	ldr	r3, [r3, #0]
 8008ecc:	43db      	mvns	r3, r3
 8008ece:	401a      	ands	r2, r3
 8008ed0:	693b      	ldr	r3, [r7, #16]
 8008ed2:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8008ed4:	f7fe fc66 	bl	80077a4 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8008ed8:	693b      	ldr	r3, [r7, #16]
 8008eda:	685a      	ldr	r2, [r3, #4]
 8008edc:	4b0a      	ldr	r3, [pc, #40]	@ (8008f08 <vPortFree+0xc0>)
 8008ede:	681b      	ldr	r3, [r3, #0]
 8008ee0:	4413      	add	r3, r2
 8008ee2:	4a09      	ldr	r2, [pc, #36]	@ (8008f08 <vPortFree+0xc0>)
 8008ee4:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8008ee6:	6938      	ldr	r0, [r7, #16]
 8008ee8:	f000 f874 	bl	8008fd4 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8008eec:	4b07      	ldr	r3, [pc, #28]	@ (8008f0c <vPortFree+0xc4>)
 8008eee:	681b      	ldr	r3, [r3, #0]
 8008ef0:	3301      	adds	r3, #1
 8008ef2:	4a06      	ldr	r2, [pc, #24]	@ (8008f0c <vPortFree+0xc4>)
 8008ef4:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8008ef6:	f7fe fc63 	bl	80077c0 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8008efa:	bf00      	nop
 8008efc:	3718      	adds	r7, #24
 8008efe:	46bd      	mov	sp, r7
 8008f00:	bd80      	pop	{r7, pc}
 8008f02:	bf00      	nop
 8008f04:	20004f20 	.word	0x20004f20
 8008f08:	20004f10 	.word	0x20004f10
 8008f0c:	20004f1c 	.word	0x20004f1c

08008f10 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8008f10:	b480      	push	{r7}
 8008f12:	b085      	sub	sp, #20
 8008f14:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8008f16:	f44f 5370 	mov.w	r3, #15360	@ 0x3c00
 8008f1a:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8008f1c:	4b27      	ldr	r3, [pc, #156]	@ (8008fbc <prvHeapInit+0xac>)
 8008f1e:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8008f20:	68fb      	ldr	r3, [r7, #12]
 8008f22:	f003 0307 	and.w	r3, r3, #7
 8008f26:	2b00      	cmp	r3, #0
 8008f28:	d00c      	beq.n	8008f44 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8008f2a:	68fb      	ldr	r3, [r7, #12]
 8008f2c:	3307      	adds	r3, #7
 8008f2e:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8008f30:	68fb      	ldr	r3, [r7, #12]
 8008f32:	f023 0307 	bic.w	r3, r3, #7
 8008f36:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8008f38:	68ba      	ldr	r2, [r7, #8]
 8008f3a:	68fb      	ldr	r3, [r7, #12]
 8008f3c:	1ad3      	subs	r3, r2, r3
 8008f3e:	4a1f      	ldr	r2, [pc, #124]	@ (8008fbc <prvHeapInit+0xac>)
 8008f40:	4413      	add	r3, r2
 8008f42:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8008f44:	68fb      	ldr	r3, [r7, #12]
 8008f46:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8008f48:	4a1d      	ldr	r2, [pc, #116]	@ (8008fc0 <prvHeapInit+0xb0>)
 8008f4a:	687b      	ldr	r3, [r7, #4]
 8008f4c:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8008f4e:	4b1c      	ldr	r3, [pc, #112]	@ (8008fc0 <prvHeapInit+0xb0>)
 8008f50:	2200      	movs	r2, #0
 8008f52:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8008f54:	687b      	ldr	r3, [r7, #4]
 8008f56:	68ba      	ldr	r2, [r7, #8]
 8008f58:	4413      	add	r3, r2
 8008f5a:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8008f5c:	2208      	movs	r2, #8
 8008f5e:	68fb      	ldr	r3, [r7, #12]
 8008f60:	1a9b      	subs	r3, r3, r2
 8008f62:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8008f64:	68fb      	ldr	r3, [r7, #12]
 8008f66:	f023 0307 	bic.w	r3, r3, #7
 8008f6a:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8008f6c:	68fb      	ldr	r3, [r7, #12]
 8008f6e:	4a15      	ldr	r2, [pc, #84]	@ (8008fc4 <prvHeapInit+0xb4>)
 8008f70:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8008f72:	4b14      	ldr	r3, [pc, #80]	@ (8008fc4 <prvHeapInit+0xb4>)
 8008f74:	681b      	ldr	r3, [r3, #0]
 8008f76:	2200      	movs	r2, #0
 8008f78:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8008f7a:	4b12      	ldr	r3, [pc, #72]	@ (8008fc4 <prvHeapInit+0xb4>)
 8008f7c:	681b      	ldr	r3, [r3, #0]
 8008f7e:	2200      	movs	r2, #0
 8008f80:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8008f82:	687b      	ldr	r3, [r7, #4]
 8008f84:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8008f86:	683b      	ldr	r3, [r7, #0]
 8008f88:	68fa      	ldr	r2, [r7, #12]
 8008f8a:	1ad2      	subs	r2, r2, r3
 8008f8c:	683b      	ldr	r3, [r7, #0]
 8008f8e:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8008f90:	4b0c      	ldr	r3, [pc, #48]	@ (8008fc4 <prvHeapInit+0xb4>)
 8008f92:	681a      	ldr	r2, [r3, #0]
 8008f94:	683b      	ldr	r3, [r7, #0]
 8008f96:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8008f98:	683b      	ldr	r3, [r7, #0]
 8008f9a:	685b      	ldr	r3, [r3, #4]
 8008f9c:	4a0a      	ldr	r2, [pc, #40]	@ (8008fc8 <prvHeapInit+0xb8>)
 8008f9e:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8008fa0:	683b      	ldr	r3, [r7, #0]
 8008fa2:	685b      	ldr	r3, [r3, #4]
 8008fa4:	4a09      	ldr	r2, [pc, #36]	@ (8008fcc <prvHeapInit+0xbc>)
 8008fa6:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8008fa8:	4b09      	ldr	r3, [pc, #36]	@ (8008fd0 <prvHeapInit+0xc0>)
 8008faa:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8008fae:	601a      	str	r2, [r3, #0]
}
 8008fb0:	bf00      	nop
 8008fb2:	3714      	adds	r7, #20
 8008fb4:	46bd      	mov	sp, r7
 8008fb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fba:	4770      	bx	lr
 8008fbc:	20001304 	.word	0x20001304
 8008fc0:	20004f04 	.word	0x20004f04
 8008fc4:	20004f0c 	.word	0x20004f0c
 8008fc8:	20004f14 	.word	0x20004f14
 8008fcc:	20004f10 	.word	0x20004f10
 8008fd0:	20004f20 	.word	0x20004f20

08008fd4 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8008fd4:	b480      	push	{r7}
 8008fd6:	b085      	sub	sp, #20
 8008fd8:	af00      	add	r7, sp, #0
 8008fda:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8008fdc:	4b28      	ldr	r3, [pc, #160]	@ (8009080 <prvInsertBlockIntoFreeList+0xac>)
 8008fde:	60fb      	str	r3, [r7, #12]
 8008fe0:	e002      	b.n	8008fe8 <prvInsertBlockIntoFreeList+0x14>
 8008fe2:	68fb      	ldr	r3, [r7, #12]
 8008fe4:	681b      	ldr	r3, [r3, #0]
 8008fe6:	60fb      	str	r3, [r7, #12]
 8008fe8:	68fb      	ldr	r3, [r7, #12]
 8008fea:	681b      	ldr	r3, [r3, #0]
 8008fec:	687a      	ldr	r2, [r7, #4]
 8008fee:	429a      	cmp	r2, r3
 8008ff0:	d8f7      	bhi.n	8008fe2 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8008ff2:	68fb      	ldr	r3, [r7, #12]
 8008ff4:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8008ff6:	68fb      	ldr	r3, [r7, #12]
 8008ff8:	685b      	ldr	r3, [r3, #4]
 8008ffa:	68ba      	ldr	r2, [r7, #8]
 8008ffc:	4413      	add	r3, r2
 8008ffe:	687a      	ldr	r2, [r7, #4]
 8009000:	429a      	cmp	r2, r3
 8009002:	d108      	bne.n	8009016 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8009004:	68fb      	ldr	r3, [r7, #12]
 8009006:	685a      	ldr	r2, [r3, #4]
 8009008:	687b      	ldr	r3, [r7, #4]
 800900a:	685b      	ldr	r3, [r3, #4]
 800900c:	441a      	add	r2, r3
 800900e:	68fb      	ldr	r3, [r7, #12]
 8009010:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8009012:	68fb      	ldr	r3, [r7, #12]
 8009014:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8009016:	687b      	ldr	r3, [r7, #4]
 8009018:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800901a:	687b      	ldr	r3, [r7, #4]
 800901c:	685b      	ldr	r3, [r3, #4]
 800901e:	68ba      	ldr	r2, [r7, #8]
 8009020:	441a      	add	r2, r3
 8009022:	68fb      	ldr	r3, [r7, #12]
 8009024:	681b      	ldr	r3, [r3, #0]
 8009026:	429a      	cmp	r2, r3
 8009028:	d118      	bne.n	800905c <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800902a:	68fb      	ldr	r3, [r7, #12]
 800902c:	681a      	ldr	r2, [r3, #0]
 800902e:	4b15      	ldr	r3, [pc, #84]	@ (8009084 <prvInsertBlockIntoFreeList+0xb0>)
 8009030:	681b      	ldr	r3, [r3, #0]
 8009032:	429a      	cmp	r2, r3
 8009034:	d00d      	beq.n	8009052 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8009036:	687b      	ldr	r3, [r7, #4]
 8009038:	685a      	ldr	r2, [r3, #4]
 800903a:	68fb      	ldr	r3, [r7, #12]
 800903c:	681b      	ldr	r3, [r3, #0]
 800903e:	685b      	ldr	r3, [r3, #4]
 8009040:	441a      	add	r2, r3
 8009042:	687b      	ldr	r3, [r7, #4]
 8009044:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8009046:	68fb      	ldr	r3, [r7, #12]
 8009048:	681b      	ldr	r3, [r3, #0]
 800904a:	681a      	ldr	r2, [r3, #0]
 800904c:	687b      	ldr	r3, [r7, #4]
 800904e:	601a      	str	r2, [r3, #0]
 8009050:	e008      	b.n	8009064 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8009052:	4b0c      	ldr	r3, [pc, #48]	@ (8009084 <prvInsertBlockIntoFreeList+0xb0>)
 8009054:	681a      	ldr	r2, [r3, #0]
 8009056:	687b      	ldr	r3, [r7, #4]
 8009058:	601a      	str	r2, [r3, #0]
 800905a:	e003      	b.n	8009064 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800905c:	68fb      	ldr	r3, [r7, #12]
 800905e:	681a      	ldr	r2, [r3, #0]
 8009060:	687b      	ldr	r3, [r7, #4]
 8009062:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8009064:	68fa      	ldr	r2, [r7, #12]
 8009066:	687b      	ldr	r3, [r7, #4]
 8009068:	429a      	cmp	r2, r3
 800906a:	d002      	beq.n	8009072 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800906c:	68fb      	ldr	r3, [r7, #12]
 800906e:	687a      	ldr	r2, [r7, #4]
 8009070:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8009072:	bf00      	nop
 8009074:	3714      	adds	r7, #20
 8009076:	46bd      	mov	sp, r7
 8009078:	f85d 7b04 	ldr.w	r7, [sp], #4
 800907c:	4770      	bx	lr
 800907e:	bf00      	nop
 8009080:	20004f04 	.word	0x20004f04
 8009084:	20004f0c 	.word	0x20004f0c

08009088 <memset>:
 8009088:	4402      	add	r2, r0
 800908a:	4603      	mov	r3, r0
 800908c:	4293      	cmp	r3, r2
 800908e:	d100      	bne.n	8009092 <memset+0xa>
 8009090:	4770      	bx	lr
 8009092:	f803 1b01 	strb.w	r1, [r3], #1
 8009096:	e7f9      	b.n	800908c <memset+0x4>

08009098 <_reclaim_reent>:
 8009098:	4b2d      	ldr	r3, [pc, #180]	@ (8009150 <_reclaim_reent+0xb8>)
 800909a:	681b      	ldr	r3, [r3, #0]
 800909c:	4283      	cmp	r3, r0
 800909e:	b570      	push	{r4, r5, r6, lr}
 80090a0:	4604      	mov	r4, r0
 80090a2:	d053      	beq.n	800914c <_reclaim_reent+0xb4>
 80090a4:	69c3      	ldr	r3, [r0, #28]
 80090a6:	b31b      	cbz	r3, 80090f0 <_reclaim_reent+0x58>
 80090a8:	68db      	ldr	r3, [r3, #12]
 80090aa:	b163      	cbz	r3, 80090c6 <_reclaim_reent+0x2e>
 80090ac:	2500      	movs	r5, #0
 80090ae:	69e3      	ldr	r3, [r4, #28]
 80090b0:	68db      	ldr	r3, [r3, #12]
 80090b2:	5959      	ldr	r1, [r3, r5]
 80090b4:	b9b1      	cbnz	r1, 80090e4 <_reclaim_reent+0x4c>
 80090b6:	3504      	adds	r5, #4
 80090b8:	2d80      	cmp	r5, #128	@ 0x80
 80090ba:	d1f8      	bne.n	80090ae <_reclaim_reent+0x16>
 80090bc:	69e3      	ldr	r3, [r4, #28]
 80090be:	4620      	mov	r0, r4
 80090c0:	68d9      	ldr	r1, [r3, #12]
 80090c2:	f000 f87b 	bl	80091bc <_free_r>
 80090c6:	69e3      	ldr	r3, [r4, #28]
 80090c8:	6819      	ldr	r1, [r3, #0]
 80090ca:	b111      	cbz	r1, 80090d2 <_reclaim_reent+0x3a>
 80090cc:	4620      	mov	r0, r4
 80090ce:	f000 f875 	bl	80091bc <_free_r>
 80090d2:	69e3      	ldr	r3, [r4, #28]
 80090d4:	689d      	ldr	r5, [r3, #8]
 80090d6:	b15d      	cbz	r5, 80090f0 <_reclaim_reent+0x58>
 80090d8:	4629      	mov	r1, r5
 80090da:	4620      	mov	r0, r4
 80090dc:	682d      	ldr	r5, [r5, #0]
 80090de:	f000 f86d 	bl	80091bc <_free_r>
 80090e2:	e7f8      	b.n	80090d6 <_reclaim_reent+0x3e>
 80090e4:	680e      	ldr	r6, [r1, #0]
 80090e6:	4620      	mov	r0, r4
 80090e8:	f000 f868 	bl	80091bc <_free_r>
 80090ec:	4631      	mov	r1, r6
 80090ee:	e7e1      	b.n	80090b4 <_reclaim_reent+0x1c>
 80090f0:	6961      	ldr	r1, [r4, #20]
 80090f2:	b111      	cbz	r1, 80090fa <_reclaim_reent+0x62>
 80090f4:	4620      	mov	r0, r4
 80090f6:	f000 f861 	bl	80091bc <_free_r>
 80090fa:	69e1      	ldr	r1, [r4, #28]
 80090fc:	b111      	cbz	r1, 8009104 <_reclaim_reent+0x6c>
 80090fe:	4620      	mov	r0, r4
 8009100:	f000 f85c 	bl	80091bc <_free_r>
 8009104:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 8009106:	b111      	cbz	r1, 800910e <_reclaim_reent+0x76>
 8009108:	4620      	mov	r0, r4
 800910a:	f000 f857 	bl	80091bc <_free_r>
 800910e:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8009110:	b111      	cbz	r1, 8009118 <_reclaim_reent+0x80>
 8009112:	4620      	mov	r0, r4
 8009114:	f000 f852 	bl	80091bc <_free_r>
 8009118:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 800911a:	b111      	cbz	r1, 8009122 <_reclaim_reent+0x8a>
 800911c:	4620      	mov	r0, r4
 800911e:	f000 f84d 	bl	80091bc <_free_r>
 8009122:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 8009124:	b111      	cbz	r1, 800912c <_reclaim_reent+0x94>
 8009126:	4620      	mov	r0, r4
 8009128:	f000 f848 	bl	80091bc <_free_r>
 800912c:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 800912e:	b111      	cbz	r1, 8009136 <_reclaim_reent+0x9e>
 8009130:	4620      	mov	r0, r4
 8009132:	f000 f843 	bl	80091bc <_free_r>
 8009136:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 8009138:	b111      	cbz	r1, 8009140 <_reclaim_reent+0xa8>
 800913a:	4620      	mov	r0, r4
 800913c:	f000 f83e 	bl	80091bc <_free_r>
 8009140:	6a23      	ldr	r3, [r4, #32]
 8009142:	b11b      	cbz	r3, 800914c <_reclaim_reent+0xb4>
 8009144:	4620      	mov	r0, r4
 8009146:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800914a:	4718      	bx	r3
 800914c:	bd70      	pop	{r4, r5, r6, pc}
 800914e:	bf00      	nop
 8009150:	20000058 	.word	0x20000058

08009154 <__libc_init_array>:
 8009154:	b570      	push	{r4, r5, r6, lr}
 8009156:	4d0d      	ldr	r5, [pc, #52]	@ (800918c <__libc_init_array+0x38>)
 8009158:	4c0d      	ldr	r4, [pc, #52]	@ (8009190 <__libc_init_array+0x3c>)
 800915a:	1b64      	subs	r4, r4, r5
 800915c:	10a4      	asrs	r4, r4, #2
 800915e:	2600      	movs	r6, #0
 8009160:	42a6      	cmp	r6, r4
 8009162:	d109      	bne.n	8009178 <__libc_init_array+0x24>
 8009164:	4d0b      	ldr	r5, [pc, #44]	@ (8009194 <__libc_init_array+0x40>)
 8009166:	4c0c      	ldr	r4, [pc, #48]	@ (8009198 <__libc_init_array+0x44>)
 8009168:	f000 f87e 	bl	8009268 <_init>
 800916c:	1b64      	subs	r4, r4, r5
 800916e:	10a4      	asrs	r4, r4, #2
 8009170:	2600      	movs	r6, #0
 8009172:	42a6      	cmp	r6, r4
 8009174:	d105      	bne.n	8009182 <__libc_init_array+0x2e>
 8009176:	bd70      	pop	{r4, r5, r6, pc}
 8009178:	f855 3b04 	ldr.w	r3, [r5], #4
 800917c:	4798      	blx	r3
 800917e:	3601      	adds	r6, #1
 8009180:	e7ee      	b.n	8009160 <__libc_init_array+0xc>
 8009182:	f855 3b04 	ldr.w	r3, [r5], #4
 8009186:	4798      	blx	r3
 8009188:	3601      	adds	r6, #1
 800918a:	e7f2      	b.n	8009172 <__libc_init_array+0x1e>
 800918c:	08009ee8 	.word	0x08009ee8
 8009190:	08009ee8 	.word	0x08009ee8
 8009194:	08009ee8 	.word	0x08009ee8
 8009198:	08009eec 	.word	0x08009eec

0800919c <__retarget_lock_acquire_recursive>:
 800919c:	4770      	bx	lr

0800919e <__retarget_lock_release_recursive>:
 800919e:	4770      	bx	lr

080091a0 <memcpy>:
 80091a0:	440a      	add	r2, r1
 80091a2:	4291      	cmp	r1, r2
 80091a4:	f100 33ff 	add.w	r3, r0, #4294967295
 80091a8:	d100      	bne.n	80091ac <memcpy+0xc>
 80091aa:	4770      	bx	lr
 80091ac:	b510      	push	{r4, lr}
 80091ae:	f811 4b01 	ldrb.w	r4, [r1], #1
 80091b2:	f803 4f01 	strb.w	r4, [r3, #1]!
 80091b6:	4291      	cmp	r1, r2
 80091b8:	d1f9      	bne.n	80091ae <memcpy+0xe>
 80091ba:	bd10      	pop	{r4, pc}

080091bc <_free_r>:
 80091bc:	b538      	push	{r3, r4, r5, lr}
 80091be:	4605      	mov	r5, r0
 80091c0:	2900      	cmp	r1, #0
 80091c2:	d041      	beq.n	8009248 <_free_r+0x8c>
 80091c4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80091c8:	1f0c      	subs	r4, r1, #4
 80091ca:	2b00      	cmp	r3, #0
 80091cc:	bfb8      	it	lt
 80091ce:	18e4      	addlt	r4, r4, r3
 80091d0:	f000 f83e 	bl	8009250 <__malloc_lock>
 80091d4:	4a1d      	ldr	r2, [pc, #116]	@ (800924c <_free_r+0x90>)
 80091d6:	6813      	ldr	r3, [r2, #0]
 80091d8:	b933      	cbnz	r3, 80091e8 <_free_r+0x2c>
 80091da:	6063      	str	r3, [r4, #4]
 80091dc:	6014      	str	r4, [r2, #0]
 80091de:	4628      	mov	r0, r5
 80091e0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80091e4:	f000 b83a 	b.w	800925c <__malloc_unlock>
 80091e8:	42a3      	cmp	r3, r4
 80091ea:	d908      	bls.n	80091fe <_free_r+0x42>
 80091ec:	6820      	ldr	r0, [r4, #0]
 80091ee:	1821      	adds	r1, r4, r0
 80091f0:	428b      	cmp	r3, r1
 80091f2:	bf01      	itttt	eq
 80091f4:	6819      	ldreq	r1, [r3, #0]
 80091f6:	685b      	ldreq	r3, [r3, #4]
 80091f8:	1809      	addeq	r1, r1, r0
 80091fa:	6021      	streq	r1, [r4, #0]
 80091fc:	e7ed      	b.n	80091da <_free_r+0x1e>
 80091fe:	461a      	mov	r2, r3
 8009200:	685b      	ldr	r3, [r3, #4]
 8009202:	b10b      	cbz	r3, 8009208 <_free_r+0x4c>
 8009204:	42a3      	cmp	r3, r4
 8009206:	d9fa      	bls.n	80091fe <_free_r+0x42>
 8009208:	6811      	ldr	r1, [r2, #0]
 800920a:	1850      	adds	r0, r2, r1
 800920c:	42a0      	cmp	r0, r4
 800920e:	d10b      	bne.n	8009228 <_free_r+0x6c>
 8009210:	6820      	ldr	r0, [r4, #0]
 8009212:	4401      	add	r1, r0
 8009214:	1850      	adds	r0, r2, r1
 8009216:	4283      	cmp	r3, r0
 8009218:	6011      	str	r1, [r2, #0]
 800921a:	d1e0      	bne.n	80091de <_free_r+0x22>
 800921c:	6818      	ldr	r0, [r3, #0]
 800921e:	685b      	ldr	r3, [r3, #4]
 8009220:	6053      	str	r3, [r2, #4]
 8009222:	4408      	add	r0, r1
 8009224:	6010      	str	r0, [r2, #0]
 8009226:	e7da      	b.n	80091de <_free_r+0x22>
 8009228:	d902      	bls.n	8009230 <_free_r+0x74>
 800922a:	230c      	movs	r3, #12
 800922c:	602b      	str	r3, [r5, #0]
 800922e:	e7d6      	b.n	80091de <_free_r+0x22>
 8009230:	6820      	ldr	r0, [r4, #0]
 8009232:	1821      	adds	r1, r4, r0
 8009234:	428b      	cmp	r3, r1
 8009236:	bf04      	itt	eq
 8009238:	6819      	ldreq	r1, [r3, #0]
 800923a:	685b      	ldreq	r3, [r3, #4]
 800923c:	6063      	str	r3, [r4, #4]
 800923e:	bf04      	itt	eq
 8009240:	1809      	addeq	r1, r1, r0
 8009242:	6021      	streq	r1, [r4, #0]
 8009244:	6054      	str	r4, [r2, #4]
 8009246:	e7ca      	b.n	80091de <_free_r+0x22>
 8009248:	bd38      	pop	{r3, r4, r5, pc}
 800924a:	bf00      	nop
 800924c:	20005060 	.word	0x20005060

08009250 <__malloc_lock>:
 8009250:	4801      	ldr	r0, [pc, #4]	@ (8009258 <__malloc_lock+0x8>)
 8009252:	f7ff bfa3 	b.w	800919c <__retarget_lock_acquire_recursive>
 8009256:	bf00      	nop
 8009258:	2000505c 	.word	0x2000505c

0800925c <__malloc_unlock>:
 800925c:	4801      	ldr	r0, [pc, #4]	@ (8009264 <__malloc_unlock+0x8>)
 800925e:	f7ff bf9e 	b.w	800919e <__retarget_lock_release_recursive>
 8009262:	bf00      	nop
 8009264:	2000505c 	.word	0x2000505c

08009268 <_init>:
 8009268:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800926a:	bf00      	nop
 800926c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800926e:	bc08      	pop	{r3}
 8009270:	469e      	mov	lr, r3
 8009272:	4770      	bx	lr

08009274 <_fini>:
 8009274:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009276:	bf00      	nop
 8009278:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800927a:	bc08      	pop	{r3}
 800927c:	469e      	mov	lr, r3
 800927e:	4770      	bx	lr
