
Project_DataSafeRT.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007b90  080001b0  080001b0  000011b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001b08  08007d40  08007d40  00008d40  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009848  08009848  0000b058  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08009848  08009848  0000a848  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08009850  08009850  0000b058  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009850  08009850  0000a850  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08009854  08009854  0000a854  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000058  20000000  08009858  0000b000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0000b058  2**0
                  CONTENTS
 10 .bss          00008890  20000058  20000058  0000b058  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  200088e8  200088e8  0000b058  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0000b058  2**0
                  CONTENTS, READONLY
 13 .debug_info   000228b0  00000000  00000000  0000b088  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00004be6  00000000  00000000  0002d938  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001fa0  00000000  00000000  00032520  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000287ef  00000000  00000000  000344c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00023ee1  00000000  00000000  0005ccaf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000f2739  00000000  00000000  00080b90  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  001732c9  2**0
                  CONTENTS, READONLY
 20 .debug_rnglists 0000188f  00000000  00000000  0017330c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  00008598  00000000  00000000  00174b9c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000098  00000000  00000000  0017d134  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	@ (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	@ (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	@ (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	20000058 	.word	0x20000058
 80001cc:	00000000 	.word	0x00000000
 80001d0:	08007d28 	.word	0x08007d28

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	@ (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	@ (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	@ (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	2000005c 	.word	0x2000005c
 80001ec:	08007d28 	.word	0x08007d28

080001f0 <__aeabi_uldivmod>:
 80001f0:	b953      	cbnz	r3, 8000208 <__aeabi_uldivmod+0x18>
 80001f2:	b94a      	cbnz	r2, 8000208 <__aeabi_uldivmod+0x18>
 80001f4:	2900      	cmp	r1, #0
 80001f6:	bf08      	it	eq
 80001f8:	2800      	cmpeq	r0, #0
 80001fa:	bf1c      	itt	ne
 80001fc:	f04f 31ff 	movne.w	r1, #4294967295
 8000200:	f04f 30ff 	movne.w	r0, #4294967295
 8000204:	f000 b988 	b.w	8000518 <__aeabi_idiv0>
 8000208:	f1ad 0c08 	sub.w	ip, sp, #8
 800020c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000210:	f000 f806 	bl	8000220 <__udivmoddi4>
 8000214:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000218:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800021c:	b004      	add	sp, #16
 800021e:	4770      	bx	lr

08000220 <__udivmoddi4>:
 8000220:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000224:	9d08      	ldr	r5, [sp, #32]
 8000226:	468e      	mov	lr, r1
 8000228:	4604      	mov	r4, r0
 800022a:	4688      	mov	r8, r1
 800022c:	2b00      	cmp	r3, #0
 800022e:	d14a      	bne.n	80002c6 <__udivmoddi4+0xa6>
 8000230:	428a      	cmp	r2, r1
 8000232:	4617      	mov	r7, r2
 8000234:	d962      	bls.n	80002fc <__udivmoddi4+0xdc>
 8000236:	fab2 f682 	clz	r6, r2
 800023a:	b14e      	cbz	r6, 8000250 <__udivmoddi4+0x30>
 800023c:	f1c6 0320 	rsb	r3, r6, #32
 8000240:	fa01 f806 	lsl.w	r8, r1, r6
 8000244:	fa20 f303 	lsr.w	r3, r0, r3
 8000248:	40b7      	lsls	r7, r6
 800024a:	ea43 0808 	orr.w	r8, r3, r8
 800024e:	40b4      	lsls	r4, r6
 8000250:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000254:	fa1f fc87 	uxth.w	ip, r7
 8000258:	fbb8 f1fe 	udiv	r1, r8, lr
 800025c:	0c23      	lsrs	r3, r4, #16
 800025e:	fb0e 8811 	mls	r8, lr, r1, r8
 8000262:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000266:	fb01 f20c 	mul.w	r2, r1, ip
 800026a:	429a      	cmp	r2, r3
 800026c:	d909      	bls.n	8000282 <__udivmoddi4+0x62>
 800026e:	18fb      	adds	r3, r7, r3
 8000270:	f101 30ff 	add.w	r0, r1, #4294967295
 8000274:	f080 80ea 	bcs.w	800044c <__udivmoddi4+0x22c>
 8000278:	429a      	cmp	r2, r3
 800027a:	f240 80e7 	bls.w	800044c <__udivmoddi4+0x22c>
 800027e:	3902      	subs	r1, #2
 8000280:	443b      	add	r3, r7
 8000282:	1a9a      	subs	r2, r3, r2
 8000284:	b2a3      	uxth	r3, r4
 8000286:	fbb2 f0fe 	udiv	r0, r2, lr
 800028a:	fb0e 2210 	mls	r2, lr, r0, r2
 800028e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000292:	fb00 fc0c 	mul.w	ip, r0, ip
 8000296:	459c      	cmp	ip, r3
 8000298:	d909      	bls.n	80002ae <__udivmoddi4+0x8e>
 800029a:	18fb      	adds	r3, r7, r3
 800029c:	f100 32ff 	add.w	r2, r0, #4294967295
 80002a0:	f080 80d6 	bcs.w	8000450 <__udivmoddi4+0x230>
 80002a4:	459c      	cmp	ip, r3
 80002a6:	f240 80d3 	bls.w	8000450 <__udivmoddi4+0x230>
 80002aa:	443b      	add	r3, r7
 80002ac:	3802      	subs	r0, #2
 80002ae:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80002b2:	eba3 030c 	sub.w	r3, r3, ip
 80002b6:	2100      	movs	r1, #0
 80002b8:	b11d      	cbz	r5, 80002c2 <__udivmoddi4+0xa2>
 80002ba:	40f3      	lsrs	r3, r6
 80002bc:	2200      	movs	r2, #0
 80002be:	e9c5 3200 	strd	r3, r2, [r5]
 80002c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002c6:	428b      	cmp	r3, r1
 80002c8:	d905      	bls.n	80002d6 <__udivmoddi4+0xb6>
 80002ca:	b10d      	cbz	r5, 80002d0 <__udivmoddi4+0xb0>
 80002cc:	e9c5 0100 	strd	r0, r1, [r5]
 80002d0:	2100      	movs	r1, #0
 80002d2:	4608      	mov	r0, r1
 80002d4:	e7f5      	b.n	80002c2 <__udivmoddi4+0xa2>
 80002d6:	fab3 f183 	clz	r1, r3
 80002da:	2900      	cmp	r1, #0
 80002dc:	d146      	bne.n	800036c <__udivmoddi4+0x14c>
 80002de:	4573      	cmp	r3, lr
 80002e0:	d302      	bcc.n	80002e8 <__udivmoddi4+0xc8>
 80002e2:	4282      	cmp	r2, r0
 80002e4:	f200 8105 	bhi.w	80004f2 <__udivmoddi4+0x2d2>
 80002e8:	1a84      	subs	r4, r0, r2
 80002ea:	eb6e 0203 	sbc.w	r2, lr, r3
 80002ee:	2001      	movs	r0, #1
 80002f0:	4690      	mov	r8, r2
 80002f2:	2d00      	cmp	r5, #0
 80002f4:	d0e5      	beq.n	80002c2 <__udivmoddi4+0xa2>
 80002f6:	e9c5 4800 	strd	r4, r8, [r5]
 80002fa:	e7e2      	b.n	80002c2 <__udivmoddi4+0xa2>
 80002fc:	2a00      	cmp	r2, #0
 80002fe:	f000 8090 	beq.w	8000422 <__udivmoddi4+0x202>
 8000302:	fab2 f682 	clz	r6, r2
 8000306:	2e00      	cmp	r6, #0
 8000308:	f040 80a4 	bne.w	8000454 <__udivmoddi4+0x234>
 800030c:	1a8a      	subs	r2, r1, r2
 800030e:	0c03      	lsrs	r3, r0, #16
 8000310:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000314:	b280      	uxth	r0, r0
 8000316:	b2bc      	uxth	r4, r7
 8000318:	2101      	movs	r1, #1
 800031a:	fbb2 fcfe 	udiv	ip, r2, lr
 800031e:	fb0e 221c 	mls	r2, lr, ip, r2
 8000322:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000326:	fb04 f20c 	mul.w	r2, r4, ip
 800032a:	429a      	cmp	r2, r3
 800032c:	d907      	bls.n	800033e <__udivmoddi4+0x11e>
 800032e:	18fb      	adds	r3, r7, r3
 8000330:	f10c 38ff 	add.w	r8, ip, #4294967295
 8000334:	d202      	bcs.n	800033c <__udivmoddi4+0x11c>
 8000336:	429a      	cmp	r2, r3
 8000338:	f200 80e0 	bhi.w	80004fc <__udivmoddi4+0x2dc>
 800033c:	46c4      	mov	ip, r8
 800033e:	1a9b      	subs	r3, r3, r2
 8000340:	fbb3 f2fe 	udiv	r2, r3, lr
 8000344:	fb0e 3312 	mls	r3, lr, r2, r3
 8000348:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 800034c:	fb02 f404 	mul.w	r4, r2, r4
 8000350:	429c      	cmp	r4, r3
 8000352:	d907      	bls.n	8000364 <__udivmoddi4+0x144>
 8000354:	18fb      	adds	r3, r7, r3
 8000356:	f102 30ff 	add.w	r0, r2, #4294967295
 800035a:	d202      	bcs.n	8000362 <__udivmoddi4+0x142>
 800035c:	429c      	cmp	r4, r3
 800035e:	f200 80ca 	bhi.w	80004f6 <__udivmoddi4+0x2d6>
 8000362:	4602      	mov	r2, r0
 8000364:	1b1b      	subs	r3, r3, r4
 8000366:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 800036a:	e7a5      	b.n	80002b8 <__udivmoddi4+0x98>
 800036c:	f1c1 0620 	rsb	r6, r1, #32
 8000370:	408b      	lsls	r3, r1
 8000372:	fa22 f706 	lsr.w	r7, r2, r6
 8000376:	431f      	orrs	r7, r3
 8000378:	fa0e f401 	lsl.w	r4, lr, r1
 800037c:	fa20 f306 	lsr.w	r3, r0, r6
 8000380:	fa2e fe06 	lsr.w	lr, lr, r6
 8000384:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000388:	4323      	orrs	r3, r4
 800038a:	fa00 f801 	lsl.w	r8, r0, r1
 800038e:	fa1f fc87 	uxth.w	ip, r7
 8000392:	fbbe f0f9 	udiv	r0, lr, r9
 8000396:	0c1c      	lsrs	r4, r3, #16
 8000398:	fb09 ee10 	mls	lr, r9, r0, lr
 800039c:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 80003a0:	fb00 fe0c 	mul.w	lr, r0, ip
 80003a4:	45a6      	cmp	lr, r4
 80003a6:	fa02 f201 	lsl.w	r2, r2, r1
 80003aa:	d909      	bls.n	80003c0 <__udivmoddi4+0x1a0>
 80003ac:	193c      	adds	r4, r7, r4
 80003ae:	f100 3aff 	add.w	sl, r0, #4294967295
 80003b2:	f080 809c 	bcs.w	80004ee <__udivmoddi4+0x2ce>
 80003b6:	45a6      	cmp	lr, r4
 80003b8:	f240 8099 	bls.w	80004ee <__udivmoddi4+0x2ce>
 80003bc:	3802      	subs	r0, #2
 80003be:	443c      	add	r4, r7
 80003c0:	eba4 040e 	sub.w	r4, r4, lr
 80003c4:	fa1f fe83 	uxth.w	lr, r3
 80003c8:	fbb4 f3f9 	udiv	r3, r4, r9
 80003cc:	fb09 4413 	mls	r4, r9, r3, r4
 80003d0:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 80003d4:	fb03 fc0c 	mul.w	ip, r3, ip
 80003d8:	45a4      	cmp	ip, r4
 80003da:	d908      	bls.n	80003ee <__udivmoddi4+0x1ce>
 80003dc:	193c      	adds	r4, r7, r4
 80003de:	f103 3eff 	add.w	lr, r3, #4294967295
 80003e2:	f080 8082 	bcs.w	80004ea <__udivmoddi4+0x2ca>
 80003e6:	45a4      	cmp	ip, r4
 80003e8:	d97f      	bls.n	80004ea <__udivmoddi4+0x2ca>
 80003ea:	3b02      	subs	r3, #2
 80003ec:	443c      	add	r4, r7
 80003ee:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 80003f2:	eba4 040c 	sub.w	r4, r4, ip
 80003f6:	fba0 ec02 	umull	lr, ip, r0, r2
 80003fa:	4564      	cmp	r4, ip
 80003fc:	4673      	mov	r3, lr
 80003fe:	46e1      	mov	r9, ip
 8000400:	d362      	bcc.n	80004c8 <__udivmoddi4+0x2a8>
 8000402:	d05f      	beq.n	80004c4 <__udivmoddi4+0x2a4>
 8000404:	b15d      	cbz	r5, 800041e <__udivmoddi4+0x1fe>
 8000406:	ebb8 0203 	subs.w	r2, r8, r3
 800040a:	eb64 0409 	sbc.w	r4, r4, r9
 800040e:	fa04 f606 	lsl.w	r6, r4, r6
 8000412:	fa22 f301 	lsr.w	r3, r2, r1
 8000416:	431e      	orrs	r6, r3
 8000418:	40cc      	lsrs	r4, r1
 800041a:	e9c5 6400 	strd	r6, r4, [r5]
 800041e:	2100      	movs	r1, #0
 8000420:	e74f      	b.n	80002c2 <__udivmoddi4+0xa2>
 8000422:	fbb1 fcf2 	udiv	ip, r1, r2
 8000426:	0c01      	lsrs	r1, r0, #16
 8000428:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 800042c:	b280      	uxth	r0, r0
 800042e:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000432:	463b      	mov	r3, r7
 8000434:	4638      	mov	r0, r7
 8000436:	463c      	mov	r4, r7
 8000438:	46b8      	mov	r8, r7
 800043a:	46be      	mov	lr, r7
 800043c:	2620      	movs	r6, #32
 800043e:	fbb1 f1f7 	udiv	r1, r1, r7
 8000442:	eba2 0208 	sub.w	r2, r2, r8
 8000446:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 800044a:	e766      	b.n	800031a <__udivmoddi4+0xfa>
 800044c:	4601      	mov	r1, r0
 800044e:	e718      	b.n	8000282 <__udivmoddi4+0x62>
 8000450:	4610      	mov	r0, r2
 8000452:	e72c      	b.n	80002ae <__udivmoddi4+0x8e>
 8000454:	f1c6 0220 	rsb	r2, r6, #32
 8000458:	fa2e f302 	lsr.w	r3, lr, r2
 800045c:	40b7      	lsls	r7, r6
 800045e:	40b1      	lsls	r1, r6
 8000460:	fa20 f202 	lsr.w	r2, r0, r2
 8000464:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000468:	430a      	orrs	r2, r1
 800046a:	fbb3 f8fe 	udiv	r8, r3, lr
 800046e:	b2bc      	uxth	r4, r7
 8000470:	fb0e 3318 	mls	r3, lr, r8, r3
 8000474:	0c11      	lsrs	r1, r2, #16
 8000476:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800047a:	fb08 f904 	mul.w	r9, r8, r4
 800047e:	40b0      	lsls	r0, r6
 8000480:	4589      	cmp	r9, r1
 8000482:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000486:	b280      	uxth	r0, r0
 8000488:	d93e      	bls.n	8000508 <__udivmoddi4+0x2e8>
 800048a:	1879      	adds	r1, r7, r1
 800048c:	f108 3cff 	add.w	ip, r8, #4294967295
 8000490:	d201      	bcs.n	8000496 <__udivmoddi4+0x276>
 8000492:	4589      	cmp	r9, r1
 8000494:	d81f      	bhi.n	80004d6 <__udivmoddi4+0x2b6>
 8000496:	eba1 0109 	sub.w	r1, r1, r9
 800049a:	fbb1 f9fe 	udiv	r9, r1, lr
 800049e:	fb09 f804 	mul.w	r8, r9, r4
 80004a2:	fb0e 1119 	mls	r1, lr, r9, r1
 80004a6:	b292      	uxth	r2, r2
 80004a8:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80004ac:	4542      	cmp	r2, r8
 80004ae:	d229      	bcs.n	8000504 <__udivmoddi4+0x2e4>
 80004b0:	18ba      	adds	r2, r7, r2
 80004b2:	f109 31ff 	add.w	r1, r9, #4294967295
 80004b6:	d2c4      	bcs.n	8000442 <__udivmoddi4+0x222>
 80004b8:	4542      	cmp	r2, r8
 80004ba:	d2c2      	bcs.n	8000442 <__udivmoddi4+0x222>
 80004bc:	f1a9 0102 	sub.w	r1, r9, #2
 80004c0:	443a      	add	r2, r7
 80004c2:	e7be      	b.n	8000442 <__udivmoddi4+0x222>
 80004c4:	45f0      	cmp	r8, lr
 80004c6:	d29d      	bcs.n	8000404 <__udivmoddi4+0x1e4>
 80004c8:	ebbe 0302 	subs.w	r3, lr, r2
 80004cc:	eb6c 0c07 	sbc.w	ip, ip, r7
 80004d0:	3801      	subs	r0, #1
 80004d2:	46e1      	mov	r9, ip
 80004d4:	e796      	b.n	8000404 <__udivmoddi4+0x1e4>
 80004d6:	eba7 0909 	sub.w	r9, r7, r9
 80004da:	4449      	add	r1, r9
 80004dc:	f1a8 0c02 	sub.w	ip, r8, #2
 80004e0:	fbb1 f9fe 	udiv	r9, r1, lr
 80004e4:	fb09 f804 	mul.w	r8, r9, r4
 80004e8:	e7db      	b.n	80004a2 <__udivmoddi4+0x282>
 80004ea:	4673      	mov	r3, lr
 80004ec:	e77f      	b.n	80003ee <__udivmoddi4+0x1ce>
 80004ee:	4650      	mov	r0, sl
 80004f0:	e766      	b.n	80003c0 <__udivmoddi4+0x1a0>
 80004f2:	4608      	mov	r0, r1
 80004f4:	e6fd      	b.n	80002f2 <__udivmoddi4+0xd2>
 80004f6:	443b      	add	r3, r7
 80004f8:	3a02      	subs	r2, #2
 80004fa:	e733      	b.n	8000364 <__udivmoddi4+0x144>
 80004fc:	f1ac 0c02 	sub.w	ip, ip, #2
 8000500:	443b      	add	r3, r7
 8000502:	e71c      	b.n	800033e <__udivmoddi4+0x11e>
 8000504:	4649      	mov	r1, r9
 8000506:	e79c      	b.n	8000442 <__udivmoddi4+0x222>
 8000508:	eba1 0109 	sub.w	r1, r1, r9
 800050c:	46c4      	mov	ip, r8
 800050e:	fbb1 f9fe 	udiv	r9, r1, lr
 8000512:	fb09 f804 	mul.w	r8, r9, r4
 8000516:	e7c4      	b.n	80004a2 <__udivmoddi4+0x282>

08000518 <__aeabi_idiv0>:
 8000518:	4770      	bx	lr
 800051a:	bf00      	nop

0800051c <vApplicationIdleHook>:
void vApplicationStackOverflowHook(xTaskHandle xTask, signed char *pcTaskName);
void vApplicationMallocFailedHook(void);

/* USER CODE BEGIN 2 */
__weak void vApplicationIdleHook( void )
{
 800051c:	b480      	push	{r7}
 800051e:	af00      	add	r7, sp, #0
   specified, or call vTaskDelay()). If the application makes use of the
   vTaskDelete() API function (as this demo application does) then it is also
   important that vApplicationIdleHook() is permitted to return to its calling
   function, because it is the responsibility of the idle task to clean up
   memory allocated by the kernel to any task that has since been deleted. */
}
 8000520:	bf00      	nop
 8000522:	46bd      	mov	sp, r7
 8000524:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000528:	4770      	bx	lr

0800052a <vApplicationStackOverflowHook>:
/* USER CODE END 2 */

/* USER CODE BEGIN 4 */
__weak void vApplicationStackOverflowHook(xTaskHandle xTask, signed char *pcTaskName)
{
 800052a:	b480      	push	{r7}
 800052c:	b083      	sub	sp, #12
 800052e:	af00      	add	r7, sp, #0
 8000530:	6078      	str	r0, [r7, #4]
 8000532:	6039      	str	r1, [r7, #0]
   /* Run time stack overflow checking is performed if
   configCHECK_FOR_STACK_OVERFLOW is defined to 1 or 2. This hook function is
   called if a stack overflow is detected. */
}
 8000534:	bf00      	nop
 8000536:	370c      	adds	r7, #12
 8000538:	46bd      	mov	sp, r7
 800053a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800053e:	4770      	bx	lr

08000540 <vApplicationMallocFailedHook>:
/* USER CODE END 4 */

/* USER CODE BEGIN 5 */
__weak void vApplicationMallocFailedHook(void)
{
 8000540:	b480      	push	{r7}
 8000542:	af00      	add	r7, sp, #0
   demo application. If heap_1.c or heap_2.c are used, then the size of the
   heap available to pvPortMalloc() is defined by configTOTAL_HEAP_SIZE in
   FreeRTOSConfig.h, and the xPortGetFreeHeapSize() API function can be used
   to query the size of free heap space that remains (although it does not
   provide information on how the remaining heap might be fragmented). */
}
 8000544:	bf00      	nop
 8000546:	46bd      	mov	sp, r7
 8000548:	f85d 7b04 	ldr.w	r7, [sp], #4
 800054c:	4770      	bx	lr
	...

08000550 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8000550:	b480      	push	{r7}
 8000552:	b085      	sub	sp, #20
 8000554:	af00      	add	r7, sp, #0
 8000556:	60f8      	str	r0, [r7, #12]
 8000558:	60b9      	str	r1, [r7, #8]
 800055a:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 800055c:	68fb      	ldr	r3, [r7, #12]
 800055e:	4a07      	ldr	r2, [pc, #28]	@ (800057c <vApplicationGetIdleTaskMemory+0x2c>)
 8000560:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8000562:	68bb      	ldr	r3, [r7, #8]
 8000564:	4a06      	ldr	r2, [pc, #24]	@ (8000580 <vApplicationGetIdleTaskMemory+0x30>)
 8000566:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8000568:	687b      	ldr	r3, [r7, #4]
 800056a:	2280      	movs	r2, #128	@ 0x80
 800056c:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 800056e:	bf00      	nop
 8000570:	3714      	adds	r7, #20
 8000572:	46bd      	mov	sp, r7
 8000574:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000578:	4770      	bx	lr
 800057a:	bf00      	nop
 800057c:	20000074 	.word	0x20000074
 8000580:	200000cc 	.word	0x200000cc

08000584 <ili9341_Init>:
  * @brief  Power on the LCD.
  * @param  None
  * @retval None
  */
void ili9341_Init(void)
{
 8000584:	b580      	push	{r7, lr}
 8000586:	af00      	add	r7, sp, #0
  /* Initialize ILI9341 low level bus layer ----------------------------------*/
  LCD_IO_Init();
 8000588:	f000 fe86 	bl	8001298 <LCD_IO_Init>
  
  /* Configure LCD */
  ili9341_WriteReg(0xCA);
 800058c:	20ca      	movs	r0, #202	@ 0xca
 800058e:	f000 f95d 	bl	800084c <ili9341_WriteReg>
  ili9341_WriteData(0xC3);
 8000592:	20c3      	movs	r0, #195	@ 0xc3
 8000594:	f000 f967 	bl	8000866 <ili9341_WriteData>
  ili9341_WriteData(0x08);
 8000598:	2008      	movs	r0, #8
 800059a:	f000 f964 	bl	8000866 <ili9341_WriteData>
  ili9341_WriteData(0x50);
 800059e:	2050      	movs	r0, #80	@ 0x50
 80005a0:	f000 f961 	bl	8000866 <ili9341_WriteData>
  ili9341_WriteReg(LCD_POWERB);
 80005a4:	20cf      	movs	r0, #207	@ 0xcf
 80005a6:	f000 f951 	bl	800084c <ili9341_WriteReg>
  ili9341_WriteData(0x00);
 80005aa:	2000      	movs	r0, #0
 80005ac:	f000 f95b 	bl	8000866 <ili9341_WriteData>
  ili9341_WriteData(0xC1);
 80005b0:	20c1      	movs	r0, #193	@ 0xc1
 80005b2:	f000 f958 	bl	8000866 <ili9341_WriteData>
  ili9341_WriteData(0x30);
 80005b6:	2030      	movs	r0, #48	@ 0x30
 80005b8:	f000 f955 	bl	8000866 <ili9341_WriteData>
  ili9341_WriteReg(LCD_POWER_SEQ);
 80005bc:	20ed      	movs	r0, #237	@ 0xed
 80005be:	f000 f945 	bl	800084c <ili9341_WriteReg>
  ili9341_WriteData(0x64);
 80005c2:	2064      	movs	r0, #100	@ 0x64
 80005c4:	f000 f94f 	bl	8000866 <ili9341_WriteData>
  ili9341_WriteData(0x03);
 80005c8:	2003      	movs	r0, #3
 80005ca:	f000 f94c 	bl	8000866 <ili9341_WriteData>
  ili9341_WriteData(0x12);
 80005ce:	2012      	movs	r0, #18
 80005d0:	f000 f949 	bl	8000866 <ili9341_WriteData>
  ili9341_WriteData(0x81);
 80005d4:	2081      	movs	r0, #129	@ 0x81
 80005d6:	f000 f946 	bl	8000866 <ili9341_WriteData>
  ili9341_WriteReg(LCD_DTCA);
 80005da:	20e8      	movs	r0, #232	@ 0xe8
 80005dc:	f000 f936 	bl	800084c <ili9341_WriteReg>
  ili9341_WriteData(0x85);
 80005e0:	2085      	movs	r0, #133	@ 0x85
 80005e2:	f000 f940 	bl	8000866 <ili9341_WriteData>
  ili9341_WriteData(0x00);
 80005e6:	2000      	movs	r0, #0
 80005e8:	f000 f93d 	bl	8000866 <ili9341_WriteData>
  ili9341_WriteData(0x78);
 80005ec:	2078      	movs	r0, #120	@ 0x78
 80005ee:	f000 f93a 	bl	8000866 <ili9341_WriteData>
  ili9341_WriteReg(LCD_POWERA);
 80005f2:	20cb      	movs	r0, #203	@ 0xcb
 80005f4:	f000 f92a 	bl	800084c <ili9341_WriteReg>
  ili9341_WriteData(0x39);
 80005f8:	2039      	movs	r0, #57	@ 0x39
 80005fa:	f000 f934 	bl	8000866 <ili9341_WriteData>
  ili9341_WriteData(0x2C);
 80005fe:	202c      	movs	r0, #44	@ 0x2c
 8000600:	f000 f931 	bl	8000866 <ili9341_WriteData>
  ili9341_WriteData(0x00);
 8000604:	2000      	movs	r0, #0
 8000606:	f000 f92e 	bl	8000866 <ili9341_WriteData>
  ili9341_WriteData(0x34);
 800060a:	2034      	movs	r0, #52	@ 0x34
 800060c:	f000 f92b 	bl	8000866 <ili9341_WriteData>
  ili9341_WriteData(0x02);
 8000610:	2002      	movs	r0, #2
 8000612:	f000 f928 	bl	8000866 <ili9341_WriteData>
  ili9341_WriteReg(LCD_PRC);
 8000616:	20f7      	movs	r0, #247	@ 0xf7
 8000618:	f000 f918 	bl	800084c <ili9341_WriteReg>
  ili9341_WriteData(0x20);
 800061c:	2020      	movs	r0, #32
 800061e:	f000 f922 	bl	8000866 <ili9341_WriteData>
  ili9341_WriteReg(LCD_DTCB);
 8000622:	20ea      	movs	r0, #234	@ 0xea
 8000624:	f000 f912 	bl	800084c <ili9341_WriteReg>
  ili9341_WriteData(0x00);
 8000628:	2000      	movs	r0, #0
 800062a:	f000 f91c 	bl	8000866 <ili9341_WriteData>
  ili9341_WriteData(0x00);
 800062e:	2000      	movs	r0, #0
 8000630:	f000 f919 	bl	8000866 <ili9341_WriteData>
  ili9341_WriteReg(LCD_FRMCTR1);
 8000634:	20b1      	movs	r0, #177	@ 0xb1
 8000636:	f000 f909 	bl	800084c <ili9341_WriteReg>
  ili9341_WriteData(0x00);
 800063a:	2000      	movs	r0, #0
 800063c:	f000 f913 	bl	8000866 <ili9341_WriteData>
  ili9341_WriteData(0x1B);
 8000640:	201b      	movs	r0, #27
 8000642:	f000 f910 	bl	8000866 <ili9341_WriteData>
  ili9341_WriteReg(LCD_DFC);
 8000646:	20b6      	movs	r0, #182	@ 0xb6
 8000648:	f000 f900 	bl	800084c <ili9341_WriteReg>
  ili9341_WriteData(0x0A);
 800064c:	200a      	movs	r0, #10
 800064e:	f000 f90a 	bl	8000866 <ili9341_WriteData>
  ili9341_WriteData(0xA2);
 8000652:	20a2      	movs	r0, #162	@ 0xa2
 8000654:	f000 f907 	bl	8000866 <ili9341_WriteData>
  ili9341_WriteReg(LCD_POWER1);
 8000658:	20c0      	movs	r0, #192	@ 0xc0
 800065a:	f000 f8f7 	bl	800084c <ili9341_WriteReg>
  ili9341_WriteData(0x10);
 800065e:	2010      	movs	r0, #16
 8000660:	f000 f901 	bl	8000866 <ili9341_WriteData>
  ili9341_WriteReg(LCD_POWER2);
 8000664:	20c1      	movs	r0, #193	@ 0xc1
 8000666:	f000 f8f1 	bl	800084c <ili9341_WriteReg>
  ili9341_WriteData(0x10);
 800066a:	2010      	movs	r0, #16
 800066c:	f000 f8fb 	bl	8000866 <ili9341_WriteData>
  ili9341_WriteReg(LCD_VCOM1);
 8000670:	20c5      	movs	r0, #197	@ 0xc5
 8000672:	f000 f8eb 	bl	800084c <ili9341_WriteReg>
  ili9341_WriteData(0x45);
 8000676:	2045      	movs	r0, #69	@ 0x45
 8000678:	f000 f8f5 	bl	8000866 <ili9341_WriteData>
  ili9341_WriteData(0x15);
 800067c:	2015      	movs	r0, #21
 800067e:	f000 f8f2 	bl	8000866 <ili9341_WriteData>
  ili9341_WriteReg(LCD_VCOM2);
 8000682:	20c7      	movs	r0, #199	@ 0xc7
 8000684:	f000 f8e2 	bl	800084c <ili9341_WriteReg>
  ili9341_WriteData(0x90);
 8000688:	2090      	movs	r0, #144	@ 0x90
 800068a:	f000 f8ec 	bl	8000866 <ili9341_WriteData>
  ili9341_WriteReg(LCD_MAC);
 800068e:	2036      	movs	r0, #54	@ 0x36
 8000690:	f000 f8dc 	bl	800084c <ili9341_WriteReg>
  ili9341_WriteData(0xC8);
 8000694:	20c8      	movs	r0, #200	@ 0xc8
 8000696:	f000 f8e6 	bl	8000866 <ili9341_WriteData>
  ili9341_WriteReg(LCD_3GAMMA_EN);
 800069a:	20f2      	movs	r0, #242	@ 0xf2
 800069c:	f000 f8d6 	bl	800084c <ili9341_WriteReg>
  ili9341_WriteData(0x00);
 80006a0:	2000      	movs	r0, #0
 80006a2:	f000 f8e0 	bl	8000866 <ili9341_WriteData>
  ili9341_WriteReg(LCD_RGB_INTERFACE);
 80006a6:	20b0      	movs	r0, #176	@ 0xb0
 80006a8:	f000 f8d0 	bl	800084c <ili9341_WriteReg>
  ili9341_WriteData(0xC2);
 80006ac:	20c2      	movs	r0, #194	@ 0xc2
 80006ae:	f000 f8da 	bl	8000866 <ili9341_WriteData>
  ili9341_WriteReg(LCD_DFC);
 80006b2:	20b6      	movs	r0, #182	@ 0xb6
 80006b4:	f000 f8ca 	bl	800084c <ili9341_WriteReg>
  ili9341_WriteData(0x0A);
 80006b8:	200a      	movs	r0, #10
 80006ba:	f000 f8d4 	bl	8000866 <ili9341_WriteData>
  ili9341_WriteData(0xA7);
 80006be:	20a7      	movs	r0, #167	@ 0xa7
 80006c0:	f000 f8d1 	bl	8000866 <ili9341_WriteData>
  ili9341_WriteData(0x27);
 80006c4:	2027      	movs	r0, #39	@ 0x27
 80006c6:	f000 f8ce 	bl	8000866 <ili9341_WriteData>
  ili9341_WriteData(0x04);
 80006ca:	2004      	movs	r0, #4
 80006cc:	f000 f8cb 	bl	8000866 <ili9341_WriteData>
  
  /* Colomn address set */
  ili9341_WriteReg(LCD_COLUMN_ADDR);
 80006d0:	202a      	movs	r0, #42	@ 0x2a
 80006d2:	f000 f8bb 	bl	800084c <ili9341_WriteReg>
  ili9341_WriteData(0x00);
 80006d6:	2000      	movs	r0, #0
 80006d8:	f000 f8c5 	bl	8000866 <ili9341_WriteData>
  ili9341_WriteData(0x00);
 80006dc:	2000      	movs	r0, #0
 80006de:	f000 f8c2 	bl	8000866 <ili9341_WriteData>
  ili9341_WriteData(0x00);
 80006e2:	2000      	movs	r0, #0
 80006e4:	f000 f8bf 	bl	8000866 <ili9341_WriteData>
  ili9341_WriteData(0xEF);
 80006e8:	20ef      	movs	r0, #239	@ 0xef
 80006ea:	f000 f8bc 	bl	8000866 <ili9341_WriteData>
  /* Page address set */
  ili9341_WriteReg(LCD_PAGE_ADDR);
 80006ee:	202b      	movs	r0, #43	@ 0x2b
 80006f0:	f000 f8ac 	bl	800084c <ili9341_WriteReg>
  ili9341_WriteData(0x00);
 80006f4:	2000      	movs	r0, #0
 80006f6:	f000 f8b6 	bl	8000866 <ili9341_WriteData>
  ili9341_WriteData(0x00);
 80006fa:	2000      	movs	r0, #0
 80006fc:	f000 f8b3 	bl	8000866 <ili9341_WriteData>
  ili9341_WriteData(0x01);
 8000700:	2001      	movs	r0, #1
 8000702:	f000 f8b0 	bl	8000866 <ili9341_WriteData>
  ili9341_WriteData(0x3F);
 8000706:	203f      	movs	r0, #63	@ 0x3f
 8000708:	f000 f8ad 	bl	8000866 <ili9341_WriteData>
  ili9341_WriteReg(LCD_INTERFACE);
 800070c:	20f6      	movs	r0, #246	@ 0xf6
 800070e:	f000 f89d 	bl	800084c <ili9341_WriteReg>
  ili9341_WriteData(0x01);
 8000712:	2001      	movs	r0, #1
 8000714:	f000 f8a7 	bl	8000866 <ili9341_WriteData>
  ili9341_WriteData(0x00);
 8000718:	2000      	movs	r0, #0
 800071a:	f000 f8a4 	bl	8000866 <ili9341_WriteData>
  ili9341_WriteData(0x06);
 800071e:	2006      	movs	r0, #6
 8000720:	f000 f8a1 	bl	8000866 <ili9341_WriteData>
  
  ili9341_WriteReg(LCD_GRAM);
 8000724:	202c      	movs	r0, #44	@ 0x2c
 8000726:	f000 f891 	bl	800084c <ili9341_WriteReg>
  LCD_Delay(200);
 800072a:	20c8      	movs	r0, #200	@ 0xc8
 800072c:	f000 fea2 	bl	8001474 <LCD_Delay>
  
  ili9341_WriteReg(LCD_GAMMA);
 8000730:	2026      	movs	r0, #38	@ 0x26
 8000732:	f000 f88b 	bl	800084c <ili9341_WriteReg>
  ili9341_WriteData(0x01);
 8000736:	2001      	movs	r0, #1
 8000738:	f000 f895 	bl	8000866 <ili9341_WriteData>
  
  ili9341_WriteReg(LCD_PGAMMA);
 800073c:	20e0      	movs	r0, #224	@ 0xe0
 800073e:	f000 f885 	bl	800084c <ili9341_WriteReg>
  ili9341_WriteData(0x0F);
 8000742:	200f      	movs	r0, #15
 8000744:	f000 f88f 	bl	8000866 <ili9341_WriteData>
  ili9341_WriteData(0x29);
 8000748:	2029      	movs	r0, #41	@ 0x29
 800074a:	f000 f88c 	bl	8000866 <ili9341_WriteData>
  ili9341_WriteData(0x24);
 800074e:	2024      	movs	r0, #36	@ 0x24
 8000750:	f000 f889 	bl	8000866 <ili9341_WriteData>
  ili9341_WriteData(0x0C);
 8000754:	200c      	movs	r0, #12
 8000756:	f000 f886 	bl	8000866 <ili9341_WriteData>
  ili9341_WriteData(0x0E);
 800075a:	200e      	movs	r0, #14
 800075c:	f000 f883 	bl	8000866 <ili9341_WriteData>
  ili9341_WriteData(0x09);
 8000760:	2009      	movs	r0, #9
 8000762:	f000 f880 	bl	8000866 <ili9341_WriteData>
  ili9341_WriteData(0x4E);
 8000766:	204e      	movs	r0, #78	@ 0x4e
 8000768:	f000 f87d 	bl	8000866 <ili9341_WriteData>
  ili9341_WriteData(0x78);
 800076c:	2078      	movs	r0, #120	@ 0x78
 800076e:	f000 f87a 	bl	8000866 <ili9341_WriteData>
  ili9341_WriteData(0x3C);
 8000772:	203c      	movs	r0, #60	@ 0x3c
 8000774:	f000 f877 	bl	8000866 <ili9341_WriteData>
  ili9341_WriteData(0x09);
 8000778:	2009      	movs	r0, #9
 800077a:	f000 f874 	bl	8000866 <ili9341_WriteData>
  ili9341_WriteData(0x13);
 800077e:	2013      	movs	r0, #19
 8000780:	f000 f871 	bl	8000866 <ili9341_WriteData>
  ili9341_WriteData(0x05);
 8000784:	2005      	movs	r0, #5
 8000786:	f000 f86e 	bl	8000866 <ili9341_WriteData>
  ili9341_WriteData(0x17);
 800078a:	2017      	movs	r0, #23
 800078c:	f000 f86b 	bl	8000866 <ili9341_WriteData>
  ili9341_WriteData(0x11);
 8000790:	2011      	movs	r0, #17
 8000792:	f000 f868 	bl	8000866 <ili9341_WriteData>
  ili9341_WriteData(0x00);
 8000796:	2000      	movs	r0, #0
 8000798:	f000 f865 	bl	8000866 <ili9341_WriteData>
  ili9341_WriteReg(LCD_NGAMMA);
 800079c:	20e1      	movs	r0, #225	@ 0xe1
 800079e:	f000 f855 	bl	800084c <ili9341_WriteReg>
  ili9341_WriteData(0x00);
 80007a2:	2000      	movs	r0, #0
 80007a4:	f000 f85f 	bl	8000866 <ili9341_WriteData>
  ili9341_WriteData(0x16);
 80007a8:	2016      	movs	r0, #22
 80007aa:	f000 f85c 	bl	8000866 <ili9341_WriteData>
  ili9341_WriteData(0x1B);
 80007ae:	201b      	movs	r0, #27
 80007b0:	f000 f859 	bl	8000866 <ili9341_WriteData>
  ili9341_WriteData(0x04);
 80007b4:	2004      	movs	r0, #4
 80007b6:	f000 f856 	bl	8000866 <ili9341_WriteData>
  ili9341_WriteData(0x11);
 80007ba:	2011      	movs	r0, #17
 80007bc:	f000 f853 	bl	8000866 <ili9341_WriteData>
  ili9341_WriteData(0x07);
 80007c0:	2007      	movs	r0, #7
 80007c2:	f000 f850 	bl	8000866 <ili9341_WriteData>
  ili9341_WriteData(0x31);
 80007c6:	2031      	movs	r0, #49	@ 0x31
 80007c8:	f000 f84d 	bl	8000866 <ili9341_WriteData>
  ili9341_WriteData(0x33);
 80007cc:	2033      	movs	r0, #51	@ 0x33
 80007ce:	f000 f84a 	bl	8000866 <ili9341_WriteData>
  ili9341_WriteData(0x42);
 80007d2:	2042      	movs	r0, #66	@ 0x42
 80007d4:	f000 f847 	bl	8000866 <ili9341_WriteData>
  ili9341_WriteData(0x05);
 80007d8:	2005      	movs	r0, #5
 80007da:	f000 f844 	bl	8000866 <ili9341_WriteData>
  ili9341_WriteData(0x0C);
 80007de:	200c      	movs	r0, #12
 80007e0:	f000 f841 	bl	8000866 <ili9341_WriteData>
  ili9341_WriteData(0x0A);
 80007e4:	200a      	movs	r0, #10
 80007e6:	f000 f83e 	bl	8000866 <ili9341_WriteData>
  ili9341_WriteData(0x28);
 80007ea:	2028      	movs	r0, #40	@ 0x28
 80007ec:	f000 f83b 	bl	8000866 <ili9341_WriteData>
  ili9341_WriteData(0x2F);
 80007f0:	202f      	movs	r0, #47	@ 0x2f
 80007f2:	f000 f838 	bl	8000866 <ili9341_WriteData>
  ili9341_WriteData(0x0F);
 80007f6:	200f      	movs	r0, #15
 80007f8:	f000 f835 	bl	8000866 <ili9341_WriteData>
  
  ili9341_WriteReg(LCD_SLEEP_OUT);
 80007fc:	2011      	movs	r0, #17
 80007fe:	f000 f825 	bl	800084c <ili9341_WriteReg>
  LCD_Delay(200);
 8000802:	20c8      	movs	r0, #200	@ 0xc8
 8000804:	f000 fe36 	bl	8001474 <LCD_Delay>
  ili9341_WriteReg(LCD_DISPLAY_ON);
 8000808:	2029      	movs	r0, #41	@ 0x29
 800080a:	f000 f81f 	bl	800084c <ili9341_WriteReg>
  /* GRAM start writing */
  ili9341_WriteReg(LCD_GRAM);
 800080e:	202c      	movs	r0, #44	@ 0x2c
 8000810:	f000 f81c 	bl	800084c <ili9341_WriteReg>
}
 8000814:	bf00      	nop
 8000816:	bd80      	pop	{r7, pc}

08000818 <ili9341_ReadID>:
  * @brief  Disables the Display.
  * @param  None
  * @retval LCD Register Value.
  */
uint16_t ili9341_ReadID(void)
{
 8000818:	b580      	push	{r7, lr}
 800081a:	af00      	add	r7, sp, #0
  LCD_IO_Init();
 800081c:	f000 fd3c 	bl	8001298 <LCD_IO_Init>
  return ((uint16_t)ili9341_ReadData(LCD_READ_ID4, LCD_READ_ID4_SIZE));
 8000820:	2103      	movs	r1, #3
 8000822:	20d3      	movs	r0, #211	@ 0xd3
 8000824:	f000 f82c 	bl	8000880 <ili9341_ReadData>
 8000828:	4603      	mov	r3, r0
 800082a:	b29b      	uxth	r3, r3
}
 800082c:	4618      	mov	r0, r3
 800082e:	bd80      	pop	{r7, pc}

08000830 <ili9341_DisplayOn>:
  * @brief  Enables the Display.
  * @param  None
  * @retval None
  */
void ili9341_DisplayOn(void)
{
 8000830:	b580      	push	{r7, lr}
 8000832:	af00      	add	r7, sp, #0
  /* Display On */
  ili9341_WriteReg(LCD_DISPLAY_ON);
 8000834:	2029      	movs	r0, #41	@ 0x29
 8000836:	f000 f809 	bl	800084c <ili9341_WriteReg>
}
 800083a:	bf00      	nop
 800083c:	bd80      	pop	{r7, pc}

0800083e <ili9341_DisplayOff>:
  * @brief  Disables the Display.
  * @param  None
  * @retval None
  */
void ili9341_DisplayOff(void)
{
 800083e:	b580      	push	{r7, lr}
 8000840:	af00      	add	r7, sp, #0
  /* Display Off */
  ili9341_WriteReg(LCD_DISPLAY_OFF);
 8000842:	2028      	movs	r0, #40	@ 0x28
 8000844:	f000 f802 	bl	800084c <ili9341_WriteReg>
}
 8000848:	bf00      	nop
 800084a:	bd80      	pop	{r7, pc}

0800084c <ili9341_WriteReg>:
  * @brief  Writes  to the selected LCD register.
  * @param  LCD_Reg: address of the selected register.
  * @retval None
  */
void ili9341_WriteReg(uint8_t LCD_Reg)
{
 800084c:	b580      	push	{r7, lr}
 800084e:	b082      	sub	sp, #8
 8000850:	af00      	add	r7, sp, #0
 8000852:	4603      	mov	r3, r0
 8000854:	71fb      	strb	r3, [r7, #7]
  LCD_IO_WriteReg(LCD_Reg);
 8000856:	79fb      	ldrb	r3, [r7, #7]
 8000858:	4618      	mov	r0, r3
 800085a:	f000 fdb7 	bl	80013cc <LCD_IO_WriteReg>
}
 800085e:	bf00      	nop
 8000860:	3708      	adds	r7, #8
 8000862:	46bd      	mov	sp, r7
 8000864:	bd80      	pop	{r7, pc}

08000866 <ili9341_WriteData>:
  * @brief  Writes data to the selected LCD register.
  * @param  LCD_Reg: address of the selected register.
  * @retval None
  */
void ili9341_WriteData(uint16_t RegValue)
{
 8000866:	b580      	push	{r7, lr}
 8000868:	b082      	sub	sp, #8
 800086a:	af00      	add	r7, sp, #0
 800086c:	4603      	mov	r3, r0
 800086e:	80fb      	strh	r3, [r7, #6]
  LCD_IO_WriteData(RegValue);
 8000870:	88fb      	ldrh	r3, [r7, #6]
 8000872:	4618      	mov	r0, r3
 8000874:	f000 fd88 	bl	8001388 <LCD_IO_WriteData>
}
 8000878:	bf00      	nop
 800087a:	3708      	adds	r7, #8
 800087c:	46bd      	mov	sp, r7
 800087e:	bd80      	pop	{r7, pc}

08000880 <ili9341_ReadData>:
  * @param  RegValue: Address of the register to read
  * @param  ReadSize: Number of bytes to read
  * @retval LCD Register Value.
  */
uint32_t ili9341_ReadData(uint16_t RegValue, uint8_t ReadSize)
{
 8000880:	b580      	push	{r7, lr}
 8000882:	b082      	sub	sp, #8
 8000884:	af00      	add	r7, sp, #0
 8000886:	4603      	mov	r3, r0
 8000888:	460a      	mov	r2, r1
 800088a:	80fb      	strh	r3, [r7, #6]
 800088c:	4613      	mov	r3, r2
 800088e:	717b      	strb	r3, [r7, #5]
  /* Read a max of 4 bytes */
  return (LCD_IO_ReadData(RegValue, ReadSize));
 8000890:	797a      	ldrb	r2, [r7, #5]
 8000892:	88fb      	ldrh	r3, [r7, #6]
 8000894:	4611      	mov	r1, r2
 8000896:	4618      	mov	r0, r3
 8000898:	f000 fdba 	bl	8001410 <LCD_IO_ReadData>
 800089c:	4603      	mov	r3, r0
}
 800089e:	4618      	mov	r0, r3
 80008a0:	3708      	adds	r7, #8
 80008a2:	46bd      	mov	sp, r7
 80008a4:	bd80      	pop	{r7, pc}

080008a6 <ili9341_GetLcdPixelWidth>:
  * @brief  Get LCD PIXEL WIDTH.
  * @param  None
  * @retval LCD PIXEL WIDTH.
  */
uint16_t ili9341_GetLcdPixelWidth(void)
{
 80008a6:	b480      	push	{r7}
 80008a8:	af00      	add	r7, sp, #0
  /* Return LCD PIXEL WIDTH */
  return ILI9341_LCD_PIXEL_WIDTH;
 80008aa:	23f0      	movs	r3, #240	@ 0xf0
}
 80008ac:	4618      	mov	r0, r3
 80008ae:	46bd      	mov	sp, r7
 80008b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008b4:	4770      	bx	lr

080008b6 <ili9341_GetLcdPixelHeight>:
  * @brief  Get LCD PIXEL HEIGHT.
  * @param  None
  * @retval LCD PIXEL HEIGHT.
  */
uint16_t ili9341_GetLcdPixelHeight(void)
{
 80008b6:	b480      	push	{r7}
 80008b8:	af00      	add	r7, sp, #0
  /* Return LCD PIXEL HEIGHT */
  return ILI9341_LCD_PIXEL_HEIGHT;
 80008ba:	f44f 73a0 	mov.w	r3, #320	@ 0x140
}
 80008be:	4618      	mov	r0, r3
 80008c0:	46bd      	mov	sp, r7
 80008c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008c6:	4770      	bx	lr

080008c8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80008c8:	b5b0      	push	{r4, r5, r7, lr}
 80008ca:	b088      	sub	sp, #32
 80008cc:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80008ce:	f001 fd5d 	bl	800238c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80008d2:	f000 f82d 	bl	8000930 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80008d6:	f000 fad3 	bl	8000e80 <MX_GPIO_Init>
  MX_CRC_Init();
 80008da:	f000 f89b 	bl	8000a14 <MX_CRC_Init>
  MX_DMA2D_Init();
 80008de:	f000 f8ad 	bl	8000a3c <MX_DMA2D_Init>
  MX_FMC_Init();
 80008e2:	f000 fa7d 	bl	8000de0 <MX_FMC_Init>
  MX_I2C3_Init();
 80008e6:	f000 f8db 	bl	8000aa0 <MX_I2C3_Init>
  MX_LTDC_Init();
 80008ea:	f000 f919 	bl	8000b20 <MX_LTDC_Init>
  MX_SPI5_Init();
 80008ee:	f000 f9c7 	bl	8000c80 <MX_SPI5_Init>
  MX_TIM1_Init();
 80008f2:	f000 f9fb 	bl	8000cec <MX_TIM1_Init>
  MX_USART1_UART_Init();
 80008f6:	f000 fa49 	bl	8000d8c <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  BSP_LCD_Init();
 80008fa:	f000 fdc7 	bl	800148c <BSP_LCD_Init>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 4096);
 80008fe:	4b0a      	ldr	r3, [pc, #40]	@ (8000928 <main+0x60>)
 8000900:	1d3c      	adds	r4, r7, #4
 8000902:	461d      	mov	r5, r3
 8000904:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000906:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000908:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800090c:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 8000910:	1d3b      	adds	r3, r7, #4
 8000912:	2100      	movs	r1, #0
 8000914:	4618      	mov	r0, r3
 8000916:	f005 ff64 	bl	80067e2 <osThreadCreate>
 800091a:	4603      	mov	r3, r0
 800091c:	4a03      	ldr	r2, [pc, #12]	@ (800092c <main+0x64>)
 800091e:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 8000920:	f005 ff58 	bl	80067d4 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000924:	bf00      	nop
 8000926:	e7fd      	b.n	8000924 <main+0x5c>
 8000928:	08007d4c 	.word	0x08007d4c
 800092c:	2000052c 	.word	0x2000052c

08000930 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000930:	b580      	push	{r7, lr}
 8000932:	b094      	sub	sp, #80	@ 0x50
 8000934:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000936:	f107 0320 	add.w	r3, r7, #32
 800093a:	2230      	movs	r2, #48	@ 0x30
 800093c:	2100      	movs	r1, #0
 800093e:	4618      	mov	r0, r3
 8000940:	f007 f9c6 	bl	8007cd0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000944:	f107 030c 	add.w	r3, r7, #12
 8000948:	2200      	movs	r2, #0
 800094a:	601a      	str	r2, [r3, #0]
 800094c:	605a      	str	r2, [r3, #4]
 800094e:	609a      	str	r2, [r3, #8]
 8000950:	60da      	str	r2, [r3, #12]
 8000952:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000954:	2300      	movs	r3, #0
 8000956:	60bb      	str	r3, [r7, #8]
 8000958:	4b2c      	ldr	r3, [pc, #176]	@ (8000a0c <SystemClock_Config+0xdc>)
 800095a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800095c:	4a2b      	ldr	r2, [pc, #172]	@ (8000a0c <SystemClock_Config+0xdc>)
 800095e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000962:	6413      	str	r3, [r2, #64]	@ 0x40
 8000964:	4b29      	ldr	r3, [pc, #164]	@ (8000a0c <SystemClock_Config+0xdc>)
 8000966:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000968:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800096c:	60bb      	str	r3, [r7, #8]
 800096e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000970:	2300      	movs	r3, #0
 8000972:	607b      	str	r3, [r7, #4]
 8000974:	4b26      	ldr	r3, [pc, #152]	@ (8000a10 <SystemClock_Config+0xe0>)
 8000976:	681b      	ldr	r3, [r3, #0]
 8000978:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 800097c:	4a24      	ldr	r2, [pc, #144]	@ (8000a10 <SystemClock_Config+0xe0>)
 800097e:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000982:	6013      	str	r3, [r2, #0]
 8000984:	4b22      	ldr	r3, [pc, #136]	@ (8000a10 <SystemClock_Config+0xe0>)
 8000986:	681b      	ldr	r3, [r3, #0]
 8000988:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 800098c:	607b      	str	r3, [r7, #4]
 800098e:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000990:	2301      	movs	r3, #1
 8000992:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000994:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000998:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800099a:	2302      	movs	r3, #2
 800099c:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800099e:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 80009a2:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 80009a4:	2308      	movs	r3, #8
 80009a6:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 180;
 80009a8:	23b4      	movs	r3, #180	@ 0xb4
 80009aa:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80009ac:	2302      	movs	r3, #2
 80009ae:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 3;
 80009b0:	2303      	movs	r3, #3
 80009b2:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80009b4:	f107 0320 	add.w	r3, r7, #32
 80009b8:	4618      	mov	r0, r3
 80009ba:	f003 f97d 	bl	8003cb8 <HAL_RCC_OscConfig>
 80009be:	4603      	mov	r3, r0
 80009c0:	2b00      	cmp	r3, #0
 80009c2:	d001      	beq.n	80009c8 <SystemClock_Config+0x98>
  {
    Error_Handler();
 80009c4:	f000 fba4 	bl	8001110 <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 80009c8:	f003 f926 	bl	8003c18 <HAL_PWREx_EnableOverDrive>
 80009cc:	4603      	mov	r3, r0
 80009ce:	2b00      	cmp	r3, #0
 80009d0:	d001      	beq.n	80009d6 <SystemClock_Config+0xa6>
  {
    Error_Handler();
 80009d2:	f000 fb9d 	bl	8001110 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80009d6:	230f      	movs	r3, #15
 80009d8:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80009da:	2302      	movs	r3, #2
 80009dc:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80009de:	2300      	movs	r3, #0
 80009e0:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80009e2:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80009e6:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80009e8:	2300      	movs	r3, #0
 80009ea:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80009ec:	f107 030c 	add.w	r3, r7, #12
 80009f0:	2102      	movs	r1, #2
 80009f2:	4618      	mov	r0, r3
 80009f4:	f003 fbd8 	bl	80041a8 <HAL_RCC_ClockConfig>
 80009f8:	4603      	mov	r3, r0
 80009fa:	2b00      	cmp	r3, #0
 80009fc:	d001      	beq.n	8000a02 <SystemClock_Config+0xd2>
  {
    Error_Handler();
 80009fe:	f000 fb87 	bl	8001110 <Error_Handler>
  }
}
 8000a02:	bf00      	nop
 8000a04:	3750      	adds	r7, #80	@ 0x50
 8000a06:	46bd      	mov	sp, r7
 8000a08:	bd80      	pop	{r7, pc}
 8000a0a:	bf00      	nop
 8000a0c:	40023800 	.word	0x40023800
 8000a10:	40007000 	.word	0x40007000

08000a14 <MX_CRC_Init>:
  * @brief CRC Initialization Function
  * @param None
  * @retval None
  */
static void MX_CRC_Init(void)
{
 8000a14:	b580      	push	{r7, lr}
 8000a16:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 8000a18:	4b06      	ldr	r3, [pc, #24]	@ (8000a34 <MX_CRC_Init+0x20>)
 8000a1a:	4a07      	ldr	r2, [pc, #28]	@ (8000a38 <MX_CRC_Init+0x24>)
 8000a1c:	601a      	str	r2, [r3, #0]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 8000a1e:	4805      	ldr	r0, [pc, #20]	@ (8000a34 <MX_CRC_Init+0x20>)
 8000a20:	f001 fdfc 	bl	800261c <HAL_CRC_Init>
 8000a24:	4603      	mov	r3, r0
 8000a26:	2b00      	cmp	r3, #0
 8000a28:	d001      	beq.n	8000a2e <MX_CRC_Init+0x1a>
  {
    Error_Handler();
 8000a2a:	f000 fb71 	bl	8001110 <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 8000a2e:	bf00      	nop
 8000a30:	bd80      	pop	{r7, pc}
 8000a32:	bf00      	nop
 8000a34:	200002cc 	.word	0x200002cc
 8000a38:	40023000 	.word	0x40023000

08000a3c <MX_DMA2D_Init>:
  * @brief DMA2D Initialization Function
  * @param None
  * @retval None
  */
static void MX_DMA2D_Init(void)
{
 8000a3c:	b580      	push	{r7, lr}
 8000a3e:	af00      	add	r7, sp, #0
  /* USER CODE END DMA2D_Init 0 */

  /* USER CODE BEGIN DMA2D_Init 1 */

  /* USER CODE END DMA2D_Init 1 */
  hdma2d.Instance = DMA2D;
 8000a40:	4b15      	ldr	r3, [pc, #84]	@ (8000a98 <MX_DMA2D_Init+0x5c>)
 8000a42:	4a16      	ldr	r2, [pc, #88]	@ (8000a9c <MX_DMA2D_Init+0x60>)
 8000a44:	601a      	str	r2, [r3, #0]
  hdma2d.Init.Mode = DMA2D_M2M;
 8000a46:	4b14      	ldr	r3, [pc, #80]	@ (8000a98 <MX_DMA2D_Init+0x5c>)
 8000a48:	2200      	movs	r2, #0
 8000a4a:	605a      	str	r2, [r3, #4]
  hdma2d.Init.ColorMode = DMA2D_OUTPUT_RGB565;
 8000a4c:	4b12      	ldr	r3, [pc, #72]	@ (8000a98 <MX_DMA2D_Init+0x5c>)
 8000a4e:	2202      	movs	r2, #2
 8000a50:	609a      	str	r2, [r3, #8]
  hdma2d.Init.OutputOffset = 0;
 8000a52:	4b11      	ldr	r3, [pc, #68]	@ (8000a98 <MX_DMA2D_Init+0x5c>)
 8000a54:	2200      	movs	r2, #0
 8000a56:	60da      	str	r2, [r3, #12]
  hdma2d.LayerCfg[1].InputOffset = 0;
 8000a58:	4b0f      	ldr	r3, [pc, #60]	@ (8000a98 <MX_DMA2D_Init+0x5c>)
 8000a5a:	2200      	movs	r2, #0
 8000a5c:	629a      	str	r2, [r3, #40]	@ 0x28
  hdma2d.LayerCfg[1].InputColorMode = DMA2D_INPUT_RGB565;
 8000a5e:	4b0e      	ldr	r3, [pc, #56]	@ (8000a98 <MX_DMA2D_Init+0x5c>)
 8000a60:	2202      	movs	r2, #2
 8000a62:	62da      	str	r2, [r3, #44]	@ 0x2c
  hdma2d.LayerCfg[1].AlphaMode = DMA2D_NO_MODIF_ALPHA;
 8000a64:	4b0c      	ldr	r3, [pc, #48]	@ (8000a98 <MX_DMA2D_Init+0x5c>)
 8000a66:	2200      	movs	r2, #0
 8000a68:	631a      	str	r2, [r3, #48]	@ 0x30
  hdma2d.LayerCfg[1].InputAlpha = 0;
 8000a6a:	4b0b      	ldr	r3, [pc, #44]	@ (8000a98 <MX_DMA2D_Init+0x5c>)
 8000a6c:	2200      	movs	r2, #0
 8000a6e:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_DMA2D_Init(&hdma2d) != HAL_OK)
 8000a70:	4809      	ldr	r0, [pc, #36]	@ (8000a98 <MX_DMA2D_Init+0x5c>)
 8000a72:	f001 ffad 	bl	80029d0 <HAL_DMA2D_Init>
 8000a76:	4603      	mov	r3, r0
 8000a78:	2b00      	cmp	r3, #0
 8000a7a:	d001      	beq.n	8000a80 <MX_DMA2D_Init+0x44>
  {
    Error_Handler();
 8000a7c:	f000 fb48 	bl	8001110 <Error_Handler>
  }
  if (HAL_DMA2D_ConfigLayer(&hdma2d, 1) != HAL_OK)
 8000a80:	2101      	movs	r1, #1
 8000a82:	4805      	ldr	r0, [pc, #20]	@ (8000a98 <MX_DMA2D_Init+0x5c>)
 8000a84:	f002 f8fe 	bl	8002c84 <HAL_DMA2D_ConfigLayer>
 8000a88:	4603      	mov	r3, r0
 8000a8a:	2b00      	cmp	r3, #0
 8000a8c:	d001      	beq.n	8000a92 <MX_DMA2D_Init+0x56>
  {
    Error_Handler();
 8000a8e:	f000 fb3f 	bl	8001110 <Error_Handler>
  }
  /* USER CODE BEGIN DMA2D_Init 2 */

  /* USER CODE END DMA2D_Init 2 */

}
 8000a92:	bf00      	nop
 8000a94:	bd80      	pop	{r7, pc}
 8000a96:	bf00      	nop
 8000a98:	200002d4 	.word	0x200002d4
 8000a9c:	4002b000 	.word	0x4002b000

08000aa0 <MX_I2C3_Init>:
  * @brief I2C3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C3_Init(void)
{
 8000aa0:	b580      	push	{r7, lr}
 8000aa2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 8000aa4:	4b1b      	ldr	r3, [pc, #108]	@ (8000b14 <MX_I2C3_Init+0x74>)
 8000aa6:	4a1c      	ldr	r2, [pc, #112]	@ (8000b18 <MX_I2C3_Init+0x78>)
 8000aa8:	601a      	str	r2, [r3, #0]
  hi2c3.Init.ClockSpeed = 100000;
 8000aaa:	4b1a      	ldr	r3, [pc, #104]	@ (8000b14 <MX_I2C3_Init+0x74>)
 8000aac:	4a1b      	ldr	r2, [pc, #108]	@ (8000b1c <MX_I2C3_Init+0x7c>)
 8000aae:	605a      	str	r2, [r3, #4]
  hi2c3.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000ab0:	4b18      	ldr	r3, [pc, #96]	@ (8000b14 <MX_I2C3_Init+0x74>)
 8000ab2:	2200      	movs	r2, #0
 8000ab4:	609a      	str	r2, [r3, #8]
  hi2c3.Init.OwnAddress1 = 0;
 8000ab6:	4b17      	ldr	r3, [pc, #92]	@ (8000b14 <MX_I2C3_Init+0x74>)
 8000ab8:	2200      	movs	r2, #0
 8000aba:	60da      	str	r2, [r3, #12]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000abc:	4b15      	ldr	r3, [pc, #84]	@ (8000b14 <MX_I2C3_Init+0x74>)
 8000abe:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8000ac2:	611a      	str	r2, [r3, #16]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000ac4:	4b13      	ldr	r3, [pc, #76]	@ (8000b14 <MX_I2C3_Init+0x74>)
 8000ac6:	2200      	movs	r2, #0
 8000ac8:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2 = 0;
 8000aca:	4b12      	ldr	r3, [pc, #72]	@ (8000b14 <MX_I2C3_Init+0x74>)
 8000acc:	2200      	movs	r2, #0
 8000ace:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000ad0:	4b10      	ldr	r3, [pc, #64]	@ (8000b14 <MX_I2C3_Init+0x74>)
 8000ad2:	2200      	movs	r2, #0
 8000ad4:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000ad6:	4b0f      	ldr	r3, [pc, #60]	@ (8000b14 <MX_I2C3_Init+0x74>)
 8000ad8:	2200      	movs	r2, #0
 8000ada:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 8000adc:	480d      	ldr	r0, [pc, #52]	@ (8000b14 <MX_I2C3_Init+0x74>)
 8000ade:	f002 fc35 	bl	800334c <HAL_I2C_Init>
 8000ae2:	4603      	mov	r3, r0
 8000ae4:	2b00      	cmp	r3, #0
 8000ae6:	d001      	beq.n	8000aec <MX_I2C3_Init+0x4c>
  {
    Error_Handler();
 8000ae8:	f000 fb12 	bl	8001110 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c3, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000aec:	2100      	movs	r1, #0
 8000aee:	4809      	ldr	r0, [pc, #36]	@ (8000b14 <MX_I2C3_Init+0x74>)
 8000af0:	f002 fd70 	bl	80035d4 <HAL_I2CEx_ConfigAnalogFilter>
 8000af4:	4603      	mov	r3, r0
 8000af6:	2b00      	cmp	r3, #0
 8000af8:	d001      	beq.n	8000afe <MX_I2C3_Init+0x5e>
  {
    Error_Handler();
 8000afa:	f000 fb09 	bl	8001110 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c3, 0) != HAL_OK)
 8000afe:	2100      	movs	r1, #0
 8000b00:	4804      	ldr	r0, [pc, #16]	@ (8000b14 <MX_I2C3_Init+0x74>)
 8000b02:	f002 fda3 	bl	800364c <HAL_I2CEx_ConfigDigitalFilter>
 8000b06:	4603      	mov	r3, r0
 8000b08:	2b00      	cmp	r3, #0
 8000b0a:	d001      	beq.n	8000b10 <MX_I2C3_Init+0x70>
  {
    Error_Handler();
 8000b0c:	f000 fb00 	bl	8001110 <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 8000b10:	bf00      	nop
 8000b12:	bd80      	pop	{r7, pc}
 8000b14:	20000314 	.word	0x20000314
 8000b18:	40005c00 	.word	0x40005c00
 8000b1c:	000186a0 	.word	0x000186a0

08000b20 <MX_LTDC_Init>:
  * @brief LTDC Initialization Function
  * @param None
  * @retval None
  */
static void MX_LTDC_Init(void)
{
 8000b20:	b580      	push	{r7, lr}
 8000b22:	b09a      	sub	sp, #104	@ 0x68
 8000b24:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN LTDC_Init 0 */

  /* USER CODE END LTDC_Init 0 */

  LTDC_LayerCfgTypeDef pLayerCfg = {0};
 8000b26:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8000b2a:	2234      	movs	r2, #52	@ 0x34
 8000b2c:	2100      	movs	r1, #0
 8000b2e:	4618      	mov	r0, r3
 8000b30:	f007 f8ce 	bl	8007cd0 <memset>
  LTDC_LayerCfgTypeDef pLayerCfg1 = {0};
 8000b34:	463b      	mov	r3, r7
 8000b36:	2234      	movs	r2, #52	@ 0x34
 8000b38:	2100      	movs	r1, #0
 8000b3a:	4618      	mov	r0, r3
 8000b3c:	f007 f8c8 	bl	8007cd0 <memset>

  /* USER CODE BEGIN LTDC_Init 1 */

  /* USER CODE END LTDC_Init 1 */
  hltdc.Instance = LTDC;
 8000b40:	4b4d      	ldr	r3, [pc, #308]	@ (8000c78 <MX_LTDC_Init+0x158>)
 8000b42:	4a4e      	ldr	r2, [pc, #312]	@ (8000c7c <MX_LTDC_Init+0x15c>)
 8000b44:	601a      	str	r2, [r3, #0]
  hltdc.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 8000b46:	4b4c      	ldr	r3, [pc, #304]	@ (8000c78 <MX_LTDC_Init+0x158>)
 8000b48:	2200      	movs	r2, #0
 8000b4a:	605a      	str	r2, [r3, #4]
  hltdc.Init.VSPolarity = LTDC_VSPOLARITY_AL;
 8000b4c:	4b4a      	ldr	r3, [pc, #296]	@ (8000c78 <MX_LTDC_Init+0x158>)
 8000b4e:	2200      	movs	r2, #0
 8000b50:	609a      	str	r2, [r3, #8]
  hltdc.Init.DEPolarity = LTDC_DEPOLARITY_AL;
 8000b52:	4b49      	ldr	r3, [pc, #292]	@ (8000c78 <MX_LTDC_Init+0x158>)
 8000b54:	2200      	movs	r2, #0
 8000b56:	60da      	str	r2, [r3, #12]
  hltdc.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 8000b58:	4b47      	ldr	r3, [pc, #284]	@ (8000c78 <MX_LTDC_Init+0x158>)
 8000b5a:	2200      	movs	r2, #0
 8000b5c:	611a      	str	r2, [r3, #16]
  hltdc.Init.HorizontalSync = 7;
 8000b5e:	4b46      	ldr	r3, [pc, #280]	@ (8000c78 <MX_LTDC_Init+0x158>)
 8000b60:	2207      	movs	r2, #7
 8000b62:	615a      	str	r2, [r3, #20]
  hltdc.Init.VerticalSync = 3;
 8000b64:	4b44      	ldr	r3, [pc, #272]	@ (8000c78 <MX_LTDC_Init+0x158>)
 8000b66:	2203      	movs	r2, #3
 8000b68:	619a      	str	r2, [r3, #24]
  hltdc.Init.AccumulatedHBP = 14;
 8000b6a:	4b43      	ldr	r3, [pc, #268]	@ (8000c78 <MX_LTDC_Init+0x158>)
 8000b6c:	220e      	movs	r2, #14
 8000b6e:	61da      	str	r2, [r3, #28]
  hltdc.Init.AccumulatedVBP = 5;
 8000b70:	4b41      	ldr	r3, [pc, #260]	@ (8000c78 <MX_LTDC_Init+0x158>)
 8000b72:	2205      	movs	r2, #5
 8000b74:	621a      	str	r2, [r3, #32]
  hltdc.Init.AccumulatedActiveW = 334;
 8000b76:	4b40      	ldr	r3, [pc, #256]	@ (8000c78 <MX_LTDC_Init+0x158>)
 8000b78:	f44f 72a7 	mov.w	r2, #334	@ 0x14e
 8000b7c:	625a      	str	r2, [r3, #36]	@ 0x24
  hltdc.Init.AccumulatedActiveH = 245;
 8000b7e:	4b3e      	ldr	r3, [pc, #248]	@ (8000c78 <MX_LTDC_Init+0x158>)
 8000b80:	22f5      	movs	r2, #245	@ 0xf5
 8000b82:	629a      	str	r2, [r3, #40]	@ 0x28
  hltdc.Init.TotalWidth = 340;
 8000b84:	4b3c      	ldr	r3, [pc, #240]	@ (8000c78 <MX_LTDC_Init+0x158>)
 8000b86:	f44f 72aa 	mov.w	r2, #340	@ 0x154
 8000b8a:	62da      	str	r2, [r3, #44]	@ 0x2c
  hltdc.Init.TotalHeigh = 247;
 8000b8c:	4b3a      	ldr	r3, [pc, #232]	@ (8000c78 <MX_LTDC_Init+0x158>)
 8000b8e:	22f7      	movs	r2, #247	@ 0xf7
 8000b90:	631a      	str	r2, [r3, #48]	@ 0x30
  hltdc.Init.Backcolor.Blue = 0;
 8000b92:	4b39      	ldr	r3, [pc, #228]	@ (8000c78 <MX_LTDC_Init+0x158>)
 8000b94:	2200      	movs	r2, #0
 8000b96:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  hltdc.Init.Backcolor.Green = 0;
 8000b9a:	4b37      	ldr	r3, [pc, #220]	@ (8000c78 <MX_LTDC_Init+0x158>)
 8000b9c:	2200      	movs	r2, #0
 8000b9e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
  hltdc.Init.Backcolor.Red = 0;
 8000ba2:	4b35      	ldr	r3, [pc, #212]	@ (8000c78 <MX_LTDC_Init+0x158>)
 8000ba4:	2200      	movs	r2, #0
 8000ba6:	f883 2036 	strb.w	r2, [r3, #54]	@ 0x36
  if (HAL_LTDC_Init(&hltdc) != HAL_OK)
 8000baa:	4833      	ldr	r0, [pc, #204]	@ (8000c78 <MX_LTDC_Init+0x158>)
 8000bac:	f002 fd8e 	bl	80036cc <HAL_LTDC_Init>
 8000bb0:	4603      	mov	r3, r0
 8000bb2:	2b00      	cmp	r3, #0
 8000bb4:	d001      	beq.n	8000bba <MX_LTDC_Init+0x9a>
  {
    Error_Handler();
 8000bb6:	f000 faab 	bl	8001110 <Error_Handler>
  }
  pLayerCfg.WindowX0 = 0;
 8000bba:	2300      	movs	r3, #0
 8000bbc:	637b      	str	r3, [r7, #52]	@ 0x34
  pLayerCfg.WindowX1 = 0;
 8000bbe:	2300      	movs	r3, #0
 8000bc0:	63bb      	str	r3, [r7, #56]	@ 0x38
  pLayerCfg.WindowY0 = 0;
 8000bc2:	2300      	movs	r3, #0
 8000bc4:	63fb      	str	r3, [r7, #60]	@ 0x3c
  pLayerCfg.WindowY1 = 0;
 8000bc6:	2300      	movs	r3, #0
 8000bc8:	643b      	str	r3, [r7, #64]	@ 0x40
  pLayerCfg.PixelFormat = LTDC_PIXEL_FORMAT_RGB565;
 8000bca:	2302      	movs	r3, #2
 8000bcc:	647b      	str	r3, [r7, #68]	@ 0x44
  pLayerCfg.Alpha = 0;
 8000bce:	2300      	movs	r3, #0
 8000bd0:	64bb      	str	r3, [r7, #72]	@ 0x48
  pLayerCfg.Alpha0 = 0;
 8000bd2:	2300      	movs	r3, #0
 8000bd4:	64fb      	str	r3, [r7, #76]	@ 0x4c
  pLayerCfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_CA;
 8000bd6:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000bda:	653b      	str	r3, [r7, #80]	@ 0x50
  pLayerCfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_CA;
 8000bdc:	2305      	movs	r3, #5
 8000bde:	657b      	str	r3, [r7, #84]	@ 0x54
  pLayerCfg.FBStartAdress = 0;
 8000be0:	2300      	movs	r3, #0
 8000be2:	65bb      	str	r3, [r7, #88]	@ 0x58
  pLayerCfg.ImageWidth = 0;
 8000be4:	2300      	movs	r3, #0
 8000be6:	65fb      	str	r3, [r7, #92]	@ 0x5c
  pLayerCfg.ImageHeight = 0;
 8000be8:	2300      	movs	r3, #0
 8000bea:	663b      	str	r3, [r7, #96]	@ 0x60
  pLayerCfg.Backcolor.Blue = 0;
 8000bec:	2300      	movs	r3, #0
 8000bee:	f887 3064 	strb.w	r3, [r7, #100]	@ 0x64
  pLayerCfg.Backcolor.Green = 0;
 8000bf2:	2300      	movs	r3, #0
 8000bf4:	f887 3065 	strb.w	r3, [r7, #101]	@ 0x65
  pLayerCfg.Backcolor.Red = 0;
 8000bf8:	2300      	movs	r3, #0
 8000bfa:	f887 3066 	strb.w	r3, [r7, #102]	@ 0x66
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg, 0) != HAL_OK)
 8000bfe:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8000c02:	2200      	movs	r2, #0
 8000c04:	4619      	mov	r1, r3
 8000c06:	481c      	ldr	r0, [pc, #112]	@ (8000c78 <MX_LTDC_Init+0x158>)
 8000c08:	f002 fe30 	bl	800386c <HAL_LTDC_ConfigLayer>
 8000c0c:	4603      	mov	r3, r0
 8000c0e:	2b00      	cmp	r3, #0
 8000c10:	d001      	beq.n	8000c16 <MX_LTDC_Init+0xf6>
  {
    Error_Handler();
 8000c12:	f000 fa7d 	bl	8001110 <Error_Handler>
  }
  pLayerCfg1.WindowX0 = 0;
 8000c16:	2300      	movs	r3, #0
 8000c18:	603b      	str	r3, [r7, #0]
  pLayerCfg1.WindowX1 = 0;
 8000c1a:	2300      	movs	r3, #0
 8000c1c:	607b      	str	r3, [r7, #4]
  pLayerCfg1.WindowY0 = 0;
 8000c1e:	2300      	movs	r3, #0
 8000c20:	60bb      	str	r3, [r7, #8]
  pLayerCfg1.WindowY1 = 0;
 8000c22:	2300      	movs	r3, #0
 8000c24:	60fb      	str	r3, [r7, #12]
  pLayerCfg1.PixelFormat = LTDC_PIXEL_FORMAT_RGB565;
 8000c26:	2302      	movs	r3, #2
 8000c28:	613b      	str	r3, [r7, #16]
  pLayerCfg1.Alpha = 0;
 8000c2a:	2300      	movs	r3, #0
 8000c2c:	617b      	str	r3, [r7, #20]
  pLayerCfg1.Alpha0 = 0;
 8000c2e:	2300      	movs	r3, #0
 8000c30:	61bb      	str	r3, [r7, #24]
  pLayerCfg1.BlendingFactor1 = LTDC_BLENDING_FACTOR1_CA;
 8000c32:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000c36:	61fb      	str	r3, [r7, #28]
  pLayerCfg1.BlendingFactor2 = LTDC_BLENDING_FACTOR2_CA;
 8000c38:	2305      	movs	r3, #5
 8000c3a:	623b      	str	r3, [r7, #32]
  pLayerCfg1.FBStartAdress = 0;
 8000c3c:	2300      	movs	r3, #0
 8000c3e:	627b      	str	r3, [r7, #36]	@ 0x24
  pLayerCfg1.ImageWidth = 0;
 8000c40:	2300      	movs	r3, #0
 8000c42:	62bb      	str	r3, [r7, #40]	@ 0x28
  pLayerCfg1.ImageHeight = 0;
 8000c44:	2300      	movs	r3, #0
 8000c46:	62fb      	str	r3, [r7, #44]	@ 0x2c
  pLayerCfg1.Backcolor.Blue = 0;
 8000c48:	2300      	movs	r3, #0
 8000c4a:	f887 3030 	strb.w	r3, [r7, #48]	@ 0x30
  pLayerCfg1.Backcolor.Green = 0;
 8000c4e:	2300      	movs	r3, #0
 8000c50:	f887 3031 	strb.w	r3, [r7, #49]	@ 0x31
  pLayerCfg1.Backcolor.Red = 0;
 8000c54:	2300      	movs	r3, #0
 8000c56:	f887 3032 	strb.w	r3, [r7, #50]	@ 0x32
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg1, 1) != HAL_OK)
 8000c5a:	463b      	mov	r3, r7
 8000c5c:	2201      	movs	r2, #1
 8000c5e:	4619      	mov	r1, r3
 8000c60:	4805      	ldr	r0, [pc, #20]	@ (8000c78 <MX_LTDC_Init+0x158>)
 8000c62:	f002 fe03 	bl	800386c <HAL_LTDC_ConfigLayer>
 8000c66:	4603      	mov	r3, r0
 8000c68:	2b00      	cmp	r3, #0
 8000c6a:	d001      	beq.n	8000c70 <MX_LTDC_Init+0x150>
  {
    Error_Handler();
 8000c6c:	f000 fa50 	bl	8001110 <Error_Handler>
  }
  /* USER CODE BEGIN LTDC_Init 2 */

  /* USER CODE END LTDC_Init 2 */

}
 8000c70:	bf00      	nop
 8000c72:	3768      	adds	r7, #104	@ 0x68
 8000c74:	46bd      	mov	sp, r7
 8000c76:	bd80      	pop	{r7, pc}
 8000c78:	20000368 	.word	0x20000368
 8000c7c:	40016800 	.word	0x40016800

08000c80 <MX_SPI5_Init>:
  * @brief SPI5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI5_Init(void)
{
 8000c80:	b580      	push	{r7, lr}
 8000c82:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI5_Init 1 */

  /* USER CODE END SPI5_Init 1 */
  /* SPI5 parameter configuration*/
  hspi5.Instance = SPI5;
 8000c84:	4b17      	ldr	r3, [pc, #92]	@ (8000ce4 <MX_SPI5_Init+0x64>)
 8000c86:	4a18      	ldr	r2, [pc, #96]	@ (8000ce8 <MX_SPI5_Init+0x68>)
 8000c88:	601a      	str	r2, [r3, #0]
  hspi5.Init.Mode = SPI_MODE_MASTER;
 8000c8a:	4b16      	ldr	r3, [pc, #88]	@ (8000ce4 <MX_SPI5_Init+0x64>)
 8000c8c:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8000c90:	605a      	str	r2, [r3, #4]
  hspi5.Init.Direction = SPI_DIRECTION_2LINES;
 8000c92:	4b14      	ldr	r3, [pc, #80]	@ (8000ce4 <MX_SPI5_Init+0x64>)
 8000c94:	2200      	movs	r2, #0
 8000c96:	609a      	str	r2, [r3, #8]
  hspi5.Init.DataSize = SPI_DATASIZE_8BIT;
 8000c98:	4b12      	ldr	r3, [pc, #72]	@ (8000ce4 <MX_SPI5_Init+0x64>)
 8000c9a:	2200      	movs	r2, #0
 8000c9c:	60da      	str	r2, [r3, #12]
  hspi5.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000c9e:	4b11      	ldr	r3, [pc, #68]	@ (8000ce4 <MX_SPI5_Init+0x64>)
 8000ca0:	2200      	movs	r2, #0
 8000ca2:	611a      	str	r2, [r3, #16]
  hspi5.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000ca4:	4b0f      	ldr	r3, [pc, #60]	@ (8000ce4 <MX_SPI5_Init+0x64>)
 8000ca6:	2200      	movs	r2, #0
 8000ca8:	615a      	str	r2, [r3, #20]
  hspi5.Init.NSS = SPI_NSS_SOFT;
 8000caa:	4b0e      	ldr	r3, [pc, #56]	@ (8000ce4 <MX_SPI5_Init+0x64>)
 8000cac:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000cb0:	619a      	str	r2, [r3, #24]
  hspi5.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8000cb2:	4b0c      	ldr	r3, [pc, #48]	@ (8000ce4 <MX_SPI5_Init+0x64>)
 8000cb4:	2218      	movs	r2, #24
 8000cb6:	61da      	str	r2, [r3, #28]
  hspi5.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000cb8:	4b0a      	ldr	r3, [pc, #40]	@ (8000ce4 <MX_SPI5_Init+0x64>)
 8000cba:	2200      	movs	r2, #0
 8000cbc:	621a      	str	r2, [r3, #32]
  hspi5.Init.TIMode = SPI_TIMODE_DISABLE;
 8000cbe:	4b09      	ldr	r3, [pc, #36]	@ (8000ce4 <MX_SPI5_Init+0x64>)
 8000cc0:	2200      	movs	r2, #0
 8000cc2:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi5.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000cc4:	4b07      	ldr	r3, [pc, #28]	@ (8000ce4 <MX_SPI5_Init+0x64>)
 8000cc6:	2200      	movs	r2, #0
 8000cc8:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi5.Init.CRCPolynomial = 10;
 8000cca:	4b06      	ldr	r3, [pc, #24]	@ (8000ce4 <MX_SPI5_Init+0x64>)
 8000ccc:	220a      	movs	r2, #10
 8000cce:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi5) != HAL_OK)
 8000cd0:	4804      	ldr	r0, [pc, #16]	@ (8000ce4 <MX_SPI5_Init+0x64>)
 8000cd2:	f003 ff0c 	bl	8004aee <HAL_SPI_Init>
 8000cd6:	4603      	mov	r3, r0
 8000cd8:	2b00      	cmp	r3, #0
 8000cda:	d001      	beq.n	8000ce0 <MX_SPI5_Init+0x60>
  {
    Error_Handler();
 8000cdc:	f000 fa18 	bl	8001110 <Error_Handler>
  }
  /* USER CODE BEGIN SPI5_Init 2 */

  /* USER CODE END SPI5_Init 2 */

}
 8000ce0:	bf00      	nop
 8000ce2:	bd80      	pop	{r7, pc}
 8000ce4:	20000410 	.word	0x20000410
 8000ce8:	40015000 	.word	0x40015000

08000cec <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000cec:	b580      	push	{r7, lr}
 8000cee:	b086      	sub	sp, #24
 8000cf0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000cf2:	f107 0308 	add.w	r3, r7, #8
 8000cf6:	2200      	movs	r2, #0
 8000cf8:	601a      	str	r2, [r3, #0]
 8000cfa:	605a      	str	r2, [r3, #4]
 8000cfc:	609a      	str	r2, [r3, #8]
 8000cfe:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000d00:	463b      	mov	r3, r7
 8000d02:	2200      	movs	r2, #0
 8000d04:	601a      	str	r2, [r3, #0]
 8000d06:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000d08:	4b1e      	ldr	r3, [pc, #120]	@ (8000d84 <MX_TIM1_Init+0x98>)
 8000d0a:	4a1f      	ldr	r2, [pc, #124]	@ (8000d88 <MX_TIM1_Init+0x9c>)
 8000d0c:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8000d0e:	4b1d      	ldr	r3, [pc, #116]	@ (8000d84 <MX_TIM1_Init+0x98>)
 8000d10:	2200      	movs	r2, #0
 8000d12:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000d14:	4b1b      	ldr	r3, [pc, #108]	@ (8000d84 <MX_TIM1_Init+0x98>)
 8000d16:	2200      	movs	r2, #0
 8000d18:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8000d1a:	4b1a      	ldr	r3, [pc, #104]	@ (8000d84 <MX_TIM1_Init+0x98>)
 8000d1c:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000d20:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000d22:	4b18      	ldr	r3, [pc, #96]	@ (8000d84 <MX_TIM1_Init+0x98>)
 8000d24:	2200      	movs	r2, #0
 8000d26:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000d28:	4b16      	ldr	r3, [pc, #88]	@ (8000d84 <MX_TIM1_Init+0x98>)
 8000d2a:	2200      	movs	r2, #0
 8000d2c:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000d2e:	4b15      	ldr	r3, [pc, #84]	@ (8000d84 <MX_TIM1_Init+0x98>)
 8000d30:	2200      	movs	r2, #0
 8000d32:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000d34:	4813      	ldr	r0, [pc, #76]	@ (8000d84 <MX_TIM1_Init+0x98>)
 8000d36:	f004 fce1 	bl	80056fc <HAL_TIM_Base_Init>
 8000d3a:	4603      	mov	r3, r0
 8000d3c:	2b00      	cmp	r3, #0
 8000d3e:	d001      	beq.n	8000d44 <MX_TIM1_Init+0x58>
  {
    Error_Handler();
 8000d40:	f000 f9e6 	bl	8001110 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000d44:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000d48:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000d4a:	f107 0308 	add.w	r3, r7, #8
 8000d4e:	4619      	mov	r1, r3
 8000d50:	480c      	ldr	r0, [pc, #48]	@ (8000d84 <MX_TIM1_Init+0x98>)
 8000d52:	f004 fe83 	bl	8005a5c <HAL_TIM_ConfigClockSource>
 8000d56:	4603      	mov	r3, r0
 8000d58:	2b00      	cmp	r3, #0
 8000d5a:	d001      	beq.n	8000d60 <MX_TIM1_Init+0x74>
  {
    Error_Handler();
 8000d5c:	f000 f9d8 	bl	8001110 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000d60:	2300      	movs	r3, #0
 8000d62:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000d64:	2300      	movs	r3, #0
 8000d66:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000d68:	463b      	mov	r3, r7
 8000d6a:	4619      	mov	r1, r3
 8000d6c:	4805      	ldr	r0, [pc, #20]	@ (8000d84 <MX_TIM1_Init+0x98>)
 8000d6e:	f005 f8ab 	bl	8005ec8 <HAL_TIMEx_MasterConfigSynchronization>
 8000d72:	4603      	mov	r3, r0
 8000d74:	2b00      	cmp	r3, #0
 8000d76:	d001      	beq.n	8000d7c <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 8000d78:	f000 f9ca 	bl	8001110 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8000d7c:	bf00      	nop
 8000d7e:	3718      	adds	r7, #24
 8000d80:	46bd      	mov	sp, r7
 8000d82:	bd80      	pop	{r7, pc}
 8000d84:	20000468 	.word	0x20000468
 8000d88:	40010000 	.word	0x40010000

08000d8c <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000d8c:	b580      	push	{r7, lr}
 8000d8e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000d90:	4b11      	ldr	r3, [pc, #68]	@ (8000dd8 <MX_USART1_UART_Init+0x4c>)
 8000d92:	4a12      	ldr	r2, [pc, #72]	@ (8000ddc <MX_USART1_UART_Init+0x50>)
 8000d94:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000d96:	4b10      	ldr	r3, [pc, #64]	@ (8000dd8 <MX_USART1_UART_Init+0x4c>)
 8000d98:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000d9c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000d9e:	4b0e      	ldr	r3, [pc, #56]	@ (8000dd8 <MX_USART1_UART_Init+0x4c>)
 8000da0:	2200      	movs	r2, #0
 8000da2:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000da4:	4b0c      	ldr	r3, [pc, #48]	@ (8000dd8 <MX_USART1_UART_Init+0x4c>)
 8000da6:	2200      	movs	r2, #0
 8000da8:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000daa:	4b0b      	ldr	r3, [pc, #44]	@ (8000dd8 <MX_USART1_UART_Init+0x4c>)
 8000dac:	2200      	movs	r2, #0
 8000dae:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000db0:	4b09      	ldr	r3, [pc, #36]	@ (8000dd8 <MX_USART1_UART_Init+0x4c>)
 8000db2:	220c      	movs	r2, #12
 8000db4:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000db6:	4b08      	ldr	r3, [pc, #32]	@ (8000dd8 <MX_USART1_UART_Init+0x4c>)
 8000db8:	2200      	movs	r2, #0
 8000dba:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000dbc:	4b06      	ldr	r3, [pc, #24]	@ (8000dd8 <MX_USART1_UART_Init+0x4c>)
 8000dbe:	2200      	movs	r2, #0
 8000dc0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000dc2:	4805      	ldr	r0, [pc, #20]	@ (8000dd8 <MX_USART1_UART_Init+0x4c>)
 8000dc4:	f005 f910 	bl	8005fe8 <HAL_UART_Init>
 8000dc8:	4603      	mov	r3, r0
 8000dca:	2b00      	cmp	r3, #0
 8000dcc:	d001      	beq.n	8000dd2 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8000dce:	f000 f99f 	bl	8001110 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000dd2:	bf00      	nop
 8000dd4:	bd80      	pop	{r7, pc}
 8000dd6:	bf00      	nop
 8000dd8:	200004b0 	.word	0x200004b0
 8000ddc:	40011000 	.word	0x40011000

08000de0 <MX_FMC_Init>:

/* FMC initialization function */
static void MX_FMC_Init(void)
{
 8000de0:	b580      	push	{r7, lr}
 8000de2:	b088      	sub	sp, #32
 8000de4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN FMC_Init 0 */

  /* USER CODE END FMC_Init 0 */

  FMC_SDRAM_TimingTypeDef SdramTiming = {0};
 8000de6:	1d3b      	adds	r3, r7, #4
 8000de8:	2200      	movs	r2, #0
 8000dea:	601a      	str	r2, [r3, #0]
 8000dec:	605a      	str	r2, [r3, #4]
 8000dee:	609a      	str	r2, [r3, #8]
 8000df0:	60da      	str	r2, [r3, #12]
 8000df2:	611a      	str	r2, [r3, #16]
 8000df4:	615a      	str	r2, [r3, #20]
 8000df6:	619a      	str	r2, [r3, #24]

  /* USER CODE END FMC_Init 1 */

  /** Perform the SDRAM1 memory initialization sequence
  */
  hsdram1.Instance = FMC_SDRAM_DEVICE;
 8000df8:	4b1f      	ldr	r3, [pc, #124]	@ (8000e78 <MX_FMC_Init+0x98>)
 8000dfa:	4a20      	ldr	r2, [pc, #128]	@ (8000e7c <MX_FMC_Init+0x9c>)
 8000dfc:	601a      	str	r2, [r3, #0]
  /* hsdram1.Init */
  hsdram1.Init.SDBank = FMC_SDRAM_BANK2;
 8000dfe:	4b1e      	ldr	r3, [pc, #120]	@ (8000e78 <MX_FMC_Init+0x98>)
 8000e00:	2201      	movs	r2, #1
 8000e02:	605a      	str	r2, [r3, #4]
  hsdram1.Init.ColumnBitsNumber = FMC_SDRAM_COLUMN_BITS_NUM_8;
 8000e04:	4b1c      	ldr	r3, [pc, #112]	@ (8000e78 <MX_FMC_Init+0x98>)
 8000e06:	2200      	movs	r2, #0
 8000e08:	609a      	str	r2, [r3, #8]
  hsdram1.Init.RowBitsNumber = FMC_SDRAM_ROW_BITS_NUM_12;
 8000e0a:	4b1b      	ldr	r3, [pc, #108]	@ (8000e78 <MX_FMC_Init+0x98>)
 8000e0c:	2204      	movs	r2, #4
 8000e0e:	60da      	str	r2, [r3, #12]
  hsdram1.Init.MemoryDataWidth = FMC_SDRAM_MEM_BUS_WIDTH_16;
 8000e10:	4b19      	ldr	r3, [pc, #100]	@ (8000e78 <MX_FMC_Init+0x98>)
 8000e12:	2210      	movs	r2, #16
 8000e14:	611a      	str	r2, [r3, #16]
  hsdram1.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 8000e16:	4b18      	ldr	r3, [pc, #96]	@ (8000e78 <MX_FMC_Init+0x98>)
 8000e18:	2240      	movs	r2, #64	@ 0x40
 8000e1a:	615a      	str	r2, [r3, #20]
  hsdram1.Init.CASLatency = FMC_SDRAM_CAS_LATENCY_3;
 8000e1c:	4b16      	ldr	r3, [pc, #88]	@ (8000e78 <MX_FMC_Init+0x98>)
 8000e1e:	f44f 72c0 	mov.w	r2, #384	@ 0x180
 8000e22:	619a      	str	r2, [r3, #24]
  hsdram1.Init.WriteProtection = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 8000e24:	4b14      	ldr	r3, [pc, #80]	@ (8000e78 <MX_FMC_Init+0x98>)
 8000e26:	2200      	movs	r2, #0
 8000e28:	61da      	str	r2, [r3, #28]
  hsdram1.Init.SDClockPeriod = FMC_SDRAM_CLOCK_PERIOD_2;
 8000e2a:	4b13      	ldr	r3, [pc, #76]	@ (8000e78 <MX_FMC_Init+0x98>)
 8000e2c:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8000e30:	621a      	str	r2, [r3, #32]
  hsdram1.Init.ReadBurst = FMC_SDRAM_RBURST_DISABLE;
 8000e32:	4b11      	ldr	r3, [pc, #68]	@ (8000e78 <MX_FMC_Init+0x98>)
 8000e34:	2200      	movs	r2, #0
 8000e36:	625a      	str	r2, [r3, #36]	@ 0x24
  hsdram1.Init.ReadPipeDelay = FMC_SDRAM_RPIPE_DELAY_1;
 8000e38:	4b0f      	ldr	r3, [pc, #60]	@ (8000e78 <MX_FMC_Init+0x98>)
 8000e3a:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000e3e:	629a      	str	r2, [r3, #40]	@ 0x28
  /* SdramTiming */
  SdramTiming.LoadToActiveDelay = 2;
 8000e40:	2302      	movs	r3, #2
 8000e42:	607b      	str	r3, [r7, #4]
  SdramTiming.ExitSelfRefreshDelay = 7;
 8000e44:	2307      	movs	r3, #7
 8000e46:	60bb      	str	r3, [r7, #8]
  SdramTiming.SelfRefreshTime = 4;
 8000e48:	2304      	movs	r3, #4
 8000e4a:	60fb      	str	r3, [r7, #12]
  SdramTiming.RowCycleDelay = 7;
 8000e4c:	2307      	movs	r3, #7
 8000e4e:	613b      	str	r3, [r7, #16]
  SdramTiming.WriteRecoveryTime = 3;
 8000e50:	2303      	movs	r3, #3
 8000e52:	617b      	str	r3, [r7, #20]
  SdramTiming.RPDelay = 2;
 8000e54:	2302      	movs	r3, #2
 8000e56:	61bb      	str	r3, [r7, #24]
  SdramTiming.RCDDelay = 2;
 8000e58:	2302      	movs	r3, #2
 8000e5a:	61fb      	str	r3, [r7, #28]

  if (HAL_SDRAM_Init(&hsdram1, &SdramTiming) != HAL_OK)
 8000e5c:	1d3b      	adds	r3, r7, #4
 8000e5e:	4619      	mov	r1, r3
 8000e60:	4805      	ldr	r0, [pc, #20]	@ (8000e78 <MX_FMC_Init+0x98>)
 8000e62:	f003 fdb3 	bl	80049cc <HAL_SDRAM_Init>
 8000e66:	4603      	mov	r3, r0
 8000e68:	2b00      	cmp	r3, #0
 8000e6a:	d001      	beq.n	8000e70 <MX_FMC_Init+0x90>
  {
    Error_Handler( );
 8000e6c:	f000 f950 	bl	8001110 <Error_Handler>
  }

  /* USER CODE BEGIN FMC_Init 2 */

  /* USER CODE END FMC_Init 2 */
}
 8000e70:	bf00      	nop
 8000e72:	3720      	adds	r7, #32
 8000e74:	46bd      	mov	sp, r7
 8000e76:	bd80      	pop	{r7, pc}
 8000e78:	200004f8 	.word	0x200004f8
 8000e7c:	a0000140 	.word	0xa0000140

08000e80 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000e80:	b580      	push	{r7, lr}
 8000e82:	b08e      	sub	sp, #56	@ 0x38
 8000e84:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e86:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000e8a:	2200      	movs	r2, #0
 8000e8c:	601a      	str	r2, [r3, #0]
 8000e8e:	605a      	str	r2, [r3, #4]
 8000e90:	609a      	str	r2, [r3, #8]
 8000e92:	60da      	str	r2, [r3, #12]
 8000e94:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000e96:	2300      	movs	r3, #0
 8000e98:	623b      	str	r3, [r7, #32]
 8000e9a:	4b8a      	ldr	r3, [pc, #552]	@ (80010c4 <MX_GPIO_Init+0x244>)
 8000e9c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e9e:	4a89      	ldr	r2, [pc, #548]	@ (80010c4 <MX_GPIO_Init+0x244>)
 8000ea0:	f043 0304 	orr.w	r3, r3, #4
 8000ea4:	6313      	str	r3, [r2, #48]	@ 0x30
 8000ea6:	4b87      	ldr	r3, [pc, #540]	@ (80010c4 <MX_GPIO_Init+0x244>)
 8000ea8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000eaa:	f003 0304 	and.w	r3, r3, #4
 8000eae:	623b      	str	r3, [r7, #32]
 8000eb0:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000eb2:	2300      	movs	r3, #0
 8000eb4:	61fb      	str	r3, [r7, #28]
 8000eb6:	4b83      	ldr	r3, [pc, #524]	@ (80010c4 <MX_GPIO_Init+0x244>)
 8000eb8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000eba:	4a82      	ldr	r2, [pc, #520]	@ (80010c4 <MX_GPIO_Init+0x244>)
 8000ebc:	f043 0320 	orr.w	r3, r3, #32
 8000ec0:	6313      	str	r3, [r2, #48]	@ 0x30
 8000ec2:	4b80      	ldr	r3, [pc, #512]	@ (80010c4 <MX_GPIO_Init+0x244>)
 8000ec4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ec6:	f003 0320 	and.w	r3, r3, #32
 8000eca:	61fb      	str	r3, [r7, #28]
 8000ecc:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000ece:	2300      	movs	r3, #0
 8000ed0:	61bb      	str	r3, [r7, #24]
 8000ed2:	4b7c      	ldr	r3, [pc, #496]	@ (80010c4 <MX_GPIO_Init+0x244>)
 8000ed4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ed6:	4a7b      	ldr	r2, [pc, #492]	@ (80010c4 <MX_GPIO_Init+0x244>)
 8000ed8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000edc:	6313      	str	r3, [r2, #48]	@ 0x30
 8000ede:	4b79      	ldr	r3, [pc, #484]	@ (80010c4 <MX_GPIO_Init+0x244>)
 8000ee0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ee2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000ee6:	61bb      	str	r3, [r7, #24]
 8000ee8:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000eea:	2300      	movs	r3, #0
 8000eec:	617b      	str	r3, [r7, #20]
 8000eee:	4b75      	ldr	r3, [pc, #468]	@ (80010c4 <MX_GPIO_Init+0x244>)
 8000ef0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ef2:	4a74      	ldr	r2, [pc, #464]	@ (80010c4 <MX_GPIO_Init+0x244>)
 8000ef4:	f043 0301 	orr.w	r3, r3, #1
 8000ef8:	6313      	str	r3, [r2, #48]	@ 0x30
 8000efa:	4b72      	ldr	r3, [pc, #456]	@ (80010c4 <MX_GPIO_Init+0x244>)
 8000efc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000efe:	f003 0301 	and.w	r3, r3, #1
 8000f02:	617b      	str	r3, [r7, #20]
 8000f04:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f06:	2300      	movs	r3, #0
 8000f08:	613b      	str	r3, [r7, #16]
 8000f0a:	4b6e      	ldr	r3, [pc, #440]	@ (80010c4 <MX_GPIO_Init+0x244>)
 8000f0c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f0e:	4a6d      	ldr	r2, [pc, #436]	@ (80010c4 <MX_GPIO_Init+0x244>)
 8000f10:	f043 0302 	orr.w	r3, r3, #2
 8000f14:	6313      	str	r3, [r2, #48]	@ 0x30
 8000f16:	4b6b      	ldr	r3, [pc, #428]	@ (80010c4 <MX_GPIO_Init+0x244>)
 8000f18:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f1a:	f003 0302 	and.w	r3, r3, #2
 8000f1e:	613b      	str	r3, [r7, #16]
 8000f20:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000f22:	2300      	movs	r3, #0
 8000f24:	60fb      	str	r3, [r7, #12]
 8000f26:	4b67      	ldr	r3, [pc, #412]	@ (80010c4 <MX_GPIO_Init+0x244>)
 8000f28:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f2a:	4a66      	ldr	r2, [pc, #408]	@ (80010c4 <MX_GPIO_Init+0x244>)
 8000f2c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000f30:	6313      	str	r3, [r2, #48]	@ 0x30
 8000f32:	4b64      	ldr	r3, [pc, #400]	@ (80010c4 <MX_GPIO_Init+0x244>)
 8000f34:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f36:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000f3a:	60fb      	str	r3, [r7, #12]
 8000f3c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000f3e:	2300      	movs	r3, #0
 8000f40:	60bb      	str	r3, [r7, #8]
 8000f42:	4b60      	ldr	r3, [pc, #384]	@ (80010c4 <MX_GPIO_Init+0x244>)
 8000f44:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f46:	4a5f      	ldr	r2, [pc, #380]	@ (80010c4 <MX_GPIO_Init+0x244>)
 8000f48:	f043 0310 	orr.w	r3, r3, #16
 8000f4c:	6313      	str	r3, [r2, #48]	@ 0x30
 8000f4e:	4b5d      	ldr	r3, [pc, #372]	@ (80010c4 <MX_GPIO_Init+0x244>)
 8000f50:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f52:	f003 0310 	and.w	r3, r3, #16
 8000f56:	60bb      	str	r3, [r7, #8]
 8000f58:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000f5a:	2300      	movs	r3, #0
 8000f5c:	607b      	str	r3, [r7, #4]
 8000f5e:	4b59      	ldr	r3, [pc, #356]	@ (80010c4 <MX_GPIO_Init+0x244>)
 8000f60:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f62:	4a58      	ldr	r2, [pc, #352]	@ (80010c4 <MX_GPIO_Init+0x244>)
 8000f64:	f043 0308 	orr.w	r3, r3, #8
 8000f68:	6313      	str	r3, [r2, #48]	@ 0x30
 8000f6a:	4b56      	ldr	r3, [pc, #344]	@ (80010c4 <MX_GPIO_Init+0x244>)
 8000f6c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f6e:	f003 0308 	and.w	r3, r3, #8
 8000f72:	607b      	str	r3, [r7, #4]
 8000f74:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, NCS_MEMS_SPI_Pin|CSX_Pin|OTG_FS_PSO_Pin, GPIO_PIN_RESET);
 8000f76:	2200      	movs	r2, #0
 8000f78:	2116      	movs	r1, #22
 8000f7a:	4853      	ldr	r0, [pc, #332]	@ (80010c8 <MX_GPIO_Init+0x248>)
 8000f7c:	f002 f9cc 	bl	8003318 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ACP_RST_GPIO_Port, ACP_RST_Pin, GPIO_PIN_RESET);
 8000f80:	2200      	movs	r2, #0
 8000f82:	2180      	movs	r1, #128	@ 0x80
 8000f84:	4851      	ldr	r0, [pc, #324]	@ (80010cc <MX_GPIO_Init+0x24c>)
 8000f86:	f002 f9c7 	bl	8003318 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, RDX_Pin|WRX_DCX_Pin, GPIO_PIN_RESET);
 8000f8a:	2200      	movs	r2, #0
 8000f8c:	f44f 5140 	mov.w	r1, #12288	@ 0x3000
 8000f90:	484f      	ldr	r0, [pc, #316]	@ (80010d0 <MX_GPIO_Init+0x250>)
 8000f92:	f002 f9c1 	bl	8003318 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, LD3_Pin|LD4_Pin, GPIO_PIN_RESET);
 8000f96:	2200      	movs	r2, #0
 8000f98:	f44f 41c0 	mov.w	r1, #24576	@ 0x6000
 8000f9c:	484d      	ldr	r0, [pc, #308]	@ (80010d4 <MX_GPIO_Init+0x254>)
 8000f9e:	f002 f9bb 	bl	8003318 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : NCS_MEMS_SPI_Pin CSX_Pin OTG_FS_PSO_Pin */
  GPIO_InitStruct.Pin = NCS_MEMS_SPI_Pin|CSX_Pin|OTG_FS_PSO_Pin;
 8000fa2:	2316      	movs	r3, #22
 8000fa4:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000fa6:	2301      	movs	r3, #1
 8000fa8:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000faa:	2300      	movs	r3, #0
 8000fac:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fae:	2300      	movs	r3, #0
 8000fb0:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000fb2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000fb6:	4619      	mov	r1, r3
 8000fb8:	4843      	ldr	r0, [pc, #268]	@ (80010c8 <MX_GPIO_Init+0x248>)
 8000fba:	f001 fef5 	bl	8002da8 <HAL_GPIO_Init>

  /*Configure GPIO pins : B1_Pin MEMS_INT1_Pin MEMS_INT2_Pin TP_INT1_Pin */
  GPIO_InitStruct.Pin = B1_Pin|MEMS_INT1_Pin|MEMS_INT2_Pin|TP_INT1_Pin;
 8000fbe:	f248 0307 	movw	r3, #32775	@ 0x8007
 8000fc2:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000fc4:	f44f 1390 	mov.w	r3, #1179648	@ 0x120000
 8000fc8:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fca:	2300      	movs	r3, #0
 8000fcc:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000fce:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000fd2:	4619      	mov	r1, r3
 8000fd4:	483d      	ldr	r0, [pc, #244]	@ (80010cc <MX_GPIO_Init+0x24c>)
 8000fd6:	f001 fee7 	bl	8002da8 <HAL_GPIO_Init>

  /*Configure GPIO pin : ACP_RST_Pin */
  GPIO_InitStruct.Pin = ACP_RST_Pin;
 8000fda:	2380      	movs	r3, #128	@ 0x80
 8000fdc:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000fde:	2301      	movs	r3, #1
 8000fe0:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fe2:	2300      	movs	r3, #0
 8000fe4:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fe6:	2300      	movs	r3, #0
 8000fe8:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(ACP_RST_GPIO_Port, &GPIO_InitStruct);
 8000fea:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000fee:	4619      	mov	r1, r3
 8000ff0:	4836      	ldr	r0, [pc, #216]	@ (80010cc <MX_GPIO_Init+0x24c>)
 8000ff2:	f001 fed9 	bl	8002da8 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OC_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OC_Pin;
 8000ff6:	2320      	movs	r3, #32
 8000ff8:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000ffa:	f44f 1390 	mov.w	r3, #1179648	@ 0x120000
 8000ffe:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001000:	2300      	movs	r3, #0
 8001002:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(OTG_FS_OC_GPIO_Port, &GPIO_InitStruct);
 8001004:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001008:	4619      	mov	r1, r3
 800100a:	482f      	ldr	r0, [pc, #188]	@ (80010c8 <MX_GPIO_Init+0x248>)
 800100c:	f001 fecc 	bl	8002da8 <HAL_GPIO_Init>

  /*Configure GPIO pin : BOOT1_Pin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 8001010:	2304      	movs	r3, #4
 8001012:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001014:	2300      	movs	r3, #0
 8001016:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001018:	2300      	movs	r3, #0
 800101a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 800101c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001020:	4619      	mov	r1, r3
 8001022:	482d      	ldr	r0, [pc, #180]	@ (80010d8 <MX_GPIO_Init+0x258>)
 8001024:	f001 fec0 	bl	8002da8 <HAL_GPIO_Init>

  /*Configure GPIO pins : OTG_HS_ID_Pin OTG_HS_DM_Pin OTG_HS_DP_Pin */
  GPIO_InitStruct.Pin = OTG_HS_ID_Pin|OTG_HS_DM_Pin|OTG_HS_DP_Pin;
 8001028:	f44f 4350 	mov.w	r3, #53248	@ 0xd000
 800102c:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800102e:	2302      	movs	r3, #2
 8001030:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001032:	2300      	movs	r3, #0
 8001034:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001036:	2300      	movs	r3, #0
 8001038:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF12_OTG_HS_FS;
 800103a:	230c      	movs	r3, #12
 800103c:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800103e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001042:	4619      	mov	r1, r3
 8001044:	4824      	ldr	r0, [pc, #144]	@ (80010d8 <MX_GPIO_Init+0x258>)
 8001046:	f001 feaf 	bl	8002da8 <HAL_GPIO_Init>

  /*Configure GPIO pin : VBUS_HS_Pin */
  GPIO_InitStruct.Pin = VBUS_HS_Pin;
 800104a:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800104e:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001050:	2300      	movs	r3, #0
 8001052:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001054:	2300      	movs	r3, #0
 8001056:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(VBUS_HS_GPIO_Port, &GPIO_InitStruct);
 8001058:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800105c:	4619      	mov	r1, r3
 800105e:	481e      	ldr	r0, [pc, #120]	@ (80010d8 <MX_GPIO_Init+0x258>)
 8001060:	f001 fea2 	bl	8002da8 <HAL_GPIO_Init>

  /*Configure GPIO pin : TE_Pin */
  GPIO_InitStruct.Pin = TE_Pin;
 8001064:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8001068:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800106a:	2300      	movs	r3, #0
 800106c:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800106e:	2300      	movs	r3, #0
 8001070:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(TE_GPIO_Port, &GPIO_InitStruct);
 8001072:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001076:	4619      	mov	r1, r3
 8001078:	4815      	ldr	r0, [pc, #84]	@ (80010d0 <MX_GPIO_Init+0x250>)
 800107a:	f001 fe95 	bl	8002da8 <HAL_GPIO_Init>

  /*Configure GPIO pins : RDX_Pin WRX_DCX_Pin */
  GPIO_InitStruct.Pin = RDX_Pin|WRX_DCX_Pin;
 800107e:	f44f 5340 	mov.w	r3, #12288	@ 0x3000
 8001082:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001084:	2301      	movs	r3, #1
 8001086:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001088:	2300      	movs	r3, #0
 800108a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800108c:	2300      	movs	r3, #0
 800108e:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001090:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001094:	4619      	mov	r1, r3
 8001096:	480e      	ldr	r0, [pc, #56]	@ (80010d0 <MX_GPIO_Init+0x250>)
 8001098:	f001 fe86 	bl	8002da8 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD3_Pin LD4_Pin */
  GPIO_InitStruct.Pin = LD3_Pin|LD4_Pin;
 800109c:	f44f 43c0 	mov.w	r3, #24576	@ 0x6000
 80010a0:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80010a2:	2301      	movs	r3, #1
 80010a4:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010a6:	2300      	movs	r3, #0
 80010a8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010aa:	2300      	movs	r3, #0
 80010ac:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80010ae:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80010b2:	4619      	mov	r1, r3
 80010b4:	4807      	ldr	r0, [pc, #28]	@ (80010d4 <MX_GPIO_Init+0x254>)
 80010b6:	f001 fe77 	bl	8002da8 <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 80010ba:	bf00      	nop
 80010bc:	3738      	adds	r7, #56	@ 0x38
 80010be:	46bd      	mov	sp, r7
 80010c0:	bd80      	pop	{r7, pc}
 80010c2:	bf00      	nop
 80010c4:	40023800 	.word	0x40023800
 80010c8:	40020800 	.word	0x40020800
 80010cc:	40020000 	.word	0x40020000
 80010d0:	40020c00 	.word	0x40020c00
 80010d4:	40021800 	.word	0x40021800
 80010d8:	40020400 	.word	0x40020400

080010dc <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 80010dc:	b580      	push	{r7, lr}
 80010de:	b082      	sub	sp, #8
 80010e0:	af00      	add	r7, sp, #0
 80010e2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 80010e4:	2001      	movs	r0, #1
 80010e6:	f005 fbc8 	bl	800687a <osDelay>
 80010ea:	e7fb      	b.n	80010e4 <StartDefaultTask+0x8>

080010ec <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80010ec:	b580      	push	{r7, lr}
 80010ee:	b082      	sub	sp, #8
 80010f0:	af00      	add	r7, sp, #0
 80010f2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6)
 80010f4:	687b      	ldr	r3, [r7, #4]
 80010f6:	681b      	ldr	r3, [r3, #0]
 80010f8:	4a04      	ldr	r2, [pc, #16]	@ (800110c <HAL_TIM_PeriodElapsedCallback+0x20>)
 80010fa:	4293      	cmp	r3, r2
 80010fc:	d101      	bne.n	8001102 <HAL_TIM_PeriodElapsedCallback+0x16>
  {
    HAL_IncTick();
 80010fe:	f001 f967 	bl	80023d0 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8001102:	bf00      	nop
 8001104:	3708      	adds	r7, #8
 8001106:	46bd      	mov	sp, r7
 8001108:	bd80      	pop	{r7, pc}
 800110a:	bf00      	nop
 800110c:	40001000 	.word	0x40001000

08001110 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001110:	b480      	push	{r7}
 8001112:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001114:	b672      	cpsid	i
}
 8001116:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001118:	bf00      	nop
 800111a:	e7fd      	b.n	8001118 <Error_Handler+0x8>

0800111c <SPIx_Init>:

/**
  * @brief  SPIx Bus initialization
  */
static void SPIx_Init(void)
{
 800111c:	b580      	push	{r7, lr}
 800111e:	af00      	add	r7, sp, #0
  if(HAL_SPI_GetState(&SpiHandle) == HAL_SPI_STATE_RESET)
 8001120:	4819      	ldr	r0, [pc, #100]	@ (8001188 <SPIx_Init+0x6c>)
 8001122:	f004 f99b 	bl	800545c <HAL_SPI_GetState>
 8001126:	4603      	mov	r3, r0
 8001128:	2b00      	cmp	r3, #0
 800112a:	d12b      	bne.n	8001184 <SPIx_Init+0x68>
  {
    /* SPI configuration -----------------------------------------------------*/
    SpiHandle.Instance = DISCOVERY_SPIx;
 800112c:	4b16      	ldr	r3, [pc, #88]	@ (8001188 <SPIx_Init+0x6c>)
 800112e:	4a17      	ldr	r2, [pc, #92]	@ (800118c <SPIx_Init+0x70>)
 8001130:	601a      	str	r2, [r3, #0]
       to verify these constraints:
       - ILI9341 LCD SPI interface max baudrate is 10MHz for write and 6.66MHz for read
       - l3gd20 SPI interface max baudrate is 10MHz for write/read
       - PCLK2 frequency is set to 90 MHz 
    */  
    SpiHandle.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8001132:	4b15      	ldr	r3, [pc, #84]	@ (8001188 <SPIx_Init+0x6c>)
 8001134:	2218      	movs	r2, #24
 8001136:	61da      	str	r2, [r3, #28]

    /* On STM32F429I-Discovery, LCD ID cannot be read then keep a common configuration */
    /* for LCD and GYRO (SPI_DIRECTION_2LINES) */
    /* Note: To read a register a LCD, SPI_DIRECTION_1LINE should be set */
    SpiHandle.Init.Direction      = SPI_DIRECTION_2LINES;
 8001138:	4b13      	ldr	r3, [pc, #76]	@ (8001188 <SPIx_Init+0x6c>)
 800113a:	2200      	movs	r2, #0
 800113c:	609a      	str	r2, [r3, #8]
    SpiHandle.Init.CLKPhase       = SPI_PHASE_1EDGE;
 800113e:	4b12      	ldr	r3, [pc, #72]	@ (8001188 <SPIx_Init+0x6c>)
 8001140:	2200      	movs	r2, #0
 8001142:	615a      	str	r2, [r3, #20]
    SpiHandle.Init.CLKPolarity    = SPI_POLARITY_LOW;
 8001144:	4b10      	ldr	r3, [pc, #64]	@ (8001188 <SPIx_Init+0x6c>)
 8001146:	2200      	movs	r2, #0
 8001148:	611a      	str	r2, [r3, #16]
    SpiHandle.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLED;
 800114a:	4b0f      	ldr	r3, [pc, #60]	@ (8001188 <SPIx_Init+0x6c>)
 800114c:	2200      	movs	r2, #0
 800114e:	629a      	str	r2, [r3, #40]	@ 0x28
    SpiHandle.Init.CRCPolynomial  = 7;
 8001150:	4b0d      	ldr	r3, [pc, #52]	@ (8001188 <SPIx_Init+0x6c>)
 8001152:	2207      	movs	r2, #7
 8001154:	62da      	str	r2, [r3, #44]	@ 0x2c
    SpiHandle.Init.DataSize       = SPI_DATASIZE_8BIT;
 8001156:	4b0c      	ldr	r3, [pc, #48]	@ (8001188 <SPIx_Init+0x6c>)
 8001158:	2200      	movs	r2, #0
 800115a:	60da      	str	r2, [r3, #12]
    SpiHandle.Init.FirstBit       = SPI_FIRSTBIT_MSB;
 800115c:	4b0a      	ldr	r3, [pc, #40]	@ (8001188 <SPIx_Init+0x6c>)
 800115e:	2200      	movs	r2, #0
 8001160:	621a      	str	r2, [r3, #32]
    SpiHandle.Init.NSS            = SPI_NSS_SOFT;
 8001162:	4b09      	ldr	r3, [pc, #36]	@ (8001188 <SPIx_Init+0x6c>)
 8001164:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001168:	619a      	str	r2, [r3, #24]
    SpiHandle.Init.TIMode         = SPI_TIMODE_DISABLED;
 800116a:	4b07      	ldr	r3, [pc, #28]	@ (8001188 <SPIx_Init+0x6c>)
 800116c:	2200      	movs	r2, #0
 800116e:	625a      	str	r2, [r3, #36]	@ 0x24
    SpiHandle.Init.Mode           = SPI_MODE_MASTER;
 8001170:	4b05      	ldr	r3, [pc, #20]	@ (8001188 <SPIx_Init+0x6c>)
 8001172:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8001176:	605a      	str	r2, [r3, #4]
  
    SPIx_MspInit(&SpiHandle);
 8001178:	4803      	ldr	r0, [pc, #12]	@ (8001188 <SPIx_Init+0x6c>)
 800117a:	f000 f853 	bl	8001224 <SPIx_MspInit>
    HAL_SPI_Init(&SpiHandle);
 800117e:	4802      	ldr	r0, [pc, #8]	@ (8001188 <SPIx_Init+0x6c>)
 8001180:	f003 fcb5 	bl	8004aee <HAL_SPI_Init>
  } 
}
 8001184:	bf00      	nop
 8001186:	bd80      	pop	{r7, pc}
 8001188:	20000530 	.word	0x20000530
 800118c:	40015000 	.word	0x40015000

08001190 <SPIx_Read>:
  * @brief  Reads 4 bytes from device.
  * @param  ReadSize: Number of bytes to read (max 4 bytes)
  * @retval Value read on the SPI
  */
static uint32_t SPIx_Read(uint8_t ReadSize)
{
 8001190:	b580      	push	{r7, lr}
 8001192:	b084      	sub	sp, #16
 8001194:	af00      	add	r7, sp, #0
 8001196:	4603      	mov	r3, r0
 8001198:	71fb      	strb	r3, [r7, #7]
  HAL_StatusTypeDef status = HAL_OK;
 800119a:	2300      	movs	r3, #0
 800119c:	73fb      	strb	r3, [r7, #15]
  uint32_t readvalue;
  
  status = HAL_SPI_Receive(&SpiHandle, (uint8_t*) &readvalue, ReadSize, SpixTimeout);
 800119e:	79fb      	ldrb	r3, [r7, #7]
 80011a0:	b29a      	uxth	r2, r3
 80011a2:	4b09      	ldr	r3, [pc, #36]	@ (80011c8 <SPIx_Read+0x38>)
 80011a4:	681b      	ldr	r3, [r3, #0]
 80011a6:	f107 0108 	add.w	r1, r7, #8
 80011aa:	4808      	ldr	r0, [pc, #32]	@ (80011cc <SPIx_Read+0x3c>)
 80011ac:	f003 fe94 	bl	8004ed8 <HAL_SPI_Receive>
 80011b0:	4603      	mov	r3, r0
 80011b2:	73fb      	strb	r3, [r7, #15]
  
  /* Check the communication status */
  if(status != HAL_OK)
 80011b4:	7bfb      	ldrb	r3, [r7, #15]
 80011b6:	2b00      	cmp	r3, #0
 80011b8:	d001      	beq.n	80011be <SPIx_Read+0x2e>
  {
    /* Re-Initialize the BUS */
    SPIx_Error();
 80011ba:	f000 f827 	bl	800120c <SPIx_Error>
  }
  
  return readvalue;
 80011be:	68bb      	ldr	r3, [r7, #8]
}
 80011c0:	4618      	mov	r0, r3
 80011c2:	3710      	adds	r7, #16
 80011c4:	46bd      	mov	sp, r7
 80011c6:	bd80      	pop	{r7, pc}
 80011c8:	20000040 	.word	0x20000040
 80011cc:	20000530 	.word	0x20000530

080011d0 <SPIx_Write>:
/**
  * @brief  Writes a byte to device.
  * @param  Value: value to be written
  */
static void SPIx_Write(uint16_t Value)
{
 80011d0:	b580      	push	{r7, lr}
 80011d2:	b084      	sub	sp, #16
 80011d4:	af00      	add	r7, sp, #0
 80011d6:	4603      	mov	r3, r0
 80011d8:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status = HAL_OK;
 80011da:	2300      	movs	r3, #0
 80011dc:	73fb      	strb	r3, [r7, #15]
  
  status = HAL_SPI_Transmit(&SpiHandle, (uint8_t*) &Value, 1, SpixTimeout);
 80011de:	4b09      	ldr	r3, [pc, #36]	@ (8001204 <SPIx_Write+0x34>)
 80011e0:	681b      	ldr	r3, [r3, #0]
 80011e2:	1db9      	adds	r1, r7, #6
 80011e4:	2201      	movs	r2, #1
 80011e6:	4808      	ldr	r0, [pc, #32]	@ (8001208 <SPIx_Write+0x38>)
 80011e8:	f003 fd32 	bl	8004c50 <HAL_SPI_Transmit>
 80011ec:	4603      	mov	r3, r0
 80011ee:	73fb      	strb	r3, [r7, #15]
  
  /* Check the communication status */
  if(status != HAL_OK)
 80011f0:	7bfb      	ldrb	r3, [r7, #15]
 80011f2:	2b00      	cmp	r3, #0
 80011f4:	d001      	beq.n	80011fa <SPIx_Write+0x2a>
  {
    /* Re-Initialize the BUS */
    SPIx_Error();
 80011f6:	f000 f809 	bl	800120c <SPIx_Error>
  }
}
 80011fa:	bf00      	nop
 80011fc:	3710      	adds	r7, #16
 80011fe:	46bd      	mov	sp, r7
 8001200:	bd80      	pop	{r7, pc}
 8001202:	bf00      	nop
 8001204:	20000040 	.word	0x20000040
 8001208:	20000530 	.word	0x20000530

0800120c <SPIx_Error>:

/**
  * @brief  SPIx error treatment function.
  */
static void SPIx_Error(void)
{
 800120c:	b580      	push	{r7, lr}
 800120e:	af00      	add	r7, sp, #0
  /* De-initialize the SPI communication BUS */
  HAL_SPI_DeInit(&SpiHandle);
 8001210:	4803      	ldr	r0, [pc, #12]	@ (8001220 <SPIx_Error+0x14>)
 8001212:	f003 fcf5 	bl	8004c00 <HAL_SPI_DeInit>
  
  /* Re- Initialize the SPI communication BUS */
  SPIx_Init();
 8001216:	f7ff ff81 	bl	800111c <SPIx_Init>
}
 800121a:	bf00      	nop
 800121c:	bd80      	pop	{r7, pc}
 800121e:	bf00      	nop
 8001220:	20000530 	.word	0x20000530

08001224 <SPIx_MspInit>:
/**
  * @brief  SPI MSP Init.
  * @param  hspi: SPI handle
  */
static void SPIx_MspInit(SPI_HandleTypeDef *hspi)
{
 8001224:	b580      	push	{r7, lr}
 8001226:	b08a      	sub	sp, #40	@ 0x28
 8001228:	af00      	add	r7, sp, #0
 800122a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef   GPIO_InitStructure;

  /* Enable SPIx clock */
  DISCOVERY_SPIx_CLK_ENABLE();
 800122c:	2300      	movs	r3, #0
 800122e:	613b      	str	r3, [r7, #16]
 8001230:	4b17      	ldr	r3, [pc, #92]	@ (8001290 <SPIx_MspInit+0x6c>)
 8001232:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001234:	4a16      	ldr	r2, [pc, #88]	@ (8001290 <SPIx_MspInit+0x6c>)
 8001236:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800123a:	6453      	str	r3, [r2, #68]	@ 0x44
 800123c:	4b14      	ldr	r3, [pc, #80]	@ (8001290 <SPIx_MspInit+0x6c>)
 800123e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001240:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001244:	613b      	str	r3, [r7, #16]
 8001246:	693b      	ldr	r3, [r7, #16]

  /* Enable DISCOVERY_SPI GPIO clock */
  DISCOVERY_SPIx_GPIO_CLK_ENABLE();
 8001248:	2300      	movs	r3, #0
 800124a:	60fb      	str	r3, [r7, #12]
 800124c:	4b10      	ldr	r3, [pc, #64]	@ (8001290 <SPIx_MspInit+0x6c>)
 800124e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001250:	4a0f      	ldr	r2, [pc, #60]	@ (8001290 <SPIx_MspInit+0x6c>)
 8001252:	f043 0320 	orr.w	r3, r3, #32
 8001256:	6313      	str	r3, [r2, #48]	@ 0x30
 8001258:	4b0d      	ldr	r3, [pc, #52]	@ (8001290 <SPIx_MspInit+0x6c>)
 800125a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800125c:	f003 0320 	and.w	r3, r3, #32
 8001260:	60fb      	str	r3, [r7, #12]
 8001262:	68fb      	ldr	r3, [r7, #12]

  /* configure SPI SCK, MOSI and MISO */    
  GPIO_InitStructure.Pin    = (DISCOVERY_SPIx_SCK_PIN | DISCOVERY_SPIx_MOSI_PIN | DISCOVERY_SPIx_MISO_PIN);
 8001264:	f44f 7360 	mov.w	r3, #896	@ 0x380
 8001268:	617b      	str	r3, [r7, #20]
  GPIO_InitStructure.Mode   = GPIO_MODE_AF_PP;
 800126a:	2302      	movs	r3, #2
 800126c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStructure.Pull   = GPIO_PULLDOWN;
 800126e:	2302      	movs	r3, #2
 8001270:	61fb      	str	r3, [r7, #28]
  GPIO_InitStructure.Speed  = GPIO_SPEED_MEDIUM;
 8001272:	2301      	movs	r3, #1
 8001274:	623b      	str	r3, [r7, #32]
  GPIO_InitStructure.Alternate = DISCOVERY_SPIx_AF;
 8001276:	2305      	movs	r3, #5
 8001278:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(DISCOVERY_SPIx_GPIO_PORT, &GPIO_InitStructure);      
 800127a:	f107 0314 	add.w	r3, r7, #20
 800127e:	4619      	mov	r1, r3
 8001280:	4804      	ldr	r0, [pc, #16]	@ (8001294 <SPIx_MspInit+0x70>)
 8001282:	f001 fd91 	bl	8002da8 <HAL_GPIO_Init>
}
 8001286:	bf00      	nop
 8001288:	3728      	adds	r7, #40	@ 0x28
 800128a:	46bd      	mov	sp, r7
 800128c:	bd80      	pop	{r7, pc}
 800128e:	bf00      	nop
 8001290:	40023800 	.word	0x40023800
 8001294:	40021400 	.word	0x40021400

08001298 <LCD_IO_Init>:

/**
  * @brief  Configures the LCD_SPI interface.
  */
void LCD_IO_Init(void)
{
 8001298:	b580      	push	{r7, lr}
 800129a:	b088      	sub	sp, #32
 800129c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStructure;
  
  if(Is_LCD_IO_Initialized == 0)
 800129e:	4b36      	ldr	r3, [pc, #216]	@ (8001378 <LCD_IO_Init+0xe0>)
 80012a0:	781b      	ldrb	r3, [r3, #0]
 80012a2:	2b00      	cmp	r3, #0
 80012a4:	d164      	bne.n	8001370 <LCD_IO_Init+0xd8>
  {
    Is_LCD_IO_Initialized = 1; 
 80012a6:	4b34      	ldr	r3, [pc, #208]	@ (8001378 <LCD_IO_Init+0xe0>)
 80012a8:	2201      	movs	r2, #1
 80012aa:	701a      	strb	r2, [r3, #0]
    
    /* Configure NCS in Output Push-Pull mode */
    LCD_WRX_GPIO_CLK_ENABLE();
 80012ac:	2300      	movs	r3, #0
 80012ae:	60bb      	str	r3, [r7, #8]
 80012b0:	4b32      	ldr	r3, [pc, #200]	@ (800137c <LCD_IO_Init+0xe4>)
 80012b2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80012b4:	4a31      	ldr	r2, [pc, #196]	@ (800137c <LCD_IO_Init+0xe4>)
 80012b6:	f043 0308 	orr.w	r3, r3, #8
 80012ba:	6313      	str	r3, [r2, #48]	@ 0x30
 80012bc:	4b2f      	ldr	r3, [pc, #188]	@ (800137c <LCD_IO_Init+0xe4>)
 80012be:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80012c0:	f003 0308 	and.w	r3, r3, #8
 80012c4:	60bb      	str	r3, [r7, #8]
 80012c6:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStructure.Pin     = LCD_WRX_PIN;
 80012c8:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80012cc:	60fb      	str	r3, [r7, #12]
    GPIO_InitStructure.Mode    = GPIO_MODE_OUTPUT_PP;
 80012ce:	2301      	movs	r3, #1
 80012d0:	613b      	str	r3, [r7, #16]
    GPIO_InitStructure.Pull    = GPIO_NOPULL;
 80012d2:	2300      	movs	r3, #0
 80012d4:	617b      	str	r3, [r7, #20]
    GPIO_InitStructure.Speed   = GPIO_SPEED_FAST;
 80012d6:	2302      	movs	r3, #2
 80012d8:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(LCD_WRX_GPIO_PORT, &GPIO_InitStructure);
 80012da:	f107 030c 	add.w	r3, r7, #12
 80012de:	4619      	mov	r1, r3
 80012e0:	4827      	ldr	r0, [pc, #156]	@ (8001380 <LCD_IO_Init+0xe8>)
 80012e2:	f001 fd61 	bl	8002da8 <HAL_GPIO_Init>
    
    LCD_RDX_GPIO_CLK_ENABLE();
 80012e6:	2300      	movs	r3, #0
 80012e8:	607b      	str	r3, [r7, #4]
 80012ea:	4b24      	ldr	r3, [pc, #144]	@ (800137c <LCD_IO_Init+0xe4>)
 80012ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80012ee:	4a23      	ldr	r2, [pc, #140]	@ (800137c <LCD_IO_Init+0xe4>)
 80012f0:	f043 0308 	orr.w	r3, r3, #8
 80012f4:	6313      	str	r3, [r2, #48]	@ 0x30
 80012f6:	4b21      	ldr	r3, [pc, #132]	@ (800137c <LCD_IO_Init+0xe4>)
 80012f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80012fa:	f003 0308 	and.w	r3, r3, #8
 80012fe:	607b      	str	r3, [r7, #4]
 8001300:	687b      	ldr	r3, [r7, #4]
    GPIO_InitStructure.Pin     = LCD_RDX_PIN;
 8001302:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001306:	60fb      	str	r3, [r7, #12]
    GPIO_InitStructure.Mode    = GPIO_MODE_OUTPUT_PP;
 8001308:	2301      	movs	r3, #1
 800130a:	613b      	str	r3, [r7, #16]
    GPIO_InitStructure.Pull    = GPIO_NOPULL;
 800130c:	2300      	movs	r3, #0
 800130e:	617b      	str	r3, [r7, #20]
    GPIO_InitStructure.Speed   = GPIO_SPEED_FAST;
 8001310:	2302      	movs	r3, #2
 8001312:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(LCD_RDX_GPIO_PORT, &GPIO_InitStructure);
 8001314:	f107 030c 	add.w	r3, r7, #12
 8001318:	4619      	mov	r1, r3
 800131a:	4819      	ldr	r0, [pc, #100]	@ (8001380 <LCD_IO_Init+0xe8>)
 800131c:	f001 fd44 	bl	8002da8 <HAL_GPIO_Init>
    
    /* Configure the LCD Control pins ----------------------------------------*/
    LCD_NCS_GPIO_CLK_ENABLE();
 8001320:	2300      	movs	r3, #0
 8001322:	603b      	str	r3, [r7, #0]
 8001324:	4b15      	ldr	r3, [pc, #84]	@ (800137c <LCD_IO_Init+0xe4>)
 8001326:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001328:	4a14      	ldr	r2, [pc, #80]	@ (800137c <LCD_IO_Init+0xe4>)
 800132a:	f043 0304 	orr.w	r3, r3, #4
 800132e:	6313      	str	r3, [r2, #48]	@ 0x30
 8001330:	4b12      	ldr	r3, [pc, #72]	@ (800137c <LCD_IO_Init+0xe4>)
 8001332:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001334:	f003 0304 	and.w	r3, r3, #4
 8001338:	603b      	str	r3, [r7, #0]
 800133a:	683b      	ldr	r3, [r7, #0]
    
    /* Configure NCS in Output Push-Pull mode */
    GPIO_InitStructure.Pin     = LCD_NCS_PIN;
 800133c:	2304      	movs	r3, #4
 800133e:	60fb      	str	r3, [r7, #12]
    GPIO_InitStructure.Mode    = GPIO_MODE_OUTPUT_PP;
 8001340:	2301      	movs	r3, #1
 8001342:	613b      	str	r3, [r7, #16]
    GPIO_InitStructure.Pull    = GPIO_NOPULL;
 8001344:	2300      	movs	r3, #0
 8001346:	617b      	str	r3, [r7, #20]
    GPIO_InitStructure.Speed   = GPIO_SPEED_FAST;
 8001348:	2302      	movs	r3, #2
 800134a:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(LCD_NCS_GPIO_PORT, &GPIO_InitStructure);
 800134c:	f107 030c 	add.w	r3, r7, #12
 8001350:	4619      	mov	r1, r3
 8001352:	480c      	ldr	r0, [pc, #48]	@ (8001384 <LCD_IO_Init+0xec>)
 8001354:	f001 fd28 	bl	8002da8 <HAL_GPIO_Init>
    
    /* Set or Reset the control line */
    LCD_CS_LOW();
 8001358:	2200      	movs	r2, #0
 800135a:	2104      	movs	r1, #4
 800135c:	4809      	ldr	r0, [pc, #36]	@ (8001384 <LCD_IO_Init+0xec>)
 800135e:	f001 ffdb 	bl	8003318 <HAL_GPIO_WritePin>
    LCD_CS_HIGH();
 8001362:	2201      	movs	r2, #1
 8001364:	2104      	movs	r1, #4
 8001366:	4807      	ldr	r0, [pc, #28]	@ (8001384 <LCD_IO_Init+0xec>)
 8001368:	f001 ffd6 	bl	8003318 <HAL_GPIO_WritePin>
    
    SPIx_Init();
 800136c:	f7ff fed6 	bl	800111c <SPIx_Init>
  }
}
 8001370:	bf00      	nop
 8001372:	3720      	adds	r7, #32
 8001374:	46bd      	mov	sp, r7
 8001376:	bd80      	pop	{r7, pc}
 8001378:	20000588 	.word	0x20000588
 800137c:	40023800 	.word	0x40023800
 8001380:	40020c00 	.word	0x40020c00
 8001384:	40020800 	.word	0x40020800

08001388 <LCD_IO_WriteData>:

/**
  * @brief  Writes register value.
  */
void LCD_IO_WriteData(uint16_t RegValue) 
{
 8001388:	b580      	push	{r7, lr}
 800138a:	b082      	sub	sp, #8
 800138c:	af00      	add	r7, sp, #0
 800138e:	4603      	mov	r3, r0
 8001390:	80fb      	strh	r3, [r7, #6]
  /* Set WRX to send data */
  LCD_WRX_HIGH();
 8001392:	2201      	movs	r2, #1
 8001394:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001398:	480a      	ldr	r0, [pc, #40]	@ (80013c4 <LCD_IO_WriteData+0x3c>)
 800139a:	f001 ffbd 	bl	8003318 <HAL_GPIO_WritePin>
  
  /* Reset LCD control line(/CS) and Send data */  
  LCD_CS_LOW();
 800139e:	2200      	movs	r2, #0
 80013a0:	2104      	movs	r1, #4
 80013a2:	4809      	ldr	r0, [pc, #36]	@ (80013c8 <LCD_IO_WriteData+0x40>)
 80013a4:	f001 ffb8 	bl	8003318 <HAL_GPIO_WritePin>
  SPIx_Write(RegValue);
 80013a8:	88fb      	ldrh	r3, [r7, #6]
 80013aa:	4618      	mov	r0, r3
 80013ac:	f7ff ff10 	bl	80011d0 <SPIx_Write>
  
  /* Deselect: Chip Select high */
  LCD_CS_HIGH();
 80013b0:	2201      	movs	r2, #1
 80013b2:	2104      	movs	r1, #4
 80013b4:	4804      	ldr	r0, [pc, #16]	@ (80013c8 <LCD_IO_WriteData+0x40>)
 80013b6:	f001 ffaf 	bl	8003318 <HAL_GPIO_WritePin>
}
 80013ba:	bf00      	nop
 80013bc:	3708      	adds	r7, #8
 80013be:	46bd      	mov	sp, r7
 80013c0:	bd80      	pop	{r7, pc}
 80013c2:	bf00      	nop
 80013c4:	40020c00 	.word	0x40020c00
 80013c8:	40020800 	.word	0x40020800

080013cc <LCD_IO_WriteReg>:

/**
  * @brief  Writes register address.
  */
void LCD_IO_WriteReg(uint8_t Reg) 
{
 80013cc:	b580      	push	{r7, lr}
 80013ce:	b082      	sub	sp, #8
 80013d0:	af00      	add	r7, sp, #0
 80013d2:	4603      	mov	r3, r0
 80013d4:	71fb      	strb	r3, [r7, #7]
  /* Reset WRX to send command */
  LCD_WRX_LOW();
 80013d6:	2200      	movs	r2, #0
 80013d8:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80013dc:	480a      	ldr	r0, [pc, #40]	@ (8001408 <LCD_IO_WriteReg+0x3c>)
 80013de:	f001 ff9b 	bl	8003318 <HAL_GPIO_WritePin>
  
  /* Reset LCD control line(/CS) and Send command */
  LCD_CS_LOW();
 80013e2:	2200      	movs	r2, #0
 80013e4:	2104      	movs	r1, #4
 80013e6:	4809      	ldr	r0, [pc, #36]	@ (800140c <LCD_IO_WriteReg+0x40>)
 80013e8:	f001 ff96 	bl	8003318 <HAL_GPIO_WritePin>
  SPIx_Write(Reg);
 80013ec:	79fb      	ldrb	r3, [r7, #7]
 80013ee:	b29b      	uxth	r3, r3
 80013f0:	4618      	mov	r0, r3
 80013f2:	f7ff feed 	bl	80011d0 <SPIx_Write>
  
  /* Deselect: Chip Select high */
  LCD_CS_HIGH();
 80013f6:	2201      	movs	r2, #1
 80013f8:	2104      	movs	r1, #4
 80013fa:	4804      	ldr	r0, [pc, #16]	@ (800140c <LCD_IO_WriteReg+0x40>)
 80013fc:	f001 ff8c 	bl	8003318 <HAL_GPIO_WritePin>
}
 8001400:	bf00      	nop
 8001402:	3708      	adds	r7, #8
 8001404:	46bd      	mov	sp, r7
 8001406:	bd80      	pop	{r7, pc}
 8001408:	40020c00 	.word	0x40020c00
 800140c:	40020800 	.word	0x40020800

08001410 <LCD_IO_ReadData>:
  * @param  RegValue Address of the register to read
  * @param  ReadSize Number of bytes to read
  * @retval Content of the register value
  */
uint32_t LCD_IO_ReadData(uint16_t RegValue, uint8_t ReadSize) 
{
 8001410:	b580      	push	{r7, lr}
 8001412:	b084      	sub	sp, #16
 8001414:	af00      	add	r7, sp, #0
 8001416:	4603      	mov	r3, r0
 8001418:	460a      	mov	r2, r1
 800141a:	80fb      	strh	r3, [r7, #6]
 800141c:	4613      	mov	r3, r2
 800141e:	717b      	strb	r3, [r7, #5]
  uint32_t readvalue = 0;
 8001420:	2300      	movs	r3, #0
 8001422:	60fb      	str	r3, [r7, #12]

  /* Select: Chip Select low */
  LCD_CS_LOW();
 8001424:	2200      	movs	r2, #0
 8001426:	2104      	movs	r1, #4
 8001428:	4810      	ldr	r0, [pc, #64]	@ (800146c <LCD_IO_ReadData+0x5c>)
 800142a:	f001 ff75 	bl	8003318 <HAL_GPIO_WritePin>

  /* Reset WRX to send command */
  LCD_WRX_LOW();
 800142e:	2200      	movs	r2, #0
 8001430:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001434:	480e      	ldr	r0, [pc, #56]	@ (8001470 <LCD_IO_ReadData+0x60>)
 8001436:	f001 ff6f 	bl	8003318 <HAL_GPIO_WritePin>
  
  SPIx_Write(RegValue);
 800143a:	88fb      	ldrh	r3, [r7, #6]
 800143c:	4618      	mov	r0, r3
 800143e:	f7ff fec7 	bl	80011d0 <SPIx_Write>
  
  readvalue = SPIx_Read(ReadSize);
 8001442:	797b      	ldrb	r3, [r7, #5]
 8001444:	4618      	mov	r0, r3
 8001446:	f7ff fea3 	bl	8001190 <SPIx_Read>
 800144a:	60f8      	str	r0, [r7, #12]

  /* Set WRX to send data */
  LCD_WRX_HIGH();
 800144c:	2201      	movs	r2, #1
 800144e:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001452:	4807      	ldr	r0, [pc, #28]	@ (8001470 <LCD_IO_ReadData+0x60>)
 8001454:	f001 ff60 	bl	8003318 <HAL_GPIO_WritePin>

  /* Deselect: Chip Select high */
  LCD_CS_HIGH();
 8001458:	2201      	movs	r2, #1
 800145a:	2104      	movs	r1, #4
 800145c:	4803      	ldr	r0, [pc, #12]	@ (800146c <LCD_IO_ReadData+0x5c>)
 800145e:	f001 ff5b 	bl	8003318 <HAL_GPIO_WritePin>
  
  return readvalue;
 8001462:	68fb      	ldr	r3, [r7, #12]
}
 8001464:	4618      	mov	r0, r3
 8001466:	3710      	adds	r7, #16
 8001468:	46bd      	mov	sp, r7
 800146a:	bd80      	pop	{r7, pc}
 800146c:	40020800 	.word	0x40020800
 8001470:	40020c00 	.word	0x40020c00

08001474 <LCD_Delay>:
/**
  * @brief  Wait for loop in ms.
  * @param  Delay in ms.
  */
void LCD_Delay(uint32_t Delay)
{
 8001474:	b580      	push	{r7, lr}
 8001476:	b082      	sub	sp, #8
 8001478:	af00      	add	r7, sp, #0
 800147a:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 800147c:	6878      	ldr	r0, [r7, #4]
 800147e:	f000 ffc7 	bl	8002410 <HAL_Delay>
}
 8001482:	bf00      	nop
 8001484:	3708      	adds	r7, #8
 8001486:	46bd      	mov	sp, r7
 8001488:	bd80      	pop	{r7, pc}
	...

0800148c <BSP_LCD_Init>:
/**
  * @brief  Initializes the LCD.
  * @retval LCD state
  */
uint8_t BSP_LCD_Init(void)
{ 
 800148c:	b580      	push	{r7, lr}
 800148e:	af00      	add	r7, sp, #0
  /* PIN EXTC is not connected to VDD and then LCD_READ_ID4 is not accessible. */
  /* In this case, ReadID function is bypassed.*/  
  /*if(ili9341_drv.ReadID() == ILI9341_ID)*/

    /* LTDC Configuration ----------------------------------------------------*/
    LtdcHandler.Instance = LTDC;
 8001490:	4b2d      	ldr	r3, [pc, #180]	@ (8001548 <BSP_LCD_Init+0xbc>)
 8001492:	4a2e      	ldr	r2, [pc, #184]	@ (800154c <BSP_LCD_Init+0xc0>)
 8001494:	601a      	str	r2, [r3, #0]
          ActiveH=320 (323-2-2+1)
          VFP=4 (327-320-2-2+1)
      */
    
    /* Configure horizontal synchronization width */
    LtdcHandler.Init.HorizontalSync = ILI9341_HSYNC;
 8001496:	4b2c      	ldr	r3, [pc, #176]	@ (8001548 <BSP_LCD_Init+0xbc>)
 8001498:	2209      	movs	r2, #9
 800149a:	615a      	str	r2, [r3, #20]
    /* Configure vertical synchronization height */
    LtdcHandler.Init.VerticalSync = ILI9341_VSYNC;
 800149c:	4b2a      	ldr	r3, [pc, #168]	@ (8001548 <BSP_LCD_Init+0xbc>)
 800149e:	2201      	movs	r2, #1
 80014a0:	619a      	str	r2, [r3, #24]
    /* Configure accumulated horizontal back porch */
    LtdcHandler.Init.AccumulatedHBP = ILI9341_HBP;
 80014a2:	4b29      	ldr	r3, [pc, #164]	@ (8001548 <BSP_LCD_Init+0xbc>)
 80014a4:	221d      	movs	r2, #29
 80014a6:	61da      	str	r2, [r3, #28]
    /* Configure accumulated vertical back porch */
    LtdcHandler.Init.AccumulatedVBP = ILI9341_VBP;
 80014a8:	4b27      	ldr	r3, [pc, #156]	@ (8001548 <BSP_LCD_Init+0xbc>)
 80014aa:	2203      	movs	r2, #3
 80014ac:	621a      	str	r2, [r3, #32]
    /* Configure accumulated active width */
    LtdcHandler.Init.AccumulatedActiveW = 269;
 80014ae:	4b26      	ldr	r3, [pc, #152]	@ (8001548 <BSP_LCD_Init+0xbc>)
 80014b0:	f240 120d 	movw	r2, #269	@ 0x10d
 80014b4:	625a      	str	r2, [r3, #36]	@ 0x24
    /* Configure accumulated active height */
    LtdcHandler.Init.AccumulatedActiveH = 323;
 80014b6:	4b24      	ldr	r3, [pc, #144]	@ (8001548 <BSP_LCD_Init+0xbc>)
 80014b8:	f240 1243 	movw	r2, #323	@ 0x143
 80014bc:	629a      	str	r2, [r3, #40]	@ 0x28
    /* Configure total width */
    LtdcHandler.Init.TotalWidth = 279;
 80014be:	4b22      	ldr	r3, [pc, #136]	@ (8001548 <BSP_LCD_Init+0xbc>)
 80014c0:	f240 1217 	movw	r2, #279	@ 0x117
 80014c4:	62da      	str	r2, [r3, #44]	@ 0x2c
    /* Configure total height */
    LtdcHandler.Init.TotalHeigh = 327;
 80014c6:	4b20      	ldr	r3, [pc, #128]	@ (8001548 <BSP_LCD_Init+0xbc>)
 80014c8:	f240 1247 	movw	r2, #327	@ 0x147
 80014cc:	631a      	str	r2, [r3, #48]	@ 0x30
    
    /* Configure R,G,B component values for LCD background color */
    LtdcHandler.Init.Backcolor.Red= 0;
 80014ce:	4b1e      	ldr	r3, [pc, #120]	@ (8001548 <BSP_LCD_Init+0xbc>)
 80014d0:	2200      	movs	r2, #0
 80014d2:	f883 2036 	strb.w	r2, [r3, #54]	@ 0x36
    LtdcHandler.Init.Backcolor.Blue= 0;
 80014d6:	4b1c      	ldr	r3, [pc, #112]	@ (8001548 <BSP_LCD_Init+0xbc>)
 80014d8:	2200      	movs	r2, #0
 80014da:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    LtdcHandler.Init.Backcolor.Green= 0;
 80014de:	4b1a      	ldr	r3, [pc, #104]	@ (8001548 <BSP_LCD_Init+0xbc>)
 80014e0:	2200      	movs	r2, #0
 80014e2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    /* LCD clock configuration */
    /* PLLSAI_VCO Input = HSE_VALUE/PLL_M = 1 Mhz */
    /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN = 192 Mhz */
    /* PLLLCDCLK = PLLSAI_VCO Output/PLLSAIR = 192/4 = 48 Mhz */
    /* LTDC clock frequency = PLLLCDCLK / LTDC_PLLSAI_DIVR_8 = 48/4 = 6Mhz */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 80014e6:	4b1a      	ldr	r3, [pc, #104]	@ (8001550 <BSP_LCD_Init+0xc4>)
 80014e8:	2208      	movs	r2, #8
 80014ea:	601a      	str	r2, [r3, #0]
    PeriphClkInitStruct.PLLSAI.PLLSAIN = 192;
 80014ec:	4b18      	ldr	r3, [pc, #96]	@ (8001550 <BSP_LCD_Init+0xc4>)
 80014ee:	22c0      	movs	r2, #192	@ 0xc0
 80014f0:	611a      	str	r2, [r3, #16]
    PeriphClkInitStruct.PLLSAI.PLLSAIR = 4;
 80014f2:	4b17      	ldr	r3, [pc, #92]	@ (8001550 <BSP_LCD_Init+0xc4>)
 80014f4:	2204      	movs	r2, #4
 80014f6:	619a      	str	r2, [r3, #24]
    PeriphClkInitStruct.PLLSAIDivR = RCC_PLLSAIDIVR_8;
 80014f8:	4b15      	ldr	r3, [pc, #84]	@ (8001550 <BSP_LCD_Init+0xc4>)
 80014fa:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 80014fe:	625a      	str	r2, [r3, #36]	@ 0x24
    HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct); 
 8001500:	4813      	ldr	r0, [pc, #76]	@ (8001550 <BSP_LCD_Init+0xc4>)
 8001502:	f003 f8a3 	bl	800464c <HAL_RCCEx_PeriphCLKConfig>
    
    /* Polarity */
    LtdcHandler.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 8001506:	4b10      	ldr	r3, [pc, #64]	@ (8001548 <BSP_LCD_Init+0xbc>)
 8001508:	2200      	movs	r2, #0
 800150a:	605a      	str	r2, [r3, #4]
    LtdcHandler.Init.VSPolarity = LTDC_VSPOLARITY_AL;
 800150c:	4b0e      	ldr	r3, [pc, #56]	@ (8001548 <BSP_LCD_Init+0xbc>)
 800150e:	2200      	movs	r2, #0
 8001510:	609a      	str	r2, [r3, #8]
    LtdcHandler.Init.DEPolarity = LTDC_DEPOLARITY_AL;
 8001512:	4b0d      	ldr	r3, [pc, #52]	@ (8001548 <BSP_LCD_Init+0xbc>)
 8001514:	2200      	movs	r2, #0
 8001516:	60da      	str	r2, [r3, #12]
    LtdcHandler.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 8001518:	4b0b      	ldr	r3, [pc, #44]	@ (8001548 <BSP_LCD_Init+0xbc>)
 800151a:	2200      	movs	r2, #0
 800151c:	611a      	str	r2, [r3, #16]
    
    BSP_LCD_MspInit();
 800151e:	f000 f839 	bl	8001594 <BSP_LCD_MspInit>
    HAL_LTDC_Init(&LtdcHandler); 
 8001522:	4809      	ldr	r0, [pc, #36]	@ (8001548 <BSP_LCD_Init+0xbc>)
 8001524:	f002 f8d2 	bl	80036cc <HAL_LTDC_Init>
    
    /* Select the device */
    LcdDrv = &ili9341_drv;
 8001528:	4b0a      	ldr	r3, [pc, #40]	@ (8001554 <BSP_LCD_Init+0xc8>)
 800152a:	4a0b      	ldr	r2, [pc, #44]	@ (8001558 <BSP_LCD_Init+0xcc>)
 800152c:	601a      	str	r2, [r3, #0]

    /* LCD Init */	 
    LcdDrv->Init();
 800152e:	4b09      	ldr	r3, [pc, #36]	@ (8001554 <BSP_LCD_Init+0xc8>)
 8001530:	681b      	ldr	r3, [r3, #0]
 8001532:	681b      	ldr	r3, [r3, #0]
 8001534:	4798      	blx	r3

    /* Initialize the SDRAM */
    BSP_SDRAM_Init();
 8001536:	f000 f903 	bl	8001740 <BSP_SDRAM_Init>

    /* Initialize the font */
    BSP_LCD_SetFont(&LCD_DEFAULT_FONT);
 800153a:	4808      	ldr	r0, [pc, #32]	@ (800155c <BSP_LCD_Init+0xd0>)
 800153c:	f000 f810 	bl	8001560 <BSP_LCD_SetFont>

  return LCD_OK;
 8001540:	2300      	movs	r3, #0
}  
 8001542:	4618      	mov	r0, r3
 8001544:	bd80      	pop	{r7, pc}
 8001546:	bf00      	nop
 8001548:	2000058c 	.word	0x2000058c
 800154c:	40016800 	.word	0x40016800
 8001550:	20000634 	.word	0x20000634
 8001554:	20000680 	.word	0x20000680
 8001558:	20000008 	.word	0x20000008
 800155c:	20000000 	.word	0x20000000

08001560 <BSP_LCD_SetFont>:
/**
  * @brief  Sets the Text Font.
  * @param  pFonts: the layer font to be used
  */
void BSP_LCD_SetFont(sFONT *pFonts)
{
 8001560:	b480      	push	{r7}
 8001562:	b083      	sub	sp, #12
 8001564:	af00      	add	r7, sp, #0
 8001566:	6078      	str	r0, [r7, #4]
  DrawProp[ActiveLayer].pFont = pFonts;
 8001568:	4b08      	ldr	r3, [pc, #32]	@ (800158c <BSP_LCD_SetFont+0x2c>)
 800156a:	681a      	ldr	r2, [r3, #0]
 800156c:	4908      	ldr	r1, [pc, #32]	@ (8001590 <BSP_LCD_SetFont+0x30>)
 800156e:	4613      	mov	r3, r2
 8001570:	005b      	lsls	r3, r3, #1
 8001572:	4413      	add	r3, r2
 8001574:	009b      	lsls	r3, r3, #2
 8001576:	440b      	add	r3, r1
 8001578:	3308      	adds	r3, #8
 800157a:	687a      	ldr	r2, [r7, #4]
 800157c:	601a      	str	r2, [r3, #0]
}
 800157e:	bf00      	nop
 8001580:	370c      	adds	r7, #12
 8001582:	46bd      	mov	sp, r7
 8001584:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001588:	4770      	bx	lr
 800158a:	bf00      	nop
 800158c:	20000664 	.word	0x20000664
 8001590:	20000668 	.word	0x20000668

08001594 <BSP_LCD_MspInit>:

/**
  * @brief  Initializes the LTDC MSP.
  */
__weak void BSP_LCD_MspInit(void)
{
 8001594:	b580      	push	{r7, lr}
 8001596:	b08e      	sub	sp, #56	@ 0x38
 8001598:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStructure;
  
  /* Enable the LTDC and DMA2D Clock */
  __HAL_RCC_LTDC_CLK_ENABLE();
 800159a:	2300      	movs	r3, #0
 800159c:	623b      	str	r3, [r7, #32]
 800159e:	4b61      	ldr	r3, [pc, #388]	@ (8001724 <BSP_LCD_MspInit+0x190>)
 80015a0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80015a2:	4a60      	ldr	r2, [pc, #384]	@ (8001724 <BSP_LCD_MspInit+0x190>)
 80015a4:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80015a8:	6453      	str	r3, [r2, #68]	@ 0x44
 80015aa:	4b5e      	ldr	r3, [pc, #376]	@ (8001724 <BSP_LCD_MspInit+0x190>)
 80015ac:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80015ae:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80015b2:	623b      	str	r3, [r7, #32]
 80015b4:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_DMA2D_CLK_ENABLE(); 
 80015b6:	2300      	movs	r3, #0
 80015b8:	61fb      	str	r3, [r7, #28]
 80015ba:	4b5a      	ldr	r3, [pc, #360]	@ (8001724 <BSP_LCD_MspInit+0x190>)
 80015bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80015be:	4a59      	ldr	r2, [pc, #356]	@ (8001724 <BSP_LCD_MspInit+0x190>)
 80015c0:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 80015c4:	6313      	str	r3, [r2, #48]	@ 0x30
 80015c6:	4b57      	ldr	r3, [pc, #348]	@ (8001724 <BSP_LCD_MspInit+0x190>)
 80015c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80015ca:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80015ce:	61fb      	str	r3, [r7, #28]
 80015d0:	69fb      	ldr	r3, [r7, #28]
  
  /* Enable GPIOs clock */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80015d2:	2300      	movs	r3, #0
 80015d4:	61bb      	str	r3, [r7, #24]
 80015d6:	4b53      	ldr	r3, [pc, #332]	@ (8001724 <BSP_LCD_MspInit+0x190>)
 80015d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80015da:	4a52      	ldr	r2, [pc, #328]	@ (8001724 <BSP_LCD_MspInit+0x190>)
 80015dc:	f043 0301 	orr.w	r3, r3, #1
 80015e0:	6313      	str	r3, [r2, #48]	@ 0x30
 80015e2:	4b50      	ldr	r3, [pc, #320]	@ (8001724 <BSP_LCD_MspInit+0x190>)
 80015e4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80015e6:	f003 0301 	and.w	r3, r3, #1
 80015ea:	61bb      	str	r3, [r7, #24]
 80015ec:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80015ee:	2300      	movs	r3, #0
 80015f0:	617b      	str	r3, [r7, #20]
 80015f2:	4b4c      	ldr	r3, [pc, #304]	@ (8001724 <BSP_LCD_MspInit+0x190>)
 80015f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80015f6:	4a4b      	ldr	r2, [pc, #300]	@ (8001724 <BSP_LCD_MspInit+0x190>)
 80015f8:	f043 0302 	orr.w	r3, r3, #2
 80015fc:	6313      	str	r3, [r2, #48]	@ 0x30
 80015fe:	4b49      	ldr	r3, [pc, #292]	@ (8001724 <BSP_LCD_MspInit+0x190>)
 8001600:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001602:	f003 0302 	and.w	r3, r3, #2
 8001606:	617b      	str	r3, [r7, #20]
 8001608:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800160a:	2300      	movs	r3, #0
 800160c:	613b      	str	r3, [r7, #16]
 800160e:	4b45      	ldr	r3, [pc, #276]	@ (8001724 <BSP_LCD_MspInit+0x190>)
 8001610:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001612:	4a44      	ldr	r2, [pc, #272]	@ (8001724 <BSP_LCD_MspInit+0x190>)
 8001614:	f043 0304 	orr.w	r3, r3, #4
 8001618:	6313      	str	r3, [r2, #48]	@ 0x30
 800161a:	4b42      	ldr	r3, [pc, #264]	@ (8001724 <BSP_LCD_MspInit+0x190>)
 800161c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800161e:	f003 0304 	and.w	r3, r3, #4
 8001622:	613b      	str	r3, [r7, #16]
 8001624:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001626:	2300      	movs	r3, #0
 8001628:	60fb      	str	r3, [r7, #12]
 800162a:	4b3e      	ldr	r3, [pc, #248]	@ (8001724 <BSP_LCD_MspInit+0x190>)
 800162c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800162e:	4a3d      	ldr	r2, [pc, #244]	@ (8001724 <BSP_LCD_MspInit+0x190>)
 8001630:	f043 0308 	orr.w	r3, r3, #8
 8001634:	6313      	str	r3, [r2, #48]	@ 0x30
 8001636:	4b3b      	ldr	r3, [pc, #236]	@ (8001724 <BSP_LCD_MspInit+0x190>)
 8001638:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800163a:	f003 0308 	and.w	r3, r3, #8
 800163e:	60fb      	str	r3, [r7, #12]
 8001640:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001642:	2300      	movs	r3, #0
 8001644:	60bb      	str	r3, [r7, #8]
 8001646:	4b37      	ldr	r3, [pc, #220]	@ (8001724 <BSP_LCD_MspInit+0x190>)
 8001648:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800164a:	4a36      	ldr	r2, [pc, #216]	@ (8001724 <BSP_LCD_MspInit+0x190>)
 800164c:	f043 0320 	orr.w	r3, r3, #32
 8001650:	6313      	str	r3, [r2, #48]	@ 0x30
 8001652:	4b34      	ldr	r3, [pc, #208]	@ (8001724 <BSP_LCD_MspInit+0x190>)
 8001654:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001656:	f003 0320 	and.w	r3, r3, #32
 800165a:	60bb      	str	r3, [r7, #8]
 800165c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800165e:	2300      	movs	r3, #0
 8001660:	607b      	str	r3, [r7, #4]
 8001662:	4b30      	ldr	r3, [pc, #192]	@ (8001724 <BSP_LCD_MspInit+0x190>)
 8001664:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001666:	4a2f      	ldr	r2, [pc, #188]	@ (8001724 <BSP_LCD_MspInit+0x190>)
 8001668:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800166c:	6313      	str	r3, [r2, #48]	@ 0x30
 800166e:	4b2d      	ldr	r3, [pc, #180]	@ (8001724 <BSP_LCD_MspInit+0x190>)
 8001670:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001672:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001676:	607b      	str	r3, [r7, #4]
 8001678:	687b      	ldr	r3, [r7, #4]
            |  LCD_TFT CLK   <-> PG.07  | LCD_TFT DE   <->  PF.10 |
             -----------------------------------------------------
  */

  /* GPIOA configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_3 | GPIO_PIN_4 | GPIO_PIN_6 |
 800167a:	f641 0358 	movw	r3, #6232	@ 0x1858
 800167e:	627b      	str	r3, [r7, #36]	@ 0x24
                           GPIO_PIN_11 | GPIO_PIN_12;
  GPIO_InitStructure.Mode = GPIO_MODE_AF_PP;
 8001680:	2302      	movs	r3, #2
 8001682:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStructure.Pull = GPIO_NOPULL;
 8001684:	2300      	movs	r3, #0
 8001686:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStructure.Speed = GPIO_SPEED_FAST;
 8001688:	2302      	movs	r3, #2
 800168a:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStructure.Alternate= GPIO_AF14_LTDC;
 800168c:	230e      	movs	r3, #14
 800168e:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStructure);
 8001690:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001694:	4619      	mov	r1, r3
 8001696:	4824      	ldr	r0, [pc, #144]	@ (8001728 <BSP_LCD_MspInit+0x194>)
 8001698:	f001 fb86 	bl	8002da8 <HAL_GPIO_Init>

 /* GPIOB configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_8 | \
 800169c:	f44f 6370 	mov.w	r3, #3840	@ 0xf00
 80016a0:	627b      	str	r3, [r7, #36]	@ 0x24
                           GPIO_PIN_9 | GPIO_PIN_10 | GPIO_PIN_11;
  HAL_GPIO_Init(GPIOB, &GPIO_InitStructure);
 80016a2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80016a6:	4619      	mov	r1, r3
 80016a8:	4820      	ldr	r0, [pc, #128]	@ (800172c <BSP_LCD_MspInit+0x198>)
 80016aa:	f001 fb7d 	bl	8002da8 <HAL_GPIO_Init>

 /* GPIOC configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_6 | GPIO_PIN_7 | GPIO_PIN_10;
 80016ae:	f44f 6398 	mov.w	r3, #1216	@ 0x4c0
 80016b2:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStructure);
 80016b4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80016b8:	4619      	mov	r1, r3
 80016ba:	481d      	ldr	r0, [pc, #116]	@ (8001730 <BSP_LCD_MspInit+0x19c>)
 80016bc:	f001 fb74 	bl	8002da8 <HAL_GPIO_Init>

 /* GPIOD configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_3 | GPIO_PIN_6;
 80016c0:	2348      	movs	r3, #72	@ 0x48
 80016c2:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStructure);
 80016c4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80016c8:	4619      	mov	r1, r3
 80016ca:	481a      	ldr	r0, [pc, #104]	@ (8001734 <BSP_LCD_MspInit+0x1a0>)
 80016cc:	f001 fb6c 	bl	8002da8 <HAL_GPIO_Init>
  
 /* GPIOF configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_10;
 80016d0:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80016d4:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOF, &GPIO_InitStructure);     
 80016d6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80016da:	4619      	mov	r1, r3
 80016dc:	4816      	ldr	r0, [pc, #88]	@ (8001738 <BSP_LCD_MspInit+0x1a4>)
 80016de:	f001 fb63 	bl	8002da8 <HAL_GPIO_Init>

 /* GPIOG configuration */  
  GPIO_InitStructure.Pin = GPIO_PIN_6 | GPIO_PIN_7 | \
 80016e2:	f44f 630c 	mov.w	r3, #2240	@ 0x8c0
 80016e6:	627b      	str	r3, [r7, #36]	@ 0x24
                           GPIO_PIN_11;
  HAL_GPIO_Init(GPIOG, &GPIO_InitStructure);
 80016e8:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80016ec:	4619      	mov	r1, r3
 80016ee:	4813      	ldr	r0, [pc, #76]	@ (800173c <BSP_LCD_MspInit+0x1a8>)
 80016f0:	f001 fb5a 	bl	8002da8 <HAL_GPIO_Init>
 
  /* GPIOB configuration */  
  GPIO_InitStructure.Pin = GPIO_PIN_0 | GPIO_PIN_1;
 80016f4:	2303      	movs	r3, #3
 80016f6:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStructure.Alternate= GPIO_AF9_LTDC;
 80016f8:	2309      	movs	r3, #9
 80016fa:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStructure);
 80016fc:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001700:	4619      	mov	r1, r3
 8001702:	480a      	ldr	r0, [pc, #40]	@ (800172c <BSP_LCD_MspInit+0x198>)
 8001704:	f001 fb50 	bl	8002da8 <HAL_GPIO_Init>

  /* GPIOG configuration */  
  GPIO_InitStructure.Pin = GPIO_PIN_10 | GPIO_PIN_12;
 8001708:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 800170c:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOG, &GPIO_InitStructure);
 800170e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001712:	4619      	mov	r1, r3
 8001714:	4809      	ldr	r0, [pc, #36]	@ (800173c <BSP_LCD_MspInit+0x1a8>)
 8001716:	f001 fb47 	bl	8002da8 <HAL_GPIO_Init>
}
 800171a:	bf00      	nop
 800171c:	3738      	adds	r7, #56	@ 0x38
 800171e:	46bd      	mov	sp, r7
 8001720:	bd80      	pop	{r7, pc}
 8001722:	bf00      	nop
 8001724:	40023800 	.word	0x40023800
 8001728:	40020000 	.word	0x40020000
 800172c:	40020400 	.word	0x40020400
 8001730:	40020800 	.word	0x40020800
 8001734:	40020c00 	.word	0x40020c00
 8001738:	40021400 	.word	0x40021400
 800173c:	40021800 	.word	0x40021800

08001740 <BSP_SDRAM_Init>:

/**
  * @brief  Initializes the SDRAM device.
  */
uint8_t BSP_SDRAM_Init(void)
{
 8001740:	b580      	push	{r7, lr}
 8001742:	af00      	add	r7, sp, #0
  static uint8_t sdramstatus = SDRAM_ERROR;

  /* SDRAM device configuration */
  SdramHandle.Instance = FMC_SDRAM_DEVICE;
 8001744:	4b29      	ldr	r3, [pc, #164]	@ (80017ec <BSP_SDRAM_Init+0xac>)
 8001746:	4a2a      	ldr	r2, [pc, #168]	@ (80017f0 <BSP_SDRAM_Init+0xb0>)
 8001748:	601a      	str	r2, [r3, #0]

  /* FMC Configuration -------------------------------------------------------*/
  /* FMC SDRAM Bank configuration */
  /* Timing configuration for 90 Mhz of SD clock frequency (180Mhz/2) */
  /* TMRD: 2 Clock cycles */
  Timing.LoadToActiveDelay    = 2;
 800174a:	4b2a      	ldr	r3, [pc, #168]	@ (80017f4 <BSP_SDRAM_Init+0xb4>)
 800174c:	2202      	movs	r2, #2
 800174e:	601a      	str	r2, [r3, #0]
  /* TXSR: min=70ns (7x11.11ns) */
  Timing.ExitSelfRefreshDelay = 7;
 8001750:	4b28      	ldr	r3, [pc, #160]	@ (80017f4 <BSP_SDRAM_Init+0xb4>)
 8001752:	2207      	movs	r2, #7
 8001754:	605a      	str	r2, [r3, #4]
  /* TRAS: min=42ns (4x11.11ns) max=120k (ns) */
  Timing.SelfRefreshTime      = 4;
 8001756:	4b27      	ldr	r3, [pc, #156]	@ (80017f4 <BSP_SDRAM_Init+0xb4>)
 8001758:	2204      	movs	r2, #4
 800175a:	609a      	str	r2, [r3, #8]
  /* TRC:  min=70 (7x11.11ns) */
  Timing.RowCycleDelay        = 7;
 800175c:	4b25      	ldr	r3, [pc, #148]	@ (80017f4 <BSP_SDRAM_Init+0xb4>)
 800175e:	2207      	movs	r2, #7
 8001760:	60da      	str	r2, [r3, #12]
  /* TWR:  min=1+ 7ns (1+1x11.11ns) */
  Timing.WriteRecoveryTime    = 2;
 8001762:	4b24      	ldr	r3, [pc, #144]	@ (80017f4 <BSP_SDRAM_Init+0xb4>)
 8001764:	2202      	movs	r2, #2
 8001766:	611a      	str	r2, [r3, #16]
  /* TRP:  20ns => 2x11.11ns*/
  Timing.RPDelay              = 2;
 8001768:	4b22      	ldr	r3, [pc, #136]	@ (80017f4 <BSP_SDRAM_Init+0xb4>)
 800176a:	2202      	movs	r2, #2
 800176c:	615a      	str	r2, [r3, #20]
  /* TRCD: 20ns => 2x11.11ns */
  Timing.RCDDelay             = 2;
 800176e:	4b21      	ldr	r3, [pc, #132]	@ (80017f4 <BSP_SDRAM_Init+0xb4>)
 8001770:	2202      	movs	r2, #2
 8001772:	619a      	str	r2, [r3, #24]
  
  /* FMC SDRAM control configuration */
  SdramHandle.Init.SDBank             = FMC_SDRAM_BANK2;
 8001774:	4b1d      	ldr	r3, [pc, #116]	@ (80017ec <BSP_SDRAM_Init+0xac>)
 8001776:	2201      	movs	r2, #1
 8001778:	605a      	str	r2, [r3, #4]
  /* Row addressing: [7:0] */
  SdramHandle.Init.ColumnBitsNumber   = FMC_SDRAM_COLUMN_BITS_NUM_8;
 800177a:	4b1c      	ldr	r3, [pc, #112]	@ (80017ec <BSP_SDRAM_Init+0xac>)
 800177c:	2200      	movs	r2, #0
 800177e:	609a      	str	r2, [r3, #8]
  /* Column addressing: [11:0] */
  SdramHandle.Init.RowBitsNumber      = FMC_SDRAM_ROW_BITS_NUM_12;
 8001780:	4b1a      	ldr	r3, [pc, #104]	@ (80017ec <BSP_SDRAM_Init+0xac>)
 8001782:	2204      	movs	r2, #4
 8001784:	60da      	str	r2, [r3, #12]
  SdramHandle.Init.MemoryDataWidth    = SDRAM_MEMORY_WIDTH;
 8001786:	4b19      	ldr	r3, [pc, #100]	@ (80017ec <BSP_SDRAM_Init+0xac>)
 8001788:	2210      	movs	r2, #16
 800178a:	611a      	str	r2, [r3, #16]
  SdramHandle.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 800178c:	4b17      	ldr	r3, [pc, #92]	@ (80017ec <BSP_SDRAM_Init+0xac>)
 800178e:	2240      	movs	r2, #64	@ 0x40
 8001790:	615a      	str	r2, [r3, #20]
  SdramHandle.Init.CASLatency         = SDRAM_CAS_LATENCY;
 8001792:	4b16      	ldr	r3, [pc, #88]	@ (80017ec <BSP_SDRAM_Init+0xac>)
 8001794:	f44f 72c0 	mov.w	r2, #384	@ 0x180
 8001798:	619a      	str	r2, [r3, #24]
  SdramHandle.Init.WriteProtection    = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 800179a:	4b14      	ldr	r3, [pc, #80]	@ (80017ec <BSP_SDRAM_Init+0xac>)
 800179c:	2200      	movs	r2, #0
 800179e:	61da      	str	r2, [r3, #28]
  SdramHandle.Init.SDClockPeriod      = SDCLOCK_PERIOD;
 80017a0:	4b12      	ldr	r3, [pc, #72]	@ (80017ec <BSP_SDRAM_Init+0xac>)
 80017a2:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80017a6:	621a      	str	r2, [r3, #32]
  SdramHandle.Init.ReadBurst          = SDRAM_READBURST;
 80017a8:	4b10      	ldr	r3, [pc, #64]	@ (80017ec <BSP_SDRAM_Init+0xac>)
 80017aa:	2200      	movs	r2, #0
 80017ac:	625a      	str	r2, [r3, #36]	@ 0x24
  SdramHandle.Init.ReadPipeDelay      = FMC_SDRAM_RPIPE_DELAY_1;
 80017ae:	4b0f      	ldr	r3, [pc, #60]	@ (80017ec <BSP_SDRAM_Init+0xac>)
 80017b0:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80017b4:	629a      	str	r2, [r3, #40]	@ 0x28
                    
  /* SDRAM controller initialization */
  /* __weak function can be surcharged by the application code */
  BSP_SDRAM_MspInit(&SdramHandle, (void *)NULL);
 80017b6:	2100      	movs	r1, #0
 80017b8:	480c      	ldr	r0, [pc, #48]	@ (80017ec <BSP_SDRAM_Init+0xac>)
 80017ba:	f000 f87f 	bl	80018bc <BSP_SDRAM_MspInit>
  if(HAL_SDRAM_Init(&SdramHandle, &Timing) != HAL_OK)
 80017be:	490d      	ldr	r1, [pc, #52]	@ (80017f4 <BSP_SDRAM_Init+0xb4>)
 80017c0:	480a      	ldr	r0, [pc, #40]	@ (80017ec <BSP_SDRAM_Init+0xac>)
 80017c2:	f003 f903 	bl	80049cc <HAL_SDRAM_Init>
 80017c6:	4603      	mov	r3, r0
 80017c8:	2b00      	cmp	r3, #0
 80017ca:	d003      	beq.n	80017d4 <BSP_SDRAM_Init+0x94>
  {
    sdramstatus = SDRAM_ERROR;
 80017cc:	4b0a      	ldr	r3, [pc, #40]	@ (80017f8 <BSP_SDRAM_Init+0xb8>)
 80017ce:	2201      	movs	r2, #1
 80017d0:	701a      	strb	r2, [r3, #0]
 80017d2:	e002      	b.n	80017da <BSP_SDRAM_Init+0x9a>
  }
  else
  {
    sdramstatus = SDRAM_OK;
 80017d4:	4b08      	ldr	r3, [pc, #32]	@ (80017f8 <BSP_SDRAM_Init+0xb8>)
 80017d6:	2200      	movs	r2, #0
 80017d8:	701a      	strb	r2, [r3, #0]
  }
  
  /* SDRAM initialization sequence */
  BSP_SDRAM_Initialization_sequence(REFRESH_COUNT);
 80017da:	f240 506a 	movw	r0, #1386	@ 0x56a
 80017de:	f000 f80d 	bl	80017fc <BSP_SDRAM_Initialization_sequence>
  
  return sdramstatus;
 80017e2:	4b05      	ldr	r3, [pc, #20]	@ (80017f8 <BSP_SDRAM_Init+0xb8>)
 80017e4:	781b      	ldrb	r3, [r3, #0]
}
 80017e6:	4618      	mov	r0, r3
 80017e8:	bd80      	pop	{r7, pc}
 80017ea:	bf00      	nop
 80017ec:	20000684 	.word	0x20000684
 80017f0:	a0000140 	.word	0xa0000140
 80017f4:	200006b8 	.word	0x200006b8
 80017f8:	20000044 	.word	0x20000044

080017fc <BSP_SDRAM_Initialization_sequence>:
/**
  * @brief  Programs the SDRAM device.
  * @param  RefreshCount: SDRAM refresh counter value 
  */
void BSP_SDRAM_Initialization_sequence(uint32_t RefreshCount)
{
 80017fc:	b580      	push	{r7, lr}
 80017fe:	b084      	sub	sp, #16
 8001800:	af00      	add	r7, sp, #0
 8001802:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpmrd =0;
 8001804:	2300      	movs	r3, #0
 8001806:	60fb      	str	r3, [r7, #12]
  
  /* Step 1:  Configure a clock configuration enable command */
  Command.CommandMode             = FMC_SDRAM_CMD_CLK_ENABLE;
 8001808:	4b2a      	ldr	r3, [pc, #168]	@ (80018b4 <BSP_SDRAM_Initialization_sequence+0xb8>)
 800180a:	2201      	movs	r2, #1
 800180c:	601a      	str	r2, [r3, #0]
  Command.CommandTarget           = FMC_SDRAM_CMD_TARGET_BANK2;
 800180e:	4b29      	ldr	r3, [pc, #164]	@ (80018b4 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8001810:	2208      	movs	r2, #8
 8001812:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber       = 1;
 8001814:	4b27      	ldr	r3, [pc, #156]	@ (80018b4 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8001816:	2201      	movs	r2, #1
 8001818:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition  = 0;
 800181a:	4b26      	ldr	r3, [pc, #152]	@ (80018b4 <BSP_SDRAM_Initialization_sequence+0xb8>)
 800181c:	2200      	movs	r2, #0
 800181e:	60da      	str	r2, [r3, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&SdramHandle, &Command, SDRAM_TIMEOUT);
 8001820:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001824:	4923      	ldr	r1, [pc, #140]	@ (80018b4 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8001826:	4824      	ldr	r0, [pc, #144]	@ (80018b8 <BSP_SDRAM_Initialization_sequence+0xbc>)
 8001828:	f003 f904 	bl	8004a34 <HAL_SDRAM_SendCommand>

  /* Step 2: Insert 100 us minimum delay */ 
  /* Inserted delay is equal to 1 ms due to systick time base unit (ms) */
  HAL_Delay(1);
 800182c:	2001      	movs	r0, #1
 800182e:	f000 fdef 	bl	8002410 <HAL_Delay>

  /* Step 3: Configure a PALL (precharge all) command */ 
  Command.CommandMode             = FMC_SDRAM_CMD_PALL;
 8001832:	4b20      	ldr	r3, [pc, #128]	@ (80018b4 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8001834:	2202      	movs	r2, #2
 8001836:	601a      	str	r2, [r3, #0]
  Command.CommandTarget           = FMC_SDRAM_CMD_TARGET_BANK2;
 8001838:	4b1e      	ldr	r3, [pc, #120]	@ (80018b4 <BSP_SDRAM_Initialization_sequence+0xb8>)
 800183a:	2208      	movs	r2, #8
 800183c:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber       = 1;
 800183e:	4b1d      	ldr	r3, [pc, #116]	@ (80018b4 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8001840:	2201      	movs	r2, #1
 8001842:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition  = 0;
 8001844:	4b1b      	ldr	r3, [pc, #108]	@ (80018b4 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8001846:	2200      	movs	r2, #0
 8001848:	60da      	str	r2, [r3, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&SdramHandle, &Command, SDRAM_TIMEOUT);  
 800184a:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800184e:	4919      	ldr	r1, [pc, #100]	@ (80018b4 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8001850:	4819      	ldr	r0, [pc, #100]	@ (80018b8 <BSP_SDRAM_Initialization_sequence+0xbc>)
 8001852:	f003 f8ef 	bl	8004a34 <HAL_SDRAM_SendCommand>
  
  /* Step 4: Configure an Auto Refresh command */ 
  Command.CommandMode             = FMC_SDRAM_CMD_AUTOREFRESH_MODE;
 8001856:	4b17      	ldr	r3, [pc, #92]	@ (80018b4 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8001858:	2203      	movs	r2, #3
 800185a:	601a      	str	r2, [r3, #0]
  Command.CommandTarget           = FMC_SDRAM_CMD_TARGET_BANK2;
 800185c:	4b15      	ldr	r3, [pc, #84]	@ (80018b4 <BSP_SDRAM_Initialization_sequence+0xb8>)
 800185e:	2208      	movs	r2, #8
 8001860:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber       = 4;
 8001862:	4b14      	ldr	r3, [pc, #80]	@ (80018b4 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8001864:	2204      	movs	r2, #4
 8001866:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition  = 0;
 8001868:	4b12      	ldr	r3, [pc, #72]	@ (80018b4 <BSP_SDRAM_Initialization_sequence+0xb8>)
 800186a:	2200      	movs	r2, #0
 800186c:	60da      	str	r2, [r3, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&SdramHandle, &Command, SDRAM_TIMEOUT);
 800186e:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001872:	4910      	ldr	r1, [pc, #64]	@ (80018b4 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8001874:	4810      	ldr	r0, [pc, #64]	@ (80018b8 <BSP_SDRAM_Initialization_sequence+0xbc>)
 8001876:	f003 f8dd 	bl	8004a34 <HAL_SDRAM_SendCommand>
  
  /* Step 5: Program the external memory mode register */
  tmpmrd = (uint32_t)SDRAM_MODEREG_BURST_LENGTH_1          |
 800187a:	f44f 730c 	mov.w	r3, #560	@ 0x230
 800187e:	60fb      	str	r3, [r7, #12]
                     SDRAM_MODEREG_BURST_TYPE_SEQUENTIAL   |
                     SDRAM_MODEREG_CAS_LATENCY_3           |
                     SDRAM_MODEREG_OPERATING_MODE_STANDARD |
                     SDRAM_MODEREG_WRITEBURST_MODE_SINGLE;
  
  Command.CommandMode             = FMC_SDRAM_CMD_LOAD_MODE;
 8001880:	4b0c      	ldr	r3, [pc, #48]	@ (80018b4 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8001882:	2204      	movs	r2, #4
 8001884:	601a      	str	r2, [r3, #0]
  Command.CommandTarget           = FMC_SDRAM_CMD_TARGET_BANK2;
 8001886:	4b0b      	ldr	r3, [pc, #44]	@ (80018b4 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8001888:	2208      	movs	r2, #8
 800188a:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber       = 1;
 800188c:	4b09      	ldr	r3, [pc, #36]	@ (80018b4 <BSP_SDRAM_Initialization_sequence+0xb8>)
 800188e:	2201      	movs	r2, #1
 8001890:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition  = tmpmrd;
 8001892:	68fb      	ldr	r3, [r7, #12]
 8001894:	4a07      	ldr	r2, [pc, #28]	@ (80018b4 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8001896:	60d3      	str	r3, [r2, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&SdramHandle, &Command, SDRAM_TIMEOUT);
 8001898:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800189c:	4905      	ldr	r1, [pc, #20]	@ (80018b4 <BSP_SDRAM_Initialization_sequence+0xb8>)
 800189e:	4806      	ldr	r0, [pc, #24]	@ (80018b8 <BSP_SDRAM_Initialization_sequence+0xbc>)
 80018a0:	f003 f8c8 	bl	8004a34 <HAL_SDRAM_SendCommand>
  
  /* Step 6: Set the refresh rate counter */
  /* Set the device refresh rate */
  HAL_SDRAM_ProgramRefreshRate(&SdramHandle, RefreshCount); 
 80018a4:	6879      	ldr	r1, [r7, #4]
 80018a6:	4804      	ldr	r0, [pc, #16]	@ (80018b8 <BSP_SDRAM_Initialization_sequence+0xbc>)
 80018a8:	f003 f8f9 	bl	8004a9e <HAL_SDRAM_ProgramRefreshRate>
}
 80018ac:	bf00      	nop
 80018ae:	3710      	adds	r7, #16
 80018b0:	46bd      	mov	sp, r7
 80018b2:	bd80      	pop	{r7, pc}
 80018b4:	200006d4 	.word	0x200006d4
 80018b8:	20000684 	.word	0x20000684

080018bc <BSP_SDRAM_MspInit>:
  * @note   This function can be surcharged by application code.
  * @param  hsdram: pointer on SDRAM handle
  * @param  Params: pointer on additional configuration parameters, can be NULL.
  */
__weak void BSP_SDRAM_MspInit(SDRAM_HandleTypeDef  *hsdram, void *Params)
{
 80018bc:	b580      	push	{r7, lr}
 80018be:	b090      	sub	sp, #64	@ 0x40
 80018c0:	af00      	add	r7, sp, #0
 80018c2:	6078      	str	r0, [r7, #4]
 80018c4:	6039      	str	r1, [r7, #0]
  static DMA_HandleTypeDef dmaHandle;
  GPIO_InitTypeDef GPIO_InitStructure;

  if(hsdram != (SDRAM_HandleTypeDef  *)NULL)
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	2b00      	cmp	r3, #0
 80018ca:	f000 80ec 	beq.w	8001aa6 <BSP_SDRAM_MspInit+0x1ea>
  {
  /* Enable FMC clock */
  __HAL_RCC_FMC_CLK_ENABLE();
 80018ce:	2300      	movs	r3, #0
 80018d0:	62bb      	str	r3, [r7, #40]	@ 0x28
 80018d2:	4b77      	ldr	r3, [pc, #476]	@ (8001ab0 <BSP_SDRAM_MspInit+0x1f4>)
 80018d4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80018d6:	4a76      	ldr	r2, [pc, #472]	@ (8001ab0 <BSP_SDRAM_MspInit+0x1f4>)
 80018d8:	f043 0301 	orr.w	r3, r3, #1
 80018dc:	6393      	str	r3, [r2, #56]	@ 0x38
 80018de:	4b74      	ldr	r3, [pc, #464]	@ (8001ab0 <BSP_SDRAM_MspInit+0x1f4>)
 80018e0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80018e2:	f003 0301 	and.w	r3, r3, #1
 80018e6:	62bb      	str	r3, [r7, #40]	@ 0x28
 80018e8:	6abb      	ldr	r3, [r7, #40]	@ 0x28

  /* Enable chosen DMAx clock */
  __DMAx_CLK_ENABLE();
 80018ea:	2300      	movs	r3, #0
 80018ec:	627b      	str	r3, [r7, #36]	@ 0x24
 80018ee:	4b70      	ldr	r3, [pc, #448]	@ (8001ab0 <BSP_SDRAM_MspInit+0x1f4>)
 80018f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80018f2:	4a6f      	ldr	r2, [pc, #444]	@ (8001ab0 <BSP_SDRAM_MspInit+0x1f4>)
 80018f4:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80018f8:	6313      	str	r3, [r2, #48]	@ 0x30
 80018fa:	4b6d      	ldr	r3, [pc, #436]	@ (8001ab0 <BSP_SDRAM_MspInit+0x1f4>)
 80018fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80018fe:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001902:	627b      	str	r3, [r7, #36]	@ 0x24
 8001904:	6a7b      	ldr	r3, [r7, #36]	@ 0x24

  /* Enable GPIOs clock */
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001906:	2300      	movs	r3, #0
 8001908:	623b      	str	r3, [r7, #32]
 800190a:	4b69      	ldr	r3, [pc, #420]	@ (8001ab0 <BSP_SDRAM_MspInit+0x1f4>)
 800190c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800190e:	4a68      	ldr	r2, [pc, #416]	@ (8001ab0 <BSP_SDRAM_MspInit+0x1f4>)
 8001910:	f043 0302 	orr.w	r3, r3, #2
 8001914:	6313      	str	r3, [r2, #48]	@ 0x30
 8001916:	4b66      	ldr	r3, [pc, #408]	@ (8001ab0 <BSP_SDRAM_MspInit+0x1f4>)
 8001918:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800191a:	f003 0302 	and.w	r3, r3, #2
 800191e:	623b      	str	r3, [r7, #32]
 8001920:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001922:	2300      	movs	r3, #0
 8001924:	61fb      	str	r3, [r7, #28]
 8001926:	4b62      	ldr	r3, [pc, #392]	@ (8001ab0 <BSP_SDRAM_MspInit+0x1f4>)
 8001928:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800192a:	4a61      	ldr	r2, [pc, #388]	@ (8001ab0 <BSP_SDRAM_MspInit+0x1f4>)
 800192c:	f043 0304 	orr.w	r3, r3, #4
 8001930:	6313      	str	r3, [r2, #48]	@ 0x30
 8001932:	4b5f      	ldr	r3, [pc, #380]	@ (8001ab0 <BSP_SDRAM_MspInit+0x1f4>)
 8001934:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001936:	f003 0304 	and.w	r3, r3, #4
 800193a:	61fb      	str	r3, [r7, #28]
 800193c:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800193e:	2300      	movs	r3, #0
 8001940:	61bb      	str	r3, [r7, #24]
 8001942:	4b5b      	ldr	r3, [pc, #364]	@ (8001ab0 <BSP_SDRAM_MspInit+0x1f4>)
 8001944:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001946:	4a5a      	ldr	r2, [pc, #360]	@ (8001ab0 <BSP_SDRAM_MspInit+0x1f4>)
 8001948:	f043 0308 	orr.w	r3, r3, #8
 800194c:	6313      	str	r3, [r2, #48]	@ 0x30
 800194e:	4b58      	ldr	r3, [pc, #352]	@ (8001ab0 <BSP_SDRAM_MspInit+0x1f4>)
 8001950:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001952:	f003 0308 	and.w	r3, r3, #8
 8001956:	61bb      	str	r3, [r7, #24]
 8001958:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800195a:	2300      	movs	r3, #0
 800195c:	617b      	str	r3, [r7, #20]
 800195e:	4b54      	ldr	r3, [pc, #336]	@ (8001ab0 <BSP_SDRAM_MspInit+0x1f4>)
 8001960:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001962:	4a53      	ldr	r2, [pc, #332]	@ (8001ab0 <BSP_SDRAM_MspInit+0x1f4>)
 8001964:	f043 0310 	orr.w	r3, r3, #16
 8001968:	6313      	str	r3, [r2, #48]	@ 0x30
 800196a:	4b51      	ldr	r3, [pc, #324]	@ (8001ab0 <BSP_SDRAM_MspInit+0x1f4>)
 800196c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800196e:	f003 0310 	and.w	r3, r3, #16
 8001972:	617b      	str	r3, [r7, #20]
 8001974:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001976:	2300      	movs	r3, #0
 8001978:	613b      	str	r3, [r7, #16]
 800197a:	4b4d      	ldr	r3, [pc, #308]	@ (8001ab0 <BSP_SDRAM_MspInit+0x1f4>)
 800197c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800197e:	4a4c      	ldr	r2, [pc, #304]	@ (8001ab0 <BSP_SDRAM_MspInit+0x1f4>)
 8001980:	f043 0320 	orr.w	r3, r3, #32
 8001984:	6313      	str	r3, [r2, #48]	@ 0x30
 8001986:	4b4a      	ldr	r3, [pc, #296]	@ (8001ab0 <BSP_SDRAM_MspInit+0x1f4>)
 8001988:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800198a:	f003 0320 	and.w	r3, r3, #32
 800198e:	613b      	str	r3, [r7, #16]
 8001990:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8001992:	2300      	movs	r3, #0
 8001994:	60fb      	str	r3, [r7, #12]
 8001996:	4b46      	ldr	r3, [pc, #280]	@ (8001ab0 <BSP_SDRAM_MspInit+0x1f4>)
 8001998:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800199a:	4a45      	ldr	r2, [pc, #276]	@ (8001ab0 <BSP_SDRAM_MspInit+0x1f4>)
 800199c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80019a0:	6313      	str	r3, [r2, #48]	@ 0x30
 80019a2:	4b43      	ldr	r3, [pc, #268]	@ (8001ab0 <BSP_SDRAM_MspInit+0x1f4>)
 80019a4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80019a6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80019aa:	60fb      	str	r3, [r7, #12]
 80019ac:	68fb      	ldr	r3, [r7, #12]
 +-------------------+  
  
*/
  
  /* Common GPIO configuration */
  GPIO_InitStructure.Mode  = GPIO_MODE_AF_PP;
 80019ae:	2302      	movs	r3, #2
 80019b0:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStructure.Speed = GPIO_SPEED_FAST;
 80019b2:	2302      	movs	r3, #2
 80019b4:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStructure.Pull  = GPIO_NOPULL;
 80019b6:	2300      	movs	r3, #0
 80019b8:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStructure.Alternate = GPIO_AF12_FMC;
 80019ba:	230c      	movs	r3, #12
 80019bc:	63fb      	str	r3, [r7, #60]	@ 0x3c

  /* GPIOB configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_5 | GPIO_PIN_6;
 80019be:	2360      	movs	r3, #96	@ 0x60
 80019c0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStructure);  
 80019c2:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80019c6:	4619      	mov	r1, r3
 80019c8:	483a      	ldr	r0, [pc, #232]	@ (8001ab4 <BSP_SDRAM_MspInit+0x1f8>)
 80019ca:	f001 f9ed 	bl	8002da8 <HAL_GPIO_Init>

  /* GPIOC configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_0;      
 80019ce:	2301      	movs	r3, #1
 80019d0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStructure);  
 80019d2:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80019d6:	4619      	mov	r1, r3
 80019d8:	4837      	ldr	r0, [pc, #220]	@ (8001ab8 <BSP_SDRAM_MspInit+0x1fc>)
 80019da:	f001 f9e5 	bl	8002da8 <HAL_GPIO_Init>
  
  /* GPIOD configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_0 | GPIO_PIN_1  | GPIO_PIN_8 |
 80019de:	f24c 7303 	movw	r3, #50947	@ 0xc703
 80019e2:	62fb      	str	r3, [r7, #44]	@ 0x2c
                           GPIO_PIN_9 | GPIO_PIN_10 | GPIO_PIN_14 |
                           GPIO_PIN_15;
  HAL_GPIO_Init(GPIOD, &GPIO_InitStructure);
 80019e4:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80019e8:	4619      	mov	r1, r3
 80019ea:	4834      	ldr	r0, [pc, #208]	@ (8001abc <BSP_SDRAM_MspInit+0x200>)
 80019ec:	f001 f9dc 	bl	8002da8 <HAL_GPIO_Init>

  /* GPIOE configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_0  | GPIO_PIN_1  | GPIO_PIN_7 |
 80019f0:	f64f 7383 	movw	r3, #65411	@ 0xff83
 80019f4:	62fb      	str	r3, [r7, #44]	@ 0x2c
                           GPIO_PIN_8  | GPIO_PIN_9  | GPIO_PIN_10 |
                           GPIO_PIN_11 | GPIO_PIN_12 | GPIO_PIN_13 |
                           GPIO_PIN_14 | GPIO_PIN_15;
  HAL_GPIO_Init(GPIOE, &GPIO_InitStructure);
 80019f6:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80019fa:	4619      	mov	r1, r3
 80019fc:	4830      	ldr	r0, [pc, #192]	@ (8001ac0 <BSP_SDRAM_MspInit+0x204>)
 80019fe:	f001 f9d3 	bl	8002da8 <HAL_GPIO_Init>

  /* GPIOF configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_0  | GPIO_PIN_1 | GPIO_PIN_2 | 
 8001a02:	f64f 033f 	movw	r3, #63551	@ 0xf83f
 8001a06:	62fb      	str	r3, [r7, #44]	@ 0x2c
                           GPIO_PIN_3  | GPIO_PIN_4 | GPIO_PIN_5 |
                           GPIO_PIN_11 | GPIO_PIN_12 | GPIO_PIN_13 |
                           GPIO_PIN_14 | GPIO_PIN_15;
  HAL_GPIO_Init(GPIOF, &GPIO_InitStructure);
 8001a08:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001a0c:	4619      	mov	r1, r3
 8001a0e:	482d      	ldr	r0, [pc, #180]	@ (8001ac4 <BSP_SDRAM_MspInit+0x208>)
 8001a10:	f001 f9ca 	bl	8002da8 <HAL_GPIO_Init>

  /* GPIOG configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_4 |
 8001a14:	f248 1333 	movw	r3, #33075	@ 0x8133
 8001a18:	62fb      	str	r3, [r7, #44]	@ 0x2c
                           GPIO_PIN_5 | GPIO_PIN_8 | GPIO_PIN_15;
  HAL_GPIO_Init(GPIOG, &GPIO_InitStructure);
 8001a1a:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001a1e:	4619      	mov	r1, r3
 8001a20:	4829      	ldr	r0, [pc, #164]	@ (8001ac8 <BSP_SDRAM_MspInit+0x20c>)
 8001a22:	f001 f9c1 	bl	8002da8 <HAL_GPIO_Init>

  /* Configure common DMA parameters */
  dmaHandle.Init.Channel             = SDRAM_DMAx_CHANNEL;
 8001a26:	4b29      	ldr	r3, [pc, #164]	@ (8001acc <BSP_SDRAM_MspInit+0x210>)
 8001a28:	2200      	movs	r2, #0
 8001a2a:	605a      	str	r2, [r3, #4]
  dmaHandle.Init.Direction           = DMA_MEMORY_TO_MEMORY;
 8001a2c:	4b27      	ldr	r3, [pc, #156]	@ (8001acc <BSP_SDRAM_MspInit+0x210>)
 8001a2e:	2280      	movs	r2, #128	@ 0x80
 8001a30:	609a      	str	r2, [r3, #8]
  dmaHandle.Init.PeriphInc           = DMA_PINC_ENABLE;
 8001a32:	4b26      	ldr	r3, [pc, #152]	@ (8001acc <BSP_SDRAM_MspInit+0x210>)
 8001a34:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001a38:	60da      	str	r2, [r3, #12]
  dmaHandle.Init.MemInc              = DMA_MINC_ENABLE;
 8001a3a:	4b24      	ldr	r3, [pc, #144]	@ (8001acc <BSP_SDRAM_MspInit+0x210>)
 8001a3c:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001a40:	611a      	str	r2, [r3, #16]
  dmaHandle.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8001a42:	4b22      	ldr	r3, [pc, #136]	@ (8001acc <BSP_SDRAM_MspInit+0x210>)
 8001a44:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8001a48:	615a      	str	r2, [r3, #20]
  dmaHandle.Init.MemDataAlignment    = DMA_MDATAALIGN_WORD;
 8001a4a:	4b20      	ldr	r3, [pc, #128]	@ (8001acc <BSP_SDRAM_MspInit+0x210>)
 8001a4c:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8001a50:	619a      	str	r2, [r3, #24]
  dmaHandle.Init.Mode                = DMA_NORMAL;
 8001a52:	4b1e      	ldr	r3, [pc, #120]	@ (8001acc <BSP_SDRAM_MspInit+0x210>)
 8001a54:	2200      	movs	r2, #0
 8001a56:	61da      	str	r2, [r3, #28]
  dmaHandle.Init.Priority            = DMA_PRIORITY_HIGH;
 8001a58:	4b1c      	ldr	r3, [pc, #112]	@ (8001acc <BSP_SDRAM_MspInit+0x210>)
 8001a5a:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8001a5e:	621a      	str	r2, [r3, #32]
  dmaHandle.Init.FIFOMode            = DMA_FIFOMODE_DISABLE;
 8001a60:	4b1a      	ldr	r3, [pc, #104]	@ (8001acc <BSP_SDRAM_MspInit+0x210>)
 8001a62:	2200      	movs	r2, #0
 8001a64:	625a      	str	r2, [r3, #36]	@ 0x24
  dmaHandle.Init.FIFOThreshold       = DMA_FIFO_THRESHOLD_FULL;
 8001a66:	4b19      	ldr	r3, [pc, #100]	@ (8001acc <BSP_SDRAM_MspInit+0x210>)
 8001a68:	2203      	movs	r2, #3
 8001a6a:	629a      	str	r2, [r3, #40]	@ 0x28
  dmaHandle.Init.MemBurst            = DMA_MBURST_SINGLE;
 8001a6c:	4b17      	ldr	r3, [pc, #92]	@ (8001acc <BSP_SDRAM_MspInit+0x210>)
 8001a6e:	2200      	movs	r2, #0
 8001a70:	62da      	str	r2, [r3, #44]	@ 0x2c
  dmaHandle.Init.PeriphBurst         = DMA_PBURST_SINGLE; 
 8001a72:	4b16      	ldr	r3, [pc, #88]	@ (8001acc <BSP_SDRAM_MspInit+0x210>)
 8001a74:	2200      	movs	r2, #0
 8001a76:	631a      	str	r2, [r3, #48]	@ 0x30
  
  dmaHandle.Instance = SDRAM_DMAx_STREAM;
 8001a78:	4b14      	ldr	r3, [pc, #80]	@ (8001acc <BSP_SDRAM_MspInit+0x210>)
 8001a7a:	4a15      	ldr	r2, [pc, #84]	@ (8001ad0 <BSP_SDRAM_MspInit+0x214>)
 8001a7c:	601a      	str	r2, [r3, #0]
  
  /* Associate the DMA handle */
  __HAL_LINKDMA(hsdram, hdma, dmaHandle);
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	4a12      	ldr	r2, [pc, #72]	@ (8001acc <BSP_SDRAM_MspInit+0x210>)
 8001a82:	631a      	str	r2, [r3, #48]	@ 0x30
 8001a84:	4a11      	ldr	r2, [pc, #68]	@ (8001acc <BSP_SDRAM_MspInit+0x210>)
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	6393      	str	r3, [r2, #56]	@ 0x38
  
  /* Deinitialize the stream for new transfer */
  HAL_DMA_DeInit(&dmaHandle);
 8001a8a:	4810      	ldr	r0, [pc, #64]	@ (8001acc <BSP_SDRAM_MspInit+0x210>)
 8001a8c:	f000 fe90 	bl	80027b0 <HAL_DMA_DeInit>
  
  /* Configure the DMA stream */
  HAL_DMA_Init(&dmaHandle); 
 8001a90:	480e      	ldr	r0, [pc, #56]	@ (8001acc <BSP_SDRAM_MspInit+0x210>)
 8001a92:	f000 fddf 	bl	8002654 <HAL_DMA_Init>
  
  /* NVIC configuration for DMA transfer complete interrupt */
  HAL_NVIC_SetPriority(SDRAM_DMAx_IRQn, 0x0F, 0);
 8001a96:	2200      	movs	r2, #0
 8001a98:	210f      	movs	r1, #15
 8001a9a:	2038      	movs	r0, #56	@ 0x38
 8001a9c:	f000 fd94 	bl	80025c8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(SDRAM_DMAx_IRQn);
 8001aa0:	2038      	movs	r0, #56	@ 0x38
 8001aa2:	f000 fdad 	bl	8002600 <HAL_NVIC_EnableIRQ>
  } /* of if(hsdram != (SDRAM_HandleTypeDef  *)NULL) */
}
 8001aa6:	bf00      	nop
 8001aa8:	3740      	adds	r7, #64	@ 0x40
 8001aaa:	46bd      	mov	sp, r7
 8001aac:	bd80      	pop	{r7, pc}
 8001aae:	bf00      	nop
 8001ab0:	40023800 	.word	0x40023800
 8001ab4:	40020400 	.word	0x40020400
 8001ab8:	40020800 	.word	0x40020800
 8001abc:	40020c00 	.word	0x40020c00
 8001ac0:	40021000 	.word	0x40021000
 8001ac4:	40021400 	.word	0x40021400
 8001ac8:	40021800 	.word	0x40021800
 8001acc:	200006e4 	.word	0x200006e4
 8001ad0:	40026410 	.word	0x40026410

08001ad4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001ad4:	b580      	push	{r7, lr}
 8001ad6:	b082      	sub	sp, #8
 8001ad8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001ada:	2300      	movs	r3, #0
 8001adc:	607b      	str	r3, [r7, #4]
 8001ade:	4b12      	ldr	r3, [pc, #72]	@ (8001b28 <HAL_MspInit+0x54>)
 8001ae0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001ae2:	4a11      	ldr	r2, [pc, #68]	@ (8001b28 <HAL_MspInit+0x54>)
 8001ae4:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001ae8:	6453      	str	r3, [r2, #68]	@ 0x44
 8001aea:	4b0f      	ldr	r3, [pc, #60]	@ (8001b28 <HAL_MspInit+0x54>)
 8001aec:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001aee:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001af2:	607b      	str	r3, [r7, #4]
 8001af4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001af6:	2300      	movs	r3, #0
 8001af8:	603b      	str	r3, [r7, #0]
 8001afa:	4b0b      	ldr	r3, [pc, #44]	@ (8001b28 <HAL_MspInit+0x54>)
 8001afc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001afe:	4a0a      	ldr	r2, [pc, #40]	@ (8001b28 <HAL_MspInit+0x54>)
 8001b00:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001b04:	6413      	str	r3, [r2, #64]	@ 0x40
 8001b06:	4b08      	ldr	r3, [pc, #32]	@ (8001b28 <HAL_MspInit+0x54>)
 8001b08:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b0a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001b0e:	603b      	str	r3, [r7, #0]
 8001b10:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8001b12:	2200      	movs	r2, #0
 8001b14:	210f      	movs	r1, #15
 8001b16:	f06f 0001 	mvn.w	r0, #1
 8001b1a:	f000 fd55 	bl	80025c8 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001b1e:	bf00      	nop
 8001b20:	3708      	adds	r7, #8
 8001b22:	46bd      	mov	sp, r7
 8001b24:	bd80      	pop	{r7, pc}
 8001b26:	bf00      	nop
 8001b28:	40023800 	.word	0x40023800

08001b2c <HAL_CRC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hcrc: CRC handle pointer
  * @retval None
  */
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
 8001b2c:	b480      	push	{r7}
 8001b2e:	b085      	sub	sp, #20
 8001b30:	af00      	add	r7, sp, #0
 8001b32:	6078      	str	r0, [r7, #4]
  if(hcrc->Instance==CRC)
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	681b      	ldr	r3, [r3, #0]
 8001b38:	4a0b      	ldr	r2, [pc, #44]	@ (8001b68 <HAL_CRC_MspInit+0x3c>)
 8001b3a:	4293      	cmp	r3, r2
 8001b3c:	d10d      	bne.n	8001b5a <HAL_CRC_MspInit+0x2e>
  {
    /* USER CODE BEGIN CRC_MspInit 0 */

    /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 8001b3e:	2300      	movs	r3, #0
 8001b40:	60fb      	str	r3, [r7, #12]
 8001b42:	4b0a      	ldr	r3, [pc, #40]	@ (8001b6c <HAL_CRC_MspInit+0x40>)
 8001b44:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001b46:	4a09      	ldr	r2, [pc, #36]	@ (8001b6c <HAL_CRC_MspInit+0x40>)
 8001b48:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8001b4c:	6313      	str	r3, [r2, #48]	@ 0x30
 8001b4e:	4b07      	ldr	r3, [pc, #28]	@ (8001b6c <HAL_CRC_MspInit+0x40>)
 8001b50:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001b52:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001b56:	60fb      	str	r3, [r7, #12]
 8001b58:	68fb      	ldr	r3, [r7, #12]

    /* USER CODE END CRC_MspInit 1 */

  }

}
 8001b5a:	bf00      	nop
 8001b5c:	3714      	adds	r7, #20
 8001b5e:	46bd      	mov	sp, r7
 8001b60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b64:	4770      	bx	lr
 8001b66:	bf00      	nop
 8001b68:	40023000 	.word	0x40023000
 8001b6c:	40023800 	.word	0x40023800

08001b70 <HAL_DMA2D_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hdma2d: DMA2D handle pointer
  * @retval None
  */
void HAL_DMA2D_MspInit(DMA2D_HandleTypeDef* hdma2d)
{
 8001b70:	b580      	push	{r7, lr}
 8001b72:	b084      	sub	sp, #16
 8001b74:	af00      	add	r7, sp, #0
 8001b76:	6078      	str	r0, [r7, #4]
  if(hdma2d->Instance==DMA2D)
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	681b      	ldr	r3, [r3, #0]
 8001b7c:	4a0e      	ldr	r2, [pc, #56]	@ (8001bb8 <HAL_DMA2D_MspInit+0x48>)
 8001b7e:	4293      	cmp	r3, r2
 8001b80:	d115      	bne.n	8001bae <HAL_DMA2D_MspInit+0x3e>
  {
    /* USER CODE BEGIN DMA2D_MspInit 0 */

    /* USER CODE END DMA2D_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DMA2D_CLK_ENABLE();
 8001b82:	2300      	movs	r3, #0
 8001b84:	60fb      	str	r3, [r7, #12]
 8001b86:	4b0d      	ldr	r3, [pc, #52]	@ (8001bbc <HAL_DMA2D_MspInit+0x4c>)
 8001b88:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001b8a:	4a0c      	ldr	r2, [pc, #48]	@ (8001bbc <HAL_DMA2D_MspInit+0x4c>)
 8001b8c:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8001b90:	6313      	str	r3, [r2, #48]	@ 0x30
 8001b92:	4b0a      	ldr	r3, [pc, #40]	@ (8001bbc <HAL_DMA2D_MspInit+0x4c>)
 8001b94:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001b96:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8001b9a:	60fb      	str	r3, [r7, #12]
 8001b9c:	68fb      	ldr	r3, [r7, #12]
    /* DMA2D interrupt Init */
    HAL_NVIC_SetPriority(DMA2D_IRQn, 5, 0);
 8001b9e:	2200      	movs	r2, #0
 8001ba0:	2105      	movs	r1, #5
 8001ba2:	205a      	movs	r0, #90	@ 0x5a
 8001ba4:	f000 fd10 	bl	80025c8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DMA2D_IRQn);
 8001ba8:	205a      	movs	r0, #90	@ 0x5a
 8001baa:	f000 fd29 	bl	8002600 <HAL_NVIC_EnableIRQ>

    /* USER CODE END DMA2D_MspInit 1 */

  }

}
 8001bae:	bf00      	nop
 8001bb0:	3710      	adds	r7, #16
 8001bb2:	46bd      	mov	sp, r7
 8001bb4:	bd80      	pop	{r7, pc}
 8001bb6:	bf00      	nop
 8001bb8:	4002b000 	.word	0x4002b000
 8001bbc:	40023800 	.word	0x40023800

08001bc0 <HAL_I2C_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hi2c: I2C handle pointer
  * @retval None
  */
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001bc0:	b580      	push	{r7, lr}
 8001bc2:	b08a      	sub	sp, #40	@ 0x28
 8001bc4:	af00      	add	r7, sp, #0
 8001bc6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001bc8:	f107 0314 	add.w	r3, r7, #20
 8001bcc:	2200      	movs	r2, #0
 8001bce:	601a      	str	r2, [r3, #0]
 8001bd0:	605a      	str	r2, [r3, #4]
 8001bd2:	609a      	str	r2, [r3, #8]
 8001bd4:	60da      	str	r2, [r3, #12]
 8001bd6:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C3)
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	681b      	ldr	r3, [r3, #0]
 8001bdc:	4a29      	ldr	r2, [pc, #164]	@ (8001c84 <HAL_I2C_MspInit+0xc4>)
 8001bde:	4293      	cmp	r3, r2
 8001be0:	d14b      	bne.n	8001c7a <HAL_I2C_MspInit+0xba>
  {
    /* USER CODE BEGIN I2C3_MspInit 0 */

    /* USER CODE END I2C3_MspInit 0 */

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001be2:	2300      	movs	r3, #0
 8001be4:	613b      	str	r3, [r7, #16]
 8001be6:	4b28      	ldr	r3, [pc, #160]	@ (8001c88 <HAL_I2C_MspInit+0xc8>)
 8001be8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001bea:	4a27      	ldr	r2, [pc, #156]	@ (8001c88 <HAL_I2C_MspInit+0xc8>)
 8001bec:	f043 0304 	orr.w	r3, r3, #4
 8001bf0:	6313      	str	r3, [r2, #48]	@ 0x30
 8001bf2:	4b25      	ldr	r3, [pc, #148]	@ (8001c88 <HAL_I2C_MspInit+0xc8>)
 8001bf4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001bf6:	f003 0304 	and.w	r3, r3, #4
 8001bfa:	613b      	str	r3, [r7, #16]
 8001bfc:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001bfe:	2300      	movs	r3, #0
 8001c00:	60fb      	str	r3, [r7, #12]
 8001c02:	4b21      	ldr	r3, [pc, #132]	@ (8001c88 <HAL_I2C_MspInit+0xc8>)
 8001c04:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c06:	4a20      	ldr	r2, [pc, #128]	@ (8001c88 <HAL_I2C_MspInit+0xc8>)
 8001c08:	f043 0301 	orr.w	r3, r3, #1
 8001c0c:	6313      	str	r3, [r2, #48]	@ 0x30
 8001c0e:	4b1e      	ldr	r3, [pc, #120]	@ (8001c88 <HAL_I2C_MspInit+0xc8>)
 8001c10:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c12:	f003 0301 	and.w	r3, r3, #1
 8001c16:	60fb      	str	r3, [r7, #12]
 8001c18:	68fb      	ldr	r3, [r7, #12]
    /**I2C3 GPIO Configuration
    PC9     ------> I2C3_SDA
    PA8     ------> I2C3_SCL
    */
    GPIO_InitStruct.Pin = I2C3_SDA_Pin;
 8001c1a:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001c1e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001c20:	2312      	movs	r3, #18
 8001c22:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001c24:	2301      	movs	r3, #1
 8001c26:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c28:	2300      	movs	r3, #0
 8001c2a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8001c2c:	2304      	movs	r3, #4
 8001c2e:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(I2C3_SDA_GPIO_Port, &GPIO_InitStruct);
 8001c30:	f107 0314 	add.w	r3, r7, #20
 8001c34:	4619      	mov	r1, r3
 8001c36:	4815      	ldr	r0, [pc, #84]	@ (8001c8c <HAL_I2C_MspInit+0xcc>)
 8001c38:	f001 f8b6 	bl	8002da8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = I2C3_SCL_Pin;
 8001c3c:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001c40:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001c42:	2312      	movs	r3, #18
 8001c44:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001c46:	2301      	movs	r3, #1
 8001c48:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c4a:	2300      	movs	r3, #0
 8001c4c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8001c4e:	2304      	movs	r3, #4
 8001c50:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(I2C3_SCL_GPIO_Port, &GPIO_InitStruct);
 8001c52:	f107 0314 	add.w	r3, r7, #20
 8001c56:	4619      	mov	r1, r3
 8001c58:	480d      	ldr	r0, [pc, #52]	@ (8001c90 <HAL_I2C_MspInit+0xd0>)
 8001c5a:	f001 f8a5 	bl	8002da8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C3_CLK_ENABLE();
 8001c5e:	2300      	movs	r3, #0
 8001c60:	60bb      	str	r3, [r7, #8]
 8001c62:	4b09      	ldr	r3, [pc, #36]	@ (8001c88 <HAL_I2C_MspInit+0xc8>)
 8001c64:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c66:	4a08      	ldr	r2, [pc, #32]	@ (8001c88 <HAL_I2C_MspInit+0xc8>)
 8001c68:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8001c6c:	6413      	str	r3, [r2, #64]	@ 0x40
 8001c6e:	4b06      	ldr	r3, [pc, #24]	@ (8001c88 <HAL_I2C_MspInit+0xc8>)
 8001c70:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c72:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8001c76:	60bb      	str	r3, [r7, #8]
 8001c78:	68bb      	ldr	r3, [r7, #8]

    /* USER CODE END I2C3_MspInit 1 */

  }

}
 8001c7a:	bf00      	nop
 8001c7c:	3728      	adds	r7, #40	@ 0x28
 8001c7e:	46bd      	mov	sp, r7
 8001c80:	bd80      	pop	{r7, pc}
 8001c82:	bf00      	nop
 8001c84:	40005c00 	.word	0x40005c00
 8001c88:	40023800 	.word	0x40023800
 8001c8c:	40020800 	.word	0x40020800
 8001c90:	40020000 	.word	0x40020000

08001c94 <HAL_LTDC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hltdc: LTDC handle pointer
  * @retval None
  */
void HAL_LTDC_MspInit(LTDC_HandleTypeDef* hltdc)
{
 8001c94:	b580      	push	{r7, lr}
 8001c96:	b09a      	sub	sp, #104	@ 0x68
 8001c98:	af00      	add	r7, sp, #0
 8001c9a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c9c:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8001ca0:	2200      	movs	r2, #0
 8001ca2:	601a      	str	r2, [r3, #0]
 8001ca4:	605a      	str	r2, [r3, #4]
 8001ca6:	609a      	str	r2, [r3, #8]
 8001ca8:	60da      	str	r2, [r3, #12]
 8001caa:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001cac:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001cb0:	2230      	movs	r2, #48	@ 0x30
 8001cb2:	2100      	movs	r1, #0
 8001cb4:	4618      	mov	r0, r3
 8001cb6:	f006 f80b 	bl	8007cd0 <memset>
  if(hltdc->Instance==LTDC)
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	681b      	ldr	r3, [r3, #0]
 8001cbe:	4a81      	ldr	r2, [pc, #516]	@ (8001ec4 <HAL_LTDC_MspInit+0x230>)
 8001cc0:	4293      	cmp	r3, r2
 8001cc2:	f040 80fa 	bne.w	8001eba <HAL_LTDC_MspInit+0x226>

    /* USER CODE END LTDC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 8001cc6:	2308      	movs	r3, #8
 8001cc8:	627b      	str	r3, [r7, #36]	@ 0x24
    PeriphClkInitStruct.PLLSAI.PLLSAIN = 100;
 8001cca:	2364      	movs	r3, #100	@ 0x64
 8001ccc:	637b      	str	r3, [r7, #52]	@ 0x34
    PeriphClkInitStruct.PLLSAI.PLLSAIR = 2;
 8001cce:	2302      	movs	r3, #2
 8001cd0:	63fb      	str	r3, [r7, #60]	@ 0x3c
    PeriphClkInitStruct.PLLSAIDivR = RCC_PLLSAIDIVR_2;
 8001cd2:	2300      	movs	r3, #0
 8001cd4:	64bb      	str	r3, [r7, #72]	@ 0x48
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001cd6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001cda:	4618      	mov	r0, r3
 8001cdc:	f002 fcb6 	bl	800464c <HAL_RCCEx_PeriphCLKConfig>
 8001ce0:	4603      	mov	r3, r0
 8001ce2:	2b00      	cmp	r3, #0
 8001ce4:	d001      	beq.n	8001cea <HAL_LTDC_MspInit+0x56>
    {
      Error_Handler();
 8001ce6:	f7ff fa13 	bl	8001110 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LTDC_CLK_ENABLE();
 8001cea:	2300      	movs	r3, #0
 8001cec:	623b      	str	r3, [r7, #32]
 8001cee:	4b76      	ldr	r3, [pc, #472]	@ (8001ec8 <HAL_LTDC_MspInit+0x234>)
 8001cf0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001cf2:	4a75      	ldr	r2, [pc, #468]	@ (8001ec8 <HAL_LTDC_MspInit+0x234>)
 8001cf4:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8001cf8:	6453      	str	r3, [r2, #68]	@ 0x44
 8001cfa:	4b73      	ldr	r3, [pc, #460]	@ (8001ec8 <HAL_LTDC_MspInit+0x234>)
 8001cfc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001cfe:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8001d02:	623b      	str	r3, [r7, #32]
 8001d04:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOF_CLK_ENABLE();
 8001d06:	2300      	movs	r3, #0
 8001d08:	61fb      	str	r3, [r7, #28]
 8001d0a:	4b6f      	ldr	r3, [pc, #444]	@ (8001ec8 <HAL_LTDC_MspInit+0x234>)
 8001d0c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d0e:	4a6e      	ldr	r2, [pc, #440]	@ (8001ec8 <HAL_LTDC_MspInit+0x234>)
 8001d10:	f043 0320 	orr.w	r3, r3, #32
 8001d14:	6313      	str	r3, [r2, #48]	@ 0x30
 8001d16:	4b6c      	ldr	r3, [pc, #432]	@ (8001ec8 <HAL_LTDC_MspInit+0x234>)
 8001d18:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d1a:	f003 0320 	and.w	r3, r3, #32
 8001d1e:	61fb      	str	r3, [r7, #28]
 8001d20:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001d22:	2300      	movs	r3, #0
 8001d24:	61bb      	str	r3, [r7, #24]
 8001d26:	4b68      	ldr	r3, [pc, #416]	@ (8001ec8 <HAL_LTDC_MspInit+0x234>)
 8001d28:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d2a:	4a67      	ldr	r2, [pc, #412]	@ (8001ec8 <HAL_LTDC_MspInit+0x234>)
 8001d2c:	f043 0301 	orr.w	r3, r3, #1
 8001d30:	6313      	str	r3, [r2, #48]	@ 0x30
 8001d32:	4b65      	ldr	r3, [pc, #404]	@ (8001ec8 <HAL_LTDC_MspInit+0x234>)
 8001d34:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d36:	f003 0301 	and.w	r3, r3, #1
 8001d3a:	61bb      	str	r3, [r7, #24]
 8001d3c:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001d3e:	2300      	movs	r3, #0
 8001d40:	617b      	str	r3, [r7, #20]
 8001d42:	4b61      	ldr	r3, [pc, #388]	@ (8001ec8 <HAL_LTDC_MspInit+0x234>)
 8001d44:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d46:	4a60      	ldr	r2, [pc, #384]	@ (8001ec8 <HAL_LTDC_MspInit+0x234>)
 8001d48:	f043 0302 	orr.w	r3, r3, #2
 8001d4c:	6313      	str	r3, [r2, #48]	@ 0x30
 8001d4e:	4b5e      	ldr	r3, [pc, #376]	@ (8001ec8 <HAL_LTDC_MspInit+0x234>)
 8001d50:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d52:	f003 0302 	and.w	r3, r3, #2
 8001d56:	617b      	str	r3, [r7, #20]
 8001d58:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8001d5a:	2300      	movs	r3, #0
 8001d5c:	613b      	str	r3, [r7, #16]
 8001d5e:	4b5a      	ldr	r3, [pc, #360]	@ (8001ec8 <HAL_LTDC_MspInit+0x234>)
 8001d60:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d62:	4a59      	ldr	r2, [pc, #356]	@ (8001ec8 <HAL_LTDC_MspInit+0x234>)
 8001d64:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001d68:	6313      	str	r3, [r2, #48]	@ 0x30
 8001d6a:	4b57      	ldr	r3, [pc, #348]	@ (8001ec8 <HAL_LTDC_MspInit+0x234>)
 8001d6c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d6e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001d72:	613b      	str	r3, [r7, #16]
 8001d74:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001d76:	2300      	movs	r3, #0
 8001d78:	60fb      	str	r3, [r7, #12]
 8001d7a:	4b53      	ldr	r3, [pc, #332]	@ (8001ec8 <HAL_LTDC_MspInit+0x234>)
 8001d7c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d7e:	4a52      	ldr	r2, [pc, #328]	@ (8001ec8 <HAL_LTDC_MspInit+0x234>)
 8001d80:	f043 0304 	orr.w	r3, r3, #4
 8001d84:	6313      	str	r3, [r2, #48]	@ 0x30
 8001d86:	4b50      	ldr	r3, [pc, #320]	@ (8001ec8 <HAL_LTDC_MspInit+0x234>)
 8001d88:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d8a:	f003 0304 	and.w	r3, r3, #4
 8001d8e:	60fb      	str	r3, [r7, #12]
 8001d90:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001d92:	2300      	movs	r3, #0
 8001d94:	60bb      	str	r3, [r7, #8]
 8001d96:	4b4c      	ldr	r3, [pc, #304]	@ (8001ec8 <HAL_LTDC_MspInit+0x234>)
 8001d98:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d9a:	4a4b      	ldr	r2, [pc, #300]	@ (8001ec8 <HAL_LTDC_MspInit+0x234>)
 8001d9c:	f043 0308 	orr.w	r3, r3, #8
 8001da0:	6313      	str	r3, [r2, #48]	@ 0x30
 8001da2:	4b49      	ldr	r3, [pc, #292]	@ (8001ec8 <HAL_LTDC_MspInit+0x234>)
 8001da4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001da6:	f003 0308 	and.w	r3, r3, #8
 8001daa:	60bb      	str	r3, [r7, #8]
 8001dac:	68bb      	ldr	r3, [r7, #8]
    PG11     ------> LTDC_B3
    PG12     ------> LTDC_B4
    PB8     ------> LTDC_B6
    PB9     ------> LTDC_B7
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001dae:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001db2:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001db4:	2302      	movs	r3, #2
 8001db6:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001db8:	2300      	movs	r3, #0
 8001dba:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001dbc:	2300      	movs	r3, #0
 8001dbe:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8001dc0:	230e      	movs	r3, #14
 8001dc2:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001dc4:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8001dc8:	4619      	mov	r1, r3
 8001dca:	4840      	ldr	r0, [pc, #256]	@ (8001ecc <HAL_LTDC_MspInit+0x238>)
 8001dcc:	f000 ffec 	bl	8002da8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_6|GPIO_PIN_11
 8001dd0:	f641 0358 	movw	r3, #6232	@ 0x1858
 8001dd4:	657b      	str	r3, [r7, #84]	@ 0x54
                          |GPIO_PIN_12;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001dd6:	2302      	movs	r3, #2
 8001dd8:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001dda:	2300      	movs	r3, #0
 8001ddc:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001dde:	2300      	movs	r3, #0
 8001de0:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8001de2:	230e      	movs	r3, #14
 8001de4:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001de6:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8001dea:	4619      	mov	r1, r3
 8001dec:	4838      	ldr	r0, [pc, #224]	@ (8001ed0 <HAL_LTDC_MspInit+0x23c>)
 8001dee:	f000 ffdb 	bl	8002da8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8001df2:	2303      	movs	r3, #3
 8001df4:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001df6:	2302      	movs	r3, #2
 8001df8:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001dfa:	2300      	movs	r3, #0
 8001dfc:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001dfe:	2300      	movs	r3, #0
 8001e00:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 8001e02:	2309      	movs	r3, #9
 8001e04:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001e06:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8001e0a:	4619      	mov	r1, r3
 8001e0c:	4831      	ldr	r0, [pc, #196]	@ (8001ed4 <HAL_LTDC_MspInit+0x240>)
 8001e0e:	f000 ffcb 	bl	8002da8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_8|GPIO_PIN_9;
 8001e12:	f44f 6370 	mov.w	r3, #3840	@ 0xf00
 8001e16:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e18:	2302      	movs	r3, #2
 8001e1a:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e1c:	2300      	movs	r3, #0
 8001e1e:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e20:	2300      	movs	r3, #0
 8001e22:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8001e24:	230e      	movs	r3, #14
 8001e26:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001e28:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8001e2c:	4619      	mov	r1, r3
 8001e2e:	4829      	ldr	r0, [pc, #164]	@ (8001ed4 <HAL_LTDC_MspInit+0x240>)
 8001e30:	f000 ffba 	bl	8002da8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_11;
 8001e34:	f44f 630c 	mov.w	r3, #2240	@ 0x8c0
 8001e38:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e3a:	2302      	movs	r3, #2
 8001e3c:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e3e:	2300      	movs	r3, #0
 8001e40:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e42:	2300      	movs	r3, #0
 8001e44:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8001e46:	230e      	movs	r3, #14
 8001e48:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001e4a:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8001e4e:	4619      	mov	r1, r3
 8001e50:	4821      	ldr	r0, [pc, #132]	@ (8001ed8 <HAL_LTDC_MspInit+0x244>)
 8001e52:	f000 ffa9 	bl	8002da8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_10;
 8001e56:	f44f 6398 	mov.w	r3, #1216	@ 0x4c0
 8001e5a:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e5c:	2302      	movs	r3, #2
 8001e5e:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e60:	2300      	movs	r3, #0
 8001e62:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e64:	2300      	movs	r3, #0
 8001e66:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8001e68:	230e      	movs	r3, #14
 8001e6a:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001e6c:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8001e70:	4619      	mov	r1, r3
 8001e72:	481a      	ldr	r0, [pc, #104]	@ (8001edc <HAL_LTDC_MspInit+0x248>)
 8001e74:	f000 ff98 	bl	8002da8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_6;
 8001e78:	2348      	movs	r3, #72	@ 0x48
 8001e7a:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e7c:	2302      	movs	r3, #2
 8001e7e:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e80:	2300      	movs	r3, #0
 8001e82:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e84:	2300      	movs	r3, #0
 8001e86:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8001e88:	230e      	movs	r3, #14
 8001e8a:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001e8c:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8001e90:	4619      	mov	r1, r3
 8001e92:	4813      	ldr	r0, [pc, #76]	@ (8001ee0 <HAL_LTDC_MspInit+0x24c>)
 8001e94:	f000 ff88 	bl	8002da8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_12;
 8001e98:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8001e9c:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e9e:	2302      	movs	r3, #2
 8001ea0:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ea2:	2300      	movs	r3, #0
 8001ea4:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ea6:	2300      	movs	r3, #0
 8001ea8:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 8001eaa:	2309      	movs	r3, #9
 8001eac:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001eae:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8001eb2:	4619      	mov	r1, r3
 8001eb4:	4808      	ldr	r0, [pc, #32]	@ (8001ed8 <HAL_LTDC_MspInit+0x244>)
 8001eb6:	f000 ff77 	bl	8002da8 <HAL_GPIO_Init>

    /* USER CODE END LTDC_MspInit 1 */

  }

}
 8001eba:	bf00      	nop
 8001ebc:	3768      	adds	r7, #104	@ 0x68
 8001ebe:	46bd      	mov	sp, r7
 8001ec0:	bd80      	pop	{r7, pc}
 8001ec2:	bf00      	nop
 8001ec4:	40016800 	.word	0x40016800
 8001ec8:	40023800 	.word	0x40023800
 8001ecc:	40021400 	.word	0x40021400
 8001ed0:	40020000 	.word	0x40020000
 8001ed4:	40020400 	.word	0x40020400
 8001ed8:	40021800 	.word	0x40021800
 8001edc:	40020800 	.word	0x40020800
 8001ee0:	40020c00 	.word	0x40020c00

08001ee4 <HAL_SPI_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hspi: SPI handle pointer
  * @retval None
  */
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001ee4:	b580      	push	{r7, lr}
 8001ee6:	b08a      	sub	sp, #40	@ 0x28
 8001ee8:	af00      	add	r7, sp, #0
 8001eea:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001eec:	f107 0314 	add.w	r3, r7, #20
 8001ef0:	2200      	movs	r2, #0
 8001ef2:	601a      	str	r2, [r3, #0]
 8001ef4:	605a      	str	r2, [r3, #4]
 8001ef6:	609a      	str	r2, [r3, #8]
 8001ef8:	60da      	str	r2, [r3, #12]
 8001efa:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI5)
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	681b      	ldr	r3, [r3, #0]
 8001f00:	4a19      	ldr	r2, [pc, #100]	@ (8001f68 <HAL_SPI_MspInit+0x84>)
 8001f02:	4293      	cmp	r3, r2
 8001f04:	d12c      	bne.n	8001f60 <HAL_SPI_MspInit+0x7c>
  {
    /* USER CODE BEGIN SPI5_MspInit 0 */

    /* USER CODE END SPI5_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI5_CLK_ENABLE();
 8001f06:	2300      	movs	r3, #0
 8001f08:	613b      	str	r3, [r7, #16]
 8001f0a:	4b18      	ldr	r3, [pc, #96]	@ (8001f6c <HAL_SPI_MspInit+0x88>)
 8001f0c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001f0e:	4a17      	ldr	r2, [pc, #92]	@ (8001f6c <HAL_SPI_MspInit+0x88>)
 8001f10:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8001f14:	6453      	str	r3, [r2, #68]	@ 0x44
 8001f16:	4b15      	ldr	r3, [pc, #84]	@ (8001f6c <HAL_SPI_MspInit+0x88>)
 8001f18:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001f1a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001f1e:	613b      	str	r3, [r7, #16]
 8001f20:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOF_CLK_ENABLE();
 8001f22:	2300      	movs	r3, #0
 8001f24:	60fb      	str	r3, [r7, #12]
 8001f26:	4b11      	ldr	r3, [pc, #68]	@ (8001f6c <HAL_SPI_MspInit+0x88>)
 8001f28:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001f2a:	4a10      	ldr	r2, [pc, #64]	@ (8001f6c <HAL_SPI_MspInit+0x88>)
 8001f2c:	f043 0320 	orr.w	r3, r3, #32
 8001f30:	6313      	str	r3, [r2, #48]	@ 0x30
 8001f32:	4b0e      	ldr	r3, [pc, #56]	@ (8001f6c <HAL_SPI_MspInit+0x88>)
 8001f34:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001f36:	f003 0320 	and.w	r3, r3, #32
 8001f3a:	60fb      	str	r3, [r7, #12]
 8001f3c:	68fb      	ldr	r3, [r7, #12]
    /**SPI5 GPIO Configuration
    PF7     ------> SPI5_SCK
    PF8     ------> SPI5_MISO
    PF9     ------> SPI5_MOSI
    */
    GPIO_InitStruct.Pin = SPI5_SCK_Pin|SPI5_MISO_Pin|SPI5_MOSI_Pin;
 8001f3e:	f44f 7360 	mov.w	r3, #896	@ 0x380
 8001f42:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f44:	2302      	movs	r3, #2
 8001f46:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f48:	2300      	movs	r3, #0
 8001f4a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f4c:	2300      	movs	r3, #0
 8001f4e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI5;
 8001f50:	2305      	movs	r3, #5
 8001f52:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001f54:	f107 0314 	add.w	r3, r7, #20
 8001f58:	4619      	mov	r1, r3
 8001f5a:	4805      	ldr	r0, [pc, #20]	@ (8001f70 <HAL_SPI_MspInit+0x8c>)
 8001f5c:	f000 ff24 	bl	8002da8 <HAL_GPIO_Init>

    /* USER CODE END SPI5_MspInit 1 */

  }

}
 8001f60:	bf00      	nop
 8001f62:	3728      	adds	r7, #40	@ 0x28
 8001f64:	46bd      	mov	sp, r7
 8001f66:	bd80      	pop	{r7, pc}
 8001f68:	40015000 	.word	0x40015000
 8001f6c:	40023800 	.word	0x40023800
 8001f70:	40021400 	.word	0x40021400

08001f74 <HAL_SPI_MspDeInit>:
  * This function freeze the hardware resources used in this example
  * @param hspi: SPI handle pointer
  * @retval None
  */
void HAL_SPI_MspDeInit(SPI_HandleTypeDef* hspi)
{
 8001f74:	b580      	push	{r7, lr}
 8001f76:	b082      	sub	sp, #8
 8001f78:	af00      	add	r7, sp, #0
 8001f7a:	6078      	str	r0, [r7, #4]
  if(hspi->Instance==SPI5)
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	681b      	ldr	r3, [r3, #0]
 8001f80:	4a08      	ldr	r2, [pc, #32]	@ (8001fa4 <HAL_SPI_MspDeInit+0x30>)
 8001f82:	4293      	cmp	r3, r2
 8001f84:	d10a      	bne.n	8001f9c <HAL_SPI_MspDeInit+0x28>
  {
    /* USER CODE BEGIN SPI5_MspDeInit 0 */

    /* USER CODE END SPI5_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_SPI5_CLK_DISABLE();
 8001f86:	4b08      	ldr	r3, [pc, #32]	@ (8001fa8 <HAL_SPI_MspDeInit+0x34>)
 8001f88:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001f8a:	4a07      	ldr	r2, [pc, #28]	@ (8001fa8 <HAL_SPI_MspDeInit+0x34>)
 8001f8c:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8001f90:	6453      	str	r3, [r2, #68]	@ 0x44
    /**SPI5 GPIO Configuration
    PF7     ------> SPI5_SCK
    PF8     ------> SPI5_MISO
    PF9     ------> SPI5_MOSI
    */
    HAL_GPIO_DeInit(GPIOF, SPI5_SCK_Pin|SPI5_MISO_Pin|SPI5_MOSI_Pin);
 8001f92:	f44f 7160 	mov.w	r1, #896	@ 0x380
 8001f96:	4805      	ldr	r0, [pc, #20]	@ (8001fac <HAL_SPI_MspDeInit+0x38>)
 8001f98:	f001 f8b2 	bl	8003100 <HAL_GPIO_DeInit>
    /* USER CODE BEGIN SPI5_MspDeInit 1 */

    /* USER CODE END SPI5_MspDeInit 1 */
  }

}
 8001f9c:	bf00      	nop
 8001f9e:	3708      	adds	r7, #8
 8001fa0:	46bd      	mov	sp, r7
 8001fa2:	bd80      	pop	{r7, pc}
 8001fa4:	40015000 	.word	0x40015000
 8001fa8:	40023800 	.word	0x40023800
 8001fac:	40021400 	.word	0x40021400

08001fb0 <HAL_TIM_Base_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_base: TIM_Base handle pointer
  * @retval None
  */
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001fb0:	b480      	push	{r7}
 8001fb2:	b085      	sub	sp, #20
 8001fb4:	af00      	add	r7, sp, #0
 8001fb6:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	681b      	ldr	r3, [r3, #0]
 8001fbc:	4a0b      	ldr	r2, [pc, #44]	@ (8001fec <HAL_TIM_Base_MspInit+0x3c>)
 8001fbe:	4293      	cmp	r3, r2
 8001fc0:	d10d      	bne.n	8001fde <HAL_TIM_Base_MspInit+0x2e>
  {
    /* USER CODE BEGIN TIM1_MspInit 0 */

    /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001fc2:	2300      	movs	r3, #0
 8001fc4:	60fb      	str	r3, [r7, #12]
 8001fc6:	4b0a      	ldr	r3, [pc, #40]	@ (8001ff0 <HAL_TIM_Base_MspInit+0x40>)
 8001fc8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001fca:	4a09      	ldr	r2, [pc, #36]	@ (8001ff0 <HAL_TIM_Base_MspInit+0x40>)
 8001fcc:	f043 0301 	orr.w	r3, r3, #1
 8001fd0:	6453      	str	r3, [r2, #68]	@ 0x44
 8001fd2:	4b07      	ldr	r3, [pc, #28]	@ (8001ff0 <HAL_TIM_Base_MspInit+0x40>)
 8001fd4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001fd6:	f003 0301 	and.w	r3, r3, #1
 8001fda:	60fb      	str	r3, [r7, #12]
 8001fdc:	68fb      	ldr	r3, [r7, #12]

    /* USER CODE END TIM1_MspInit 1 */

  }

}
 8001fde:	bf00      	nop
 8001fe0:	3714      	adds	r7, #20
 8001fe2:	46bd      	mov	sp, r7
 8001fe4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fe8:	4770      	bx	lr
 8001fea:	bf00      	nop
 8001fec:	40010000 	.word	0x40010000
 8001ff0:	40023800 	.word	0x40023800

08001ff4 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001ff4:	b580      	push	{r7, lr}
 8001ff6:	b08a      	sub	sp, #40	@ 0x28
 8001ff8:	af00      	add	r7, sp, #0
 8001ffa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ffc:	f107 0314 	add.w	r3, r7, #20
 8002000:	2200      	movs	r2, #0
 8002002:	601a      	str	r2, [r3, #0]
 8002004:	605a      	str	r2, [r3, #4]
 8002006:	609a      	str	r2, [r3, #8]
 8002008:	60da      	str	r2, [r3, #12]
 800200a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	681b      	ldr	r3, [r3, #0]
 8002010:	4a19      	ldr	r2, [pc, #100]	@ (8002078 <HAL_UART_MspInit+0x84>)
 8002012:	4293      	cmp	r3, r2
 8002014:	d12c      	bne.n	8002070 <HAL_UART_MspInit+0x7c>
  {
    /* USER CODE BEGIN USART1_MspInit 0 */

    /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8002016:	2300      	movs	r3, #0
 8002018:	613b      	str	r3, [r7, #16]
 800201a:	4b18      	ldr	r3, [pc, #96]	@ (800207c <HAL_UART_MspInit+0x88>)
 800201c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800201e:	4a17      	ldr	r2, [pc, #92]	@ (800207c <HAL_UART_MspInit+0x88>)
 8002020:	f043 0310 	orr.w	r3, r3, #16
 8002024:	6453      	str	r3, [r2, #68]	@ 0x44
 8002026:	4b15      	ldr	r3, [pc, #84]	@ (800207c <HAL_UART_MspInit+0x88>)
 8002028:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800202a:	f003 0310 	and.w	r3, r3, #16
 800202e:	613b      	str	r3, [r7, #16]
 8002030:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002032:	2300      	movs	r3, #0
 8002034:	60fb      	str	r3, [r7, #12]
 8002036:	4b11      	ldr	r3, [pc, #68]	@ (800207c <HAL_UART_MspInit+0x88>)
 8002038:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800203a:	4a10      	ldr	r2, [pc, #64]	@ (800207c <HAL_UART_MspInit+0x88>)
 800203c:	f043 0301 	orr.w	r3, r3, #1
 8002040:	6313      	str	r3, [r2, #48]	@ 0x30
 8002042:	4b0e      	ldr	r3, [pc, #56]	@ (800207c <HAL_UART_MspInit+0x88>)
 8002044:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002046:	f003 0301 	and.w	r3, r3, #1
 800204a:	60fb      	str	r3, [r7, #12]
 800204c:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = STLINK_RX_Pin|STLINK_TX_Pin;
 800204e:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 8002052:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002054:	2302      	movs	r3, #2
 8002056:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002058:	2300      	movs	r3, #0
 800205a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800205c:	2303      	movs	r3, #3
 800205e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8002060:	2307      	movs	r3, #7
 8002062:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002064:	f107 0314 	add.w	r3, r7, #20
 8002068:	4619      	mov	r1, r3
 800206a:	4805      	ldr	r0, [pc, #20]	@ (8002080 <HAL_UART_MspInit+0x8c>)
 800206c:	f000 fe9c 	bl	8002da8 <HAL_GPIO_Init>

    /* USER CODE END USART1_MspInit 1 */

  }

}
 8002070:	bf00      	nop
 8002072:	3728      	adds	r7, #40	@ 0x28
 8002074:	46bd      	mov	sp, r7
 8002076:	bd80      	pop	{r7, pc}
 8002078:	40011000 	.word	0x40011000
 800207c:	40023800 	.word	0x40023800
 8002080:	40020000 	.word	0x40020000

08002084 <HAL_FMC_MspInit>:

}

static uint32_t FMC_Initialized = 0;

static void HAL_FMC_MspInit(void){
 8002084:	b580      	push	{r7, lr}
 8002086:	b086      	sub	sp, #24
 8002088:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FMC_MspInit 0 */

  /* USER CODE END FMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct ={0};
 800208a:	1d3b      	adds	r3, r7, #4
 800208c:	2200      	movs	r2, #0
 800208e:	601a      	str	r2, [r3, #0]
 8002090:	605a      	str	r2, [r3, #4]
 8002092:	609a      	str	r2, [r3, #8]
 8002094:	60da      	str	r2, [r3, #12]
 8002096:	611a      	str	r2, [r3, #16]
  if (FMC_Initialized) {
 8002098:	4b3b      	ldr	r3, [pc, #236]	@ (8002188 <HAL_FMC_MspInit+0x104>)
 800209a:	681b      	ldr	r3, [r3, #0]
 800209c:	2b00      	cmp	r3, #0
 800209e:	d16f      	bne.n	8002180 <HAL_FMC_MspInit+0xfc>
    return;
  }
  FMC_Initialized = 1;
 80020a0:	4b39      	ldr	r3, [pc, #228]	@ (8002188 <HAL_FMC_MspInit+0x104>)
 80020a2:	2201      	movs	r2, #1
 80020a4:	601a      	str	r2, [r3, #0]

  /* Peripheral clock enable */
  __HAL_RCC_FMC_CLK_ENABLE();
 80020a6:	2300      	movs	r3, #0
 80020a8:	603b      	str	r3, [r7, #0]
 80020aa:	4b38      	ldr	r3, [pc, #224]	@ (800218c <HAL_FMC_MspInit+0x108>)
 80020ac:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80020ae:	4a37      	ldr	r2, [pc, #220]	@ (800218c <HAL_FMC_MspInit+0x108>)
 80020b0:	f043 0301 	orr.w	r3, r3, #1
 80020b4:	6393      	str	r3, [r2, #56]	@ 0x38
 80020b6:	4b35      	ldr	r3, [pc, #212]	@ (800218c <HAL_FMC_MspInit+0x108>)
 80020b8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80020ba:	f003 0301 	and.w	r3, r3, #1
 80020be:	603b      	str	r3, [r7, #0]
 80020c0:	683b      	ldr	r3, [r7, #0]
  PB5   ------> FMC_SDCKE1
  PB6   ------> FMC_SDNE1
  PE0   ------> FMC_NBL0
  PE1   ------> FMC_NBL1
  */
  GPIO_InitStruct.Pin = A0_Pin|A1_Pin|A2_Pin|A3_Pin
 80020c2:	f64f 033f 	movw	r3, #63551	@ 0xf83f
 80020c6:	607b      	str	r3, [r7, #4]
                          |A4_Pin|A5_Pin|SDNRAS_Pin|A6_Pin
                          |A7_Pin|A8_Pin|A9_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80020c8:	2302      	movs	r3, #2
 80020ca:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020cc:	2300      	movs	r3, #0
 80020ce:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80020d0:	2303      	movs	r3, #3
 80020d2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80020d4:	230c      	movs	r3, #12
 80020d6:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80020d8:	1d3b      	adds	r3, r7, #4
 80020da:	4619      	mov	r1, r3
 80020dc:	482c      	ldr	r0, [pc, #176]	@ (8002190 <HAL_FMC_MspInit+0x10c>)
 80020de:	f000 fe63 	bl	8002da8 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = SDNWE_Pin;
 80020e2:	2301      	movs	r3, #1
 80020e4:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80020e6:	2302      	movs	r3, #2
 80020e8:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020ea:	2300      	movs	r3, #0
 80020ec:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80020ee:	2303      	movs	r3, #3
 80020f0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80020f2:	230c      	movs	r3, #12
 80020f4:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(SDNWE_GPIO_Port, &GPIO_InitStruct);
 80020f6:	1d3b      	adds	r3, r7, #4
 80020f8:	4619      	mov	r1, r3
 80020fa:	4826      	ldr	r0, [pc, #152]	@ (8002194 <HAL_FMC_MspInit+0x110>)
 80020fc:	f000 fe54 	bl	8002da8 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = A10_Pin|A11_Pin|BA0_Pin|BA1_Pin
 8002100:	f248 1333 	movw	r3, #33075	@ 0x8133
 8002104:	607b      	str	r3, [r7, #4]
                          |SDCLK_Pin|SDNCAS_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002106:	2302      	movs	r3, #2
 8002108:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800210a:	2300      	movs	r3, #0
 800210c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800210e:	2303      	movs	r3, #3
 8002110:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8002112:	230c      	movs	r3, #12
 8002114:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8002116:	1d3b      	adds	r3, r7, #4
 8002118:	4619      	mov	r1, r3
 800211a:	481f      	ldr	r0, [pc, #124]	@ (8002198 <HAL_FMC_MspInit+0x114>)
 800211c:	f000 fe44 	bl	8002da8 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = D4_Pin|D5_Pin|D6_Pin|D7_Pin
 8002120:	f64f 7383 	movw	r3, #65411	@ 0xff83
 8002124:	607b      	str	r3, [r7, #4]
                          |D8_Pin|D9_Pin|D10_Pin|D11_Pin
                          |D12_Pin|NBL0_Pin|NBL1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002126:	2302      	movs	r3, #2
 8002128:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800212a:	2300      	movs	r3, #0
 800212c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800212e:	2303      	movs	r3, #3
 8002130:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8002132:	230c      	movs	r3, #12
 8002134:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002136:	1d3b      	adds	r3, r7, #4
 8002138:	4619      	mov	r1, r3
 800213a:	4818      	ldr	r0, [pc, #96]	@ (800219c <HAL_FMC_MspInit+0x118>)
 800213c:	f000 fe34 	bl	8002da8 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = D13_Pin|D14_Pin|D15_Pin|D0_Pin
 8002140:	f24c 7303 	movw	r3, #50947	@ 0xc703
 8002144:	607b      	str	r3, [r7, #4]
                          |D1_Pin|D2_Pin|D3_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002146:	2302      	movs	r3, #2
 8002148:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800214a:	2300      	movs	r3, #0
 800214c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800214e:	2303      	movs	r3, #3
 8002150:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8002152:	230c      	movs	r3, #12
 8002154:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002156:	1d3b      	adds	r3, r7, #4
 8002158:	4619      	mov	r1, r3
 800215a:	4811      	ldr	r0, [pc, #68]	@ (80021a0 <HAL_FMC_MspInit+0x11c>)
 800215c:	f000 fe24 	bl	8002da8 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = SDCKE1_Pin|SDNE1_Pin;
 8002160:	2360      	movs	r3, #96	@ 0x60
 8002162:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002164:	2302      	movs	r3, #2
 8002166:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002168:	2300      	movs	r3, #0
 800216a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800216c:	2303      	movs	r3, #3
 800216e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8002170:	230c      	movs	r3, #12
 8002172:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002174:	1d3b      	adds	r3, r7, #4
 8002176:	4619      	mov	r1, r3
 8002178:	480a      	ldr	r0, [pc, #40]	@ (80021a4 <HAL_FMC_MspInit+0x120>)
 800217a:	f000 fe15 	bl	8002da8 <HAL_GPIO_Init>
 800217e:	e000      	b.n	8002182 <HAL_FMC_MspInit+0xfe>
    return;
 8002180:	bf00      	nop

  /* USER CODE BEGIN FMC_MspInit 1 */

  /* USER CODE END FMC_MspInit 1 */
}
 8002182:	3718      	adds	r7, #24
 8002184:	46bd      	mov	sp, r7
 8002186:	bd80      	pop	{r7, pc}
 8002188:	20000744 	.word	0x20000744
 800218c:	40023800 	.word	0x40023800
 8002190:	40021400 	.word	0x40021400
 8002194:	40020800 	.word	0x40020800
 8002198:	40021800 	.word	0x40021800
 800219c:	40021000 	.word	0x40021000
 80021a0:	40020c00 	.word	0x40020c00
 80021a4:	40020400 	.word	0x40020400

080021a8 <HAL_SDRAM_MspInit>:

void HAL_SDRAM_MspInit(SDRAM_HandleTypeDef* hsdram){
 80021a8:	b580      	push	{r7, lr}
 80021aa:	b082      	sub	sp, #8
 80021ac:	af00      	add	r7, sp, #0
 80021ae:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SDRAM_MspInit 0 */

  /* USER CODE END SDRAM_MspInit 0 */
  HAL_FMC_MspInit();
 80021b0:	f7ff ff68 	bl	8002084 <HAL_FMC_MspInit>
  /* USER CODE BEGIN SDRAM_MspInit 1 */

  /* USER CODE END SDRAM_MspInit 1 */
}
 80021b4:	bf00      	nop
 80021b6:	3708      	adds	r7, #8
 80021b8:	46bd      	mov	sp, r7
 80021ba:	bd80      	pop	{r7, pc}

080021bc <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80021bc:	b580      	push	{r7, lr}
 80021be:	b08e      	sub	sp, #56	@ 0x38
 80021c0:	af00      	add	r7, sp, #0
 80021c2:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 80021c4:	2300      	movs	r3, #0
 80021c6:	62fb      	str	r3, [r7, #44]	@ 0x2c

  uint32_t              uwPrescalerValue = 0U;
 80021c8:	2300      	movs	r3, #0
 80021ca:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t              pFLatency;

  HAL_StatusTypeDef     status;

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 80021cc:	2300      	movs	r3, #0
 80021ce:	60fb      	str	r3, [r7, #12]
 80021d0:	4b33      	ldr	r3, [pc, #204]	@ (80022a0 <HAL_InitTick+0xe4>)
 80021d2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80021d4:	4a32      	ldr	r2, [pc, #200]	@ (80022a0 <HAL_InitTick+0xe4>)
 80021d6:	f043 0310 	orr.w	r3, r3, #16
 80021da:	6413      	str	r3, [r2, #64]	@ 0x40
 80021dc:	4b30      	ldr	r3, [pc, #192]	@ (80022a0 <HAL_InitTick+0xe4>)
 80021de:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80021e0:	f003 0310 	and.w	r3, r3, #16
 80021e4:	60fb      	str	r3, [r7, #12]
 80021e6:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80021e8:	f107 0210 	add.w	r2, r7, #16
 80021ec:	f107 0314 	add.w	r3, r7, #20
 80021f0:	4611      	mov	r1, r2
 80021f2:	4618      	mov	r0, r3
 80021f4:	f002 f9f8 	bl	80045e8 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 80021f8:	6a3b      	ldr	r3, [r7, #32]
 80021fa:	62fb      	str	r3, [r7, #44]	@ 0x2c
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 80021fc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80021fe:	2b00      	cmp	r3, #0
 8002200:	d103      	bne.n	800220a <HAL_InitTick+0x4e>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8002202:	f002 f9c9 	bl	8004598 <HAL_RCC_GetPCLK1Freq>
 8002206:	6378      	str	r0, [r7, #52]	@ 0x34
 8002208:	e004      	b.n	8002214 <HAL_InitTick+0x58>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 800220a:	f002 f9c5 	bl	8004598 <HAL_RCC_GetPCLK1Freq>
 800220e:	4603      	mov	r3, r0
 8002210:	005b      	lsls	r3, r3, #1
 8002212:	637b      	str	r3, [r7, #52]	@ 0x34
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8002214:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002216:	4a23      	ldr	r2, [pc, #140]	@ (80022a4 <HAL_InitTick+0xe8>)
 8002218:	fba2 2303 	umull	r2, r3, r2, r3
 800221c:	0c9b      	lsrs	r3, r3, #18
 800221e:	3b01      	subs	r3, #1
 8002220:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8002222:	4b21      	ldr	r3, [pc, #132]	@ (80022a8 <HAL_InitTick+0xec>)
 8002224:	4a21      	ldr	r2, [pc, #132]	@ (80022ac <HAL_InitTick+0xf0>)
 8002226:	601a      	str	r2, [r3, #0]
   * Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
   * Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
   * ClockDivision = 0
   * Counter direction = Up
   */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8002228:	4b1f      	ldr	r3, [pc, #124]	@ (80022a8 <HAL_InitTick+0xec>)
 800222a:	f240 32e7 	movw	r2, #999	@ 0x3e7
 800222e:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8002230:	4a1d      	ldr	r2, [pc, #116]	@ (80022a8 <HAL_InitTick+0xec>)
 8002232:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002234:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8002236:	4b1c      	ldr	r3, [pc, #112]	@ (80022a8 <HAL_InitTick+0xec>)
 8002238:	2200      	movs	r2, #0
 800223a:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 800223c:	4b1a      	ldr	r3, [pc, #104]	@ (80022a8 <HAL_InitTick+0xec>)
 800223e:	2200      	movs	r2, #0
 8002240:	609a      	str	r2, [r3, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002242:	4b19      	ldr	r3, [pc, #100]	@ (80022a8 <HAL_InitTick+0xec>)
 8002244:	2200      	movs	r2, #0
 8002246:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim6);
 8002248:	4817      	ldr	r0, [pc, #92]	@ (80022a8 <HAL_InitTick+0xec>)
 800224a:	f003 fa57 	bl	80056fc <HAL_TIM_Base_Init>
 800224e:	4603      	mov	r3, r0
 8002250:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
  if (status == HAL_OK)
 8002254:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8002258:	2b00      	cmp	r3, #0
 800225a:	d11b      	bne.n	8002294 <HAL_InitTick+0xd8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 800225c:	4812      	ldr	r0, [pc, #72]	@ (80022a8 <HAL_InitTick+0xec>)
 800225e:	f003 fa9d 	bl	800579c <HAL_TIM_Base_Start_IT>
 8002262:	4603      	mov	r3, r0
 8002264:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
    if (status == HAL_OK)
 8002268:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 800226c:	2b00      	cmp	r3, #0
 800226e:	d111      	bne.n	8002294 <HAL_InitTick+0xd8>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8002270:	2036      	movs	r0, #54	@ 0x36
 8002272:	f000 f9c5 	bl	8002600 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	2b0f      	cmp	r3, #15
 800227a:	d808      	bhi.n	800228e <HAL_InitTick+0xd2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 800227c:	2200      	movs	r2, #0
 800227e:	6879      	ldr	r1, [r7, #4]
 8002280:	2036      	movs	r0, #54	@ 0x36
 8002282:	f000 f9a1 	bl	80025c8 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8002286:	4a0a      	ldr	r2, [pc, #40]	@ (80022b0 <HAL_InitTick+0xf4>)
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	6013      	str	r3, [r2, #0]
 800228c:	e002      	b.n	8002294 <HAL_InitTick+0xd8>
      }
      else
      {
        status = HAL_ERROR;
 800228e:	2301      	movs	r3, #1
 8002290:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8002294:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
}
 8002298:	4618      	mov	r0, r3
 800229a:	3738      	adds	r7, #56	@ 0x38
 800229c:	46bd      	mov	sp, r7
 800229e:	bd80      	pop	{r7, pc}
 80022a0:	40023800 	.word	0x40023800
 80022a4:	431bde83 	.word	0x431bde83
 80022a8:	20000748 	.word	0x20000748
 80022ac:	40001000 	.word	0x40001000
 80022b0:	2000004c 	.word	0x2000004c

080022b4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80022b4:	b480      	push	{r7}
 80022b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80022b8:	bf00      	nop
 80022ba:	e7fd      	b.n	80022b8 <NMI_Handler+0x4>

080022bc <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80022bc:	b480      	push	{r7}
 80022be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80022c0:	bf00      	nop
 80022c2:	e7fd      	b.n	80022c0 <HardFault_Handler+0x4>

080022c4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80022c4:	b480      	push	{r7}
 80022c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80022c8:	bf00      	nop
 80022ca:	e7fd      	b.n	80022c8 <MemManage_Handler+0x4>

080022cc <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80022cc:	b480      	push	{r7}
 80022ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80022d0:	bf00      	nop
 80022d2:	e7fd      	b.n	80022d0 <BusFault_Handler+0x4>

080022d4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80022d4:	b480      	push	{r7}
 80022d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80022d8:	bf00      	nop
 80022da:	e7fd      	b.n	80022d8 <UsageFault_Handler+0x4>

080022dc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80022dc:	b480      	push	{r7}
 80022de:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80022e0:	bf00      	nop
 80022e2:	46bd      	mov	sp, r7
 80022e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022e8:	4770      	bx	lr
	...

080022ec <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 80022ec:	b580      	push	{r7, lr}
 80022ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 80022f0:	4802      	ldr	r0, [pc, #8]	@ (80022fc <TIM6_DAC_IRQHandler+0x10>)
 80022f2:	f003 fac3 	bl	800587c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 80022f6:	bf00      	nop
 80022f8:	bd80      	pop	{r7, pc}
 80022fa:	bf00      	nop
 80022fc:	20000748 	.word	0x20000748

08002300 <DMA2D_IRQHandler>:

/**
  * @brief This function handles DMA2D global interrupt.
  */
void DMA2D_IRQHandler(void)
{
 8002300:	b580      	push	{r7, lr}
 8002302:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2D_IRQn 0 */

  /* USER CODE END DMA2D_IRQn 0 */
  HAL_DMA2D_IRQHandler(&hdma2d);
 8002304:	4802      	ldr	r0, [pc, #8]	@ (8002310 <DMA2D_IRQHandler+0x10>)
 8002306:	f000 fbac 	bl	8002a62 <HAL_DMA2D_IRQHandler>
  /* USER CODE BEGIN DMA2D_IRQn 1 */

  /* USER CODE END DMA2D_IRQn 1 */
}
 800230a:	bf00      	nop
 800230c:	bd80      	pop	{r7, pc}
 800230e:	bf00      	nop
 8002310:	200002d4 	.word	0x200002d4

08002314 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002314:	b480      	push	{r7}
 8002316:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002318:	4b06      	ldr	r3, [pc, #24]	@ (8002334 <SystemInit+0x20>)
 800231a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800231e:	4a05      	ldr	r2, [pc, #20]	@ (8002334 <SystemInit+0x20>)
 8002320:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8002324:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002328:	bf00      	nop
 800232a:	46bd      	mov	sp, r7
 800232c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002330:	4770      	bx	lr
 8002332:	bf00      	nop
 8002334:	e000ed00 	.word	0xe000ed00

08002338 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 8002338:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8002370 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800233c:	f7ff ffea 	bl	8002314 <SystemInit>
 
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002340:	480c      	ldr	r0, [pc, #48]	@ (8002374 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8002342:	490d      	ldr	r1, [pc, #52]	@ (8002378 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8002344:	4a0d      	ldr	r2, [pc, #52]	@ (800237c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8002346:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002348:	e002      	b.n	8002350 <LoopCopyDataInit>

0800234a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800234a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800234c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800234e:	3304      	adds	r3, #4

08002350 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002350:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002352:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002354:	d3f9      	bcc.n	800234a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002356:	4a0a      	ldr	r2, [pc, #40]	@ (8002380 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8002358:	4c0a      	ldr	r4, [pc, #40]	@ (8002384 <LoopFillZerobss+0x22>)
  movs r3, #0
 800235a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800235c:	e001      	b.n	8002362 <LoopFillZerobss>

0800235e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800235e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002360:	3204      	adds	r2, #4

08002362 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002362:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002364:	d3fb      	bcc.n	800235e <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8002366:	f005 fcbb 	bl	8007ce0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800236a:	f7fe faad 	bl	80008c8 <main>
  bx  lr    
 800236e:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 8002370:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 8002374:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002378:	20000058 	.word	0x20000058
  ldr r2, =_sidata
 800237c:	08009858 	.word	0x08009858
  ldr r2, =_sbss
 8002380:	20000058 	.word	0x20000058
  ldr r4, =_ebss
 8002384:	200088e8 	.word	0x200088e8

08002388 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002388:	e7fe      	b.n	8002388 <ADC_IRQHandler>
	...

0800238c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800238c:	b580      	push	{r7, lr}
 800238e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002390:	4b0e      	ldr	r3, [pc, #56]	@ (80023cc <HAL_Init+0x40>)
 8002392:	681b      	ldr	r3, [r3, #0]
 8002394:	4a0d      	ldr	r2, [pc, #52]	@ (80023cc <HAL_Init+0x40>)
 8002396:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800239a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800239c:	4b0b      	ldr	r3, [pc, #44]	@ (80023cc <HAL_Init+0x40>)
 800239e:	681b      	ldr	r3, [r3, #0]
 80023a0:	4a0a      	ldr	r2, [pc, #40]	@ (80023cc <HAL_Init+0x40>)
 80023a2:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80023a6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80023a8:	4b08      	ldr	r3, [pc, #32]	@ (80023cc <HAL_Init+0x40>)
 80023aa:	681b      	ldr	r3, [r3, #0]
 80023ac:	4a07      	ldr	r2, [pc, #28]	@ (80023cc <HAL_Init+0x40>)
 80023ae:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80023b2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80023b4:	2003      	movs	r0, #3
 80023b6:	f000 f8fc 	bl	80025b2 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80023ba:	2000      	movs	r0, #0
 80023bc:	f7ff fefe 	bl	80021bc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80023c0:	f7ff fb88 	bl	8001ad4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80023c4:	2300      	movs	r3, #0
}
 80023c6:	4618      	mov	r0, r3
 80023c8:	bd80      	pop	{r7, pc}
 80023ca:	bf00      	nop
 80023cc:	40023c00 	.word	0x40023c00

080023d0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80023d0:	b480      	push	{r7}
 80023d2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80023d4:	4b06      	ldr	r3, [pc, #24]	@ (80023f0 <HAL_IncTick+0x20>)
 80023d6:	781b      	ldrb	r3, [r3, #0]
 80023d8:	461a      	mov	r2, r3
 80023da:	4b06      	ldr	r3, [pc, #24]	@ (80023f4 <HAL_IncTick+0x24>)
 80023dc:	681b      	ldr	r3, [r3, #0]
 80023de:	4413      	add	r3, r2
 80023e0:	4a04      	ldr	r2, [pc, #16]	@ (80023f4 <HAL_IncTick+0x24>)
 80023e2:	6013      	str	r3, [r2, #0]
}
 80023e4:	bf00      	nop
 80023e6:	46bd      	mov	sp, r7
 80023e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023ec:	4770      	bx	lr
 80023ee:	bf00      	nop
 80023f0:	20000050 	.word	0x20000050
 80023f4:	20000790 	.word	0x20000790

080023f8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80023f8:	b480      	push	{r7}
 80023fa:	af00      	add	r7, sp, #0
  return uwTick;
 80023fc:	4b03      	ldr	r3, [pc, #12]	@ (800240c <HAL_GetTick+0x14>)
 80023fe:	681b      	ldr	r3, [r3, #0]
}
 8002400:	4618      	mov	r0, r3
 8002402:	46bd      	mov	sp, r7
 8002404:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002408:	4770      	bx	lr
 800240a:	bf00      	nop
 800240c:	20000790 	.word	0x20000790

08002410 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002410:	b580      	push	{r7, lr}
 8002412:	b084      	sub	sp, #16
 8002414:	af00      	add	r7, sp, #0
 8002416:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002418:	f7ff ffee 	bl	80023f8 <HAL_GetTick>
 800241c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002422:	68fb      	ldr	r3, [r7, #12]
 8002424:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002428:	d005      	beq.n	8002436 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800242a:	4b0a      	ldr	r3, [pc, #40]	@ (8002454 <HAL_Delay+0x44>)
 800242c:	781b      	ldrb	r3, [r3, #0]
 800242e:	461a      	mov	r2, r3
 8002430:	68fb      	ldr	r3, [r7, #12]
 8002432:	4413      	add	r3, r2
 8002434:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002436:	bf00      	nop
 8002438:	f7ff ffde 	bl	80023f8 <HAL_GetTick>
 800243c:	4602      	mov	r2, r0
 800243e:	68bb      	ldr	r3, [r7, #8]
 8002440:	1ad3      	subs	r3, r2, r3
 8002442:	68fa      	ldr	r2, [r7, #12]
 8002444:	429a      	cmp	r2, r3
 8002446:	d8f7      	bhi.n	8002438 <HAL_Delay+0x28>
  {
  }
}
 8002448:	bf00      	nop
 800244a:	bf00      	nop
 800244c:	3710      	adds	r7, #16
 800244e:	46bd      	mov	sp, r7
 8002450:	bd80      	pop	{r7, pc}
 8002452:	bf00      	nop
 8002454:	20000050 	.word	0x20000050

08002458 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002458:	b480      	push	{r7}
 800245a:	b085      	sub	sp, #20
 800245c:	af00      	add	r7, sp, #0
 800245e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	f003 0307 	and.w	r3, r3, #7
 8002466:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002468:	4b0c      	ldr	r3, [pc, #48]	@ (800249c <__NVIC_SetPriorityGrouping+0x44>)
 800246a:	68db      	ldr	r3, [r3, #12]
 800246c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800246e:	68ba      	ldr	r2, [r7, #8]
 8002470:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002474:	4013      	ands	r3, r2
 8002476:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002478:	68fb      	ldr	r3, [r7, #12]
 800247a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800247c:	68bb      	ldr	r3, [r7, #8]
 800247e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002480:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002484:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002488:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800248a:	4a04      	ldr	r2, [pc, #16]	@ (800249c <__NVIC_SetPriorityGrouping+0x44>)
 800248c:	68bb      	ldr	r3, [r7, #8]
 800248e:	60d3      	str	r3, [r2, #12]
}
 8002490:	bf00      	nop
 8002492:	3714      	adds	r7, #20
 8002494:	46bd      	mov	sp, r7
 8002496:	f85d 7b04 	ldr.w	r7, [sp], #4
 800249a:	4770      	bx	lr
 800249c:	e000ed00 	.word	0xe000ed00

080024a0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80024a0:	b480      	push	{r7}
 80024a2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80024a4:	4b04      	ldr	r3, [pc, #16]	@ (80024b8 <__NVIC_GetPriorityGrouping+0x18>)
 80024a6:	68db      	ldr	r3, [r3, #12]
 80024a8:	0a1b      	lsrs	r3, r3, #8
 80024aa:	f003 0307 	and.w	r3, r3, #7
}
 80024ae:	4618      	mov	r0, r3
 80024b0:	46bd      	mov	sp, r7
 80024b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024b6:	4770      	bx	lr
 80024b8:	e000ed00 	.word	0xe000ed00

080024bc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80024bc:	b480      	push	{r7}
 80024be:	b083      	sub	sp, #12
 80024c0:	af00      	add	r7, sp, #0
 80024c2:	4603      	mov	r3, r0
 80024c4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80024c6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80024ca:	2b00      	cmp	r3, #0
 80024cc:	db0b      	blt.n	80024e6 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80024ce:	79fb      	ldrb	r3, [r7, #7]
 80024d0:	f003 021f 	and.w	r2, r3, #31
 80024d4:	4907      	ldr	r1, [pc, #28]	@ (80024f4 <__NVIC_EnableIRQ+0x38>)
 80024d6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80024da:	095b      	lsrs	r3, r3, #5
 80024dc:	2001      	movs	r0, #1
 80024de:	fa00 f202 	lsl.w	r2, r0, r2
 80024e2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80024e6:	bf00      	nop
 80024e8:	370c      	adds	r7, #12
 80024ea:	46bd      	mov	sp, r7
 80024ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024f0:	4770      	bx	lr
 80024f2:	bf00      	nop
 80024f4:	e000e100 	.word	0xe000e100

080024f8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80024f8:	b480      	push	{r7}
 80024fa:	b083      	sub	sp, #12
 80024fc:	af00      	add	r7, sp, #0
 80024fe:	4603      	mov	r3, r0
 8002500:	6039      	str	r1, [r7, #0]
 8002502:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002504:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002508:	2b00      	cmp	r3, #0
 800250a:	db0a      	blt.n	8002522 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800250c:	683b      	ldr	r3, [r7, #0]
 800250e:	b2da      	uxtb	r2, r3
 8002510:	490c      	ldr	r1, [pc, #48]	@ (8002544 <__NVIC_SetPriority+0x4c>)
 8002512:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002516:	0112      	lsls	r2, r2, #4
 8002518:	b2d2      	uxtb	r2, r2
 800251a:	440b      	add	r3, r1
 800251c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002520:	e00a      	b.n	8002538 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002522:	683b      	ldr	r3, [r7, #0]
 8002524:	b2da      	uxtb	r2, r3
 8002526:	4908      	ldr	r1, [pc, #32]	@ (8002548 <__NVIC_SetPriority+0x50>)
 8002528:	79fb      	ldrb	r3, [r7, #7]
 800252a:	f003 030f 	and.w	r3, r3, #15
 800252e:	3b04      	subs	r3, #4
 8002530:	0112      	lsls	r2, r2, #4
 8002532:	b2d2      	uxtb	r2, r2
 8002534:	440b      	add	r3, r1
 8002536:	761a      	strb	r2, [r3, #24]
}
 8002538:	bf00      	nop
 800253a:	370c      	adds	r7, #12
 800253c:	46bd      	mov	sp, r7
 800253e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002542:	4770      	bx	lr
 8002544:	e000e100 	.word	0xe000e100
 8002548:	e000ed00 	.word	0xe000ed00

0800254c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800254c:	b480      	push	{r7}
 800254e:	b089      	sub	sp, #36	@ 0x24
 8002550:	af00      	add	r7, sp, #0
 8002552:	60f8      	str	r0, [r7, #12]
 8002554:	60b9      	str	r1, [r7, #8]
 8002556:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002558:	68fb      	ldr	r3, [r7, #12]
 800255a:	f003 0307 	and.w	r3, r3, #7
 800255e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002560:	69fb      	ldr	r3, [r7, #28]
 8002562:	f1c3 0307 	rsb	r3, r3, #7
 8002566:	2b04      	cmp	r3, #4
 8002568:	bf28      	it	cs
 800256a:	2304      	movcs	r3, #4
 800256c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800256e:	69fb      	ldr	r3, [r7, #28]
 8002570:	3304      	adds	r3, #4
 8002572:	2b06      	cmp	r3, #6
 8002574:	d902      	bls.n	800257c <NVIC_EncodePriority+0x30>
 8002576:	69fb      	ldr	r3, [r7, #28]
 8002578:	3b03      	subs	r3, #3
 800257a:	e000      	b.n	800257e <NVIC_EncodePriority+0x32>
 800257c:	2300      	movs	r3, #0
 800257e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002580:	f04f 32ff 	mov.w	r2, #4294967295
 8002584:	69bb      	ldr	r3, [r7, #24]
 8002586:	fa02 f303 	lsl.w	r3, r2, r3
 800258a:	43da      	mvns	r2, r3
 800258c:	68bb      	ldr	r3, [r7, #8]
 800258e:	401a      	ands	r2, r3
 8002590:	697b      	ldr	r3, [r7, #20]
 8002592:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002594:	f04f 31ff 	mov.w	r1, #4294967295
 8002598:	697b      	ldr	r3, [r7, #20]
 800259a:	fa01 f303 	lsl.w	r3, r1, r3
 800259e:	43d9      	mvns	r1, r3
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80025a4:	4313      	orrs	r3, r2
         );
}
 80025a6:	4618      	mov	r0, r3
 80025a8:	3724      	adds	r7, #36	@ 0x24
 80025aa:	46bd      	mov	sp, r7
 80025ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025b0:	4770      	bx	lr

080025b2 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80025b2:	b580      	push	{r7, lr}
 80025b4:	b082      	sub	sp, #8
 80025b6:	af00      	add	r7, sp, #0
 80025b8:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80025ba:	6878      	ldr	r0, [r7, #4]
 80025bc:	f7ff ff4c 	bl	8002458 <__NVIC_SetPriorityGrouping>
}
 80025c0:	bf00      	nop
 80025c2:	3708      	adds	r7, #8
 80025c4:	46bd      	mov	sp, r7
 80025c6:	bd80      	pop	{r7, pc}

080025c8 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80025c8:	b580      	push	{r7, lr}
 80025ca:	b086      	sub	sp, #24
 80025cc:	af00      	add	r7, sp, #0
 80025ce:	4603      	mov	r3, r0
 80025d0:	60b9      	str	r1, [r7, #8]
 80025d2:	607a      	str	r2, [r7, #4]
 80025d4:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80025d6:	2300      	movs	r3, #0
 80025d8:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80025da:	f7ff ff61 	bl	80024a0 <__NVIC_GetPriorityGrouping>
 80025de:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80025e0:	687a      	ldr	r2, [r7, #4]
 80025e2:	68b9      	ldr	r1, [r7, #8]
 80025e4:	6978      	ldr	r0, [r7, #20]
 80025e6:	f7ff ffb1 	bl	800254c <NVIC_EncodePriority>
 80025ea:	4602      	mov	r2, r0
 80025ec:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80025f0:	4611      	mov	r1, r2
 80025f2:	4618      	mov	r0, r3
 80025f4:	f7ff ff80 	bl	80024f8 <__NVIC_SetPriority>
}
 80025f8:	bf00      	nop
 80025fa:	3718      	adds	r7, #24
 80025fc:	46bd      	mov	sp, r7
 80025fe:	bd80      	pop	{r7, pc}

08002600 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002600:	b580      	push	{r7, lr}
 8002602:	b082      	sub	sp, #8
 8002604:	af00      	add	r7, sp, #0
 8002606:	4603      	mov	r3, r0
 8002608:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800260a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800260e:	4618      	mov	r0, r3
 8002610:	f7ff ff54 	bl	80024bc <__NVIC_EnableIRQ>
}
 8002614:	bf00      	nop
 8002616:	3708      	adds	r7, #8
 8002618:	46bd      	mov	sp, r7
 800261a:	bd80      	pop	{r7, pc}

0800261c <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 800261c:	b580      	push	{r7, lr}
 800261e:	b082      	sub	sp, #8
 8002620:	af00      	add	r7, sp, #0
 8002622:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	2b00      	cmp	r3, #0
 8002628:	d101      	bne.n	800262e <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 800262a:	2301      	movs	r3, #1
 800262c:	e00e      	b.n	800264c <HAL_CRC_Init+0x30>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	795b      	ldrb	r3, [r3, #5]
 8002632:	b2db      	uxtb	r3, r3
 8002634:	2b00      	cmp	r3, #0
 8002636:	d105      	bne.n	8002644 <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	2200      	movs	r2, #0
 800263c:	711a      	strb	r2, [r3, #4]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 800263e:	6878      	ldr	r0, [r7, #4]
 8002640:	f7ff fa74 	bl	8001b2c <HAL_CRC_MspInit>
  }

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	2201      	movs	r2, #1
 8002648:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 800264a:	2300      	movs	r3, #0
}
 800264c:	4618      	mov	r0, r3
 800264e:	3708      	adds	r7, #8
 8002650:	46bd      	mov	sp, r7
 8002652:	bd80      	pop	{r7, pc}

08002654 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002654:	b580      	push	{r7, lr}
 8002656:	b086      	sub	sp, #24
 8002658:	af00      	add	r7, sp, #0
 800265a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 800265c:	2300      	movs	r3, #0
 800265e:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8002660:	f7ff feca 	bl	80023f8 <HAL_GetTick>
 8002664:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	2b00      	cmp	r3, #0
 800266a:	d101      	bne.n	8002670 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 800266c:	2301      	movs	r3, #1
 800266e:	e099      	b.n	80027a4 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	2202      	movs	r2, #2
 8002674:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	2200      	movs	r2, #0
 800267c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	681a      	ldr	r2, [r3, #0]
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	681b      	ldr	r3, [r3, #0]
 800268a:	f022 0201 	bic.w	r2, r2, #1
 800268e:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002690:	e00f      	b.n	80026b2 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002692:	f7ff feb1 	bl	80023f8 <HAL_GetTick>
 8002696:	4602      	mov	r2, r0
 8002698:	693b      	ldr	r3, [r7, #16]
 800269a:	1ad3      	subs	r3, r2, r3
 800269c:	2b05      	cmp	r3, #5
 800269e:	d908      	bls.n	80026b2 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	2220      	movs	r2, #32
 80026a4:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	2203      	movs	r2, #3
 80026aa:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 80026ae:	2303      	movs	r3, #3
 80026b0:	e078      	b.n	80027a4 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	681b      	ldr	r3, [r3, #0]
 80026b6:	681b      	ldr	r3, [r3, #0]
 80026b8:	f003 0301 	and.w	r3, r3, #1
 80026bc:	2b00      	cmp	r3, #0
 80026be:	d1e8      	bne.n	8002692 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	681b      	ldr	r3, [r3, #0]
 80026c4:	681b      	ldr	r3, [r3, #0]
 80026c6:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80026c8:	697a      	ldr	r2, [r7, #20]
 80026ca:	4b38      	ldr	r3, [pc, #224]	@ (80027ac <HAL_DMA_Init+0x158>)
 80026cc:	4013      	ands	r3, r2
 80026ce:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	685a      	ldr	r2, [r3, #4]
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	689b      	ldr	r3, [r3, #8]
 80026d8:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80026de:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	691b      	ldr	r3, [r3, #16]
 80026e4:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80026ea:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	699b      	ldr	r3, [r3, #24]
 80026f0:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80026f6:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	6a1b      	ldr	r3, [r3, #32]
 80026fc:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80026fe:	697a      	ldr	r2, [r7, #20]
 8002700:	4313      	orrs	r3, r2
 8002702:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002708:	2b04      	cmp	r3, #4
 800270a:	d107      	bne.n	800271c <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002714:	4313      	orrs	r3, r2
 8002716:	697a      	ldr	r2, [r7, #20]
 8002718:	4313      	orrs	r3, r2
 800271a:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	681b      	ldr	r3, [r3, #0]
 8002720:	697a      	ldr	r2, [r7, #20]
 8002722:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	681b      	ldr	r3, [r3, #0]
 8002728:	695b      	ldr	r3, [r3, #20]
 800272a:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 800272c:	697b      	ldr	r3, [r7, #20]
 800272e:	f023 0307 	bic.w	r3, r3, #7
 8002732:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002738:	697a      	ldr	r2, [r7, #20]
 800273a:	4313      	orrs	r3, r2
 800273c:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002742:	2b04      	cmp	r3, #4
 8002744:	d117      	bne.n	8002776 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800274a:	697a      	ldr	r2, [r7, #20]
 800274c:	4313      	orrs	r3, r2
 800274e:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002754:	2b00      	cmp	r3, #0
 8002756:	d00e      	beq.n	8002776 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8002758:	6878      	ldr	r0, [r7, #4]
 800275a:	f000 f8bd 	bl	80028d8 <DMA_CheckFifoParam>
 800275e:	4603      	mov	r3, r0
 8002760:	2b00      	cmp	r3, #0
 8002762:	d008      	beq.n	8002776 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	2240      	movs	r2, #64	@ 0x40
 8002768:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	2201      	movs	r2, #1
 800276e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 8002772:	2301      	movs	r3, #1
 8002774:	e016      	b.n	80027a4 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	681b      	ldr	r3, [r3, #0]
 800277a:	697a      	ldr	r2, [r7, #20]
 800277c:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800277e:	6878      	ldr	r0, [r7, #4]
 8002780:	f000 f874 	bl	800286c <DMA_CalcBaseAndBitshift>
 8002784:	4603      	mov	r3, r0
 8002786:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800278c:	223f      	movs	r2, #63	@ 0x3f
 800278e:	409a      	lsls	r2, r3
 8002790:	68fb      	ldr	r3, [r7, #12]
 8002792:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	2200      	movs	r2, #0
 8002798:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	2201      	movs	r2, #1
 800279e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 80027a2:	2300      	movs	r3, #0
}
 80027a4:	4618      	mov	r0, r3
 80027a6:	3718      	adds	r7, #24
 80027a8:	46bd      	mov	sp, r7
 80027aa:	bd80      	pop	{r7, pc}
 80027ac:	f010803f 	.word	0xf010803f

080027b0 <HAL_DMA_DeInit>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_DeInit(DMA_HandleTypeDef *hdma)
{
 80027b0:	b580      	push	{r7, lr}
 80027b2:	b084      	sub	sp, #16
 80027b4:	af00      	add	r7, sp, #0
 80027b6:	6078      	str	r0, [r7, #4]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	2b00      	cmp	r3, #0
 80027bc:	d101      	bne.n	80027c2 <HAL_DMA_DeInit+0x12>
  {
    return HAL_ERROR;
 80027be:	2301      	movs	r3, #1
 80027c0:	e050      	b.n	8002864 <HAL_DMA_DeInit+0xb4>
  }
  
  /* Check the DMA peripheral state */
  if(hdma->State == HAL_DMA_STATE_BUSY)
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80027c8:	b2db      	uxtb	r3, r3
 80027ca:	2b02      	cmp	r3, #2
 80027cc:	d101      	bne.n	80027d2 <HAL_DMA_DeInit+0x22>
  {
    /* Return error status */
    return HAL_BUSY;
 80027ce:	2302      	movs	r3, #2
 80027d0:	e048      	b.n	8002864 <HAL_DMA_DeInit+0xb4>

  /* Check the parameters */
  assert_param(IS_DMA_STREAM_ALL_INSTANCE(hdma->Instance));

  /* Disable the selected DMA Streamx */
  __HAL_DMA_DISABLE(hdma);
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	681b      	ldr	r3, [r3, #0]
 80027d6:	681a      	ldr	r2, [r3, #0]
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	681b      	ldr	r3, [r3, #0]
 80027dc:	f022 0201 	bic.w	r2, r2, #1
 80027e0:	601a      	str	r2, [r3, #0]

  /* Reset DMA Streamx control register */
  hdma->Instance->CR   = 0U;
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	681b      	ldr	r3, [r3, #0]
 80027e6:	2200      	movs	r2, #0
 80027e8:	601a      	str	r2, [r3, #0]

  /* Reset DMA Streamx number of data to transfer register */
  hdma->Instance->NDTR = 0U;
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	681b      	ldr	r3, [r3, #0]
 80027ee:	2200      	movs	r2, #0
 80027f0:	605a      	str	r2, [r3, #4]

  /* Reset DMA Streamx peripheral address register */
  hdma->Instance->PAR  = 0U;
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	681b      	ldr	r3, [r3, #0]
 80027f6:	2200      	movs	r2, #0
 80027f8:	609a      	str	r2, [r3, #8]

  /* Reset DMA Streamx memory 0 address register */
  hdma->Instance->M0AR = 0U;
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	681b      	ldr	r3, [r3, #0]
 80027fe:	2200      	movs	r2, #0
 8002800:	60da      	str	r2, [r3, #12]
  
  /* Reset DMA Streamx memory 1 address register */
  hdma->Instance->M1AR = 0U;
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	681b      	ldr	r3, [r3, #0]
 8002806:	2200      	movs	r2, #0
 8002808:	611a      	str	r2, [r3, #16]
  
  /* Reset DMA Streamx FIFO control register */
  hdma->Instance->FCR  = 0x00000021U;
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	681b      	ldr	r3, [r3, #0]
 800280e:	2221      	movs	r2, #33	@ 0x21
 8002810:	615a      	str	r2, [r3, #20]
  
  /* Get DMA steam Base Address */  
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8002812:	6878      	ldr	r0, [r7, #4]
 8002814:	f000 f82a 	bl	800286c <DMA_CalcBaseAndBitshift>
 8002818:	4603      	mov	r3, r0
 800281a:	60fb      	str	r3, [r7, #12]
  
  /* Clean all callbacks */
  hdma->XferCpltCallback = NULL;
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	2200      	movs	r2, #0
 8002820:	63da      	str	r2, [r3, #60]	@ 0x3c
  hdma->XferHalfCpltCallback = NULL;
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	2200      	movs	r2, #0
 8002826:	641a      	str	r2, [r3, #64]	@ 0x40
  hdma->XferM1CpltCallback = NULL;
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	2200      	movs	r2, #0
 800282c:	645a      	str	r2, [r3, #68]	@ 0x44
  hdma->XferM1HalfCpltCallback = NULL;
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	2200      	movs	r2, #0
 8002832:	649a      	str	r2, [r3, #72]	@ 0x48
  hdma->XferErrorCallback = NULL;
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	2200      	movs	r2, #0
 8002838:	64da      	str	r2, [r3, #76]	@ 0x4c
  hdma->XferAbortCallback = NULL;
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	2200      	movs	r2, #0
 800283e:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Clear all interrupt flags at correct offset within the register */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002844:	223f      	movs	r2, #63	@ 0x3f
 8002846:	409a      	lsls	r2, r3
 8002848:	68fb      	ldr	r3, [r7, #12]
 800284a:	609a      	str	r2, [r3, #8]

  /* Reset the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	2200      	movs	r2, #0
 8002850:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Reset the DMA state */
  hdma->State = HAL_DMA_STATE_RESET;
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	2200      	movs	r2, #0
 8002856:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	2200      	movs	r2, #0
 800285e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8002862:	2300      	movs	r3, #0
}
 8002864:	4618      	mov	r0, r3
 8002866:	3710      	adds	r7, #16
 8002868:	46bd      	mov	sp, r7
 800286a:	bd80      	pop	{r7, pc}

0800286c <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 800286c:	b480      	push	{r7}
 800286e:	b085      	sub	sp, #20
 8002870:	af00      	add	r7, sp, #0
 8002872:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	681b      	ldr	r3, [r3, #0]
 8002878:	b2db      	uxtb	r3, r3
 800287a:	3b10      	subs	r3, #16
 800287c:	4a14      	ldr	r2, [pc, #80]	@ (80028d0 <DMA_CalcBaseAndBitshift+0x64>)
 800287e:	fba2 2303 	umull	r2, r3, r2, r3
 8002882:	091b      	lsrs	r3, r3, #4
 8002884:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8002886:	4a13      	ldr	r2, [pc, #76]	@ (80028d4 <DMA_CalcBaseAndBitshift+0x68>)
 8002888:	68fb      	ldr	r3, [r7, #12]
 800288a:	4413      	add	r3, r2
 800288c:	781b      	ldrb	r3, [r3, #0]
 800288e:	461a      	mov	r2, r3
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 8002894:	68fb      	ldr	r3, [r7, #12]
 8002896:	2b03      	cmp	r3, #3
 8002898:	d909      	bls.n	80028ae <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	681b      	ldr	r3, [r3, #0]
 800289e:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 80028a2:	f023 0303 	bic.w	r3, r3, #3
 80028a6:	1d1a      	adds	r2, r3, #4
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	659a      	str	r2, [r3, #88]	@ 0x58
 80028ac:	e007      	b.n	80028be <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	681b      	ldr	r3, [r3, #0]
 80028b2:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 80028b6:	f023 0303 	bic.w	r3, r3, #3
 80028ba:	687a      	ldr	r2, [r7, #4]
 80028bc:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 80028c2:	4618      	mov	r0, r3
 80028c4:	3714      	adds	r7, #20
 80028c6:	46bd      	mov	sp, r7
 80028c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028cc:	4770      	bx	lr
 80028ce:	bf00      	nop
 80028d0:	aaaaaaab 	.word	0xaaaaaaab
 80028d4:	08009840 	.word	0x08009840

080028d8 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80028d8:	b480      	push	{r7}
 80028da:	b085      	sub	sp, #20
 80028dc:	af00      	add	r7, sp, #0
 80028de:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80028e0:	2300      	movs	r3, #0
 80028e2:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80028e8:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	699b      	ldr	r3, [r3, #24]
 80028ee:	2b00      	cmp	r3, #0
 80028f0:	d11f      	bne.n	8002932 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 80028f2:	68bb      	ldr	r3, [r7, #8]
 80028f4:	2b03      	cmp	r3, #3
 80028f6:	d856      	bhi.n	80029a6 <DMA_CheckFifoParam+0xce>
 80028f8:	a201      	add	r2, pc, #4	@ (adr r2, 8002900 <DMA_CheckFifoParam+0x28>)
 80028fa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80028fe:	bf00      	nop
 8002900:	08002911 	.word	0x08002911
 8002904:	08002923 	.word	0x08002923
 8002908:	08002911 	.word	0x08002911
 800290c:	080029a7 	.word	0x080029a7
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002914:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002918:	2b00      	cmp	r3, #0
 800291a:	d046      	beq.n	80029aa <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 800291c:	2301      	movs	r3, #1
 800291e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002920:	e043      	b.n	80029aa <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002926:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 800292a:	d140      	bne.n	80029ae <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 800292c:	2301      	movs	r3, #1
 800292e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002930:	e03d      	b.n	80029ae <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	699b      	ldr	r3, [r3, #24]
 8002936:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800293a:	d121      	bne.n	8002980 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 800293c:	68bb      	ldr	r3, [r7, #8]
 800293e:	2b03      	cmp	r3, #3
 8002940:	d837      	bhi.n	80029b2 <DMA_CheckFifoParam+0xda>
 8002942:	a201      	add	r2, pc, #4	@ (adr r2, 8002948 <DMA_CheckFifoParam+0x70>)
 8002944:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002948:	08002959 	.word	0x08002959
 800294c:	0800295f 	.word	0x0800295f
 8002950:	08002959 	.word	0x08002959
 8002954:	08002971 	.word	0x08002971
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8002958:	2301      	movs	r3, #1
 800295a:	73fb      	strb	r3, [r7, #15]
      break;
 800295c:	e030      	b.n	80029c0 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002962:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002966:	2b00      	cmp	r3, #0
 8002968:	d025      	beq.n	80029b6 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 800296a:	2301      	movs	r3, #1
 800296c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800296e:	e022      	b.n	80029b6 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002974:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8002978:	d11f      	bne.n	80029ba <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 800297a:	2301      	movs	r3, #1
 800297c:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 800297e:	e01c      	b.n	80029ba <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8002980:	68bb      	ldr	r3, [r7, #8]
 8002982:	2b02      	cmp	r3, #2
 8002984:	d903      	bls.n	800298e <DMA_CheckFifoParam+0xb6>
 8002986:	68bb      	ldr	r3, [r7, #8]
 8002988:	2b03      	cmp	r3, #3
 800298a:	d003      	beq.n	8002994 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 800298c:	e018      	b.n	80029c0 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 800298e:	2301      	movs	r3, #1
 8002990:	73fb      	strb	r3, [r7, #15]
      break;
 8002992:	e015      	b.n	80029c0 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002998:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800299c:	2b00      	cmp	r3, #0
 800299e:	d00e      	beq.n	80029be <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 80029a0:	2301      	movs	r3, #1
 80029a2:	73fb      	strb	r3, [r7, #15]
      break;
 80029a4:	e00b      	b.n	80029be <DMA_CheckFifoParam+0xe6>
      break;
 80029a6:	bf00      	nop
 80029a8:	e00a      	b.n	80029c0 <DMA_CheckFifoParam+0xe8>
      break;
 80029aa:	bf00      	nop
 80029ac:	e008      	b.n	80029c0 <DMA_CheckFifoParam+0xe8>
      break;
 80029ae:	bf00      	nop
 80029b0:	e006      	b.n	80029c0 <DMA_CheckFifoParam+0xe8>
      break;
 80029b2:	bf00      	nop
 80029b4:	e004      	b.n	80029c0 <DMA_CheckFifoParam+0xe8>
      break;
 80029b6:	bf00      	nop
 80029b8:	e002      	b.n	80029c0 <DMA_CheckFifoParam+0xe8>
      break;   
 80029ba:	bf00      	nop
 80029bc:	e000      	b.n	80029c0 <DMA_CheckFifoParam+0xe8>
      break;
 80029be:	bf00      	nop
    }
  } 
  
  return status; 
 80029c0:	7bfb      	ldrb	r3, [r7, #15]
}
 80029c2:	4618      	mov	r0, r3
 80029c4:	3714      	adds	r7, #20
 80029c6:	46bd      	mov	sp, r7
 80029c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029cc:	4770      	bx	lr
 80029ce:	bf00      	nop

080029d0 <HAL_DMA2D_Init>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Init(DMA2D_HandleTypeDef *hdma2d)
{
 80029d0:	b580      	push	{r7, lr}
 80029d2:	b082      	sub	sp, #8
 80029d4:	af00      	add	r7, sp, #0
 80029d6:	6078      	str	r0, [r7, #4]
  /* Check the DMA2D peripheral state */
  if (hdma2d == NULL)
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	2b00      	cmp	r3, #0
 80029dc:	d101      	bne.n	80029e2 <HAL_DMA2D_Init+0x12>
  {
    return HAL_ERROR;
 80029de:	2301      	movs	r3, #1
 80029e0:	e03b      	b.n	8002a5a <HAL_DMA2D_Init+0x8a>

    /* Init the low level hardware */
    hdma2d->MspInitCallback(hdma2d);
  }
#else
  if (hdma2d->State == HAL_DMA2D_STATE_RESET)
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	f893 3039 	ldrb.w	r3, [r3, #57]	@ 0x39
 80029e8:	b2db      	uxtb	r3, r3
 80029ea:	2b00      	cmp	r3, #0
 80029ec:	d106      	bne.n	80029fc <HAL_DMA2D_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hdma2d->Lock = HAL_UNLOCKED;
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	2200      	movs	r2, #0
 80029f2:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
    /* Init the low level hardware */
    HAL_DMA2D_MspInit(hdma2d);
 80029f6:	6878      	ldr	r0, [r7, #4]
 80029f8:	f7ff f8ba 	bl	8001b70 <HAL_DMA2D_MspInit>
  }
#endif /* (USE_HAL_DMA2D_REGISTER_CALLBACKS) */

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	2202      	movs	r2, #2
 8002a00:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

  /* DMA2D CR register configuration -------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE, hdma2d->Init.Mode);
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	681b      	ldr	r3, [r3, #0]
 8002a08:	681b      	ldr	r3, [r3, #0]
 8002a0a:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	685a      	ldr	r2, [r3, #4]
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	681b      	ldr	r3, [r3, #0]
 8002a16:	430a      	orrs	r2, r1
 8002a18:	601a      	str	r2, [r3, #0]

  /* DMA2D OPFCCR register configuration ---------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM, hdma2d->Init.ColorMode);
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002a20:	f023 0107 	bic.w	r1, r3, #7
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	689a      	ldr	r2, [r3, #8]
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	681b      	ldr	r3, [r3, #0]
 8002a2c:	430a      	orrs	r2, r1
 8002a2e:	635a      	str	r2, [r3, #52]	@ 0x34

  /* DMA2D OOR register configuration ------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, hdma2d->Init.OutputOffset);
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a36:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 8002a3a:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8002a3e:	687a      	ldr	r2, [r7, #4]
 8002a40:	68d1      	ldr	r1, [r2, #12]
 8002a42:	687a      	ldr	r2, [r7, #4]
 8002a44:	6812      	ldr	r2, [r2, #0]
 8002a46:	430b      	orrs	r3, r1
 8002a48:	6413      	str	r3, [r2, #64]	@ 0x40


  /* Update error code */
  hdma2d->ErrorCode = HAL_DMA2D_ERROR_NONE;
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	2200      	movs	r2, #0
 8002a4e:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA2D state*/
  hdma2d->State  = HAL_DMA2D_STATE_READY;
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	2201      	movs	r2, #1
 8002a54:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

  return HAL_OK;
 8002a58:	2300      	movs	r3, #0
}
 8002a5a:	4618      	mov	r0, r3
 8002a5c:	3708      	adds	r7, #8
 8002a5e:	46bd      	mov	sp, r7
 8002a60:	bd80      	pop	{r7, pc}

08002a62 <HAL_DMA2D_IRQHandler>:
  * @param  hdma2d Pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
void HAL_DMA2D_IRQHandler(DMA2D_HandleTypeDef *hdma2d)
{
 8002a62:	b580      	push	{r7, lr}
 8002a64:	b084      	sub	sp, #16
 8002a66:	af00      	add	r7, sp, #0
 8002a68:	6078      	str	r0, [r7, #4]
  uint32_t isrflags = READ_REG(hdma2d->Instance->ISR);
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	681b      	ldr	r3, [r3, #0]
 8002a6e:	685b      	ldr	r3, [r3, #4]
 8002a70:	60fb      	str	r3, [r7, #12]
  uint32_t crflags = READ_REG(hdma2d->Instance->CR);
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	681b      	ldr	r3, [r3, #0]
 8002a76:	681b      	ldr	r3, [r3, #0]
 8002a78:	60bb      	str	r3, [r7, #8]

  /* Transfer Error Interrupt management ***************************************/
  if ((isrflags & DMA2D_FLAG_TE) != 0U)
 8002a7a:	68fb      	ldr	r3, [r7, #12]
 8002a7c:	f003 0301 	and.w	r3, r3, #1
 8002a80:	2b00      	cmp	r3, #0
 8002a82:	d026      	beq.n	8002ad2 <HAL_DMA2D_IRQHandler+0x70>
  {
    if ((crflags & DMA2D_IT_TE) != 0U)
 8002a84:	68bb      	ldr	r3, [r7, #8]
 8002a86:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002a8a:	2b00      	cmp	r3, #0
 8002a8c:	d021      	beq.n	8002ad2 <HAL_DMA2D_IRQHandler+0x70>
    {
      /* Disable the transfer Error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TE);
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	681b      	ldr	r3, [r3, #0]
 8002a92:	681a      	ldr	r2, [r3, #0]
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8002a9c:	601a      	str	r2, [r3, #0]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002aa2:	f043 0201 	orr.w	r2, r3, #1
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	63da      	str	r2, [r3, #60]	@ 0x3c

      /* Clear the transfer error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TE);
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	681b      	ldr	r3, [r3, #0]
 8002aae:	2201      	movs	r2, #1
 8002ab0:	609a      	str	r2, [r3, #8]

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	2204      	movs	r2, #4
 8002ab6:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	2200      	movs	r2, #0
 8002abe:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

      if (hdma2d->XferErrorCallback != NULL)
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	695b      	ldr	r3, [r3, #20]
 8002ac6:	2b00      	cmp	r3, #0
 8002ac8:	d003      	beq.n	8002ad2 <HAL_DMA2D_IRQHandler+0x70>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	695b      	ldr	r3, [r3, #20]
 8002ace:	6878      	ldr	r0, [r7, #4]
 8002ad0:	4798      	blx	r3
      }
    }
  }
  /* Configuration Error Interrupt management **********************************/
  if ((isrflags & DMA2D_FLAG_CE) != 0U)
 8002ad2:	68fb      	ldr	r3, [r7, #12]
 8002ad4:	f003 0320 	and.w	r3, r3, #32
 8002ad8:	2b00      	cmp	r3, #0
 8002ada:	d026      	beq.n	8002b2a <HAL_DMA2D_IRQHandler+0xc8>
  {
    if ((crflags & DMA2D_IT_CE) != 0U)
 8002adc:	68bb      	ldr	r3, [r7, #8]
 8002ade:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002ae2:	2b00      	cmp	r3, #0
 8002ae4:	d021      	beq.n	8002b2a <HAL_DMA2D_IRQHandler+0xc8>
    {
      /* Disable the Configuration Error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CE);
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	681b      	ldr	r3, [r3, #0]
 8002aea:	681a      	ldr	r2, [r3, #0]
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	681b      	ldr	r3, [r3, #0]
 8002af0:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8002af4:	601a      	str	r2, [r3, #0]

      /* Clear the Configuration error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CE);
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	681b      	ldr	r3, [r3, #0]
 8002afa:	2220      	movs	r2, #32
 8002afc:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002b02:	f043 0202 	orr.w	r2, r3, #2
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	63da      	str	r2, [r3, #60]	@ 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	2204      	movs	r2, #4
 8002b0e:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	2200      	movs	r2, #0
 8002b16:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

      if (hdma2d->XferErrorCallback != NULL)
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	695b      	ldr	r3, [r3, #20]
 8002b1e:	2b00      	cmp	r3, #0
 8002b20:	d003      	beq.n	8002b2a <HAL_DMA2D_IRQHandler+0xc8>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	695b      	ldr	r3, [r3, #20]
 8002b26:	6878      	ldr	r0, [r7, #4]
 8002b28:	4798      	blx	r3
      }
    }
  }
  /* CLUT access Error Interrupt management ***********************************/
  if ((isrflags & DMA2D_FLAG_CAE) != 0U)
 8002b2a:	68fb      	ldr	r3, [r7, #12]
 8002b2c:	f003 0308 	and.w	r3, r3, #8
 8002b30:	2b00      	cmp	r3, #0
 8002b32:	d026      	beq.n	8002b82 <HAL_DMA2D_IRQHandler+0x120>
  {
    if ((crflags & DMA2D_IT_CAE) != 0U)
 8002b34:	68bb      	ldr	r3, [r7, #8]
 8002b36:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002b3a:	2b00      	cmp	r3, #0
 8002b3c:	d021      	beq.n	8002b82 <HAL_DMA2D_IRQHandler+0x120>
    {
      /* Disable the CLUT access error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CAE);
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	681b      	ldr	r3, [r3, #0]
 8002b42:	681a      	ldr	r2, [r3, #0]
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	681b      	ldr	r3, [r3, #0]
 8002b48:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002b4c:	601a      	str	r2, [r3, #0]

      /* Clear the CLUT access error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CAE);
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	681b      	ldr	r3, [r3, #0]
 8002b52:	2208      	movs	r2, #8
 8002b54:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CAE;
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002b5a:	f043 0204 	orr.w	r2, r3, #4
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	63da      	str	r2, [r3, #60]	@ 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	2204      	movs	r2, #4
 8002b66:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	2200      	movs	r2, #0
 8002b6e:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

      if (hdma2d->XferErrorCallback != NULL)
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	695b      	ldr	r3, [r3, #20]
 8002b76:	2b00      	cmp	r3, #0
 8002b78:	d003      	beq.n	8002b82 <HAL_DMA2D_IRQHandler+0x120>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	695b      	ldr	r3, [r3, #20]
 8002b7e:	6878      	ldr	r0, [r7, #4]
 8002b80:	4798      	blx	r3
      }
    }
  }
  /* Transfer watermark Interrupt management **********************************/
  if ((isrflags & DMA2D_FLAG_TW) != 0U)
 8002b82:	68fb      	ldr	r3, [r7, #12]
 8002b84:	f003 0304 	and.w	r3, r3, #4
 8002b88:	2b00      	cmp	r3, #0
 8002b8a:	d013      	beq.n	8002bb4 <HAL_DMA2D_IRQHandler+0x152>
  {
    if ((crflags & DMA2D_IT_TW) != 0U)
 8002b8c:	68bb      	ldr	r3, [r7, #8]
 8002b8e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002b92:	2b00      	cmp	r3, #0
 8002b94:	d00e      	beq.n	8002bb4 <HAL_DMA2D_IRQHandler+0x152>
    {
      /* Disable the transfer watermark interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TW);
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	681b      	ldr	r3, [r3, #0]
 8002b9a:	681a      	ldr	r2, [r3, #0]
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002ba4:	601a      	str	r2, [r3, #0]

      /* Clear the transfer watermark flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TW);
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	681b      	ldr	r3, [r3, #0]
 8002baa:	2204      	movs	r2, #4
 8002bac:	609a      	str	r2, [r3, #8]

      /* Transfer watermark Callback */
#if (USE_HAL_DMA2D_REGISTER_CALLBACKS == 1)
      hdma2d->LineEventCallback(hdma2d);
#else
      HAL_DMA2D_LineEventCallback(hdma2d);
 8002bae:	6878      	ldr	r0, [r7, #4]
 8002bb0:	f000 f853 	bl	8002c5a <HAL_DMA2D_LineEventCallback>
#endif /* USE_HAL_DMA2D_REGISTER_CALLBACKS */

    }
  }
  /* Transfer Complete Interrupt management ************************************/
  if ((isrflags & DMA2D_FLAG_TC) != 0U)
 8002bb4:	68fb      	ldr	r3, [r7, #12]
 8002bb6:	f003 0302 	and.w	r3, r3, #2
 8002bba:	2b00      	cmp	r3, #0
 8002bbc:	d024      	beq.n	8002c08 <HAL_DMA2D_IRQHandler+0x1a6>
  {
    if ((crflags & DMA2D_IT_TC) != 0U)
 8002bbe:	68bb      	ldr	r3, [r7, #8]
 8002bc0:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002bc4:	2b00      	cmp	r3, #0
 8002bc6:	d01f      	beq.n	8002c08 <HAL_DMA2D_IRQHandler+0x1a6>
    {
      /* Disable the transfer complete interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TC);
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	681a      	ldr	r2, [r3, #0]
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	681b      	ldr	r3, [r3, #0]
 8002bd2:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8002bd6:	601a      	str	r2, [r3, #0]

      /* Clear the transfer complete flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TC);
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	681b      	ldr	r3, [r3, #0]
 8002bdc:	2202      	movs	r2, #2
 8002bde:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_NONE;
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	63da      	str	r2, [r3, #60]	@ 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_READY;
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	2201      	movs	r2, #1
 8002bec:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	2200      	movs	r2, #0
 8002bf4:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

      if (hdma2d->XferCpltCallback != NULL)
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	691b      	ldr	r3, [r3, #16]
 8002bfc:	2b00      	cmp	r3, #0
 8002bfe:	d003      	beq.n	8002c08 <HAL_DMA2D_IRQHandler+0x1a6>
      {
        /* Transfer complete Callback */
        hdma2d->XferCpltCallback(hdma2d);
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	691b      	ldr	r3, [r3, #16]
 8002c04:	6878      	ldr	r0, [r7, #4]
 8002c06:	4798      	blx	r3
      }
    }
  }
  /* CLUT Transfer Complete Interrupt management ******************************/
  if ((isrflags & DMA2D_FLAG_CTC) != 0U)
 8002c08:	68fb      	ldr	r3, [r7, #12]
 8002c0a:	f003 0310 	and.w	r3, r3, #16
 8002c0e:	2b00      	cmp	r3, #0
 8002c10:	d01f      	beq.n	8002c52 <HAL_DMA2D_IRQHandler+0x1f0>
  {
    if ((crflags & DMA2D_IT_CTC) != 0U)
 8002c12:	68bb      	ldr	r3, [r7, #8]
 8002c14:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002c18:	2b00      	cmp	r3, #0
 8002c1a:	d01a      	beq.n	8002c52 <HAL_DMA2D_IRQHandler+0x1f0>
    {
      /* Disable the CLUT transfer complete interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CTC);
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	681a      	ldr	r2, [r3, #0]
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	681b      	ldr	r3, [r3, #0]
 8002c26:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8002c2a:	601a      	str	r2, [r3, #0]

      /* Clear the CLUT transfer complete flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CTC);
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	2210      	movs	r2, #16
 8002c32:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_NONE;
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	63da      	str	r2, [r3, #60]	@ 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_READY;
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	2201      	movs	r2, #1
 8002c40:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	2200      	movs	r2, #0
 8002c48:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

      /* CLUT Transfer complete Callback */
#if (USE_HAL_DMA2D_REGISTER_CALLBACKS == 1)
      hdma2d->CLUTLoadingCpltCallback(hdma2d);
#else
      HAL_DMA2D_CLUTLoadingCpltCallback(hdma2d);
 8002c4c:	6878      	ldr	r0, [r7, #4]
 8002c4e:	f000 f80e 	bl	8002c6e <HAL_DMA2D_CLUTLoadingCpltCallback>
#endif /* USE_HAL_DMA2D_REGISTER_CALLBACKS */
    }
  }

}
 8002c52:	bf00      	nop
 8002c54:	3710      	adds	r7, #16
 8002c56:	46bd      	mov	sp, r7
 8002c58:	bd80      	pop	{r7, pc}

08002c5a <HAL_DMA2D_LineEventCallback>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval None
  */
__weak void HAL_DMA2D_LineEventCallback(DMA2D_HandleTypeDef *hdma2d)
{
 8002c5a:	b480      	push	{r7}
 8002c5c:	b083      	sub	sp, #12
 8002c5e:	af00      	add	r7, sp, #0
 8002c60:	6078      	str	r0, [r7, #4]
  UNUSED(hdma2d);

  /* NOTE : This function should not be modified; when the callback is needed,
            the HAL_DMA2D_LineEventCallback can be implemented in the user file.
   */
}
 8002c62:	bf00      	nop
 8002c64:	370c      	adds	r7, #12
 8002c66:	46bd      	mov	sp, r7
 8002c68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c6c:	4770      	bx	lr

08002c6e <HAL_DMA2D_CLUTLoadingCpltCallback>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval None
  */
__weak void HAL_DMA2D_CLUTLoadingCpltCallback(DMA2D_HandleTypeDef *hdma2d)
{
 8002c6e:	b480      	push	{r7}
 8002c70:	b083      	sub	sp, #12
 8002c72:	af00      	add	r7, sp, #0
 8002c74:	6078      	str	r0, [r7, #4]
  UNUSED(hdma2d);

  /* NOTE : This function should not be modified; when the callback is needed,
            the HAL_DMA2D_CLUTLoadingCpltCallback can be implemented in the user file.
   */
}
 8002c76:	bf00      	nop
 8002c78:	370c      	adds	r7, #12
 8002c7a:	46bd      	mov	sp, r7
 8002c7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c80:	4770      	bx	lr
	...

08002c84 <HAL_DMA2D_ConfigLayer>:
  *                   This parameter can be one of the following values:
  *                   DMA2D_BACKGROUND_LAYER(0) / DMA2D_FOREGROUND_LAYER(1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_ConfigLayer(DMA2D_HandleTypeDef *hdma2d, uint32_t LayerIdx)
{
 8002c84:	b480      	push	{r7}
 8002c86:	b087      	sub	sp, #28
 8002c88:	af00      	add	r7, sp, #0
 8002c8a:	6078      	str	r0, [r7, #4]
 8002c8c:	6039      	str	r1, [r7, #0]
  uint32_t regValue;

  /* Check the parameters */
  assert_param(IS_DMA2D_LAYER(LayerIdx));
  assert_param(IS_DMA2D_OFFSET(hdma2d->LayerCfg[LayerIdx].InputOffset));
  if (hdma2d->Init.Mode != DMA2D_R2M)
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	685b      	ldr	r3, [r3, #4]
 8002c92:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
      assert_param(IS_DMA2D_ALPHA_MODE(hdma2d->LayerCfg[LayerIdx].AlphaMode));
    }
  }

  /* Process locked */
  __HAL_LOCK(hdma2d);
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8002c9c:	2b01      	cmp	r3, #1
 8002c9e:	d101      	bne.n	8002ca4 <HAL_DMA2D_ConfigLayer+0x20>
 8002ca0:	2302      	movs	r3, #2
 8002ca2:	e079      	b.n	8002d98 <HAL_DMA2D_ConfigLayer+0x114>
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	2201      	movs	r2, #1
 8002ca8:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	2202      	movs	r2, #2
 8002cb0:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

  pLayerCfg = &hdma2d->LayerCfg[LayerIdx];
 8002cb4:	683b      	ldr	r3, [r7, #0]
 8002cb6:	011b      	lsls	r3, r3, #4
 8002cb8:	3318      	adds	r3, #24
 8002cba:	687a      	ldr	r2, [r7, #4]
 8002cbc:	4413      	add	r3, r2
 8002cbe:	613b      	str	r3, [r7, #16]

  /* Prepare the value to be written to the BGPFCCR or FGPFCCR register */
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos);
 8002cc0:	693b      	ldr	r3, [r7, #16]
 8002cc2:	685a      	ldr	r2, [r3, #4]
 8002cc4:	693b      	ldr	r3, [r7, #16]
 8002cc6:	689b      	ldr	r3, [r3, #8]
 8002cc8:	041b      	lsls	r3, r3, #16
 8002cca:	4313      	orrs	r3, r2
 8002ccc:	617b      	str	r3, [r7, #20]
  regMask  = DMA2D_BGPFCCR_CM | DMA2D_BGPFCCR_AM | DMA2D_BGPFCCR_ALPHA;
 8002cce:	4b35      	ldr	r3, [pc, #212]	@ (8002da4 <HAL_DMA2D_ConfigLayer+0x120>)
 8002cd0:	60fb      	str	r3, [r7, #12]


  if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8002cd2:	693b      	ldr	r3, [r7, #16]
 8002cd4:	685b      	ldr	r3, [r3, #4]
 8002cd6:	2b0a      	cmp	r3, #10
 8002cd8:	d003      	beq.n	8002ce2 <HAL_DMA2D_ConfigLayer+0x5e>
 8002cda:	693b      	ldr	r3, [r7, #16]
 8002cdc:	685b      	ldr	r3, [r3, #4]
 8002cde:	2b09      	cmp	r3, #9
 8002ce0:	d107      	bne.n	8002cf2 <HAL_DMA2D_ConfigLayer+0x6e>
  {
    regValue |= (pLayerCfg->InputAlpha & DMA2D_BGPFCCR_ALPHA);
 8002ce2:	693b      	ldr	r3, [r7, #16]
 8002ce4:	68db      	ldr	r3, [r3, #12]
 8002ce6:	f003 437f 	and.w	r3, r3, #4278190080	@ 0xff000000
 8002cea:	697a      	ldr	r2, [r7, #20]
 8002cec:	4313      	orrs	r3, r2
 8002cee:	617b      	str	r3, [r7, #20]
 8002cf0:	e005      	b.n	8002cfe <HAL_DMA2D_ConfigLayer+0x7a>
  }
  else
  {
    regValue |= (pLayerCfg->InputAlpha << DMA2D_BGPFCCR_ALPHA_Pos);
 8002cf2:	693b      	ldr	r3, [r7, #16]
 8002cf4:	68db      	ldr	r3, [r3, #12]
 8002cf6:	061b      	lsls	r3, r3, #24
 8002cf8:	697a      	ldr	r2, [r7, #20]
 8002cfa:	4313      	orrs	r3, r2
 8002cfc:	617b      	str	r3, [r7, #20]
  }

  /* Configure the background DMA2D layer */
  if (LayerIdx == DMA2D_BACKGROUND_LAYER)
 8002cfe:	683b      	ldr	r3, [r7, #0]
 8002d00:	2b00      	cmp	r3, #0
 8002d02:	d120      	bne.n	8002d46 <HAL_DMA2D_ConfigLayer+0xc2>
  {
    /* Write DMA2D BGPFCCR register */
    MODIFY_REG(hdma2d->Instance->BGPFCCR, regMask, regValue);
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002d0a:	68fb      	ldr	r3, [r7, #12]
 8002d0c:	43db      	mvns	r3, r3
 8002d0e:	ea02 0103 	and.w	r1, r2, r3
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	681b      	ldr	r3, [r3, #0]
 8002d16:	697a      	ldr	r2, [r7, #20]
 8002d18:	430a      	orrs	r2, r1
 8002d1a:	625a      	str	r2, [r3, #36]	@ 0x24

    /* DMA2D BGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->BGOR, pLayerCfg->InputOffset);
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	681b      	ldr	r3, [r3, #0]
 8002d20:	693a      	ldr	r2, [r7, #16]
 8002d22:	6812      	ldr	r2, [r2, #0]
 8002d24:	619a      	str	r2, [r3, #24]

    /* DMA2D BGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8002d26:	693b      	ldr	r3, [r7, #16]
 8002d28:	685b      	ldr	r3, [r3, #4]
 8002d2a:	2b0a      	cmp	r3, #10
 8002d2c:	d003      	beq.n	8002d36 <HAL_DMA2D_ConfigLayer+0xb2>
 8002d2e:	693b      	ldr	r3, [r7, #16]
 8002d30:	685b      	ldr	r3, [r3, #4]
 8002d32:	2b09      	cmp	r3, #9
 8002d34:	d127      	bne.n	8002d86 <HAL_DMA2D_ConfigLayer+0x102>
    {
      WRITE_REG(hdma2d->Instance->BGCOLR, pLayerCfg->InputAlpha & (DMA2D_BGCOLR_BLUE | DMA2D_BGCOLR_GREEN | \
 8002d36:	693b      	ldr	r3, [r7, #16]
 8002d38:	68da      	ldr	r2, [r3, #12]
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	681b      	ldr	r3, [r3, #0]
 8002d3e:	f022 427f 	bic.w	r2, r2, #4278190080	@ 0xff000000
 8002d42:	629a      	str	r2, [r3, #40]	@ 0x28
 8002d44:	e01f      	b.n	8002d86 <HAL_DMA2D_ConfigLayer+0x102>
  else
  {


    /* Write DMA2D FGPFCCR register */
    MODIFY_REG(hdma2d->Instance->FGPFCCR, regMask, regValue);
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	681b      	ldr	r3, [r3, #0]
 8002d4a:	69da      	ldr	r2, [r3, #28]
 8002d4c:	68fb      	ldr	r3, [r7, #12]
 8002d4e:	43db      	mvns	r3, r3
 8002d50:	ea02 0103 	and.w	r1, r2, r3
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	681b      	ldr	r3, [r3, #0]
 8002d58:	697a      	ldr	r2, [r7, #20]
 8002d5a:	430a      	orrs	r2, r1
 8002d5c:	61da      	str	r2, [r3, #28]

    /* DMA2D FGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->FGOR, pLayerCfg->InputOffset);
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	681b      	ldr	r3, [r3, #0]
 8002d62:	693a      	ldr	r2, [r7, #16]
 8002d64:	6812      	ldr	r2, [r2, #0]
 8002d66:	611a      	str	r2, [r3, #16]

    /* DMA2D FGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8002d68:	693b      	ldr	r3, [r7, #16]
 8002d6a:	685b      	ldr	r3, [r3, #4]
 8002d6c:	2b0a      	cmp	r3, #10
 8002d6e:	d003      	beq.n	8002d78 <HAL_DMA2D_ConfigLayer+0xf4>
 8002d70:	693b      	ldr	r3, [r7, #16]
 8002d72:	685b      	ldr	r3, [r3, #4]
 8002d74:	2b09      	cmp	r3, #9
 8002d76:	d106      	bne.n	8002d86 <HAL_DMA2D_ConfigLayer+0x102>
    {
      WRITE_REG(hdma2d->Instance->FGCOLR, pLayerCfg->InputAlpha & (DMA2D_FGCOLR_BLUE | DMA2D_FGCOLR_GREEN | \
 8002d78:	693b      	ldr	r3, [r7, #16]
 8002d7a:	68da      	ldr	r2, [r3, #12]
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	681b      	ldr	r3, [r3, #0]
 8002d80:	f022 427f 	bic.w	r2, r2, #4278190080	@ 0xff000000
 8002d84:	621a      	str	r2, [r3, #32]
                                                                   DMA2D_FGCOLR_RED));
    }
  }
  /* Initialize the DMA2D state*/
  hdma2d->State = HAL_DMA2D_STATE_READY;
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	2201      	movs	r2, #1
 8002d8a:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	2200      	movs	r2, #0
 8002d92:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

  return HAL_OK;
 8002d96:	2300      	movs	r3, #0
}
 8002d98:	4618      	mov	r0, r3
 8002d9a:	371c      	adds	r7, #28
 8002d9c:	46bd      	mov	sp, r7
 8002d9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002da2:	4770      	bx	lr
 8002da4:	ff03000f 	.word	0xff03000f

08002da8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002da8:	b480      	push	{r7}
 8002daa:	b089      	sub	sp, #36	@ 0x24
 8002dac:	af00      	add	r7, sp, #0
 8002dae:	6078      	str	r0, [r7, #4]
 8002db0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002db2:	2300      	movs	r3, #0
 8002db4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002db6:	2300      	movs	r3, #0
 8002db8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002dba:	2300      	movs	r3, #0
 8002dbc:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002dbe:	2300      	movs	r3, #0
 8002dc0:	61fb      	str	r3, [r7, #28]
 8002dc2:	e177      	b.n	80030b4 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002dc4:	2201      	movs	r2, #1
 8002dc6:	69fb      	ldr	r3, [r7, #28]
 8002dc8:	fa02 f303 	lsl.w	r3, r2, r3
 8002dcc:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002dce:	683b      	ldr	r3, [r7, #0]
 8002dd0:	681b      	ldr	r3, [r3, #0]
 8002dd2:	697a      	ldr	r2, [r7, #20]
 8002dd4:	4013      	ands	r3, r2
 8002dd6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002dd8:	693a      	ldr	r2, [r7, #16]
 8002dda:	697b      	ldr	r3, [r7, #20]
 8002ddc:	429a      	cmp	r2, r3
 8002dde:	f040 8166 	bne.w	80030ae <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002de2:	683b      	ldr	r3, [r7, #0]
 8002de4:	685b      	ldr	r3, [r3, #4]
 8002de6:	f003 0303 	and.w	r3, r3, #3
 8002dea:	2b01      	cmp	r3, #1
 8002dec:	d005      	beq.n	8002dfa <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002dee:	683b      	ldr	r3, [r7, #0]
 8002df0:	685b      	ldr	r3, [r3, #4]
 8002df2:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002df6:	2b02      	cmp	r3, #2
 8002df8:	d130      	bne.n	8002e5c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	689b      	ldr	r3, [r3, #8]
 8002dfe:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002e00:	69fb      	ldr	r3, [r7, #28]
 8002e02:	005b      	lsls	r3, r3, #1
 8002e04:	2203      	movs	r2, #3
 8002e06:	fa02 f303 	lsl.w	r3, r2, r3
 8002e0a:	43db      	mvns	r3, r3
 8002e0c:	69ba      	ldr	r2, [r7, #24]
 8002e0e:	4013      	ands	r3, r2
 8002e10:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002e12:	683b      	ldr	r3, [r7, #0]
 8002e14:	68da      	ldr	r2, [r3, #12]
 8002e16:	69fb      	ldr	r3, [r7, #28]
 8002e18:	005b      	lsls	r3, r3, #1
 8002e1a:	fa02 f303 	lsl.w	r3, r2, r3
 8002e1e:	69ba      	ldr	r2, [r7, #24]
 8002e20:	4313      	orrs	r3, r2
 8002e22:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	69ba      	ldr	r2, [r7, #24]
 8002e28:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	685b      	ldr	r3, [r3, #4]
 8002e2e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002e30:	2201      	movs	r2, #1
 8002e32:	69fb      	ldr	r3, [r7, #28]
 8002e34:	fa02 f303 	lsl.w	r3, r2, r3
 8002e38:	43db      	mvns	r3, r3
 8002e3a:	69ba      	ldr	r2, [r7, #24]
 8002e3c:	4013      	ands	r3, r2
 8002e3e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002e40:	683b      	ldr	r3, [r7, #0]
 8002e42:	685b      	ldr	r3, [r3, #4]
 8002e44:	091b      	lsrs	r3, r3, #4
 8002e46:	f003 0201 	and.w	r2, r3, #1
 8002e4a:	69fb      	ldr	r3, [r7, #28]
 8002e4c:	fa02 f303 	lsl.w	r3, r2, r3
 8002e50:	69ba      	ldr	r2, [r7, #24]
 8002e52:	4313      	orrs	r3, r2
 8002e54:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	69ba      	ldr	r2, [r7, #24]
 8002e5a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002e5c:	683b      	ldr	r3, [r7, #0]
 8002e5e:	685b      	ldr	r3, [r3, #4]
 8002e60:	f003 0303 	and.w	r3, r3, #3
 8002e64:	2b03      	cmp	r3, #3
 8002e66:	d017      	beq.n	8002e98 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	68db      	ldr	r3, [r3, #12]
 8002e6c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002e6e:	69fb      	ldr	r3, [r7, #28]
 8002e70:	005b      	lsls	r3, r3, #1
 8002e72:	2203      	movs	r2, #3
 8002e74:	fa02 f303 	lsl.w	r3, r2, r3
 8002e78:	43db      	mvns	r3, r3
 8002e7a:	69ba      	ldr	r2, [r7, #24]
 8002e7c:	4013      	ands	r3, r2
 8002e7e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002e80:	683b      	ldr	r3, [r7, #0]
 8002e82:	689a      	ldr	r2, [r3, #8]
 8002e84:	69fb      	ldr	r3, [r7, #28]
 8002e86:	005b      	lsls	r3, r3, #1
 8002e88:	fa02 f303 	lsl.w	r3, r2, r3
 8002e8c:	69ba      	ldr	r2, [r7, #24]
 8002e8e:	4313      	orrs	r3, r2
 8002e90:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	69ba      	ldr	r2, [r7, #24]
 8002e96:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002e98:	683b      	ldr	r3, [r7, #0]
 8002e9a:	685b      	ldr	r3, [r3, #4]
 8002e9c:	f003 0303 	and.w	r3, r3, #3
 8002ea0:	2b02      	cmp	r3, #2
 8002ea2:	d123      	bne.n	8002eec <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002ea4:	69fb      	ldr	r3, [r7, #28]
 8002ea6:	08da      	lsrs	r2, r3, #3
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	3208      	adds	r2, #8
 8002eac:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002eb0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002eb2:	69fb      	ldr	r3, [r7, #28]
 8002eb4:	f003 0307 	and.w	r3, r3, #7
 8002eb8:	009b      	lsls	r3, r3, #2
 8002eba:	220f      	movs	r2, #15
 8002ebc:	fa02 f303 	lsl.w	r3, r2, r3
 8002ec0:	43db      	mvns	r3, r3
 8002ec2:	69ba      	ldr	r2, [r7, #24]
 8002ec4:	4013      	ands	r3, r2
 8002ec6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002ec8:	683b      	ldr	r3, [r7, #0]
 8002eca:	691a      	ldr	r2, [r3, #16]
 8002ecc:	69fb      	ldr	r3, [r7, #28]
 8002ece:	f003 0307 	and.w	r3, r3, #7
 8002ed2:	009b      	lsls	r3, r3, #2
 8002ed4:	fa02 f303 	lsl.w	r3, r2, r3
 8002ed8:	69ba      	ldr	r2, [r7, #24]
 8002eda:	4313      	orrs	r3, r2
 8002edc:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002ede:	69fb      	ldr	r3, [r7, #28]
 8002ee0:	08da      	lsrs	r2, r3, #3
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	3208      	adds	r2, #8
 8002ee6:	69b9      	ldr	r1, [r7, #24]
 8002ee8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002ef2:	69fb      	ldr	r3, [r7, #28]
 8002ef4:	005b      	lsls	r3, r3, #1
 8002ef6:	2203      	movs	r2, #3
 8002ef8:	fa02 f303 	lsl.w	r3, r2, r3
 8002efc:	43db      	mvns	r3, r3
 8002efe:	69ba      	ldr	r2, [r7, #24]
 8002f00:	4013      	ands	r3, r2
 8002f02:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002f04:	683b      	ldr	r3, [r7, #0]
 8002f06:	685b      	ldr	r3, [r3, #4]
 8002f08:	f003 0203 	and.w	r2, r3, #3
 8002f0c:	69fb      	ldr	r3, [r7, #28]
 8002f0e:	005b      	lsls	r3, r3, #1
 8002f10:	fa02 f303 	lsl.w	r3, r2, r3
 8002f14:	69ba      	ldr	r2, [r7, #24]
 8002f16:	4313      	orrs	r3, r2
 8002f18:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	69ba      	ldr	r2, [r7, #24]
 8002f1e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002f20:	683b      	ldr	r3, [r7, #0]
 8002f22:	685b      	ldr	r3, [r3, #4]
 8002f24:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002f28:	2b00      	cmp	r3, #0
 8002f2a:	f000 80c0 	beq.w	80030ae <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002f2e:	2300      	movs	r3, #0
 8002f30:	60fb      	str	r3, [r7, #12]
 8002f32:	4b66      	ldr	r3, [pc, #408]	@ (80030cc <HAL_GPIO_Init+0x324>)
 8002f34:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002f36:	4a65      	ldr	r2, [pc, #404]	@ (80030cc <HAL_GPIO_Init+0x324>)
 8002f38:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002f3c:	6453      	str	r3, [r2, #68]	@ 0x44
 8002f3e:	4b63      	ldr	r3, [pc, #396]	@ (80030cc <HAL_GPIO_Init+0x324>)
 8002f40:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002f42:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002f46:	60fb      	str	r3, [r7, #12]
 8002f48:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002f4a:	4a61      	ldr	r2, [pc, #388]	@ (80030d0 <HAL_GPIO_Init+0x328>)
 8002f4c:	69fb      	ldr	r3, [r7, #28]
 8002f4e:	089b      	lsrs	r3, r3, #2
 8002f50:	3302      	adds	r3, #2
 8002f52:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002f56:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002f58:	69fb      	ldr	r3, [r7, #28]
 8002f5a:	f003 0303 	and.w	r3, r3, #3
 8002f5e:	009b      	lsls	r3, r3, #2
 8002f60:	220f      	movs	r2, #15
 8002f62:	fa02 f303 	lsl.w	r3, r2, r3
 8002f66:	43db      	mvns	r3, r3
 8002f68:	69ba      	ldr	r2, [r7, #24]
 8002f6a:	4013      	ands	r3, r2
 8002f6c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	4a58      	ldr	r2, [pc, #352]	@ (80030d4 <HAL_GPIO_Init+0x32c>)
 8002f72:	4293      	cmp	r3, r2
 8002f74:	d037      	beq.n	8002fe6 <HAL_GPIO_Init+0x23e>
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	4a57      	ldr	r2, [pc, #348]	@ (80030d8 <HAL_GPIO_Init+0x330>)
 8002f7a:	4293      	cmp	r3, r2
 8002f7c:	d031      	beq.n	8002fe2 <HAL_GPIO_Init+0x23a>
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	4a56      	ldr	r2, [pc, #344]	@ (80030dc <HAL_GPIO_Init+0x334>)
 8002f82:	4293      	cmp	r3, r2
 8002f84:	d02b      	beq.n	8002fde <HAL_GPIO_Init+0x236>
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	4a55      	ldr	r2, [pc, #340]	@ (80030e0 <HAL_GPIO_Init+0x338>)
 8002f8a:	4293      	cmp	r3, r2
 8002f8c:	d025      	beq.n	8002fda <HAL_GPIO_Init+0x232>
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	4a54      	ldr	r2, [pc, #336]	@ (80030e4 <HAL_GPIO_Init+0x33c>)
 8002f92:	4293      	cmp	r3, r2
 8002f94:	d01f      	beq.n	8002fd6 <HAL_GPIO_Init+0x22e>
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	4a53      	ldr	r2, [pc, #332]	@ (80030e8 <HAL_GPIO_Init+0x340>)
 8002f9a:	4293      	cmp	r3, r2
 8002f9c:	d019      	beq.n	8002fd2 <HAL_GPIO_Init+0x22a>
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	4a52      	ldr	r2, [pc, #328]	@ (80030ec <HAL_GPIO_Init+0x344>)
 8002fa2:	4293      	cmp	r3, r2
 8002fa4:	d013      	beq.n	8002fce <HAL_GPIO_Init+0x226>
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	4a51      	ldr	r2, [pc, #324]	@ (80030f0 <HAL_GPIO_Init+0x348>)
 8002faa:	4293      	cmp	r3, r2
 8002fac:	d00d      	beq.n	8002fca <HAL_GPIO_Init+0x222>
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	4a50      	ldr	r2, [pc, #320]	@ (80030f4 <HAL_GPIO_Init+0x34c>)
 8002fb2:	4293      	cmp	r3, r2
 8002fb4:	d007      	beq.n	8002fc6 <HAL_GPIO_Init+0x21e>
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	4a4f      	ldr	r2, [pc, #316]	@ (80030f8 <HAL_GPIO_Init+0x350>)
 8002fba:	4293      	cmp	r3, r2
 8002fbc:	d101      	bne.n	8002fc2 <HAL_GPIO_Init+0x21a>
 8002fbe:	2309      	movs	r3, #9
 8002fc0:	e012      	b.n	8002fe8 <HAL_GPIO_Init+0x240>
 8002fc2:	230a      	movs	r3, #10
 8002fc4:	e010      	b.n	8002fe8 <HAL_GPIO_Init+0x240>
 8002fc6:	2308      	movs	r3, #8
 8002fc8:	e00e      	b.n	8002fe8 <HAL_GPIO_Init+0x240>
 8002fca:	2307      	movs	r3, #7
 8002fcc:	e00c      	b.n	8002fe8 <HAL_GPIO_Init+0x240>
 8002fce:	2306      	movs	r3, #6
 8002fd0:	e00a      	b.n	8002fe8 <HAL_GPIO_Init+0x240>
 8002fd2:	2305      	movs	r3, #5
 8002fd4:	e008      	b.n	8002fe8 <HAL_GPIO_Init+0x240>
 8002fd6:	2304      	movs	r3, #4
 8002fd8:	e006      	b.n	8002fe8 <HAL_GPIO_Init+0x240>
 8002fda:	2303      	movs	r3, #3
 8002fdc:	e004      	b.n	8002fe8 <HAL_GPIO_Init+0x240>
 8002fde:	2302      	movs	r3, #2
 8002fe0:	e002      	b.n	8002fe8 <HAL_GPIO_Init+0x240>
 8002fe2:	2301      	movs	r3, #1
 8002fe4:	e000      	b.n	8002fe8 <HAL_GPIO_Init+0x240>
 8002fe6:	2300      	movs	r3, #0
 8002fe8:	69fa      	ldr	r2, [r7, #28]
 8002fea:	f002 0203 	and.w	r2, r2, #3
 8002fee:	0092      	lsls	r2, r2, #2
 8002ff0:	4093      	lsls	r3, r2
 8002ff2:	69ba      	ldr	r2, [r7, #24]
 8002ff4:	4313      	orrs	r3, r2
 8002ff6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002ff8:	4935      	ldr	r1, [pc, #212]	@ (80030d0 <HAL_GPIO_Init+0x328>)
 8002ffa:	69fb      	ldr	r3, [r7, #28]
 8002ffc:	089b      	lsrs	r3, r3, #2
 8002ffe:	3302      	adds	r3, #2
 8003000:	69ba      	ldr	r2, [r7, #24]
 8003002:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003006:	4b3d      	ldr	r3, [pc, #244]	@ (80030fc <HAL_GPIO_Init+0x354>)
 8003008:	689b      	ldr	r3, [r3, #8]
 800300a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800300c:	693b      	ldr	r3, [r7, #16]
 800300e:	43db      	mvns	r3, r3
 8003010:	69ba      	ldr	r2, [r7, #24]
 8003012:	4013      	ands	r3, r2
 8003014:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003016:	683b      	ldr	r3, [r7, #0]
 8003018:	685b      	ldr	r3, [r3, #4]
 800301a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800301e:	2b00      	cmp	r3, #0
 8003020:	d003      	beq.n	800302a <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8003022:	69ba      	ldr	r2, [r7, #24]
 8003024:	693b      	ldr	r3, [r7, #16]
 8003026:	4313      	orrs	r3, r2
 8003028:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800302a:	4a34      	ldr	r2, [pc, #208]	@ (80030fc <HAL_GPIO_Init+0x354>)
 800302c:	69bb      	ldr	r3, [r7, #24]
 800302e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003030:	4b32      	ldr	r3, [pc, #200]	@ (80030fc <HAL_GPIO_Init+0x354>)
 8003032:	68db      	ldr	r3, [r3, #12]
 8003034:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003036:	693b      	ldr	r3, [r7, #16]
 8003038:	43db      	mvns	r3, r3
 800303a:	69ba      	ldr	r2, [r7, #24]
 800303c:	4013      	ands	r3, r2
 800303e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003040:	683b      	ldr	r3, [r7, #0]
 8003042:	685b      	ldr	r3, [r3, #4]
 8003044:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003048:	2b00      	cmp	r3, #0
 800304a:	d003      	beq.n	8003054 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 800304c:	69ba      	ldr	r2, [r7, #24]
 800304e:	693b      	ldr	r3, [r7, #16]
 8003050:	4313      	orrs	r3, r2
 8003052:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003054:	4a29      	ldr	r2, [pc, #164]	@ (80030fc <HAL_GPIO_Init+0x354>)
 8003056:	69bb      	ldr	r3, [r7, #24]
 8003058:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800305a:	4b28      	ldr	r3, [pc, #160]	@ (80030fc <HAL_GPIO_Init+0x354>)
 800305c:	685b      	ldr	r3, [r3, #4]
 800305e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003060:	693b      	ldr	r3, [r7, #16]
 8003062:	43db      	mvns	r3, r3
 8003064:	69ba      	ldr	r2, [r7, #24]
 8003066:	4013      	ands	r3, r2
 8003068:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800306a:	683b      	ldr	r3, [r7, #0]
 800306c:	685b      	ldr	r3, [r3, #4]
 800306e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003072:	2b00      	cmp	r3, #0
 8003074:	d003      	beq.n	800307e <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8003076:	69ba      	ldr	r2, [r7, #24]
 8003078:	693b      	ldr	r3, [r7, #16]
 800307a:	4313      	orrs	r3, r2
 800307c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800307e:	4a1f      	ldr	r2, [pc, #124]	@ (80030fc <HAL_GPIO_Init+0x354>)
 8003080:	69bb      	ldr	r3, [r7, #24]
 8003082:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003084:	4b1d      	ldr	r3, [pc, #116]	@ (80030fc <HAL_GPIO_Init+0x354>)
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800308a:	693b      	ldr	r3, [r7, #16]
 800308c:	43db      	mvns	r3, r3
 800308e:	69ba      	ldr	r2, [r7, #24]
 8003090:	4013      	ands	r3, r2
 8003092:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003094:	683b      	ldr	r3, [r7, #0]
 8003096:	685b      	ldr	r3, [r3, #4]
 8003098:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800309c:	2b00      	cmp	r3, #0
 800309e:	d003      	beq.n	80030a8 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 80030a0:	69ba      	ldr	r2, [r7, #24]
 80030a2:	693b      	ldr	r3, [r7, #16]
 80030a4:	4313      	orrs	r3, r2
 80030a6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80030a8:	4a14      	ldr	r2, [pc, #80]	@ (80030fc <HAL_GPIO_Init+0x354>)
 80030aa:	69bb      	ldr	r3, [r7, #24]
 80030ac:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80030ae:	69fb      	ldr	r3, [r7, #28]
 80030b0:	3301      	adds	r3, #1
 80030b2:	61fb      	str	r3, [r7, #28]
 80030b4:	69fb      	ldr	r3, [r7, #28]
 80030b6:	2b0f      	cmp	r3, #15
 80030b8:	f67f ae84 	bls.w	8002dc4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80030bc:	bf00      	nop
 80030be:	bf00      	nop
 80030c0:	3724      	adds	r7, #36	@ 0x24
 80030c2:	46bd      	mov	sp, r7
 80030c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030c8:	4770      	bx	lr
 80030ca:	bf00      	nop
 80030cc:	40023800 	.word	0x40023800
 80030d0:	40013800 	.word	0x40013800
 80030d4:	40020000 	.word	0x40020000
 80030d8:	40020400 	.word	0x40020400
 80030dc:	40020800 	.word	0x40020800
 80030e0:	40020c00 	.word	0x40020c00
 80030e4:	40021000 	.word	0x40021000
 80030e8:	40021400 	.word	0x40021400
 80030ec:	40021800 	.word	0x40021800
 80030f0:	40021c00 	.word	0x40021c00
 80030f4:	40022000 	.word	0x40022000
 80030f8:	40022400 	.word	0x40022400
 80030fc:	40013c00 	.word	0x40013c00

08003100 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8003100:	b480      	push	{r7}
 8003102:	b087      	sub	sp, #28
 8003104:	af00      	add	r7, sp, #0
 8003106:	6078      	str	r0, [r7, #4]
 8003108:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800310a:	2300      	movs	r3, #0
 800310c:	613b      	str	r3, [r7, #16]
  uint32_t iocurrent = 0x00U;
 800310e:	2300      	movs	r3, #0
 8003110:	60fb      	str	r3, [r7, #12]
  uint32_t tmp = 0x00U;
 8003112:	2300      	movs	r3, #0
 8003114:	60bb      	str	r3, [r7, #8]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  
  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003116:	2300      	movs	r3, #0
 8003118:	617b      	str	r3, [r7, #20]
 800311a:	e0d9      	b.n	80032d0 <HAL_GPIO_DeInit+0x1d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800311c:	2201      	movs	r2, #1
 800311e:	697b      	ldr	r3, [r7, #20]
 8003120:	fa02 f303 	lsl.w	r3, r2, r3
 8003124:	613b      	str	r3, [r7, #16]
    /* Get the current IO position */
    iocurrent = (GPIO_Pin) & ioposition;
 8003126:	683a      	ldr	r2, [r7, #0]
 8003128:	693b      	ldr	r3, [r7, #16]
 800312a:	4013      	ands	r3, r2
 800312c:	60fb      	str	r3, [r7, #12]

    if(iocurrent == ioposition)
 800312e:	68fa      	ldr	r2, [r7, #12]
 8003130:	693b      	ldr	r3, [r7, #16]
 8003132:	429a      	cmp	r2, r3
 8003134:	f040 80c9 	bne.w	80032ca <HAL_GPIO_DeInit+0x1ca>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      tmp = SYSCFG->EXTICR[position >> 2U];
 8003138:	4a6b      	ldr	r2, [pc, #428]	@ (80032e8 <HAL_GPIO_DeInit+0x1e8>)
 800313a:	697b      	ldr	r3, [r7, #20]
 800313c:	089b      	lsrs	r3, r3, #2
 800313e:	3302      	adds	r3, #2
 8003140:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003144:	60bb      	str	r3, [r7, #8]
      tmp &= (0x0FU << (4U * (position & 0x03U)));
 8003146:	697b      	ldr	r3, [r7, #20]
 8003148:	f003 0303 	and.w	r3, r3, #3
 800314c:	009b      	lsls	r3, r3, #2
 800314e:	220f      	movs	r2, #15
 8003150:	fa02 f303 	lsl.w	r3, r2, r3
 8003154:	68ba      	ldr	r2, [r7, #8]
 8003156:	4013      	ands	r3, r2
 8003158:	60bb      	str	r3, [r7, #8]
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U))))
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	4a63      	ldr	r2, [pc, #396]	@ (80032ec <HAL_GPIO_DeInit+0x1ec>)
 800315e:	4293      	cmp	r3, r2
 8003160:	d037      	beq.n	80031d2 <HAL_GPIO_DeInit+0xd2>
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	4a62      	ldr	r2, [pc, #392]	@ (80032f0 <HAL_GPIO_DeInit+0x1f0>)
 8003166:	4293      	cmp	r3, r2
 8003168:	d031      	beq.n	80031ce <HAL_GPIO_DeInit+0xce>
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	4a61      	ldr	r2, [pc, #388]	@ (80032f4 <HAL_GPIO_DeInit+0x1f4>)
 800316e:	4293      	cmp	r3, r2
 8003170:	d02b      	beq.n	80031ca <HAL_GPIO_DeInit+0xca>
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	4a60      	ldr	r2, [pc, #384]	@ (80032f8 <HAL_GPIO_DeInit+0x1f8>)
 8003176:	4293      	cmp	r3, r2
 8003178:	d025      	beq.n	80031c6 <HAL_GPIO_DeInit+0xc6>
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	4a5f      	ldr	r2, [pc, #380]	@ (80032fc <HAL_GPIO_DeInit+0x1fc>)
 800317e:	4293      	cmp	r3, r2
 8003180:	d01f      	beq.n	80031c2 <HAL_GPIO_DeInit+0xc2>
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	4a5e      	ldr	r2, [pc, #376]	@ (8003300 <HAL_GPIO_DeInit+0x200>)
 8003186:	4293      	cmp	r3, r2
 8003188:	d019      	beq.n	80031be <HAL_GPIO_DeInit+0xbe>
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	4a5d      	ldr	r2, [pc, #372]	@ (8003304 <HAL_GPIO_DeInit+0x204>)
 800318e:	4293      	cmp	r3, r2
 8003190:	d013      	beq.n	80031ba <HAL_GPIO_DeInit+0xba>
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	4a5c      	ldr	r2, [pc, #368]	@ (8003308 <HAL_GPIO_DeInit+0x208>)
 8003196:	4293      	cmp	r3, r2
 8003198:	d00d      	beq.n	80031b6 <HAL_GPIO_DeInit+0xb6>
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	4a5b      	ldr	r2, [pc, #364]	@ (800330c <HAL_GPIO_DeInit+0x20c>)
 800319e:	4293      	cmp	r3, r2
 80031a0:	d007      	beq.n	80031b2 <HAL_GPIO_DeInit+0xb2>
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	4a5a      	ldr	r2, [pc, #360]	@ (8003310 <HAL_GPIO_DeInit+0x210>)
 80031a6:	4293      	cmp	r3, r2
 80031a8:	d101      	bne.n	80031ae <HAL_GPIO_DeInit+0xae>
 80031aa:	2309      	movs	r3, #9
 80031ac:	e012      	b.n	80031d4 <HAL_GPIO_DeInit+0xd4>
 80031ae:	230a      	movs	r3, #10
 80031b0:	e010      	b.n	80031d4 <HAL_GPIO_DeInit+0xd4>
 80031b2:	2308      	movs	r3, #8
 80031b4:	e00e      	b.n	80031d4 <HAL_GPIO_DeInit+0xd4>
 80031b6:	2307      	movs	r3, #7
 80031b8:	e00c      	b.n	80031d4 <HAL_GPIO_DeInit+0xd4>
 80031ba:	2306      	movs	r3, #6
 80031bc:	e00a      	b.n	80031d4 <HAL_GPIO_DeInit+0xd4>
 80031be:	2305      	movs	r3, #5
 80031c0:	e008      	b.n	80031d4 <HAL_GPIO_DeInit+0xd4>
 80031c2:	2304      	movs	r3, #4
 80031c4:	e006      	b.n	80031d4 <HAL_GPIO_DeInit+0xd4>
 80031c6:	2303      	movs	r3, #3
 80031c8:	e004      	b.n	80031d4 <HAL_GPIO_DeInit+0xd4>
 80031ca:	2302      	movs	r3, #2
 80031cc:	e002      	b.n	80031d4 <HAL_GPIO_DeInit+0xd4>
 80031ce:	2301      	movs	r3, #1
 80031d0:	e000      	b.n	80031d4 <HAL_GPIO_DeInit+0xd4>
 80031d2:	2300      	movs	r3, #0
 80031d4:	697a      	ldr	r2, [r7, #20]
 80031d6:	f002 0203 	and.w	r2, r2, #3
 80031da:	0092      	lsls	r2, r2, #2
 80031dc:	4093      	lsls	r3, r2
 80031de:	68ba      	ldr	r2, [r7, #8]
 80031e0:	429a      	cmp	r2, r3
 80031e2:	d132      	bne.n	800324a <HAL_GPIO_DeInit+0x14a>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR &= ~((uint32_t)iocurrent);
 80031e4:	4b4b      	ldr	r3, [pc, #300]	@ (8003314 <HAL_GPIO_DeInit+0x214>)
 80031e6:	681a      	ldr	r2, [r3, #0]
 80031e8:	68fb      	ldr	r3, [r7, #12]
 80031ea:	43db      	mvns	r3, r3
 80031ec:	4949      	ldr	r1, [pc, #292]	@ (8003314 <HAL_GPIO_DeInit+0x214>)
 80031ee:	4013      	ands	r3, r2
 80031f0:	600b      	str	r3, [r1, #0]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 80031f2:	4b48      	ldr	r3, [pc, #288]	@ (8003314 <HAL_GPIO_DeInit+0x214>)
 80031f4:	685a      	ldr	r2, [r3, #4]
 80031f6:	68fb      	ldr	r3, [r7, #12]
 80031f8:	43db      	mvns	r3, r3
 80031fa:	4946      	ldr	r1, [pc, #280]	@ (8003314 <HAL_GPIO_DeInit+0x214>)
 80031fc:	4013      	ands	r3, r2
 80031fe:	604b      	str	r3, [r1, #4]
        
        /* Clear Rising Falling edge configuration */
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 8003200:	4b44      	ldr	r3, [pc, #272]	@ (8003314 <HAL_GPIO_DeInit+0x214>)
 8003202:	68da      	ldr	r2, [r3, #12]
 8003204:	68fb      	ldr	r3, [r7, #12]
 8003206:	43db      	mvns	r3, r3
 8003208:	4942      	ldr	r1, [pc, #264]	@ (8003314 <HAL_GPIO_DeInit+0x214>)
 800320a:	4013      	ands	r3, r2
 800320c:	60cb      	str	r3, [r1, #12]
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 800320e:	4b41      	ldr	r3, [pc, #260]	@ (8003314 <HAL_GPIO_DeInit+0x214>)
 8003210:	689a      	ldr	r2, [r3, #8]
 8003212:	68fb      	ldr	r3, [r7, #12]
 8003214:	43db      	mvns	r3, r3
 8003216:	493f      	ldr	r1, [pc, #252]	@ (8003314 <HAL_GPIO_DeInit+0x214>)
 8003218:	4013      	ands	r3, r2
 800321a:	608b      	str	r3, [r1, #8]

        /* Configure the External Interrupt or event for the current IO */
        tmp = 0x0FU << (4U * (position & 0x03U));
 800321c:	697b      	ldr	r3, [r7, #20]
 800321e:	f003 0303 	and.w	r3, r3, #3
 8003222:	009b      	lsls	r3, r3, #2
 8003224:	220f      	movs	r2, #15
 8003226:	fa02 f303 	lsl.w	r3, r2, r3
 800322a:	60bb      	str	r3, [r7, #8]
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
 800322c:	4a2e      	ldr	r2, [pc, #184]	@ (80032e8 <HAL_GPIO_DeInit+0x1e8>)
 800322e:	697b      	ldr	r3, [r7, #20]
 8003230:	089b      	lsrs	r3, r3, #2
 8003232:	3302      	adds	r3, #2
 8003234:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8003238:	68bb      	ldr	r3, [r7, #8]
 800323a:	43da      	mvns	r2, r3
 800323c:	482a      	ldr	r0, [pc, #168]	@ (80032e8 <HAL_GPIO_DeInit+0x1e8>)
 800323e:	697b      	ldr	r3, [r7, #20]
 8003240:	089b      	lsrs	r3, r3, #2
 8003242:	400a      	ands	r2, r1
 8003244:	3302      	adds	r3, #2
 8003246:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floating Mode */
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	681a      	ldr	r2, [r3, #0]
 800324e:	697b      	ldr	r3, [r7, #20]
 8003250:	005b      	lsls	r3, r3, #1
 8003252:	2103      	movs	r1, #3
 8003254:	fa01 f303 	lsl.w	r3, r1, r3
 8003258:	43db      	mvns	r3, r3
 800325a:	401a      	ands	r2, r3
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8003260:	697b      	ldr	r3, [r7, #20]
 8003262:	08da      	lsrs	r2, r3, #3
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	3208      	adds	r2, #8
 8003268:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800326c:	697b      	ldr	r3, [r7, #20]
 800326e:	f003 0307 	and.w	r3, r3, #7
 8003272:	009b      	lsls	r3, r3, #2
 8003274:	220f      	movs	r2, #15
 8003276:	fa02 f303 	lsl.w	r3, r2, r3
 800327a:	43db      	mvns	r3, r3
 800327c:	697a      	ldr	r2, [r7, #20]
 800327e:	08d2      	lsrs	r2, r2, #3
 8003280:	4019      	ands	r1, r3
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	3208      	adds	r2, #8
 8003286:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	68da      	ldr	r2, [r3, #12]
 800328e:	697b      	ldr	r3, [r7, #20]
 8003290:	005b      	lsls	r3, r3, #1
 8003292:	2103      	movs	r1, #3
 8003294:	fa01 f303 	lsl.w	r3, r1, r3
 8003298:	43db      	mvns	r3, r3
 800329a:	401a      	ands	r2, r3
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position) ;
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	685a      	ldr	r2, [r3, #4]
 80032a4:	2101      	movs	r1, #1
 80032a6:	697b      	ldr	r3, [r7, #20]
 80032a8:	fa01 f303 	lsl.w	r3, r1, r3
 80032ac:	43db      	mvns	r3, r3
 80032ae:	401a      	ands	r2, r3
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	689a      	ldr	r2, [r3, #8]
 80032b8:	697b      	ldr	r3, [r7, #20]
 80032ba:	005b      	lsls	r3, r3, #1
 80032bc:	2103      	movs	r1, #3
 80032be:	fa01 f303 	lsl.w	r3, r1, r3
 80032c2:	43db      	mvns	r3, r3
 80032c4:	401a      	ands	r2, r3
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	609a      	str	r2, [r3, #8]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80032ca:	697b      	ldr	r3, [r7, #20]
 80032cc:	3301      	adds	r3, #1
 80032ce:	617b      	str	r3, [r7, #20]
 80032d0:	697b      	ldr	r3, [r7, #20]
 80032d2:	2b0f      	cmp	r3, #15
 80032d4:	f67f af22 	bls.w	800311c <HAL_GPIO_DeInit+0x1c>
    }
  }
}
 80032d8:	bf00      	nop
 80032da:	bf00      	nop
 80032dc:	371c      	adds	r7, #28
 80032de:	46bd      	mov	sp, r7
 80032e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032e4:	4770      	bx	lr
 80032e6:	bf00      	nop
 80032e8:	40013800 	.word	0x40013800
 80032ec:	40020000 	.word	0x40020000
 80032f0:	40020400 	.word	0x40020400
 80032f4:	40020800 	.word	0x40020800
 80032f8:	40020c00 	.word	0x40020c00
 80032fc:	40021000 	.word	0x40021000
 8003300:	40021400 	.word	0x40021400
 8003304:	40021800 	.word	0x40021800
 8003308:	40021c00 	.word	0x40021c00
 800330c:	40022000 	.word	0x40022000
 8003310:	40022400 	.word	0x40022400
 8003314:	40013c00 	.word	0x40013c00

08003318 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003318:	b480      	push	{r7}
 800331a:	b083      	sub	sp, #12
 800331c:	af00      	add	r7, sp, #0
 800331e:	6078      	str	r0, [r7, #4]
 8003320:	460b      	mov	r3, r1
 8003322:	807b      	strh	r3, [r7, #2]
 8003324:	4613      	mov	r3, r2
 8003326:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003328:	787b      	ldrb	r3, [r7, #1]
 800332a:	2b00      	cmp	r3, #0
 800332c:	d003      	beq.n	8003336 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800332e:	887a      	ldrh	r2, [r7, #2]
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003334:	e003      	b.n	800333e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8003336:	887b      	ldrh	r3, [r7, #2]
 8003338:	041a      	lsls	r2, r3, #16
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	619a      	str	r2, [r3, #24]
}
 800333e:	bf00      	nop
 8003340:	370c      	adds	r7, #12
 8003342:	46bd      	mov	sp, r7
 8003344:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003348:	4770      	bx	lr
	...

0800334c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800334c:	b580      	push	{r7, lr}
 800334e:	b084      	sub	sp, #16
 8003350:	af00      	add	r7, sp, #0
 8003352:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	2b00      	cmp	r3, #0
 8003358:	d101      	bne.n	800335e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800335a:	2301      	movs	r3, #1
 800335c:	e12b      	b.n	80035b6 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003364:	b2db      	uxtb	r3, r3
 8003366:	2b00      	cmp	r3, #0
 8003368:	d106      	bne.n	8003378 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	2200      	movs	r2, #0
 800336e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8003372:	6878      	ldr	r0, [r7, #4]
 8003374:	f7fe fc24 	bl	8001bc0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	2224      	movs	r2, #36	@ 0x24
 800337c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	681b      	ldr	r3, [r3, #0]
 8003384:	681a      	ldr	r2, [r3, #0]
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	681b      	ldr	r3, [r3, #0]
 800338a:	f022 0201 	bic.w	r2, r2, #1
 800338e:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	681b      	ldr	r3, [r3, #0]
 8003394:	681a      	ldr	r2, [r3, #0]
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	681b      	ldr	r3, [r3, #0]
 800339a:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800339e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	681b      	ldr	r3, [r3, #0]
 80033a4:	681a      	ldr	r2, [r3, #0]
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	681b      	ldr	r3, [r3, #0]
 80033aa:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80033ae:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80033b0:	f001 f8f2 	bl	8004598 <HAL_RCC_GetPCLK1Freq>
 80033b4:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	685b      	ldr	r3, [r3, #4]
 80033ba:	4a81      	ldr	r2, [pc, #516]	@ (80035c0 <HAL_I2C_Init+0x274>)
 80033bc:	4293      	cmp	r3, r2
 80033be:	d807      	bhi.n	80033d0 <HAL_I2C_Init+0x84>
 80033c0:	68fb      	ldr	r3, [r7, #12]
 80033c2:	4a80      	ldr	r2, [pc, #512]	@ (80035c4 <HAL_I2C_Init+0x278>)
 80033c4:	4293      	cmp	r3, r2
 80033c6:	bf94      	ite	ls
 80033c8:	2301      	movls	r3, #1
 80033ca:	2300      	movhi	r3, #0
 80033cc:	b2db      	uxtb	r3, r3
 80033ce:	e006      	b.n	80033de <HAL_I2C_Init+0x92>
 80033d0:	68fb      	ldr	r3, [r7, #12]
 80033d2:	4a7d      	ldr	r2, [pc, #500]	@ (80035c8 <HAL_I2C_Init+0x27c>)
 80033d4:	4293      	cmp	r3, r2
 80033d6:	bf94      	ite	ls
 80033d8:	2301      	movls	r3, #1
 80033da:	2300      	movhi	r3, #0
 80033dc:	b2db      	uxtb	r3, r3
 80033de:	2b00      	cmp	r3, #0
 80033e0:	d001      	beq.n	80033e6 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80033e2:	2301      	movs	r3, #1
 80033e4:	e0e7      	b.n	80035b6 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80033e6:	68fb      	ldr	r3, [r7, #12]
 80033e8:	4a78      	ldr	r2, [pc, #480]	@ (80035cc <HAL_I2C_Init+0x280>)
 80033ea:	fba2 2303 	umull	r2, r3, r2, r3
 80033ee:	0c9b      	lsrs	r3, r3, #18
 80033f0:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	681b      	ldr	r3, [r3, #0]
 80033f6:	685b      	ldr	r3, [r3, #4]
 80033f8:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	681b      	ldr	r3, [r3, #0]
 8003400:	68ba      	ldr	r2, [r7, #8]
 8003402:	430a      	orrs	r2, r1
 8003404:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	681b      	ldr	r3, [r3, #0]
 800340a:	6a1b      	ldr	r3, [r3, #32]
 800340c:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	685b      	ldr	r3, [r3, #4]
 8003414:	4a6a      	ldr	r2, [pc, #424]	@ (80035c0 <HAL_I2C_Init+0x274>)
 8003416:	4293      	cmp	r3, r2
 8003418:	d802      	bhi.n	8003420 <HAL_I2C_Init+0xd4>
 800341a:	68bb      	ldr	r3, [r7, #8]
 800341c:	3301      	adds	r3, #1
 800341e:	e009      	b.n	8003434 <HAL_I2C_Init+0xe8>
 8003420:	68bb      	ldr	r3, [r7, #8]
 8003422:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8003426:	fb02 f303 	mul.w	r3, r2, r3
 800342a:	4a69      	ldr	r2, [pc, #420]	@ (80035d0 <HAL_I2C_Init+0x284>)
 800342c:	fba2 2303 	umull	r2, r3, r2, r3
 8003430:	099b      	lsrs	r3, r3, #6
 8003432:	3301      	adds	r3, #1
 8003434:	687a      	ldr	r2, [r7, #4]
 8003436:	6812      	ldr	r2, [r2, #0]
 8003438:	430b      	orrs	r3, r1
 800343a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	681b      	ldr	r3, [r3, #0]
 8003440:	69db      	ldr	r3, [r3, #28]
 8003442:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8003446:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	685b      	ldr	r3, [r3, #4]
 800344e:	495c      	ldr	r1, [pc, #368]	@ (80035c0 <HAL_I2C_Init+0x274>)
 8003450:	428b      	cmp	r3, r1
 8003452:	d819      	bhi.n	8003488 <HAL_I2C_Init+0x13c>
 8003454:	68fb      	ldr	r3, [r7, #12]
 8003456:	1e59      	subs	r1, r3, #1
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	685b      	ldr	r3, [r3, #4]
 800345c:	005b      	lsls	r3, r3, #1
 800345e:	fbb1 f3f3 	udiv	r3, r1, r3
 8003462:	1c59      	adds	r1, r3, #1
 8003464:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8003468:	400b      	ands	r3, r1
 800346a:	2b00      	cmp	r3, #0
 800346c:	d00a      	beq.n	8003484 <HAL_I2C_Init+0x138>
 800346e:	68fb      	ldr	r3, [r7, #12]
 8003470:	1e59      	subs	r1, r3, #1
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	685b      	ldr	r3, [r3, #4]
 8003476:	005b      	lsls	r3, r3, #1
 8003478:	fbb1 f3f3 	udiv	r3, r1, r3
 800347c:	3301      	adds	r3, #1
 800347e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003482:	e051      	b.n	8003528 <HAL_I2C_Init+0x1dc>
 8003484:	2304      	movs	r3, #4
 8003486:	e04f      	b.n	8003528 <HAL_I2C_Init+0x1dc>
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	689b      	ldr	r3, [r3, #8]
 800348c:	2b00      	cmp	r3, #0
 800348e:	d111      	bne.n	80034b4 <HAL_I2C_Init+0x168>
 8003490:	68fb      	ldr	r3, [r7, #12]
 8003492:	1e58      	subs	r0, r3, #1
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	6859      	ldr	r1, [r3, #4]
 8003498:	460b      	mov	r3, r1
 800349a:	005b      	lsls	r3, r3, #1
 800349c:	440b      	add	r3, r1
 800349e:	fbb0 f3f3 	udiv	r3, r0, r3
 80034a2:	3301      	adds	r3, #1
 80034a4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80034a8:	2b00      	cmp	r3, #0
 80034aa:	bf0c      	ite	eq
 80034ac:	2301      	moveq	r3, #1
 80034ae:	2300      	movne	r3, #0
 80034b0:	b2db      	uxtb	r3, r3
 80034b2:	e012      	b.n	80034da <HAL_I2C_Init+0x18e>
 80034b4:	68fb      	ldr	r3, [r7, #12]
 80034b6:	1e58      	subs	r0, r3, #1
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	6859      	ldr	r1, [r3, #4]
 80034bc:	460b      	mov	r3, r1
 80034be:	009b      	lsls	r3, r3, #2
 80034c0:	440b      	add	r3, r1
 80034c2:	0099      	lsls	r1, r3, #2
 80034c4:	440b      	add	r3, r1
 80034c6:	fbb0 f3f3 	udiv	r3, r0, r3
 80034ca:	3301      	adds	r3, #1
 80034cc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80034d0:	2b00      	cmp	r3, #0
 80034d2:	bf0c      	ite	eq
 80034d4:	2301      	moveq	r3, #1
 80034d6:	2300      	movne	r3, #0
 80034d8:	b2db      	uxtb	r3, r3
 80034da:	2b00      	cmp	r3, #0
 80034dc:	d001      	beq.n	80034e2 <HAL_I2C_Init+0x196>
 80034de:	2301      	movs	r3, #1
 80034e0:	e022      	b.n	8003528 <HAL_I2C_Init+0x1dc>
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	689b      	ldr	r3, [r3, #8]
 80034e6:	2b00      	cmp	r3, #0
 80034e8:	d10e      	bne.n	8003508 <HAL_I2C_Init+0x1bc>
 80034ea:	68fb      	ldr	r3, [r7, #12]
 80034ec:	1e58      	subs	r0, r3, #1
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	6859      	ldr	r1, [r3, #4]
 80034f2:	460b      	mov	r3, r1
 80034f4:	005b      	lsls	r3, r3, #1
 80034f6:	440b      	add	r3, r1
 80034f8:	fbb0 f3f3 	udiv	r3, r0, r3
 80034fc:	3301      	adds	r3, #1
 80034fe:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003502:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003506:	e00f      	b.n	8003528 <HAL_I2C_Init+0x1dc>
 8003508:	68fb      	ldr	r3, [r7, #12]
 800350a:	1e58      	subs	r0, r3, #1
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	6859      	ldr	r1, [r3, #4]
 8003510:	460b      	mov	r3, r1
 8003512:	009b      	lsls	r3, r3, #2
 8003514:	440b      	add	r3, r1
 8003516:	0099      	lsls	r1, r3, #2
 8003518:	440b      	add	r3, r1
 800351a:	fbb0 f3f3 	udiv	r3, r0, r3
 800351e:	3301      	adds	r3, #1
 8003520:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003524:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8003528:	6879      	ldr	r1, [r7, #4]
 800352a:	6809      	ldr	r1, [r1, #0]
 800352c:	4313      	orrs	r3, r2
 800352e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	681b      	ldr	r3, [r3, #0]
 8003534:	681b      	ldr	r3, [r3, #0]
 8003536:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	69da      	ldr	r2, [r3, #28]
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	6a1b      	ldr	r3, [r3, #32]
 8003542:	431a      	orrs	r2, r3
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	681b      	ldr	r3, [r3, #0]
 8003548:	430a      	orrs	r2, r1
 800354a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	681b      	ldr	r3, [r3, #0]
 8003550:	689b      	ldr	r3, [r3, #8]
 8003552:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8003556:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 800355a:	687a      	ldr	r2, [r7, #4]
 800355c:	6911      	ldr	r1, [r2, #16]
 800355e:	687a      	ldr	r2, [r7, #4]
 8003560:	68d2      	ldr	r2, [r2, #12]
 8003562:	4311      	orrs	r1, r2
 8003564:	687a      	ldr	r2, [r7, #4]
 8003566:	6812      	ldr	r2, [r2, #0]
 8003568:	430b      	orrs	r3, r1
 800356a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	681b      	ldr	r3, [r3, #0]
 8003570:	68db      	ldr	r3, [r3, #12]
 8003572:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	695a      	ldr	r2, [r3, #20]
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	699b      	ldr	r3, [r3, #24]
 800357e:	431a      	orrs	r2, r3
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	681b      	ldr	r3, [r3, #0]
 8003584:	430a      	orrs	r2, r1
 8003586:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	681a      	ldr	r2, [r3, #0]
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	681b      	ldr	r3, [r3, #0]
 8003592:	f042 0201 	orr.w	r2, r2, #1
 8003596:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	2200      	movs	r2, #0
 800359c:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	2220      	movs	r2, #32
 80035a2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	2200      	movs	r2, #0
 80035aa:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	2200      	movs	r2, #0
 80035b0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 80035b4:	2300      	movs	r3, #0
}
 80035b6:	4618      	mov	r0, r3
 80035b8:	3710      	adds	r7, #16
 80035ba:	46bd      	mov	sp, r7
 80035bc:	bd80      	pop	{r7, pc}
 80035be:	bf00      	nop
 80035c0:	000186a0 	.word	0x000186a0
 80035c4:	001e847f 	.word	0x001e847f
 80035c8:	003d08ff 	.word	0x003d08ff
 80035cc:	431bde83 	.word	0x431bde83
 80035d0:	10624dd3 	.word	0x10624dd3

080035d4 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter new state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80035d4:	b480      	push	{r7}
 80035d6:	b083      	sub	sp, #12
 80035d8:	af00      	add	r7, sp, #0
 80035da:	6078      	str	r0, [r7, #4]
 80035dc:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80035e4:	b2db      	uxtb	r3, r3
 80035e6:	2b20      	cmp	r3, #32
 80035e8:	d129      	bne.n	800363e <HAL_I2CEx_ConfigAnalogFilter+0x6a>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	2224      	movs	r2, #36	@ 0x24
 80035ee:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	681b      	ldr	r3, [r3, #0]
 80035f6:	681a      	ldr	r2, [r3, #0]
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	681b      	ldr	r3, [r3, #0]
 80035fc:	f022 0201 	bic.w	r2, r2, #1
 8003600:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->FLTR &= ~(I2C_FLTR_ANOFF);
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	681b      	ldr	r3, [r3, #0]
 8003606:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	681b      	ldr	r3, [r3, #0]
 800360c:	f022 0210 	bic.w	r2, r2, #16
 8003610:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Disable the analog filter */
    hi2c->Instance->FLTR |= AnalogFilter;
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	681b      	ldr	r3, [r3, #0]
 8003616:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	681b      	ldr	r3, [r3, #0]
 800361c:	683a      	ldr	r2, [r7, #0]
 800361e:	430a      	orrs	r2, r1
 8003620:	625a      	str	r2, [r3, #36]	@ 0x24

    __HAL_I2C_ENABLE(hi2c);
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	681b      	ldr	r3, [r3, #0]
 8003626:	681a      	ldr	r2, [r3, #0]
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	681b      	ldr	r3, [r3, #0]
 800362c:	f042 0201 	orr.w	r2, r2, #1
 8003630:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	2220      	movs	r2, #32
 8003636:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    return HAL_OK;
 800363a:	2300      	movs	r3, #0
 800363c:	e000      	b.n	8003640 <HAL_I2CEx_ConfigAnalogFilter+0x6c>
  }
  else
  {
    return HAL_BUSY;
 800363e:	2302      	movs	r3, #2
  }
}
 8003640:	4618      	mov	r0, r3
 8003642:	370c      	adds	r7, #12
 8003644:	46bd      	mov	sp, r7
 8003646:	f85d 7b04 	ldr.w	r7, [sp], #4
 800364a:	4770      	bx	lr

0800364c <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between 0x00 and 0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800364c:	b480      	push	{r7}
 800364e:	b085      	sub	sp, #20
 8003650:	af00      	add	r7, sp, #0
 8003652:	6078      	str	r0, [r7, #4]
 8003654:	6039      	str	r1, [r7, #0]
  uint16_t tmpreg = 0;
 8003656:	2300      	movs	r3, #0
 8003658:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003660:	b2db      	uxtb	r3, r3
 8003662:	2b20      	cmp	r3, #32
 8003664:	d12a      	bne.n	80036bc <HAL_I2CEx_ConfigDigitalFilter+0x70>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	2224      	movs	r2, #36	@ 0x24
 800366a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	681b      	ldr	r3, [r3, #0]
 8003672:	681a      	ldr	r2, [r3, #0]
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	681b      	ldr	r3, [r3, #0]
 8003678:	f022 0201 	bic.w	r2, r2, #1
 800367c:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->FLTR;
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	681b      	ldr	r3, [r3, #0]
 8003682:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003684:	81fb      	strh	r3, [r7, #14]

    /* Reset I2Cx DNF bit [3:0] */
    tmpreg &= ~(I2C_FLTR_DNF);
 8003686:	89fb      	ldrh	r3, [r7, #14]
 8003688:	f023 030f 	bic.w	r3, r3, #15
 800368c:	81fb      	strh	r3, [r7, #14]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter;
 800368e:	683b      	ldr	r3, [r7, #0]
 8003690:	b29a      	uxth	r2, r3
 8003692:	89fb      	ldrh	r3, [r7, #14]
 8003694:	4313      	orrs	r3, r2
 8003696:	81fb      	strh	r3, [r7, #14]

    /* Store the new register value */
    hi2c->Instance->FLTR = tmpreg;
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	681b      	ldr	r3, [r3, #0]
 800369c:	89fa      	ldrh	r2, [r7, #14]
 800369e:	625a      	str	r2, [r3, #36]	@ 0x24

    __HAL_I2C_ENABLE(hi2c);
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	681a      	ldr	r2, [r3, #0]
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	681b      	ldr	r3, [r3, #0]
 80036aa:	f042 0201 	orr.w	r2, r2, #1
 80036ae:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	2220      	movs	r2, #32
 80036b4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    return HAL_OK;
 80036b8:	2300      	movs	r3, #0
 80036ba:	e000      	b.n	80036be <HAL_I2CEx_ConfigDigitalFilter+0x72>
  }
  else
  {
    return HAL_BUSY;
 80036bc:	2302      	movs	r3, #2
  }
}
 80036be:	4618      	mov	r0, r3
 80036c0:	3714      	adds	r7, #20
 80036c2:	46bd      	mov	sp, r7
 80036c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036c8:	4770      	bx	lr
	...

080036cc <HAL_LTDC_Init>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_Init(LTDC_HandleTypeDef *hltdc)
{
 80036cc:	b580      	push	{r7, lr}
 80036ce:	b084      	sub	sp, #16
 80036d0:	af00      	add	r7, sp, #0
 80036d2:	6078      	str	r0, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;

  /* Check the LTDC peripheral state */
  if (hltdc == NULL)
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	2b00      	cmp	r3, #0
 80036d8:	d101      	bne.n	80036de <HAL_LTDC_Init+0x12>
  {
    return HAL_ERROR;
 80036da:	2301      	movs	r3, #1
 80036dc:	e0bf      	b.n	800385e <HAL_LTDC_Init+0x192>
    }
    /* Init the low level hardware */
    hltdc->MspInitCallback(hltdc);
  }
#else
  if (hltdc->State == HAL_LTDC_STATE_RESET)
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	f893 30a1 	ldrb.w	r3, [r3, #161]	@ 0xa1
 80036e4:	b2db      	uxtb	r3, r3
 80036e6:	2b00      	cmp	r3, #0
 80036e8:	d106      	bne.n	80036f8 <HAL_LTDC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hltdc->Lock = HAL_UNLOCKED;
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	2200      	movs	r2, #0
 80036ee:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0
    /* Init the low level hardware */
    HAL_LTDC_MspInit(hltdc);
 80036f2:	6878      	ldr	r0, [r7, #4]
 80036f4:	f7fe face 	bl	8001c94 <HAL_LTDC_MspInit>
  }
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	2202      	movs	r2, #2
 80036fc:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  /* Configure the HS, VS, DE and PC polarity */
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	681b      	ldr	r3, [r3, #0]
 8003704:	699a      	ldr	r2, [r3, #24]
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	681b      	ldr	r3, [r3, #0]
 800370a:	f022 4270 	bic.w	r2, r2, #4026531840	@ 0xf0000000
 800370e:	619a      	str	r2, [r3, #24]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	681b      	ldr	r3, [r3, #0]
 8003714:	6999      	ldr	r1, [r3, #24]
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	685a      	ldr	r2, [r3, #4]
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	689b      	ldr	r3, [r3, #8]
 800371e:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	68db      	ldr	r3, [r3, #12]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8003724:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	691b      	ldr	r3, [r3, #16]
 800372a:	431a      	orrs	r2, r3
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	681b      	ldr	r3, [r3, #0]
 8003730:	430a      	orrs	r2, r1
 8003732:	619a      	str	r2, [r3, #24]

  /* Set Synchronization size */
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	681b      	ldr	r3, [r3, #0]
 8003738:	6899      	ldr	r1, [r3, #8]
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	681a      	ldr	r2, [r3, #0]
 800373e:	4b4a      	ldr	r3, [pc, #296]	@ (8003868 <HAL_LTDC_Init+0x19c>)
 8003740:	400b      	ands	r3, r1
 8003742:	6093      	str	r3, [r2, #8]
  tmp = (hltdc->Init.HorizontalSync << 16U);
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	695b      	ldr	r3, [r3, #20]
 8003748:	041b      	lsls	r3, r3, #16
 800374a:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	681b      	ldr	r3, [r3, #0]
 8003750:	6899      	ldr	r1, [r3, #8]
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	699a      	ldr	r2, [r3, #24]
 8003756:	68fb      	ldr	r3, [r7, #12]
 8003758:	431a      	orrs	r2, r3
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	681b      	ldr	r3, [r3, #0]
 800375e:	430a      	orrs	r2, r1
 8003760:	609a      	str	r2, [r3, #8]

  /* Set Accumulated Back porch */
  hltdc->Instance->BPCR &= ~(LTDC_BPCR_AVBP | LTDC_BPCR_AHBP);
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	681b      	ldr	r3, [r3, #0]
 8003766:	68d9      	ldr	r1, [r3, #12]
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	681a      	ldr	r2, [r3, #0]
 800376c:	4b3e      	ldr	r3, [pc, #248]	@ (8003868 <HAL_LTDC_Init+0x19c>)
 800376e:	400b      	ands	r3, r1
 8003770:	60d3      	str	r3, [r2, #12]
  tmp = (hltdc->Init.AccumulatedHBP << 16U);
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	69db      	ldr	r3, [r3, #28]
 8003776:	041b      	lsls	r3, r3, #16
 8003778:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	681b      	ldr	r3, [r3, #0]
 800377e:	68d9      	ldr	r1, [r3, #12]
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	6a1a      	ldr	r2, [r3, #32]
 8003784:	68fb      	ldr	r3, [r7, #12]
 8003786:	431a      	orrs	r2, r3
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	681b      	ldr	r3, [r3, #0]
 800378c:	430a      	orrs	r2, r1
 800378e:	60da      	str	r2, [r3, #12]

  /* Set Accumulated Active Width */
  hltdc->Instance->AWCR &= ~(LTDC_AWCR_AAH | LTDC_AWCR_AAW);
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	681b      	ldr	r3, [r3, #0]
 8003794:	6919      	ldr	r1, [r3, #16]
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	681a      	ldr	r2, [r3, #0]
 800379a:	4b33      	ldr	r3, [pc, #204]	@ (8003868 <HAL_LTDC_Init+0x19c>)
 800379c:	400b      	ands	r3, r1
 800379e:	6113      	str	r3, [r2, #16]
  tmp = (hltdc->Init.AccumulatedActiveW << 16U);
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80037a4:	041b      	lsls	r3, r3, #16
 80037a6:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->AWCR |= (tmp | hltdc->Init.AccumulatedActiveH);
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	681b      	ldr	r3, [r3, #0]
 80037ac:	6919      	ldr	r1, [r3, #16]
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80037b2:	68fb      	ldr	r3, [r7, #12]
 80037b4:	431a      	orrs	r2, r3
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	681b      	ldr	r3, [r3, #0]
 80037ba:	430a      	orrs	r2, r1
 80037bc:	611a      	str	r2, [r3, #16]

  /* Set Total Width */
  hltdc->Instance->TWCR &= ~(LTDC_TWCR_TOTALH | LTDC_TWCR_TOTALW);
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	681b      	ldr	r3, [r3, #0]
 80037c2:	6959      	ldr	r1, [r3, #20]
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	681a      	ldr	r2, [r3, #0]
 80037c8:	4b27      	ldr	r3, [pc, #156]	@ (8003868 <HAL_LTDC_Init+0x19c>)
 80037ca:	400b      	ands	r3, r1
 80037cc:	6153      	str	r3, [r2, #20]
  tmp = (hltdc->Init.TotalWidth << 16U);
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80037d2:	041b      	lsls	r3, r3, #16
 80037d4:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->TWCR |= (tmp | hltdc->Init.TotalHeigh);
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	681b      	ldr	r3, [r3, #0]
 80037da:	6959      	ldr	r1, [r3, #20]
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80037e0:	68fb      	ldr	r3, [r7, #12]
 80037e2:	431a      	orrs	r2, r3
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	681b      	ldr	r3, [r3, #0]
 80037e8:	430a      	orrs	r2, r1
 80037ea:	615a      	str	r2, [r3, #20]

  /* Set the background color value */
  tmp = ((uint32_t)(hltdc->Init.Backcolor.Green) << 8U);
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80037f2:	021b      	lsls	r3, r3, #8
 80037f4:	60fb      	str	r3, [r7, #12]
  tmp1 = ((uint32_t)(hltdc->Init.Backcolor.Red) << 16U);
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	f893 3036 	ldrb.w	r3, [r3, #54]	@ 0x36
 80037fc:	041b      	lsls	r3, r3, #16
 80037fe:	60bb      	str	r3, [r7, #8]
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	681b      	ldr	r3, [r3, #0]
 800380a:	f002 427f 	and.w	r2, r2, #4278190080	@ 0xff000000
 800380e:	62da      	str	r2, [r3, #44]	@ 0x2c
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	681b      	ldr	r3, [r3, #0]
 8003814:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8003816:	68ba      	ldr	r2, [r7, #8]
 8003818:	68fb      	ldr	r3, [r7, #12]
 800381a:	4313      	orrs	r3, r2
 800381c:	687a      	ldr	r2, [r7, #4]
 800381e:	f892 2034 	ldrb.w	r2, [r2, #52]	@ 0x34
 8003822:	431a      	orrs	r2, r3
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	681b      	ldr	r3, [r3, #0]
 8003828:	430a      	orrs	r2, r1
 800382a:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable the Transfer Error and FIFO underrun interrupts */
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_TE | LTDC_IT_FU);
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	681b      	ldr	r3, [r3, #0]
 8003830:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	681b      	ldr	r3, [r3, #0]
 8003836:	f042 0206 	orr.w	r2, r2, #6
 800383a:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Enable LTDC by setting LTDCEN bit */
  __HAL_LTDC_ENABLE(hltdc);
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	681b      	ldr	r3, [r3, #0]
 8003840:	699a      	ldr	r2, [r3, #24]
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	681b      	ldr	r3, [r3, #0]
 8003846:	f042 0201 	orr.w	r2, r2, #1
 800384a:	619a      	str	r2, [r3, #24]

  /* Initialize the error code */
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	2200      	movs	r2, #0
 8003850:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4

  /* Initialize the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	2201      	movs	r2, #1
 8003858:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  return HAL_OK;
 800385c:	2300      	movs	r3, #0
}
 800385e:	4618      	mov	r0, r3
 8003860:	3710      	adds	r7, #16
 8003862:	46bd      	mov	sp, r7
 8003864:	bd80      	pop	{r7, pc}
 8003866:	bf00      	nop
 8003868:	f000f800 	.word	0xf000f800

0800386c <HAL_LTDC_ConfigLayer>:
  *                    This parameter can be one of the following values:
  *                    LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_ConfigLayer(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 800386c:	b5b0      	push	{r4, r5, r7, lr}
 800386e:	b084      	sub	sp, #16
 8003870:	af00      	add	r7, sp, #0
 8003872:	60f8      	str	r0, [r7, #12]
 8003874:	60b9      	str	r1, [r7, #8]
 8003876:	607a      	str	r2, [r7, #4]
  assert_param(IS_LTDC_BLENDING_FACTOR2(pLayerCfg->BlendingFactor2));
  assert_param(IS_LTDC_CFBLL(pLayerCfg->ImageWidth));
  assert_param(IS_LTDC_CFBLNBR(pLayerCfg->ImageHeight));

  /* Process locked */
  __HAL_LOCK(hltdc);
 8003878:	68fb      	ldr	r3, [r7, #12]
 800387a:	f893 30a0 	ldrb.w	r3, [r3, #160]	@ 0xa0
 800387e:	2b01      	cmp	r3, #1
 8003880:	d101      	bne.n	8003886 <HAL_LTDC_ConfigLayer+0x1a>
 8003882:	2302      	movs	r3, #2
 8003884:	e02c      	b.n	80038e0 <HAL_LTDC_ConfigLayer+0x74>
 8003886:	68fb      	ldr	r3, [r7, #12]
 8003888:	2201      	movs	r2, #1
 800388a:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 800388e:	68fb      	ldr	r3, [r7, #12]
 8003890:	2202      	movs	r2, #2
 8003892:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  /* Copy new layer configuration into handle structure */
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 8003896:	68fa      	ldr	r2, [r7, #12]
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	2134      	movs	r1, #52	@ 0x34
 800389c:	fb01 f303 	mul.w	r3, r1, r3
 80038a0:	4413      	add	r3, r2
 80038a2:	f103 0238 	add.w	r2, r3, #56	@ 0x38
 80038a6:	68bb      	ldr	r3, [r7, #8]
 80038a8:	4614      	mov	r4, r2
 80038aa:	461d      	mov	r5, r3
 80038ac:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80038ae:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80038b0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80038b2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80038b4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80038b6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80038b8:	682b      	ldr	r3, [r5, #0]
 80038ba:	6023      	str	r3, [r4, #0]

  /* Configure the LTDC Layer */
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 80038bc:	687a      	ldr	r2, [r7, #4]
 80038be:	68b9      	ldr	r1, [r7, #8]
 80038c0:	68f8      	ldr	r0, [r7, #12]
 80038c2:	f000 f811 	bl	80038e8 <LTDC_SetConfig>

  /* Set the Immediate Reload type */
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 80038c6:	68fb      	ldr	r3, [r7, #12]
 80038c8:	681b      	ldr	r3, [r3, #0]
 80038ca:	2201      	movs	r2, #1
 80038cc:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Initialize the LTDC state*/
  hltdc->State  = HAL_LTDC_STATE_READY;
 80038ce:	68fb      	ldr	r3, [r7, #12]
 80038d0:	2201      	movs	r2, #1
 80038d2:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 80038d6:	68fb      	ldr	r3, [r7, #12]
 80038d8:	2200      	movs	r2, #0
 80038da:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0

  return HAL_OK;
 80038de:	2300      	movs	r3, #0
}
 80038e0:	4618      	mov	r0, r3
 80038e2:	3710      	adds	r7, #16
 80038e4:	46bd      	mov	sp, r7
 80038e6:	bdb0      	pop	{r4, r5, r7, pc}

080038e8 <LTDC_SetConfig>:
  * @param  LayerIdx  LTDC Layer index.
  *                   This parameter can be one of the following values: LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval None
  */
static void LTDC_SetConfig(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 80038e8:	b480      	push	{r7}
 80038ea:	b089      	sub	sp, #36	@ 0x24
 80038ec:	af00      	add	r7, sp, #0
 80038ee:	60f8      	str	r0, [r7, #12]
 80038f0:	60b9      	str	r1, [r7, #8]
 80038f2:	607a      	str	r2, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;
  uint32_t tmp2;

  /* Configure the horizontal start and stop position */
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 80038f4:	68bb      	ldr	r3, [r7, #8]
 80038f6:	685a      	ldr	r2, [r3, #4]
 80038f8:	68fb      	ldr	r3, [r7, #12]
 80038fa:	681b      	ldr	r3, [r3, #0]
 80038fc:	68db      	ldr	r3, [r3, #12]
 80038fe:	0c1b      	lsrs	r3, r3, #16
 8003900:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003904:	4413      	add	r3, r2
 8003906:	041b      	lsls	r3, r3, #16
 8003908:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 800390a:	68fb      	ldr	r3, [r7, #12]
 800390c:	681b      	ldr	r3, [r3, #0]
 800390e:	461a      	mov	r2, r3
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	01db      	lsls	r3, r3, #7
 8003914:	4413      	add	r3, r2
 8003916:	3384      	adds	r3, #132	@ 0x84
 8003918:	685b      	ldr	r3, [r3, #4]
 800391a:	68fa      	ldr	r2, [r7, #12]
 800391c:	6812      	ldr	r2, [r2, #0]
 800391e:	4611      	mov	r1, r2
 8003920:	687a      	ldr	r2, [r7, #4]
 8003922:	01d2      	lsls	r2, r2, #7
 8003924:	440a      	add	r2, r1
 8003926:	3284      	adds	r2, #132	@ 0x84
 8003928:	f403 4370 	and.w	r3, r3, #61440	@ 0xf000
 800392c:	6053      	str	r3, [r2, #4]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 800392e:	68bb      	ldr	r3, [r7, #8]
 8003930:	681a      	ldr	r2, [r3, #0]
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8003932:	68fb      	ldr	r3, [r7, #12]
 8003934:	681b      	ldr	r3, [r3, #0]
 8003936:	68db      	ldr	r3, [r3, #12]
 8003938:	0c1b      	lsrs	r3, r3, #16
 800393a:	f3c3 030b 	ubfx	r3, r3, #0, #12
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 800393e:	4413      	add	r3, r2
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8003940:	1c5a      	adds	r2, r3, #1
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8003942:	68fb      	ldr	r3, [r7, #12]
 8003944:	681b      	ldr	r3, [r3, #0]
 8003946:	4619      	mov	r1, r3
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	01db      	lsls	r3, r3, #7
 800394c:	440b      	add	r3, r1
 800394e:	3384      	adds	r3, #132	@ 0x84
 8003950:	4619      	mov	r1, r3
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8003952:	69fb      	ldr	r3, [r7, #28]
 8003954:	4313      	orrs	r3, r2
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8003956:	604b      	str	r3, [r1, #4]

  /* Configure the vertical start and stop position */
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
 8003958:	68bb      	ldr	r3, [r7, #8]
 800395a:	68da      	ldr	r2, [r3, #12]
 800395c:	68fb      	ldr	r3, [r7, #12]
 800395e:	681b      	ldr	r3, [r3, #0]
 8003960:	68db      	ldr	r3, [r3, #12]
 8003962:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003966:	4413      	add	r3, r2
 8003968:	041b      	lsls	r3, r3, #16
 800396a:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
 800396c:	68fb      	ldr	r3, [r7, #12]
 800396e:	681b      	ldr	r3, [r3, #0]
 8003970:	461a      	mov	r2, r3
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	01db      	lsls	r3, r3, #7
 8003976:	4413      	add	r3, r2
 8003978:	3384      	adds	r3, #132	@ 0x84
 800397a:	689b      	ldr	r3, [r3, #8]
 800397c:	68fa      	ldr	r2, [r7, #12]
 800397e:	6812      	ldr	r2, [r2, #0]
 8003980:	4611      	mov	r1, r2
 8003982:	687a      	ldr	r2, [r7, #4]
 8003984:	01d2      	lsls	r2, r2, #7
 8003986:	440a      	add	r2, r1
 8003988:	3284      	adds	r2, #132	@ 0x84
 800398a:	f403 4370 	and.w	r3, r3, #61440	@ 0xf000
 800398e:	6093      	str	r3, [r2, #8]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
 8003990:	68bb      	ldr	r3, [r7, #8]
 8003992:	689a      	ldr	r2, [r3, #8]
 8003994:	68fb      	ldr	r3, [r7, #12]
 8003996:	681b      	ldr	r3, [r3, #0]
 8003998:	68db      	ldr	r3, [r3, #12]
 800399a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800399e:	4413      	add	r3, r2
 80039a0:	1c5a      	adds	r2, r3, #1
 80039a2:	68fb      	ldr	r3, [r7, #12]
 80039a4:	681b      	ldr	r3, [r3, #0]
 80039a6:	4619      	mov	r1, r3
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	01db      	lsls	r3, r3, #7
 80039ac:	440b      	add	r3, r1
 80039ae:	3384      	adds	r3, #132	@ 0x84
 80039b0:	4619      	mov	r1, r3
 80039b2:	69fb      	ldr	r3, [r7, #28]
 80039b4:	4313      	orrs	r3, r2
 80039b6:	608b      	str	r3, [r1, #8]

  /* Specifies the pixel format */
  LTDC_LAYER(hltdc, LayerIdx)->PFCR &= ~(LTDC_LxPFCR_PF);
 80039b8:	68fb      	ldr	r3, [r7, #12]
 80039ba:	681b      	ldr	r3, [r3, #0]
 80039bc:	461a      	mov	r2, r3
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	01db      	lsls	r3, r3, #7
 80039c2:	4413      	add	r3, r2
 80039c4:	3384      	adds	r3, #132	@ 0x84
 80039c6:	691b      	ldr	r3, [r3, #16]
 80039c8:	68fa      	ldr	r2, [r7, #12]
 80039ca:	6812      	ldr	r2, [r2, #0]
 80039cc:	4611      	mov	r1, r2
 80039ce:	687a      	ldr	r2, [r7, #4]
 80039d0:	01d2      	lsls	r2, r2, #7
 80039d2:	440a      	add	r2, r1
 80039d4:	3284      	adds	r2, #132	@ 0x84
 80039d6:	f023 0307 	bic.w	r3, r3, #7
 80039da:	6113      	str	r3, [r2, #16]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 80039dc:	68fb      	ldr	r3, [r7, #12]
 80039de:	681b      	ldr	r3, [r3, #0]
 80039e0:	461a      	mov	r2, r3
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	01db      	lsls	r3, r3, #7
 80039e6:	4413      	add	r3, r2
 80039e8:	3384      	adds	r3, #132	@ 0x84
 80039ea:	461a      	mov	r2, r3
 80039ec:	68bb      	ldr	r3, [r7, #8]
 80039ee:	691b      	ldr	r3, [r3, #16]
 80039f0:	6113      	str	r3, [r2, #16]

  /* Configure the default color values */
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8U);
 80039f2:	68bb      	ldr	r3, [r7, #8]
 80039f4:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 80039f8:	021b      	lsls	r3, r3, #8
 80039fa:	61fb      	str	r3, [r7, #28]
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16U);
 80039fc:	68bb      	ldr	r3, [r7, #8]
 80039fe:	f893 3032 	ldrb.w	r3, [r3, #50]	@ 0x32
 8003a02:	041b      	lsls	r3, r3, #16
 8003a04:	61bb      	str	r3, [r7, #24]
  tmp2 = (pLayerCfg->Alpha0 << 24U);
 8003a06:	68bb      	ldr	r3, [r7, #8]
 8003a08:	699b      	ldr	r3, [r3, #24]
 8003a0a:	061b      	lsls	r3, r3, #24
 8003a0c:	617b      	str	r3, [r7, #20]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED |
 8003a0e:	68fb      	ldr	r3, [r7, #12]
 8003a10:	681b      	ldr	r3, [r3, #0]
 8003a12:	461a      	mov	r2, r3
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	01db      	lsls	r3, r3, #7
 8003a18:	4413      	add	r3, r2
 8003a1a:	3384      	adds	r3, #132	@ 0x84
 8003a1c:	699b      	ldr	r3, [r3, #24]
 8003a1e:	68fb      	ldr	r3, [r7, #12]
 8003a20:	681b      	ldr	r3, [r3, #0]
 8003a22:	461a      	mov	r2, r3
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	01db      	lsls	r3, r3, #7
 8003a28:	4413      	add	r3, r2
 8003a2a:	3384      	adds	r3, #132	@ 0x84
 8003a2c:	461a      	mov	r2, r3
 8003a2e:	2300      	movs	r3, #0
 8003a30:	6193      	str	r3, [r2, #24]
                                         LTDC_LxDCCR_DCALPHA);
  LTDC_LAYER(hltdc, LayerIdx)->DCCR = (pLayerCfg->Backcolor.Blue | tmp | tmp1 | tmp2);
 8003a32:	68bb      	ldr	r3, [r7, #8]
 8003a34:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8003a38:	461a      	mov	r2, r3
 8003a3a:	69fb      	ldr	r3, [r7, #28]
 8003a3c:	431a      	orrs	r2, r3
 8003a3e:	69bb      	ldr	r3, [r7, #24]
 8003a40:	431a      	orrs	r2, r3
 8003a42:	68fb      	ldr	r3, [r7, #12]
 8003a44:	681b      	ldr	r3, [r3, #0]
 8003a46:	4619      	mov	r1, r3
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	01db      	lsls	r3, r3, #7
 8003a4c:	440b      	add	r3, r1
 8003a4e:	3384      	adds	r3, #132	@ 0x84
 8003a50:	4619      	mov	r1, r3
 8003a52:	697b      	ldr	r3, [r7, #20]
 8003a54:	4313      	orrs	r3, r2
 8003a56:	618b      	str	r3, [r1, #24]

  /* Specifies the constant alpha value */
  LTDC_LAYER(hltdc, LayerIdx)->CACR &= ~(LTDC_LxCACR_CONSTA);
 8003a58:	68fb      	ldr	r3, [r7, #12]
 8003a5a:	681b      	ldr	r3, [r3, #0]
 8003a5c:	461a      	mov	r2, r3
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	01db      	lsls	r3, r3, #7
 8003a62:	4413      	add	r3, r2
 8003a64:	3384      	adds	r3, #132	@ 0x84
 8003a66:	695b      	ldr	r3, [r3, #20]
 8003a68:	68fa      	ldr	r2, [r7, #12]
 8003a6a:	6812      	ldr	r2, [r2, #0]
 8003a6c:	4611      	mov	r1, r2
 8003a6e:	687a      	ldr	r2, [r7, #4]
 8003a70:	01d2      	lsls	r2, r2, #7
 8003a72:	440a      	add	r2, r1
 8003a74:	3284      	adds	r2, #132	@ 0x84
 8003a76:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8003a7a:	6153      	str	r3, [r2, #20]
  LTDC_LAYER(hltdc, LayerIdx)->CACR = (pLayerCfg->Alpha);
 8003a7c:	68fb      	ldr	r3, [r7, #12]
 8003a7e:	681b      	ldr	r3, [r3, #0]
 8003a80:	461a      	mov	r2, r3
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	01db      	lsls	r3, r3, #7
 8003a86:	4413      	add	r3, r2
 8003a88:	3384      	adds	r3, #132	@ 0x84
 8003a8a:	461a      	mov	r2, r3
 8003a8c:	68bb      	ldr	r3, [r7, #8]
 8003a8e:	695b      	ldr	r3, [r3, #20]
 8003a90:	6153      	str	r3, [r2, #20]

  /* Specifies the blending factors */
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
 8003a92:	68fb      	ldr	r3, [r7, #12]
 8003a94:	681b      	ldr	r3, [r3, #0]
 8003a96:	461a      	mov	r2, r3
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	01db      	lsls	r3, r3, #7
 8003a9c:	4413      	add	r3, r2
 8003a9e:	3384      	adds	r3, #132	@ 0x84
 8003aa0:	69db      	ldr	r3, [r3, #28]
 8003aa2:	68fa      	ldr	r2, [r7, #12]
 8003aa4:	6812      	ldr	r2, [r2, #0]
 8003aa6:	4611      	mov	r1, r2
 8003aa8:	687a      	ldr	r2, [r7, #4]
 8003aaa:	01d2      	lsls	r2, r2, #7
 8003aac:	440a      	add	r2, r1
 8003aae:	3284      	adds	r2, #132	@ 0x84
 8003ab0:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 8003ab4:	f023 0307 	bic.w	r3, r3, #7
 8003ab8:	61d3      	str	r3, [r2, #28]
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);
 8003aba:	68bb      	ldr	r3, [r7, #8]
 8003abc:	69da      	ldr	r2, [r3, #28]
 8003abe:	68bb      	ldr	r3, [r7, #8]
 8003ac0:	6a1b      	ldr	r3, [r3, #32]
 8003ac2:	68f9      	ldr	r1, [r7, #12]
 8003ac4:	6809      	ldr	r1, [r1, #0]
 8003ac6:	4608      	mov	r0, r1
 8003ac8:	6879      	ldr	r1, [r7, #4]
 8003aca:	01c9      	lsls	r1, r1, #7
 8003acc:	4401      	add	r1, r0
 8003ace:	3184      	adds	r1, #132	@ 0x84
 8003ad0:	4313      	orrs	r3, r2
 8003ad2:	61cb      	str	r3, [r1, #28]

  /* Configure the color frame buffer start address */
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR &= ~(LTDC_LxCFBAR_CFBADD);
 8003ad4:	68fb      	ldr	r3, [r7, #12]
 8003ad6:	681b      	ldr	r3, [r3, #0]
 8003ad8:	461a      	mov	r2, r3
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	01db      	lsls	r3, r3, #7
 8003ade:	4413      	add	r3, r2
 8003ae0:	3384      	adds	r3, #132	@ 0x84
 8003ae2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003ae4:	68fb      	ldr	r3, [r7, #12]
 8003ae6:	681b      	ldr	r3, [r3, #0]
 8003ae8:	461a      	mov	r2, r3
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	01db      	lsls	r3, r3, #7
 8003aee:	4413      	add	r3, r2
 8003af0:	3384      	adds	r3, #132	@ 0x84
 8003af2:	461a      	mov	r2, r3
 8003af4:	2300      	movs	r3, #0
 8003af6:	6293      	str	r3, [r2, #40]	@ 0x28
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR = (pLayerCfg->FBStartAdress);
 8003af8:	68fb      	ldr	r3, [r7, #12]
 8003afa:	681b      	ldr	r3, [r3, #0]
 8003afc:	461a      	mov	r2, r3
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	01db      	lsls	r3, r3, #7
 8003b02:	4413      	add	r3, r2
 8003b04:	3384      	adds	r3, #132	@ 0x84
 8003b06:	461a      	mov	r2, r3
 8003b08:	68bb      	ldr	r3, [r7, #8]
 8003b0a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003b0c:	6293      	str	r3, [r2, #40]	@ 0x28

  if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 8003b0e:	68bb      	ldr	r3, [r7, #8]
 8003b10:	691b      	ldr	r3, [r3, #16]
 8003b12:	2b00      	cmp	r3, #0
 8003b14:	d102      	bne.n	8003b1c <LTDC_SetConfig+0x234>
  {
    tmp = 4U;
 8003b16:	2304      	movs	r3, #4
 8003b18:	61fb      	str	r3, [r7, #28]
 8003b1a:	e01b      	b.n	8003b54 <LTDC_SetConfig+0x26c>
  }
  else if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB888)
 8003b1c:	68bb      	ldr	r3, [r7, #8]
 8003b1e:	691b      	ldr	r3, [r3, #16]
 8003b20:	2b01      	cmp	r3, #1
 8003b22:	d102      	bne.n	8003b2a <LTDC_SetConfig+0x242>
  {
    tmp = 3U;
 8003b24:	2303      	movs	r3, #3
 8003b26:	61fb      	str	r3, [r7, #28]
 8003b28:	e014      	b.n	8003b54 <LTDC_SetConfig+0x26c>
  }
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 8003b2a:	68bb      	ldr	r3, [r7, #8]
 8003b2c:	691b      	ldr	r3, [r3, #16]
 8003b2e:	2b04      	cmp	r3, #4
 8003b30:	d00b      	beq.n	8003b4a <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 8003b32:	68bb      	ldr	r3, [r7, #8]
 8003b34:	691b      	ldr	r3, [r3, #16]
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 8003b36:	2b02      	cmp	r3, #2
 8003b38:	d007      	beq.n	8003b4a <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 8003b3a:	68bb      	ldr	r3, [r7, #8]
 8003b3c:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 8003b3e:	2b03      	cmp	r3, #3
 8003b40:	d003      	beq.n	8003b4a <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_AL88))
 8003b42:	68bb      	ldr	r3, [r7, #8]
 8003b44:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 8003b46:	2b07      	cmp	r3, #7
 8003b48:	d102      	bne.n	8003b50 <LTDC_SetConfig+0x268>
  {
    tmp = 2U;
 8003b4a:	2302      	movs	r3, #2
 8003b4c:	61fb      	str	r3, [r7, #28]
 8003b4e:	e001      	b.n	8003b54 <LTDC_SetConfig+0x26c>
  }
  else
  {
    tmp = 1U;
 8003b50:	2301      	movs	r3, #1
 8003b52:	61fb      	str	r3, [r7, #28]
  }

  /* Configure the color frame buffer pitch in byte */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 8003b54:	68fb      	ldr	r3, [r7, #12]
 8003b56:	681b      	ldr	r3, [r3, #0]
 8003b58:	461a      	mov	r2, r3
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	01db      	lsls	r3, r3, #7
 8003b5e:	4413      	add	r3, r2
 8003b60:	3384      	adds	r3, #132	@ 0x84
 8003b62:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003b64:	68fa      	ldr	r2, [r7, #12]
 8003b66:	6812      	ldr	r2, [r2, #0]
 8003b68:	4611      	mov	r1, r2
 8003b6a:	687a      	ldr	r2, [r7, #4]
 8003b6c:	01d2      	lsls	r2, r2, #7
 8003b6e:	440a      	add	r2, r1
 8003b70:	3284      	adds	r2, #132	@ 0x84
 8003b72:	f003 23e0 	and.w	r3, r3, #3758153728	@ 0xe000e000
 8003b76:	62d3      	str	r3, [r2, #44]	@ 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | \
 8003b78:	68bb      	ldr	r3, [r7, #8]
 8003b7a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003b7c:	69fa      	ldr	r2, [r7, #28]
 8003b7e:	fb02 f303 	mul.w	r3, r2, r3
 8003b82:	041a      	lsls	r2, r3, #16
                                         (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 3U));
 8003b84:	68bb      	ldr	r3, [r7, #8]
 8003b86:	6859      	ldr	r1, [r3, #4]
 8003b88:	68bb      	ldr	r3, [r7, #8]
 8003b8a:	681b      	ldr	r3, [r3, #0]
 8003b8c:	1acb      	subs	r3, r1, r3
 8003b8e:	69f9      	ldr	r1, [r7, #28]
 8003b90:	fb01 f303 	mul.w	r3, r1, r3
 8003b94:	3303      	adds	r3, #3
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | \
 8003b96:	68f9      	ldr	r1, [r7, #12]
 8003b98:	6809      	ldr	r1, [r1, #0]
 8003b9a:	4608      	mov	r0, r1
 8003b9c:	6879      	ldr	r1, [r7, #4]
 8003b9e:	01c9      	lsls	r1, r1, #7
 8003ba0:	4401      	add	r1, r0
 8003ba2:	3184      	adds	r1, #132	@ 0x84
 8003ba4:	4313      	orrs	r3, r2
 8003ba6:	62cb      	str	r3, [r1, #44]	@ 0x2c
  /* Configure the frame buffer line number */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
 8003ba8:	68fb      	ldr	r3, [r7, #12]
 8003baa:	681b      	ldr	r3, [r3, #0]
 8003bac:	461a      	mov	r2, r3
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	01db      	lsls	r3, r3, #7
 8003bb2:	4413      	add	r3, r2
 8003bb4:	3384      	adds	r3, #132	@ 0x84
 8003bb6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003bb8:	68fa      	ldr	r2, [r7, #12]
 8003bba:	6812      	ldr	r2, [r2, #0]
 8003bbc:	4611      	mov	r1, r2
 8003bbe:	687a      	ldr	r2, [r7, #4]
 8003bc0:	01d2      	lsls	r2, r2, #7
 8003bc2:	440a      	add	r2, r1
 8003bc4:	3284      	adds	r2, #132	@ 0x84
 8003bc6:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 8003bca:	f023 0307 	bic.w	r3, r3, #7
 8003bce:	6313      	str	r3, [r2, #48]	@ 0x30
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 8003bd0:	68fb      	ldr	r3, [r7, #12]
 8003bd2:	681b      	ldr	r3, [r3, #0]
 8003bd4:	461a      	mov	r2, r3
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	01db      	lsls	r3, r3, #7
 8003bda:	4413      	add	r3, r2
 8003bdc:	3384      	adds	r3, #132	@ 0x84
 8003bde:	461a      	mov	r2, r3
 8003be0:	68bb      	ldr	r3, [r7, #8]
 8003be2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003be4:	6313      	str	r3, [r2, #48]	@ 0x30

  /* Enable LTDC_Layer by setting LEN bit */
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_LEN;
 8003be6:	68fb      	ldr	r3, [r7, #12]
 8003be8:	681b      	ldr	r3, [r3, #0]
 8003bea:	461a      	mov	r2, r3
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	01db      	lsls	r3, r3, #7
 8003bf0:	4413      	add	r3, r2
 8003bf2:	3384      	adds	r3, #132	@ 0x84
 8003bf4:	681b      	ldr	r3, [r3, #0]
 8003bf6:	68fa      	ldr	r2, [r7, #12]
 8003bf8:	6812      	ldr	r2, [r2, #0]
 8003bfa:	4611      	mov	r1, r2
 8003bfc:	687a      	ldr	r2, [r7, #4]
 8003bfe:	01d2      	lsls	r2, r2, #7
 8003c00:	440a      	add	r2, r1
 8003c02:	3284      	adds	r2, #132	@ 0x84
 8003c04:	f043 0301 	orr.w	r3, r3, #1
 8003c08:	6013      	str	r3, [r2, #0]
}
 8003c0a:	bf00      	nop
 8003c0c:	3724      	adds	r7, #36	@ 0x24
 8003c0e:	46bd      	mov	sp, r7
 8003c10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c14:	4770      	bx	lr
	...

08003c18 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8003c18:	b580      	push	{r7, lr}
 8003c1a:	b082      	sub	sp, #8
 8003c1c:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 8003c1e:	2300      	movs	r3, #0
 8003c20:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8003c22:	2300      	movs	r3, #0
 8003c24:	603b      	str	r3, [r7, #0]
 8003c26:	4b20      	ldr	r3, [pc, #128]	@ (8003ca8 <HAL_PWREx_EnableOverDrive+0x90>)
 8003c28:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003c2a:	4a1f      	ldr	r2, [pc, #124]	@ (8003ca8 <HAL_PWREx_EnableOverDrive+0x90>)
 8003c2c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003c30:	6413      	str	r3, [r2, #64]	@ 0x40
 8003c32:	4b1d      	ldr	r3, [pc, #116]	@ (8003ca8 <HAL_PWREx_EnableOverDrive+0x90>)
 8003c34:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003c36:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003c3a:	603b      	str	r3, [r7, #0]
 8003c3c:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8003c3e:	4b1b      	ldr	r3, [pc, #108]	@ (8003cac <HAL_PWREx_EnableOverDrive+0x94>)
 8003c40:	2201      	movs	r2, #1
 8003c42:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003c44:	f7fe fbd8 	bl	80023f8 <HAL_GetTick>
 8003c48:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8003c4a:	e009      	b.n	8003c60 <HAL_PWREx_EnableOverDrive+0x48>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8003c4c:	f7fe fbd4 	bl	80023f8 <HAL_GetTick>
 8003c50:	4602      	mov	r2, r0
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	1ad3      	subs	r3, r2, r3
 8003c56:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8003c5a:	d901      	bls.n	8003c60 <HAL_PWREx_EnableOverDrive+0x48>
    {
      return HAL_TIMEOUT;
 8003c5c:	2303      	movs	r3, #3
 8003c5e:	e01f      	b.n	8003ca0 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8003c60:	4b13      	ldr	r3, [pc, #76]	@ (8003cb0 <HAL_PWREx_EnableOverDrive+0x98>)
 8003c62:	685b      	ldr	r3, [r3, #4]
 8003c64:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003c68:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003c6c:	d1ee      	bne.n	8003c4c <HAL_PWREx_EnableOverDrive+0x34>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8003c6e:	4b11      	ldr	r3, [pc, #68]	@ (8003cb4 <HAL_PWREx_EnableOverDrive+0x9c>)
 8003c70:	2201      	movs	r2, #1
 8003c72:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003c74:	f7fe fbc0 	bl	80023f8 <HAL_GetTick>
 8003c78:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8003c7a:	e009      	b.n	8003c90 <HAL_PWREx_EnableOverDrive+0x78>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8003c7c:	f7fe fbbc 	bl	80023f8 <HAL_GetTick>
 8003c80:	4602      	mov	r2, r0
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	1ad3      	subs	r3, r2, r3
 8003c86:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8003c8a:	d901      	bls.n	8003c90 <HAL_PWREx_EnableOverDrive+0x78>
    {
      return HAL_TIMEOUT;
 8003c8c:	2303      	movs	r3, #3
 8003c8e:	e007      	b.n	8003ca0 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8003c90:	4b07      	ldr	r3, [pc, #28]	@ (8003cb0 <HAL_PWREx_EnableOverDrive+0x98>)
 8003c92:	685b      	ldr	r3, [r3, #4]
 8003c94:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003c98:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8003c9c:	d1ee      	bne.n	8003c7c <HAL_PWREx_EnableOverDrive+0x64>
    }
  } 
  return HAL_OK;
 8003c9e:	2300      	movs	r3, #0
}
 8003ca0:	4618      	mov	r0, r3
 8003ca2:	3708      	adds	r7, #8
 8003ca4:	46bd      	mov	sp, r7
 8003ca6:	bd80      	pop	{r7, pc}
 8003ca8:	40023800 	.word	0x40023800
 8003cac:	420e0040 	.word	0x420e0040
 8003cb0:	40007000 	.word	0x40007000
 8003cb4:	420e0044 	.word	0x420e0044

08003cb8 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003cb8:	b580      	push	{r7, lr}
 8003cba:	b086      	sub	sp, #24
 8003cbc:	af00      	add	r7, sp, #0
 8003cbe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	2b00      	cmp	r3, #0
 8003cc4:	d101      	bne.n	8003cca <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003cc6:	2301      	movs	r3, #1
 8003cc8:	e267      	b.n	800419a <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	681b      	ldr	r3, [r3, #0]
 8003cce:	f003 0301 	and.w	r3, r3, #1
 8003cd2:	2b00      	cmp	r3, #0
 8003cd4:	d075      	beq.n	8003dc2 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8003cd6:	4b88      	ldr	r3, [pc, #544]	@ (8003ef8 <HAL_RCC_OscConfig+0x240>)
 8003cd8:	689b      	ldr	r3, [r3, #8]
 8003cda:	f003 030c 	and.w	r3, r3, #12
 8003cde:	2b04      	cmp	r3, #4
 8003ce0:	d00c      	beq.n	8003cfc <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003ce2:	4b85      	ldr	r3, [pc, #532]	@ (8003ef8 <HAL_RCC_OscConfig+0x240>)
 8003ce4:	689b      	ldr	r3, [r3, #8]
 8003ce6:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8003cea:	2b08      	cmp	r3, #8
 8003cec:	d112      	bne.n	8003d14 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003cee:	4b82      	ldr	r3, [pc, #520]	@ (8003ef8 <HAL_RCC_OscConfig+0x240>)
 8003cf0:	685b      	ldr	r3, [r3, #4]
 8003cf2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003cf6:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003cfa:	d10b      	bne.n	8003d14 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003cfc:	4b7e      	ldr	r3, [pc, #504]	@ (8003ef8 <HAL_RCC_OscConfig+0x240>)
 8003cfe:	681b      	ldr	r3, [r3, #0]
 8003d00:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003d04:	2b00      	cmp	r3, #0
 8003d06:	d05b      	beq.n	8003dc0 <HAL_RCC_OscConfig+0x108>
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	685b      	ldr	r3, [r3, #4]
 8003d0c:	2b00      	cmp	r3, #0
 8003d0e:	d157      	bne.n	8003dc0 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003d10:	2301      	movs	r3, #1
 8003d12:	e242      	b.n	800419a <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	685b      	ldr	r3, [r3, #4]
 8003d18:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003d1c:	d106      	bne.n	8003d2c <HAL_RCC_OscConfig+0x74>
 8003d1e:	4b76      	ldr	r3, [pc, #472]	@ (8003ef8 <HAL_RCC_OscConfig+0x240>)
 8003d20:	681b      	ldr	r3, [r3, #0]
 8003d22:	4a75      	ldr	r2, [pc, #468]	@ (8003ef8 <HAL_RCC_OscConfig+0x240>)
 8003d24:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003d28:	6013      	str	r3, [r2, #0]
 8003d2a:	e01d      	b.n	8003d68 <HAL_RCC_OscConfig+0xb0>
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	685b      	ldr	r3, [r3, #4]
 8003d30:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003d34:	d10c      	bne.n	8003d50 <HAL_RCC_OscConfig+0x98>
 8003d36:	4b70      	ldr	r3, [pc, #448]	@ (8003ef8 <HAL_RCC_OscConfig+0x240>)
 8003d38:	681b      	ldr	r3, [r3, #0]
 8003d3a:	4a6f      	ldr	r2, [pc, #444]	@ (8003ef8 <HAL_RCC_OscConfig+0x240>)
 8003d3c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003d40:	6013      	str	r3, [r2, #0]
 8003d42:	4b6d      	ldr	r3, [pc, #436]	@ (8003ef8 <HAL_RCC_OscConfig+0x240>)
 8003d44:	681b      	ldr	r3, [r3, #0]
 8003d46:	4a6c      	ldr	r2, [pc, #432]	@ (8003ef8 <HAL_RCC_OscConfig+0x240>)
 8003d48:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003d4c:	6013      	str	r3, [r2, #0]
 8003d4e:	e00b      	b.n	8003d68 <HAL_RCC_OscConfig+0xb0>
 8003d50:	4b69      	ldr	r3, [pc, #420]	@ (8003ef8 <HAL_RCC_OscConfig+0x240>)
 8003d52:	681b      	ldr	r3, [r3, #0]
 8003d54:	4a68      	ldr	r2, [pc, #416]	@ (8003ef8 <HAL_RCC_OscConfig+0x240>)
 8003d56:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003d5a:	6013      	str	r3, [r2, #0]
 8003d5c:	4b66      	ldr	r3, [pc, #408]	@ (8003ef8 <HAL_RCC_OscConfig+0x240>)
 8003d5e:	681b      	ldr	r3, [r3, #0]
 8003d60:	4a65      	ldr	r2, [pc, #404]	@ (8003ef8 <HAL_RCC_OscConfig+0x240>)
 8003d62:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003d66:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	685b      	ldr	r3, [r3, #4]
 8003d6c:	2b00      	cmp	r3, #0
 8003d6e:	d013      	beq.n	8003d98 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003d70:	f7fe fb42 	bl	80023f8 <HAL_GetTick>
 8003d74:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003d76:	e008      	b.n	8003d8a <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003d78:	f7fe fb3e 	bl	80023f8 <HAL_GetTick>
 8003d7c:	4602      	mov	r2, r0
 8003d7e:	693b      	ldr	r3, [r7, #16]
 8003d80:	1ad3      	subs	r3, r2, r3
 8003d82:	2b64      	cmp	r3, #100	@ 0x64
 8003d84:	d901      	bls.n	8003d8a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003d86:	2303      	movs	r3, #3
 8003d88:	e207      	b.n	800419a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003d8a:	4b5b      	ldr	r3, [pc, #364]	@ (8003ef8 <HAL_RCC_OscConfig+0x240>)
 8003d8c:	681b      	ldr	r3, [r3, #0]
 8003d8e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003d92:	2b00      	cmp	r3, #0
 8003d94:	d0f0      	beq.n	8003d78 <HAL_RCC_OscConfig+0xc0>
 8003d96:	e014      	b.n	8003dc2 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003d98:	f7fe fb2e 	bl	80023f8 <HAL_GetTick>
 8003d9c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003d9e:	e008      	b.n	8003db2 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003da0:	f7fe fb2a 	bl	80023f8 <HAL_GetTick>
 8003da4:	4602      	mov	r2, r0
 8003da6:	693b      	ldr	r3, [r7, #16]
 8003da8:	1ad3      	subs	r3, r2, r3
 8003daa:	2b64      	cmp	r3, #100	@ 0x64
 8003dac:	d901      	bls.n	8003db2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003dae:	2303      	movs	r3, #3
 8003db0:	e1f3      	b.n	800419a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003db2:	4b51      	ldr	r3, [pc, #324]	@ (8003ef8 <HAL_RCC_OscConfig+0x240>)
 8003db4:	681b      	ldr	r3, [r3, #0]
 8003db6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003dba:	2b00      	cmp	r3, #0
 8003dbc:	d1f0      	bne.n	8003da0 <HAL_RCC_OscConfig+0xe8>
 8003dbe:	e000      	b.n	8003dc2 <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003dc0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	681b      	ldr	r3, [r3, #0]
 8003dc6:	f003 0302 	and.w	r3, r3, #2
 8003dca:	2b00      	cmp	r3, #0
 8003dcc:	d063      	beq.n	8003e96 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8003dce:	4b4a      	ldr	r3, [pc, #296]	@ (8003ef8 <HAL_RCC_OscConfig+0x240>)
 8003dd0:	689b      	ldr	r3, [r3, #8]
 8003dd2:	f003 030c 	and.w	r3, r3, #12
 8003dd6:	2b00      	cmp	r3, #0
 8003dd8:	d00b      	beq.n	8003df2 <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003dda:	4b47      	ldr	r3, [pc, #284]	@ (8003ef8 <HAL_RCC_OscConfig+0x240>)
 8003ddc:	689b      	ldr	r3, [r3, #8]
 8003dde:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8003de2:	2b08      	cmp	r3, #8
 8003de4:	d11c      	bne.n	8003e20 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003de6:	4b44      	ldr	r3, [pc, #272]	@ (8003ef8 <HAL_RCC_OscConfig+0x240>)
 8003de8:	685b      	ldr	r3, [r3, #4]
 8003dea:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003dee:	2b00      	cmp	r3, #0
 8003df0:	d116      	bne.n	8003e20 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003df2:	4b41      	ldr	r3, [pc, #260]	@ (8003ef8 <HAL_RCC_OscConfig+0x240>)
 8003df4:	681b      	ldr	r3, [r3, #0]
 8003df6:	f003 0302 	and.w	r3, r3, #2
 8003dfa:	2b00      	cmp	r3, #0
 8003dfc:	d005      	beq.n	8003e0a <HAL_RCC_OscConfig+0x152>
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	68db      	ldr	r3, [r3, #12]
 8003e02:	2b01      	cmp	r3, #1
 8003e04:	d001      	beq.n	8003e0a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8003e06:	2301      	movs	r3, #1
 8003e08:	e1c7      	b.n	800419a <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003e0a:	4b3b      	ldr	r3, [pc, #236]	@ (8003ef8 <HAL_RCC_OscConfig+0x240>)
 8003e0c:	681b      	ldr	r3, [r3, #0]
 8003e0e:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	691b      	ldr	r3, [r3, #16]
 8003e16:	00db      	lsls	r3, r3, #3
 8003e18:	4937      	ldr	r1, [pc, #220]	@ (8003ef8 <HAL_RCC_OscConfig+0x240>)
 8003e1a:	4313      	orrs	r3, r2
 8003e1c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003e1e:	e03a      	b.n	8003e96 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	68db      	ldr	r3, [r3, #12]
 8003e24:	2b00      	cmp	r3, #0
 8003e26:	d020      	beq.n	8003e6a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003e28:	4b34      	ldr	r3, [pc, #208]	@ (8003efc <HAL_RCC_OscConfig+0x244>)
 8003e2a:	2201      	movs	r2, #1
 8003e2c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003e2e:	f7fe fae3 	bl	80023f8 <HAL_GetTick>
 8003e32:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003e34:	e008      	b.n	8003e48 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003e36:	f7fe fadf 	bl	80023f8 <HAL_GetTick>
 8003e3a:	4602      	mov	r2, r0
 8003e3c:	693b      	ldr	r3, [r7, #16]
 8003e3e:	1ad3      	subs	r3, r2, r3
 8003e40:	2b02      	cmp	r3, #2
 8003e42:	d901      	bls.n	8003e48 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003e44:	2303      	movs	r3, #3
 8003e46:	e1a8      	b.n	800419a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003e48:	4b2b      	ldr	r3, [pc, #172]	@ (8003ef8 <HAL_RCC_OscConfig+0x240>)
 8003e4a:	681b      	ldr	r3, [r3, #0]
 8003e4c:	f003 0302 	and.w	r3, r3, #2
 8003e50:	2b00      	cmp	r3, #0
 8003e52:	d0f0      	beq.n	8003e36 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003e54:	4b28      	ldr	r3, [pc, #160]	@ (8003ef8 <HAL_RCC_OscConfig+0x240>)
 8003e56:	681b      	ldr	r3, [r3, #0]
 8003e58:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	691b      	ldr	r3, [r3, #16]
 8003e60:	00db      	lsls	r3, r3, #3
 8003e62:	4925      	ldr	r1, [pc, #148]	@ (8003ef8 <HAL_RCC_OscConfig+0x240>)
 8003e64:	4313      	orrs	r3, r2
 8003e66:	600b      	str	r3, [r1, #0]
 8003e68:	e015      	b.n	8003e96 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003e6a:	4b24      	ldr	r3, [pc, #144]	@ (8003efc <HAL_RCC_OscConfig+0x244>)
 8003e6c:	2200      	movs	r2, #0
 8003e6e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003e70:	f7fe fac2 	bl	80023f8 <HAL_GetTick>
 8003e74:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003e76:	e008      	b.n	8003e8a <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003e78:	f7fe fabe 	bl	80023f8 <HAL_GetTick>
 8003e7c:	4602      	mov	r2, r0
 8003e7e:	693b      	ldr	r3, [r7, #16]
 8003e80:	1ad3      	subs	r3, r2, r3
 8003e82:	2b02      	cmp	r3, #2
 8003e84:	d901      	bls.n	8003e8a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8003e86:	2303      	movs	r3, #3
 8003e88:	e187      	b.n	800419a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003e8a:	4b1b      	ldr	r3, [pc, #108]	@ (8003ef8 <HAL_RCC_OscConfig+0x240>)
 8003e8c:	681b      	ldr	r3, [r3, #0]
 8003e8e:	f003 0302 	and.w	r3, r3, #2
 8003e92:	2b00      	cmp	r3, #0
 8003e94:	d1f0      	bne.n	8003e78 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	681b      	ldr	r3, [r3, #0]
 8003e9a:	f003 0308 	and.w	r3, r3, #8
 8003e9e:	2b00      	cmp	r3, #0
 8003ea0:	d036      	beq.n	8003f10 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	695b      	ldr	r3, [r3, #20]
 8003ea6:	2b00      	cmp	r3, #0
 8003ea8:	d016      	beq.n	8003ed8 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003eaa:	4b15      	ldr	r3, [pc, #84]	@ (8003f00 <HAL_RCC_OscConfig+0x248>)
 8003eac:	2201      	movs	r2, #1
 8003eae:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003eb0:	f7fe faa2 	bl	80023f8 <HAL_GetTick>
 8003eb4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003eb6:	e008      	b.n	8003eca <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003eb8:	f7fe fa9e 	bl	80023f8 <HAL_GetTick>
 8003ebc:	4602      	mov	r2, r0
 8003ebe:	693b      	ldr	r3, [r7, #16]
 8003ec0:	1ad3      	subs	r3, r2, r3
 8003ec2:	2b02      	cmp	r3, #2
 8003ec4:	d901      	bls.n	8003eca <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8003ec6:	2303      	movs	r3, #3
 8003ec8:	e167      	b.n	800419a <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003eca:	4b0b      	ldr	r3, [pc, #44]	@ (8003ef8 <HAL_RCC_OscConfig+0x240>)
 8003ecc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003ece:	f003 0302 	and.w	r3, r3, #2
 8003ed2:	2b00      	cmp	r3, #0
 8003ed4:	d0f0      	beq.n	8003eb8 <HAL_RCC_OscConfig+0x200>
 8003ed6:	e01b      	b.n	8003f10 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003ed8:	4b09      	ldr	r3, [pc, #36]	@ (8003f00 <HAL_RCC_OscConfig+0x248>)
 8003eda:	2200      	movs	r2, #0
 8003edc:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003ede:	f7fe fa8b 	bl	80023f8 <HAL_GetTick>
 8003ee2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003ee4:	e00e      	b.n	8003f04 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003ee6:	f7fe fa87 	bl	80023f8 <HAL_GetTick>
 8003eea:	4602      	mov	r2, r0
 8003eec:	693b      	ldr	r3, [r7, #16]
 8003eee:	1ad3      	subs	r3, r2, r3
 8003ef0:	2b02      	cmp	r3, #2
 8003ef2:	d907      	bls.n	8003f04 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003ef4:	2303      	movs	r3, #3
 8003ef6:	e150      	b.n	800419a <HAL_RCC_OscConfig+0x4e2>
 8003ef8:	40023800 	.word	0x40023800
 8003efc:	42470000 	.word	0x42470000
 8003f00:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003f04:	4b88      	ldr	r3, [pc, #544]	@ (8004128 <HAL_RCC_OscConfig+0x470>)
 8003f06:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003f08:	f003 0302 	and.w	r3, r3, #2
 8003f0c:	2b00      	cmp	r3, #0
 8003f0e:	d1ea      	bne.n	8003ee6 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	681b      	ldr	r3, [r3, #0]
 8003f14:	f003 0304 	and.w	r3, r3, #4
 8003f18:	2b00      	cmp	r3, #0
 8003f1a:	f000 8097 	beq.w	800404c <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003f1e:	2300      	movs	r3, #0
 8003f20:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003f22:	4b81      	ldr	r3, [pc, #516]	@ (8004128 <HAL_RCC_OscConfig+0x470>)
 8003f24:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003f26:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003f2a:	2b00      	cmp	r3, #0
 8003f2c:	d10f      	bne.n	8003f4e <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003f2e:	2300      	movs	r3, #0
 8003f30:	60bb      	str	r3, [r7, #8]
 8003f32:	4b7d      	ldr	r3, [pc, #500]	@ (8004128 <HAL_RCC_OscConfig+0x470>)
 8003f34:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003f36:	4a7c      	ldr	r2, [pc, #496]	@ (8004128 <HAL_RCC_OscConfig+0x470>)
 8003f38:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003f3c:	6413      	str	r3, [r2, #64]	@ 0x40
 8003f3e:	4b7a      	ldr	r3, [pc, #488]	@ (8004128 <HAL_RCC_OscConfig+0x470>)
 8003f40:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003f42:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003f46:	60bb      	str	r3, [r7, #8]
 8003f48:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003f4a:	2301      	movs	r3, #1
 8003f4c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003f4e:	4b77      	ldr	r3, [pc, #476]	@ (800412c <HAL_RCC_OscConfig+0x474>)
 8003f50:	681b      	ldr	r3, [r3, #0]
 8003f52:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003f56:	2b00      	cmp	r3, #0
 8003f58:	d118      	bne.n	8003f8c <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003f5a:	4b74      	ldr	r3, [pc, #464]	@ (800412c <HAL_RCC_OscConfig+0x474>)
 8003f5c:	681b      	ldr	r3, [r3, #0]
 8003f5e:	4a73      	ldr	r2, [pc, #460]	@ (800412c <HAL_RCC_OscConfig+0x474>)
 8003f60:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003f64:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003f66:	f7fe fa47 	bl	80023f8 <HAL_GetTick>
 8003f6a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003f6c:	e008      	b.n	8003f80 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003f6e:	f7fe fa43 	bl	80023f8 <HAL_GetTick>
 8003f72:	4602      	mov	r2, r0
 8003f74:	693b      	ldr	r3, [r7, #16]
 8003f76:	1ad3      	subs	r3, r2, r3
 8003f78:	2b02      	cmp	r3, #2
 8003f7a:	d901      	bls.n	8003f80 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8003f7c:	2303      	movs	r3, #3
 8003f7e:	e10c      	b.n	800419a <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003f80:	4b6a      	ldr	r3, [pc, #424]	@ (800412c <HAL_RCC_OscConfig+0x474>)
 8003f82:	681b      	ldr	r3, [r3, #0]
 8003f84:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003f88:	2b00      	cmp	r3, #0
 8003f8a:	d0f0      	beq.n	8003f6e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	689b      	ldr	r3, [r3, #8]
 8003f90:	2b01      	cmp	r3, #1
 8003f92:	d106      	bne.n	8003fa2 <HAL_RCC_OscConfig+0x2ea>
 8003f94:	4b64      	ldr	r3, [pc, #400]	@ (8004128 <HAL_RCC_OscConfig+0x470>)
 8003f96:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003f98:	4a63      	ldr	r2, [pc, #396]	@ (8004128 <HAL_RCC_OscConfig+0x470>)
 8003f9a:	f043 0301 	orr.w	r3, r3, #1
 8003f9e:	6713      	str	r3, [r2, #112]	@ 0x70
 8003fa0:	e01c      	b.n	8003fdc <HAL_RCC_OscConfig+0x324>
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	689b      	ldr	r3, [r3, #8]
 8003fa6:	2b05      	cmp	r3, #5
 8003fa8:	d10c      	bne.n	8003fc4 <HAL_RCC_OscConfig+0x30c>
 8003faa:	4b5f      	ldr	r3, [pc, #380]	@ (8004128 <HAL_RCC_OscConfig+0x470>)
 8003fac:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003fae:	4a5e      	ldr	r2, [pc, #376]	@ (8004128 <HAL_RCC_OscConfig+0x470>)
 8003fb0:	f043 0304 	orr.w	r3, r3, #4
 8003fb4:	6713      	str	r3, [r2, #112]	@ 0x70
 8003fb6:	4b5c      	ldr	r3, [pc, #368]	@ (8004128 <HAL_RCC_OscConfig+0x470>)
 8003fb8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003fba:	4a5b      	ldr	r2, [pc, #364]	@ (8004128 <HAL_RCC_OscConfig+0x470>)
 8003fbc:	f043 0301 	orr.w	r3, r3, #1
 8003fc0:	6713      	str	r3, [r2, #112]	@ 0x70
 8003fc2:	e00b      	b.n	8003fdc <HAL_RCC_OscConfig+0x324>
 8003fc4:	4b58      	ldr	r3, [pc, #352]	@ (8004128 <HAL_RCC_OscConfig+0x470>)
 8003fc6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003fc8:	4a57      	ldr	r2, [pc, #348]	@ (8004128 <HAL_RCC_OscConfig+0x470>)
 8003fca:	f023 0301 	bic.w	r3, r3, #1
 8003fce:	6713      	str	r3, [r2, #112]	@ 0x70
 8003fd0:	4b55      	ldr	r3, [pc, #340]	@ (8004128 <HAL_RCC_OscConfig+0x470>)
 8003fd2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003fd4:	4a54      	ldr	r2, [pc, #336]	@ (8004128 <HAL_RCC_OscConfig+0x470>)
 8003fd6:	f023 0304 	bic.w	r3, r3, #4
 8003fda:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	689b      	ldr	r3, [r3, #8]
 8003fe0:	2b00      	cmp	r3, #0
 8003fe2:	d015      	beq.n	8004010 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003fe4:	f7fe fa08 	bl	80023f8 <HAL_GetTick>
 8003fe8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003fea:	e00a      	b.n	8004002 <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003fec:	f7fe fa04 	bl	80023f8 <HAL_GetTick>
 8003ff0:	4602      	mov	r2, r0
 8003ff2:	693b      	ldr	r3, [r7, #16]
 8003ff4:	1ad3      	subs	r3, r2, r3
 8003ff6:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003ffa:	4293      	cmp	r3, r2
 8003ffc:	d901      	bls.n	8004002 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8003ffe:	2303      	movs	r3, #3
 8004000:	e0cb      	b.n	800419a <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004002:	4b49      	ldr	r3, [pc, #292]	@ (8004128 <HAL_RCC_OscConfig+0x470>)
 8004004:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004006:	f003 0302 	and.w	r3, r3, #2
 800400a:	2b00      	cmp	r3, #0
 800400c:	d0ee      	beq.n	8003fec <HAL_RCC_OscConfig+0x334>
 800400e:	e014      	b.n	800403a <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004010:	f7fe f9f2 	bl	80023f8 <HAL_GetTick>
 8004014:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004016:	e00a      	b.n	800402e <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004018:	f7fe f9ee 	bl	80023f8 <HAL_GetTick>
 800401c:	4602      	mov	r2, r0
 800401e:	693b      	ldr	r3, [r7, #16]
 8004020:	1ad3      	subs	r3, r2, r3
 8004022:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004026:	4293      	cmp	r3, r2
 8004028:	d901      	bls.n	800402e <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800402a:	2303      	movs	r3, #3
 800402c:	e0b5      	b.n	800419a <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800402e:	4b3e      	ldr	r3, [pc, #248]	@ (8004128 <HAL_RCC_OscConfig+0x470>)
 8004030:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004032:	f003 0302 	and.w	r3, r3, #2
 8004036:	2b00      	cmp	r3, #0
 8004038:	d1ee      	bne.n	8004018 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800403a:	7dfb      	ldrb	r3, [r7, #23]
 800403c:	2b01      	cmp	r3, #1
 800403e:	d105      	bne.n	800404c <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004040:	4b39      	ldr	r3, [pc, #228]	@ (8004128 <HAL_RCC_OscConfig+0x470>)
 8004042:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004044:	4a38      	ldr	r2, [pc, #224]	@ (8004128 <HAL_RCC_OscConfig+0x470>)
 8004046:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800404a:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	699b      	ldr	r3, [r3, #24]
 8004050:	2b00      	cmp	r3, #0
 8004052:	f000 80a1 	beq.w	8004198 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004056:	4b34      	ldr	r3, [pc, #208]	@ (8004128 <HAL_RCC_OscConfig+0x470>)
 8004058:	689b      	ldr	r3, [r3, #8]
 800405a:	f003 030c 	and.w	r3, r3, #12
 800405e:	2b08      	cmp	r3, #8
 8004060:	d05c      	beq.n	800411c <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	699b      	ldr	r3, [r3, #24]
 8004066:	2b02      	cmp	r3, #2
 8004068:	d141      	bne.n	80040ee <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800406a:	4b31      	ldr	r3, [pc, #196]	@ (8004130 <HAL_RCC_OscConfig+0x478>)
 800406c:	2200      	movs	r2, #0
 800406e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004070:	f7fe f9c2 	bl	80023f8 <HAL_GetTick>
 8004074:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004076:	e008      	b.n	800408a <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004078:	f7fe f9be 	bl	80023f8 <HAL_GetTick>
 800407c:	4602      	mov	r2, r0
 800407e:	693b      	ldr	r3, [r7, #16]
 8004080:	1ad3      	subs	r3, r2, r3
 8004082:	2b02      	cmp	r3, #2
 8004084:	d901      	bls.n	800408a <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8004086:	2303      	movs	r3, #3
 8004088:	e087      	b.n	800419a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800408a:	4b27      	ldr	r3, [pc, #156]	@ (8004128 <HAL_RCC_OscConfig+0x470>)
 800408c:	681b      	ldr	r3, [r3, #0]
 800408e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004092:	2b00      	cmp	r3, #0
 8004094:	d1f0      	bne.n	8004078 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	69da      	ldr	r2, [r3, #28]
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	6a1b      	ldr	r3, [r3, #32]
 800409e:	431a      	orrs	r2, r3
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80040a4:	019b      	lsls	r3, r3, #6
 80040a6:	431a      	orrs	r2, r3
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80040ac:	085b      	lsrs	r3, r3, #1
 80040ae:	3b01      	subs	r3, #1
 80040b0:	041b      	lsls	r3, r3, #16
 80040b2:	431a      	orrs	r2, r3
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80040b8:	061b      	lsls	r3, r3, #24
 80040ba:	491b      	ldr	r1, [pc, #108]	@ (8004128 <HAL_RCC_OscConfig+0x470>)
 80040bc:	4313      	orrs	r3, r2
 80040be:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80040c0:	4b1b      	ldr	r3, [pc, #108]	@ (8004130 <HAL_RCC_OscConfig+0x478>)
 80040c2:	2201      	movs	r2, #1
 80040c4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80040c6:	f7fe f997 	bl	80023f8 <HAL_GetTick>
 80040ca:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80040cc:	e008      	b.n	80040e0 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80040ce:	f7fe f993 	bl	80023f8 <HAL_GetTick>
 80040d2:	4602      	mov	r2, r0
 80040d4:	693b      	ldr	r3, [r7, #16]
 80040d6:	1ad3      	subs	r3, r2, r3
 80040d8:	2b02      	cmp	r3, #2
 80040da:	d901      	bls.n	80040e0 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80040dc:	2303      	movs	r3, #3
 80040de:	e05c      	b.n	800419a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80040e0:	4b11      	ldr	r3, [pc, #68]	@ (8004128 <HAL_RCC_OscConfig+0x470>)
 80040e2:	681b      	ldr	r3, [r3, #0]
 80040e4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80040e8:	2b00      	cmp	r3, #0
 80040ea:	d0f0      	beq.n	80040ce <HAL_RCC_OscConfig+0x416>
 80040ec:	e054      	b.n	8004198 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80040ee:	4b10      	ldr	r3, [pc, #64]	@ (8004130 <HAL_RCC_OscConfig+0x478>)
 80040f0:	2200      	movs	r2, #0
 80040f2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80040f4:	f7fe f980 	bl	80023f8 <HAL_GetTick>
 80040f8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80040fa:	e008      	b.n	800410e <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80040fc:	f7fe f97c 	bl	80023f8 <HAL_GetTick>
 8004100:	4602      	mov	r2, r0
 8004102:	693b      	ldr	r3, [r7, #16]
 8004104:	1ad3      	subs	r3, r2, r3
 8004106:	2b02      	cmp	r3, #2
 8004108:	d901      	bls.n	800410e <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800410a:	2303      	movs	r3, #3
 800410c:	e045      	b.n	800419a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800410e:	4b06      	ldr	r3, [pc, #24]	@ (8004128 <HAL_RCC_OscConfig+0x470>)
 8004110:	681b      	ldr	r3, [r3, #0]
 8004112:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004116:	2b00      	cmp	r3, #0
 8004118:	d1f0      	bne.n	80040fc <HAL_RCC_OscConfig+0x444>
 800411a:	e03d      	b.n	8004198 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	699b      	ldr	r3, [r3, #24]
 8004120:	2b01      	cmp	r3, #1
 8004122:	d107      	bne.n	8004134 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8004124:	2301      	movs	r3, #1
 8004126:	e038      	b.n	800419a <HAL_RCC_OscConfig+0x4e2>
 8004128:	40023800 	.word	0x40023800
 800412c:	40007000 	.word	0x40007000
 8004130:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8004134:	4b1b      	ldr	r3, [pc, #108]	@ (80041a4 <HAL_RCC_OscConfig+0x4ec>)
 8004136:	685b      	ldr	r3, [r3, #4]
 8004138:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	699b      	ldr	r3, [r3, #24]
 800413e:	2b01      	cmp	r3, #1
 8004140:	d028      	beq.n	8004194 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004142:	68fb      	ldr	r3, [r7, #12]
 8004144:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800414c:	429a      	cmp	r2, r3
 800414e:	d121      	bne.n	8004194 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004150:	68fb      	ldr	r3, [r7, #12]
 8004152:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800415a:	429a      	cmp	r2, r3
 800415c:	d11a      	bne.n	8004194 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800415e:	68fa      	ldr	r2, [r7, #12]
 8004160:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8004164:	4013      	ands	r3, r2
 8004166:	687a      	ldr	r2, [r7, #4]
 8004168:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800416a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800416c:	4293      	cmp	r3, r2
 800416e:	d111      	bne.n	8004194 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004170:	68fb      	ldr	r3, [r7, #12]
 8004172:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800417a:	085b      	lsrs	r3, r3, #1
 800417c:	3b01      	subs	r3, #1
 800417e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004180:	429a      	cmp	r2, r3
 8004182:	d107      	bne.n	8004194 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8004184:	68fb      	ldr	r3, [r7, #12]
 8004186:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800418e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004190:	429a      	cmp	r2, r3
 8004192:	d001      	beq.n	8004198 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8004194:	2301      	movs	r3, #1
 8004196:	e000      	b.n	800419a <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8004198:	2300      	movs	r3, #0
}
 800419a:	4618      	mov	r0, r3
 800419c:	3718      	adds	r7, #24
 800419e:	46bd      	mov	sp, r7
 80041a0:	bd80      	pop	{r7, pc}
 80041a2:	bf00      	nop
 80041a4:	40023800 	.word	0x40023800

080041a8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80041a8:	b580      	push	{r7, lr}
 80041aa:	b084      	sub	sp, #16
 80041ac:	af00      	add	r7, sp, #0
 80041ae:	6078      	str	r0, [r7, #4]
 80041b0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	2b00      	cmp	r3, #0
 80041b6:	d101      	bne.n	80041bc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80041b8:	2301      	movs	r3, #1
 80041ba:	e0cc      	b.n	8004356 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80041bc:	4b68      	ldr	r3, [pc, #416]	@ (8004360 <HAL_RCC_ClockConfig+0x1b8>)
 80041be:	681b      	ldr	r3, [r3, #0]
 80041c0:	f003 030f 	and.w	r3, r3, #15
 80041c4:	683a      	ldr	r2, [r7, #0]
 80041c6:	429a      	cmp	r2, r3
 80041c8:	d90c      	bls.n	80041e4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80041ca:	4b65      	ldr	r3, [pc, #404]	@ (8004360 <HAL_RCC_ClockConfig+0x1b8>)
 80041cc:	683a      	ldr	r2, [r7, #0]
 80041ce:	b2d2      	uxtb	r2, r2
 80041d0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80041d2:	4b63      	ldr	r3, [pc, #396]	@ (8004360 <HAL_RCC_ClockConfig+0x1b8>)
 80041d4:	681b      	ldr	r3, [r3, #0]
 80041d6:	f003 030f 	and.w	r3, r3, #15
 80041da:	683a      	ldr	r2, [r7, #0]
 80041dc:	429a      	cmp	r2, r3
 80041de:	d001      	beq.n	80041e4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80041e0:	2301      	movs	r3, #1
 80041e2:	e0b8      	b.n	8004356 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	681b      	ldr	r3, [r3, #0]
 80041e8:	f003 0302 	and.w	r3, r3, #2
 80041ec:	2b00      	cmp	r3, #0
 80041ee:	d020      	beq.n	8004232 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	681b      	ldr	r3, [r3, #0]
 80041f4:	f003 0304 	and.w	r3, r3, #4
 80041f8:	2b00      	cmp	r3, #0
 80041fa:	d005      	beq.n	8004208 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80041fc:	4b59      	ldr	r3, [pc, #356]	@ (8004364 <HAL_RCC_ClockConfig+0x1bc>)
 80041fe:	689b      	ldr	r3, [r3, #8]
 8004200:	4a58      	ldr	r2, [pc, #352]	@ (8004364 <HAL_RCC_ClockConfig+0x1bc>)
 8004202:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8004206:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	681b      	ldr	r3, [r3, #0]
 800420c:	f003 0308 	and.w	r3, r3, #8
 8004210:	2b00      	cmp	r3, #0
 8004212:	d005      	beq.n	8004220 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004214:	4b53      	ldr	r3, [pc, #332]	@ (8004364 <HAL_RCC_ClockConfig+0x1bc>)
 8004216:	689b      	ldr	r3, [r3, #8]
 8004218:	4a52      	ldr	r2, [pc, #328]	@ (8004364 <HAL_RCC_ClockConfig+0x1bc>)
 800421a:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 800421e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004220:	4b50      	ldr	r3, [pc, #320]	@ (8004364 <HAL_RCC_ClockConfig+0x1bc>)
 8004222:	689b      	ldr	r3, [r3, #8]
 8004224:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	689b      	ldr	r3, [r3, #8]
 800422c:	494d      	ldr	r1, [pc, #308]	@ (8004364 <HAL_RCC_ClockConfig+0x1bc>)
 800422e:	4313      	orrs	r3, r2
 8004230:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	681b      	ldr	r3, [r3, #0]
 8004236:	f003 0301 	and.w	r3, r3, #1
 800423a:	2b00      	cmp	r3, #0
 800423c:	d044      	beq.n	80042c8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	685b      	ldr	r3, [r3, #4]
 8004242:	2b01      	cmp	r3, #1
 8004244:	d107      	bne.n	8004256 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004246:	4b47      	ldr	r3, [pc, #284]	@ (8004364 <HAL_RCC_ClockConfig+0x1bc>)
 8004248:	681b      	ldr	r3, [r3, #0]
 800424a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800424e:	2b00      	cmp	r3, #0
 8004250:	d119      	bne.n	8004286 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004252:	2301      	movs	r3, #1
 8004254:	e07f      	b.n	8004356 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	685b      	ldr	r3, [r3, #4]
 800425a:	2b02      	cmp	r3, #2
 800425c:	d003      	beq.n	8004266 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004262:	2b03      	cmp	r3, #3
 8004264:	d107      	bne.n	8004276 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004266:	4b3f      	ldr	r3, [pc, #252]	@ (8004364 <HAL_RCC_ClockConfig+0x1bc>)
 8004268:	681b      	ldr	r3, [r3, #0]
 800426a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800426e:	2b00      	cmp	r3, #0
 8004270:	d109      	bne.n	8004286 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004272:	2301      	movs	r3, #1
 8004274:	e06f      	b.n	8004356 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004276:	4b3b      	ldr	r3, [pc, #236]	@ (8004364 <HAL_RCC_ClockConfig+0x1bc>)
 8004278:	681b      	ldr	r3, [r3, #0]
 800427a:	f003 0302 	and.w	r3, r3, #2
 800427e:	2b00      	cmp	r3, #0
 8004280:	d101      	bne.n	8004286 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004282:	2301      	movs	r3, #1
 8004284:	e067      	b.n	8004356 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004286:	4b37      	ldr	r3, [pc, #220]	@ (8004364 <HAL_RCC_ClockConfig+0x1bc>)
 8004288:	689b      	ldr	r3, [r3, #8]
 800428a:	f023 0203 	bic.w	r2, r3, #3
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	685b      	ldr	r3, [r3, #4]
 8004292:	4934      	ldr	r1, [pc, #208]	@ (8004364 <HAL_RCC_ClockConfig+0x1bc>)
 8004294:	4313      	orrs	r3, r2
 8004296:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004298:	f7fe f8ae 	bl	80023f8 <HAL_GetTick>
 800429c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800429e:	e00a      	b.n	80042b6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80042a0:	f7fe f8aa 	bl	80023f8 <HAL_GetTick>
 80042a4:	4602      	mov	r2, r0
 80042a6:	68fb      	ldr	r3, [r7, #12]
 80042a8:	1ad3      	subs	r3, r2, r3
 80042aa:	f241 3288 	movw	r2, #5000	@ 0x1388
 80042ae:	4293      	cmp	r3, r2
 80042b0:	d901      	bls.n	80042b6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80042b2:	2303      	movs	r3, #3
 80042b4:	e04f      	b.n	8004356 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80042b6:	4b2b      	ldr	r3, [pc, #172]	@ (8004364 <HAL_RCC_ClockConfig+0x1bc>)
 80042b8:	689b      	ldr	r3, [r3, #8]
 80042ba:	f003 020c 	and.w	r2, r3, #12
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	685b      	ldr	r3, [r3, #4]
 80042c2:	009b      	lsls	r3, r3, #2
 80042c4:	429a      	cmp	r2, r3
 80042c6:	d1eb      	bne.n	80042a0 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80042c8:	4b25      	ldr	r3, [pc, #148]	@ (8004360 <HAL_RCC_ClockConfig+0x1b8>)
 80042ca:	681b      	ldr	r3, [r3, #0]
 80042cc:	f003 030f 	and.w	r3, r3, #15
 80042d0:	683a      	ldr	r2, [r7, #0]
 80042d2:	429a      	cmp	r2, r3
 80042d4:	d20c      	bcs.n	80042f0 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80042d6:	4b22      	ldr	r3, [pc, #136]	@ (8004360 <HAL_RCC_ClockConfig+0x1b8>)
 80042d8:	683a      	ldr	r2, [r7, #0]
 80042da:	b2d2      	uxtb	r2, r2
 80042dc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80042de:	4b20      	ldr	r3, [pc, #128]	@ (8004360 <HAL_RCC_ClockConfig+0x1b8>)
 80042e0:	681b      	ldr	r3, [r3, #0]
 80042e2:	f003 030f 	and.w	r3, r3, #15
 80042e6:	683a      	ldr	r2, [r7, #0]
 80042e8:	429a      	cmp	r2, r3
 80042ea:	d001      	beq.n	80042f0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80042ec:	2301      	movs	r3, #1
 80042ee:	e032      	b.n	8004356 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	681b      	ldr	r3, [r3, #0]
 80042f4:	f003 0304 	and.w	r3, r3, #4
 80042f8:	2b00      	cmp	r3, #0
 80042fa:	d008      	beq.n	800430e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80042fc:	4b19      	ldr	r3, [pc, #100]	@ (8004364 <HAL_RCC_ClockConfig+0x1bc>)
 80042fe:	689b      	ldr	r3, [r3, #8]
 8004300:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	68db      	ldr	r3, [r3, #12]
 8004308:	4916      	ldr	r1, [pc, #88]	@ (8004364 <HAL_RCC_ClockConfig+0x1bc>)
 800430a:	4313      	orrs	r3, r2
 800430c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	681b      	ldr	r3, [r3, #0]
 8004312:	f003 0308 	and.w	r3, r3, #8
 8004316:	2b00      	cmp	r3, #0
 8004318:	d009      	beq.n	800432e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800431a:	4b12      	ldr	r3, [pc, #72]	@ (8004364 <HAL_RCC_ClockConfig+0x1bc>)
 800431c:	689b      	ldr	r3, [r3, #8]
 800431e:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	691b      	ldr	r3, [r3, #16]
 8004326:	00db      	lsls	r3, r3, #3
 8004328:	490e      	ldr	r1, [pc, #56]	@ (8004364 <HAL_RCC_ClockConfig+0x1bc>)
 800432a:	4313      	orrs	r3, r2
 800432c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800432e:	f000 f821 	bl	8004374 <HAL_RCC_GetSysClockFreq>
 8004332:	4602      	mov	r2, r0
 8004334:	4b0b      	ldr	r3, [pc, #44]	@ (8004364 <HAL_RCC_ClockConfig+0x1bc>)
 8004336:	689b      	ldr	r3, [r3, #8]
 8004338:	091b      	lsrs	r3, r3, #4
 800433a:	f003 030f 	and.w	r3, r3, #15
 800433e:	490a      	ldr	r1, [pc, #40]	@ (8004368 <HAL_RCC_ClockConfig+0x1c0>)
 8004340:	5ccb      	ldrb	r3, [r1, r3]
 8004342:	fa22 f303 	lsr.w	r3, r2, r3
 8004346:	4a09      	ldr	r2, [pc, #36]	@ (800436c <HAL_RCC_ClockConfig+0x1c4>)
 8004348:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 800434a:	4b09      	ldr	r3, [pc, #36]	@ (8004370 <HAL_RCC_ClockConfig+0x1c8>)
 800434c:	681b      	ldr	r3, [r3, #0]
 800434e:	4618      	mov	r0, r3
 8004350:	f7fd ff34 	bl	80021bc <HAL_InitTick>

  return HAL_OK;
 8004354:	2300      	movs	r3, #0
}
 8004356:	4618      	mov	r0, r3
 8004358:	3710      	adds	r7, #16
 800435a:	46bd      	mov	sp, r7
 800435c:	bd80      	pop	{r7, pc}
 800435e:	bf00      	nop
 8004360:	40023c00 	.word	0x40023c00
 8004364:	40023800 	.word	0x40023800
 8004368:	08009828 	.word	0x08009828
 800436c:	20000048 	.word	0x20000048
 8004370:	2000004c 	.word	0x2000004c

08004374 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004374:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004378:	b094      	sub	sp, #80	@ 0x50
 800437a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 800437c:	2300      	movs	r3, #0
 800437e:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 8004380:	2300      	movs	r3, #0
 8004382:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 8004384:	2300      	movs	r3, #0
 8004386:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8004388:	2300      	movs	r3, #0
 800438a:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800438c:	4b79      	ldr	r3, [pc, #484]	@ (8004574 <HAL_RCC_GetSysClockFreq+0x200>)
 800438e:	689b      	ldr	r3, [r3, #8]
 8004390:	f003 030c 	and.w	r3, r3, #12
 8004394:	2b08      	cmp	r3, #8
 8004396:	d00d      	beq.n	80043b4 <HAL_RCC_GetSysClockFreq+0x40>
 8004398:	2b08      	cmp	r3, #8
 800439a:	f200 80e1 	bhi.w	8004560 <HAL_RCC_GetSysClockFreq+0x1ec>
 800439e:	2b00      	cmp	r3, #0
 80043a0:	d002      	beq.n	80043a8 <HAL_RCC_GetSysClockFreq+0x34>
 80043a2:	2b04      	cmp	r3, #4
 80043a4:	d003      	beq.n	80043ae <HAL_RCC_GetSysClockFreq+0x3a>
 80043a6:	e0db      	b.n	8004560 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80043a8:	4b73      	ldr	r3, [pc, #460]	@ (8004578 <HAL_RCC_GetSysClockFreq+0x204>)
 80043aa:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80043ac:	e0db      	b.n	8004566 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80043ae:	4b73      	ldr	r3, [pc, #460]	@ (800457c <HAL_RCC_GetSysClockFreq+0x208>)
 80043b0:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80043b2:	e0d8      	b.n	8004566 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80043b4:	4b6f      	ldr	r3, [pc, #444]	@ (8004574 <HAL_RCC_GetSysClockFreq+0x200>)
 80043b6:	685b      	ldr	r3, [r3, #4]
 80043b8:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80043bc:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80043be:	4b6d      	ldr	r3, [pc, #436]	@ (8004574 <HAL_RCC_GetSysClockFreq+0x200>)
 80043c0:	685b      	ldr	r3, [r3, #4]
 80043c2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80043c6:	2b00      	cmp	r3, #0
 80043c8:	d063      	beq.n	8004492 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80043ca:	4b6a      	ldr	r3, [pc, #424]	@ (8004574 <HAL_RCC_GetSysClockFreq+0x200>)
 80043cc:	685b      	ldr	r3, [r3, #4]
 80043ce:	099b      	lsrs	r3, r3, #6
 80043d0:	2200      	movs	r2, #0
 80043d2:	63bb      	str	r3, [r7, #56]	@ 0x38
 80043d4:	63fa      	str	r2, [r7, #60]	@ 0x3c
 80043d6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80043d8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80043dc:	633b      	str	r3, [r7, #48]	@ 0x30
 80043de:	2300      	movs	r3, #0
 80043e0:	637b      	str	r3, [r7, #52]	@ 0x34
 80043e2:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 80043e6:	4622      	mov	r2, r4
 80043e8:	462b      	mov	r3, r5
 80043ea:	f04f 0000 	mov.w	r0, #0
 80043ee:	f04f 0100 	mov.w	r1, #0
 80043f2:	0159      	lsls	r1, r3, #5
 80043f4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80043f8:	0150      	lsls	r0, r2, #5
 80043fa:	4602      	mov	r2, r0
 80043fc:	460b      	mov	r3, r1
 80043fe:	4621      	mov	r1, r4
 8004400:	1a51      	subs	r1, r2, r1
 8004402:	6139      	str	r1, [r7, #16]
 8004404:	4629      	mov	r1, r5
 8004406:	eb63 0301 	sbc.w	r3, r3, r1
 800440a:	617b      	str	r3, [r7, #20]
 800440c:	f04f 0200 	mov.w	r2, #0
 8004410:	f04f 0300 	mov.w	r3, #0
 8004414:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004418:	4659      	mov	r1, fp
 800441a:	018b      	lsls	r3, r1, #6
 800441c:	4651      	mov	r1, sl
 800441e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8004422:	4651      	mov	r1, sl
 8004424:	018a      	lsls	r2, r1, #6
 8004426:	4651      	mov	r1, sl
 8004428:	ebb2 0801 	subs.w	r8, r2, r1
 800442c:	4659      	mov	r1, fp
 800442e:	eb63 0901 	sbc.w	r9, r3, r1
 8004432:	f04f 0200 	mov.w	r2, #0
 8004436:	f04f 0300 	mov.w	r3, #0
 800443a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800443e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004442:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004446:	4690      	mov	r8, r2
 8004448:	4699      	mov	r9, r3
 800444a:	4623      	mov	r3, r4
 800444c:	eb18 0303 	adds.w	r3, r8, r3
 8004450:	60bb      	str	r3, [r7, #8]
 8004452:	462b      	mov	r3, r5
 8004454:	eb49 0303 	adc.w	r3, r9, r3
 8004458:	60fb      	str	r3, [r7, #12]
 800445a:	f04f 0200 	mov.w	r2, #0
 800445e:	f04f 0300 	mov.w	r3, #0
 8004462:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8004466:	4629      	mov	r1, r5
 8004468:	024b      	lsls	r3, r1, #9
 800446a:	4621      	mov	r1, r4
 800446c:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8004470:	4621      	mov	r1, r4
 8004472:	024a      	lsls	r2, r1, #9
 8004474:	4610      	mov	r0, r2
 8004476:	4619      	mov	r1, r3
 8004478:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800447a:	2200      	movs	r2, #0
 800447c:	62bb      	str	r3, [r7, #40]	@ 0x28
 800447e:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8004480:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8004484:	f7fb feb4 	bl	80001f0 <__aeabi_uldivmod>
 8004488:	4602      	mov	r2, r0
 800448a:	460b      	mov	r3, r1
 800448c:	4613      	mov	r3, r2
 800448e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004490:	e058      	b.n	8004544 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004492:	4b38      	ldr	r3, [pc, #224]	@ (8004574 <HAL_RCC_GetSysClockFreq+0x200>)
 8004494:	685b      	ldr	r3, [r3, #4]
 8004496:	099b      	lsrs	r3, r3, #6
 8004498:	2200      	movs	r2, #0
 800449a:	4618      	mov	r0, r3
 800449c:	4611      	mov	r1, r2
 800449e:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80044a2:	623b      	str	r3, [r7, #32]
 80044a4:	2300      	movs	r3, #0
 80044a6:	627b      	str	r3, [r7, #36]	@ 0x24
 80044a8:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80044ac:	4642      	mov	r2, r8
 80044ae:	464b      	mov	r3, r9
 80044b0:	f04f 0000 	mov.w	r0, #0
 80044b4:	f04f 0100 	mov.w	r1, #0
 80044b8:	0159      	lsls	r1, r3, #5
 80044ba:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80044be:	0150      	lsls	r0, r2, #5
 80044c0:	4602      	mov	r2, r0
 80044c2:	460b      	mov	r3, r1
 80044c4:	4641      	mov	r1, r8
 80044c6:	ebb2 0a01 	subs.w	sl, r2, r1
 80044ca:	4649      	mov	r1, r9
 80044cc:	eb63 0b01 	sbc.w	fp, r3, r1
 80044d0:	f04f 0200 	mov.w	r2, #0
 80044d4:	f04f 0300 	mov.w	r3, #0
 80044d8:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80044dc:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80044e0:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80044e4:	ebb2 040a 	subs.w	r4, r2, sl
 80044e8:	eb63 050b 	sbc.w	r5, r3, fp
 80044ec:	f04f 0200 	mov.w	r2, #0
 80044f0:	f04f 0300 	mov.w	r3, #0
 80044f4:	00eb      	lsls	r3, r5, #3
 80044f6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80044fa:	00e2      	lsls	r2, r4, #3
 80044fc:	4614      	mov	r4, r2
 80044fe:	461d      	mov	r5, r3
 8004500:	4643      	mov	r3, r8
 8004502:	18e3      	adds	r3, r4, r3
 8004504:	603b      	str	r3, [r7, #0]
 8004506:	464b      	mov	r3, r9
 8004508:	eb45 0303 	adc.w	r3, r5, r3
 800450c:	607b      	str	r3, [r7, #4]
 800450e:	f04f 0200 	mov.w	r2, #0
 8004512:	f04f 0300 	mov.w	r3, #0
 8004516:	e9d7 4500 	ldrd	r4, r5, [r7]
 800451a:	4629      	mov	r1, r5
 800451c:	028b      	lsls	r3, r1, #10
 800451e:	4621      	mov	r1, r4
 8004520:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004524:	4621      	mov	r1, r4
 8004526:	028a      	lsls	r2, r1, #10
 8004528:	4610      	mov	r0, r2
 800452a:	4619      	mov	r1, r3
 800452c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800452e:	2200      	movs	r2, #0
 8004530:	61bb      	str	r3, [r7, #24]
 8004532:	61fa      	str	r2, [r7, #28]
 8004534:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004538:	f7fb fe5a 	bl	80001f0 <__aeabi_uldivmod>
 800453c:	4602      	mov	r2, r0
 800453e:	460b      	mov	r3, r1
 8004540:	4613      	mov	r3, r2
 8004542:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8004544:	4b0b      	ldr	r3, [pc, #44]	@ (8004574 <HAL_RCC_GetSysClockFreq+0x200>)
 8004546:	685b      	ldr	r3, [r3, #4]
 8004548:	0c1b      	lsrs	r3, r3, #16
 800454a:	f003 0303 	and.w	r3, r3, #3
 800454e:	3301      	adds	r3, #1
 8004550:	005b      	lsls	r3, r3, #1
 8004552:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 8004554:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8004556:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004558:	fbb2 f3f3 	udiv	r3, r2, r3
 800455c:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800455e:	e002      	b.n	8004566 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004560:	4b05      	ldr	r3, [pc, #20]	@ (8004578 <HAL_RCC_GetSysClockFreq+0x204>)
 8004562:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8004564:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004566:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8004568:	4618      	mov	r0, r3
 800456a:	3750      	adds	r7, #80	@ 0x50
 800456c:	46bd      	mov	sp, r7
 800456e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004572:	bf00      	nop
 8004574:	40023800 	.word	0x40023800
 8004578:	00f42400 	.word	0x00f42400
 800457c:	007a1200 	.word	0x007a1200

08004580 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004580:	b480      	push	{r7}
 8004582:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004584:	4b03      	ldr	r3, [pc, #12]	@ (8004594 <HAL_RCC_GetHCLKFreq+0x14>)
 8004586:	681b      	ldr	r3, [r3, #0]
}
 8004588:	4618      	mov	r0, r3
 800458a:	46bd      	mov	sp, r7
 800458c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004590:	4770      	bx	lr
 8004592:	bf00      	nop
 8004594:	20000048 	.word	0x20000048

08004598 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004598:	b580      	push	{r7, lr}
 800459a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800459c:	f7ff fff0 	bl	8004580 <HAL_RCC_GetHCLKFreq>
 80045a0:	4602      	mov	r2, r0
 80045a2:	4b05      	ldr	r3, [pc, #20]	@ (80045b8 <HAL_RCC_GetPCLK1Freq+0x20>)
 80045a4:	689b      	ldr	r3, [r3, #8]
 80045a6:	0a9b      	lsrs	r3, r3, #10
 80045a8:	f003 0307 	and.w	r3, r3, #7
 80045ac:	4903      	ldr	r1, [pc, #12]	@ (80045bc <HAL_RCC_GetPCLK1Freq+0x24>)
 80045ae:	5ccb      	ldrb	r3, [r1, r3]
 80045b0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80045b4:	4618      	mov	r0, r3
 80045b6:	bd80      	pop	{r7, pc}
 80045b8:	40023800 	.word	0x40023800
 80045bc:	08009838 	.word	0x08009838

080045c0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80045c0:	b580      	push	{r7, lr}
 80045c2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80045c4:	f7ff ffdc 	bl	8004580 <HAL_RCC_GetHCLKFreq>
 80045c8:	4602      	mov	r2, r0
 80045ca:	4b05      	ldr	r3, [pc, #20]	@ (80045e0 <HAL_RCC_GetPCLK2Freq+0x20>)
 80045cc:	689b      	ldr	r3, [r3, #8]
 80045ce:	0b5b      	lsrs	r3, r3, #13
 80045d0:	f003 0307 	and.w	r3, r3, #7
 80045d4:	4903      	ldr	r1, [pc, #12]	@ (80045e4 <HAL_RCC_GetPCLK2Freq+0x24>)
 80045d6:	5ccb      	ldrb	r3, [r1, r3]
 80045d8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80045dc:	4618      	mov	r0, r3
 80045de:	bd80      	pop	{r7, pc}
 80045e0:	40023800 	.word	0x40023800
 80045e4:	08009838 	.word	0x08009838

080045e8 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80045e8:	b480      	push	{r7}
 80045ea:	b083      	sub	sp, #12
 80045ec:	af00      	add	r7, sp, #0
 80045ee:	6078      	str	r0, [r7, #4]
 80045f0:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	220f      	movs	r2, #15
 80045f6:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80045f8:	4b12      	ldr	r3, [pc, #72]	@ (8004644 <HAL_RCC_GetClockConfig+0x5c>)
 80045fa:	689b      	ldr	r3, [r3, #8]
 80045fc:	f003 0203 	and.w	r2, r3, #3
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8004604:	4b0f      	ldr	r3, [pc, #60]	@ (8004644 <HAL_RCC_GetClockConfig+0x5c>)
 8004606:	689b      	ldr	r3, [r3, #8]
 8004608:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8004610:	4b0c      	ldr	r3, [pc, #48]	@ (8004644 <HAL_RCC_GetClockConfig+0x5c>)
 8004612:	689b      	ldr	r3, [r3, #8]
 8004614:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 800461c:	4b09      	ldr	r3, [pc, #36]	@ (8004644 <HAL_RCC_GetClockConfig+0x5c>)
 800461e:	689b      	ldr	r3, [r3, #8]
 8004620:	08db      	lsrs	r3, r3, #3
 8004622:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800462a:	4b07      	ldr	r3, [pc, #28]	@ (8004648 <HAL_RCC_GetClockConfig+0x60>)
 800462c:	681b      	ldr	r3, [r3, #0]
 800462e:	f003 020f 	and.w	r2, r3, #15
 8004632:	683b      	ldr	r3, [r7, #0]
 8004634:	601a      	str	r2, [r3, #0]
}
 8004636:	bf00      	nop
 8004638:	370c      	adds	r7, #12
 800463a:	46bd      	mov	sp, r7
 800463c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004640:	4770      	bx	lr
 8004642:	bf00      	nop
 8004644:	40023800 	.word	0x40023800
 8004648:	40023c00 	.word	0x40023c00

0800464c <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800464c:	b580      	push	{r7, lr}
 800464e:	b086      	sub	sp, #24
 8004650:	af00      	add	r7, sp, #0
 8004652:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004654:	2300      	movs	r3, #0
 8004656:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8004658:	2300      	movs	r3, #0
 800465a:	613b      	str	r3, [r7, #16]

  /*----------------------- SAI/I2S Configuration (PLLI2S) -------------------*/
  /*----------------------- Common configuration SAI/I2S ---------------------*/
  /* In Case of SAI or I2S Clock Configuration through PLLI2S, PLLI2SN division
     factor is common parameters for both peripherals */
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	681b      	ldr	r3, [r3, #0]
 8004660:	f003 0301 	and.w	r3, r3, #1
 8004664:	2b00      	cmp	r3, #0
 8004666:	d10b      	bne.n	8004680 <HAL_RCCEx_PeriphCLKConfig+0x34>
      (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	681b      	ldr	r3, [r3, #0]
 800466c:	f003 0302 	and.w	r3, r3, #2
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8004670:	2b00      	cmp	r3, #0
 8004672:	d105      	bne.n	8004680 <HAL_RCCEx_PeriphCLKConfig+0x34>
      (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	681b      	ldr	r3, [r3, #0]
 8004678:	f003 0340 	and.w	r3, r3, #64	@ 0x40
      (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 800467c:	2b00      	cmp	r3, #0
 800467e:	d075      	beq.n	800476c <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    /* check for Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8004680:	4b91      	ldr	r3, [pc, #580]	@ (80048c8 <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 8004682:	2200      	movs	r2, #0
 8004684:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8004686:	f7fd feb7 	bl	80023f8 <HAL_GetTick>
 800468a:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800468c:	e008      	b.n	80046a0 <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
      if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 800468e:	f7fd feb3 	bl	80023f8 <HAL_GetTick>
 8004692:	4602      	mov	r2, r0
 8004694:	697b      	ldr	r3, [r7, #20]
 8004696:	1ad3      	subs	r3, r2, r3
 8004698:	2b02      	cmp	r3, #2
 800469a:	d901      	bls.n	80046a0 <HAL_RCCEx_PeriphCLKConfig+0x54>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800469c:	2303      	movs	r3, #3
 800469e:	e189      	b.n	80049b4 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80046a0:	4b8a      	ldr	r3, [pc, #552]	@ (80048cc <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80046a2:	681b      	ldr	r3, [r3, #0]
 80046a4:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80046a8:	2b00      	cmp	r3, #0
 80046aa:	d1f0      	bne.n	800468e <HAL_RCCEx_PeriphCLKConfig+0x42>
    }

    /*---------------------------- I2S configuration -------------------------*/
    /* In Case of I2S Clock Configuration through PLLI2S, PLLI2SR must be added
      only for I2S configuration */
    if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	681b      	ldr	r3, [r3, #0]
 80046b0:	f003 0301 	and.w	r3, r3, #1
 80046b4:	2b00      	cmp	r3, #0
 80046b6:	d009      	beq.n	80046cc <HAL_RCCEx_PeriphCLKConfig+0x80>
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	685b      	ldr	r3, [r3, #4]
 80046bc:	019a      	lsls	r2, r3, #6
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	689b      	ldr	r3, [r3, #8]
 80046c2:	071b      	lsls	r3, r3, #28
 80046c4:	4981      	ldr	r1, [pc, #516]	@ (80048cc <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80046c6:	4313      	orrs	r3, r2
 80046c8:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLI2S, PLLI2SQ and PLLI2S_DIVQ must
       be added only for SAI configuration */
    if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == (RCC_PERIPHCLK_SAI_PLLI2S))
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	681b      	ldr	r3, [r3, #0]
 80046d0:	f003 0302 	and.w	r3, r3, #2
 80046d4:	2b00      	cmp	r3, #0
 80046d6:	d01f      	beq.n	8004718 <HAL_RCCEx_PeriphCLKConfig+0xcc>
      /* Check the PLLI2S division factors */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SR value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80046d8:	4b7c      	ldr	r3, [pc, #496]	@ (80048cc <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80046da:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80046de:	0f1b      	lsrs	r3, r3, #28
 80046e0:	f003 0307 	and.w	r3, r3, #7
 80046e4:	613b      	str	r3, [r7, #16]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	685b      	ldr	r3, [r3, #4]
 80046ea:	019a      	lsls	r2, r3, #6
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	68db      	ldr	r3, [r3, #12]
 80046f0:	061b      	lsls	r3, r3, #24
 80046f2:	431a      	orrs	r2, r3
 80046f4:	693b      	ldr	r3, [r7, #16]
 80046f6:	071b      	lsls	r3, r3, #28
 80046f8:	4974      	ldr	r1, [pc, #464]	@ (80048cc <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80046fa:	4313      	orrs	r3, r2
 80046fc:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8004700:	4b72      	ldr	r3, [pc, #456]	@ (80048cc <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004702:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8004706:	f023 021f 	bic.w	r2, r3, #31
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	69db      	ldr	r3, [r3, #28]
 800470e:	3b01      	subs	r3, #1
 8004710:	496e      	ldr	r1, [pc, #440]	@ (80048cc <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004712:	4313      	orrs	r3, r2
 8004714:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	681b      	ldr	r3, [r3, #0]
 800471c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004720:	2b00      	cmp	r3, #0
 8004722:	d00d      	beq.n	8004740 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      /* Check for Parameters */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Configure the PLLI2S multiplication and division factors */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SQ,
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	685b      	ldr	r3, [r3, #4]
 8004728:	019a      	lsls	r2, r3, #6
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	68db      	ldr	r3, [r3, #12]
 800472e:	061b      	lsls	r3, r3, #24
 8004730:	431a      	orrs	r2, r3
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	689b      	ldr	r3, [r3, #8]
 8004736:	071b      	lsls	r3, r3, #28
 8004738:	4964      	ldr	r1, [pc, #400]	@ (80048cc <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800473a:	4313      	orrs	r3, r2
 800473c:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
                                     PeriphClkInit->PLLI2S.PLLI2SR);
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8004740:	4b61      	ldr	r3, [pc, #388]	@ (80048c8 <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 8004742:	2201      	movs	r2, #1
 8004744:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8004746:	f7fd fe57 	bl	80023f8 <HAL_GetTick>
 800474a:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800474c:	e008      	b.n	8004760 <HAL_RCCEx_PeriphCLKConfig+0x114>
    {
      if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 800474e:	f7fd fe53 	bl	80023f8 <HAL_GetTick>
 8004752:	4602      	mov	r2, r0
 8004754:	697b      	ldr	r3, [r7, #20]
 8004756:	1ad3      	subs	r3, r2, r3
 8004758:	2b02      	cmp	r3, #2
 800475a:	d901      	bls.n	8004760 <HAL_RCCEx_PeriphCLKConfig+0x114>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800475c:	2303      	movs	r3, #3
 800475e:	e129      	b.n	80049b4 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004760:	4b5a      	ldr	r3, [pc, #360]	@ (80048cc <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004762:	681b      	ldr	r3, [r3, #0]
 8004764:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004768:	2b00      	cmp	r3, #0
 800476a:	d0f0      	beq.n	800474e <HAL_RCCEx_PeriphCLKConfig+0x102>

  /*----------------------- SAI/LTDC Configuration (PLLSAI) ------------------*/
  /*----------------------- Common configuration SAI/LTDC --------------------*/
  /* In Case of SAI or LTDC Clock Configuration through PLLSAI, PLLSAIN division
     factor is common parameters for both peripherals */
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	681b      	ldr	r3, [r3, #0]
 8004770:	f003 0304 	and.w	r3, r3, #4
 8004774:	2b00      	cmp	r3, #0
 8004776:	d105      	bne.n	8004784 <HAL_RCCEx_PeriphCLKConfig+0x138>
      (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC))
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	681b      	ldr	r3, [r3, #0]
 800477c:	f003 0308 	and.w	r3, r3, #8
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 8004780:	2b00      	cmp	r3, #0
 8004782:	d079      	beq.n	8004878 <HAL_RCCEx_PeriphCLKConfig+0x22c>
  {
    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8004784:	4b52      	ldr	r3, [pc, #328]	@ (80048d0 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 8004786:	2200      	movs	r2, #0
 8004788:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800478a:	f7fd fe35 	bl	80023f8 <HAL_GetTick>
 800478e:	6178      	str	r0, [r7, #20]
    /* Wait till PLLSAI is disabled */
    while (__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8004790:	e008      	b.n	80047a4 <HAL_RCCEx_PeriphCLKConfig+0x158>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8004792:	f7fd fe31 	bl	80023f8 <HAL_GetTick>
 8004796:	4602      	mov	r2, r0
 8004798:	697b      	ldr	r3, [r7, #20]
 800479a:	1ad3      	subs	r3, r2, r3
 800479c:	2b02      	cmp	r3, #2
 800479e:	d901      	bls.n	80047a4 <HAL_RCCEx_PeriphCLKConfig+0x158>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80047a0:	2303      	movs	r3, #3
 80047a2:	e107      	b.n	80049b4 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while (__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80047a4:	4b49      	ldr	r3, [pc, #292]	@ (80048cc <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80047a6:	681b      	ldr	r3, [r3, #0]
 80047a8:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80047ac:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80047b0:	d0ef      	beq.n	8004792 <HAL_RCCEx_PeriphCLKConfig+0x146>
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLSAI, PLLSAIQ and PLLSAI_DIVQ must
       be added only for SAI configuration */
    if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == (RCC_PERIPHCLK_SAI_PLLSAI))
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	681b      	ldr	r3, [r3, #0]
 80047b6:	f003 0304 	and.w	r3, r3, #4
 80047ba:	2b00      	cmp	r3, #0
 80047bc:	d020      	beq.n	8004800 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 80047be:	4b43      	ldr	r3, [pc, #268]	@ (80048cc <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80047c0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80047c4:	0f1b      	lsrs	r3, r3, #28
 80047c6:	f003 0307 	and.w	r3, r3, #7
 80047ca:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	691b      	ldr	r3, [r3, #16]
 80047d0:	019a      	lsls	r2, r3, #6
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	695b      	ldr	r3, [r3, #20]
 80047d6:	061b      	lsls	r3, r3, #24
 80047d8:	431a      	orrs	r2, r3
 80047da:	693b      	ldr	r3, [r7, #16]
 80047dc:	071b      	lsls	r3, r3, #28
 80047de:	493b      	ldr	r1, [pc, #236]	@ (80048cc <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80047e0:	4313      	orrs	r3, r2
 80047e2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 80047e6:	4b39      	ldr	r3, [pc, #228]	@ (80048cc <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80047e8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80047ec:	f423 52f8 	bic.w	r2, r3, #7936	@ 0x1f00
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	6a1b      	ldr	r3, [r3, #32]
 80047f4:	3b01      	subs	r3, #1
 80047f6:	021b      	lsls	r3, r3, #8
 80047f8:	4934      	ldr	r1, [pc, #208]	@ (80048cc <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80047fa:	4313      	orrs	r3, r2
 80047fc:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*---------------------------- LTDC configuration ------------------------*/
    if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	681b      	ldr	r3, [r3, #0]
 8004804:	f003 0308 	and.w	r3, r3, #8
 8004808:	2b00      	cmp	r3, #0
 800480a:	d01e      	beq.n	800484a <HAL_RCCEx_PeriphCLKConfig+0x1fe>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800480c:	4b2f      	ldr	r3, [pc, #188]	@ (80048cc <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800480e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004812:	0e1b      	lsrs	r3, r3, #24
 8004814:	f003 030f 	and.w	r3, r3, #15
 8004818:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN, tmpreg1, PeriphClkInit->PLLSAI.PLLSAIR);
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	691b      	ldr	r3, [r3, #16]
 800481e:	019a      	lsls	r2, r3, #6
 8004820:	693b      	ldr	r3, [r7, #16]
 8004822:	061b      	lsls	r3, r3, #24
 8004824:	431a      	orrs	r2, r3
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	699b      	ldr	r3, [r3, #24]
 800482a:	071b      	lsls	r3, r3, #28
 800482c:	4927      	ldr	r1, [pc, #156]	@ (80048cc <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800482e:	4313      	orrs	r3, r2
 8004830:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8004834:	4b25      	ldr	r3, [pc, #148]	@ (80048cc <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004836:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800483a:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004842:	4922      	ldr	r1, [pc, #136]	@ (80048cc <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004844:	4313      	orrs	r3, r2
 8004846:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }
    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 800484a:	4b21      	ldr	r3, [pc, #132]	@ (80048d0 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 800484c:	2201      	movs	r2, #1
 800484e:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8004850:	f7fd fdd2 	bl	80023f8 <HAL_GetTick>
 8004854:	6178      	str	r0, [r7, #20]
    /* Wait till PLLSAI is ready */
    while (__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8004856:	e008      	b.n	800486a <HAL_RCCEx_PeriphCLKConfig+0x21e>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8004858:	f7fd fdce 	bl	80023f8 <HAL_GetTick>
 800485c:	4602      	mov	r2, r0
 800485e:	697b      	ldr	r3, [r7, #20]
 8004860:	1ad3      	subs	r3, r2, r3
 8004862:	2b02      	cmp	r3, #2
 8004864:	d901      	bls.n	800486a <HAL_RCCEx_PeriphCLKConfig+0x21e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004866:	2303      	movs	r3, #3
 8004868:	e0a4      	b.n	80049b4 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while (__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800486a:	4b18      	ldr	r3, [pc, #96]	@ (80048cc <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800486c:	681b      	ldr	r3, [r3, #0]
 800486e:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8004872:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8004876:	d1ef      	bne.n	8004858 <HAL_RCCEx_PeriphCLKConfig+0x20c>
    }
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- RTC configuration ---------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	681b      	ldr	r3, [r3, #0]
 800487c:	f003 0320 	and.w	r3, r3, #32
 8004880:	2b00      	cmp	r3, #0
 8004882:	f000 808b 	beq.w	800499c <HAL_RCCEx_PeriphCLKConfig+0x350>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8004886:	2300      	movs	r3, #0
 8004888:	60fb      	str	r3, [r7, #12]
 800488a:	4b10      	ldr	r3, [pc, #64]	@ (80048cc <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800488c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800488e:	4a0f      	ldr	r2, [pc, #60]	@ (80048cc <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004890:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004894:	6413      	str	r3, [r2, #64]	@ 0x40
 8004896:	4b0d      	ldr	r3, [pc, #52]	@ (80048cc <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004898:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800489a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800489e:	60fb      	str	r3, [r7, #12]
 80048a0:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 80048a2:	4b0c      	ldr	r3, [pc, #48]	@ (80048d4 <HAL_RCCEx_PeriphCLKConfig+0x288>)
 80048a4:	681b      	ldr	r3, [r3, #0]
 80048a6:	4a0b      	ldr	r2, [pc, #44]	@ (80048d4 <HAL_RCCEx_PeriphCLKConfig+0x288>)
 80048a8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80048ac:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 80048ae:	f7fd fda3 	bl	80023f8 <HAL_GetTick>
 80048b2:	6178      	str	r0, [r7, #20]

    while ((PWR->CR & PWR_CR_DBP) == RESET)
 80048b4:	e010      	b.n	80048d8 <HAL_RCCEx_PeriphCLKConfig+0x28c>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80048b6:	f7fd fd9f 	bl	80023f8 <HAL_GetTick>
 80048ba:	4602      	mov	r2, r0
 80048bc:	697b      	ldr	r3, [r7, #20]
 80048be:	1ad3      	subs	r3, r2, r3
 80048c0:	2b02      	cmp	r3, #2
 80048c2:	d909      	bls.n	80048d8 <HAL_RCCEx_PeriphCLKConfig+0x28c>
      {
        return HAL_TIMEOUT;
 80048c4:	2303      	movs	r3, #3
 80048c6:	e075      	b.n	80049b4 <HAL_RCCEx_PeriphCLKConfig+0x368>
 80048c8:	42470068 	.word	0x42470068
 80048cc:	40023800 	.word	0x40023800
 80048d0:	42470070 	.word	0x42470070
 80048d4:	40007000 	.word	0x40007000
    while ((PWR->CR & PWR_CR_DBP) == RESET)
 80048d8:	4b38      	ldr	r3, [pc, #224]	@ (80049bc <HAL_RCCEx_PeriphCLKConfig+0x370>)
 80048da:	681b      	ldr	r3, [r3, #0]
 80048dc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80048e0:	2b00      	cmp	r3, #0
 80048e2:	d0e8      	beq.n	80048b6 <HAL_RCCEx_PeriphCLKConfig+0x26a>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80048e4:	4b36      	ldr	r3, [pc, #216]	@ (80049c0 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 80048e6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80048e8:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80048ec:	613b      	str	r3, [r7, #16]
    if ((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80048ee:	693b      	ldr	r3, [r7, #16]
 80048f0:	2b00      	cmp	r3, #0
 80048f2:	d02f      	beq.n	8004954 <HAL_RCCEx_PeriphCLKConfig+0x308>
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80048f8:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80048fc:	693a      	ldr	r2, [r7, #16]
 80048fe:	429a      	cmp	r2, r3
 8004900:	d028      	beq.n	8004954 <HAL_RCCEx_PeriphCLKConfig+0x308>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004902:	4b2f      	ldr	r3, [pc, #188]	@ (80049c0 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8004904:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004906:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800490a:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800490c:	4b2d      	ldr	r3, [pc, #180]	@ (80049c4 <HAL_RCCEx_PeriphCLKConfig+0x378>)
 800490e:	2201      	movs	r2, #1
 8004910:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004912:	4b2c      	ldr	r3, [pc, #176]	@ (80049c4 <HAL_RCCEx_PeriphCLKConfig+0x378>)
 8004914:	2200      	movs	r2, #0
 8004916:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8004918:	4a29      	ldr	r2, [pc, #164]	@ (80049c0 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 800491a:	693b      	ldr	r3, [r7, #16]
 800491c:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 800491e:	4b28      	ldr	r3, [pc, #160]	@ (80049c0 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8004920:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004922:	f003 0301 	and.w	r3, r3, #1
 8004926:	2b01      	cmp	r3, #1
 8004928:	d114      	bne.n	8004954 <HAL_RCCEx_PeriphCLKConfig+0x308>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 800492a:	f7fd fd65 	bl	80023f8 <HAL_GetTick>
 800492e:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004930:	e00a      	b.n	8004948 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004932:	f7fd fd61 	bl	80023f8 <HAL_GetTick>
 8004936:	4602      	mov	r2, r0
 8004938:	697b      	ldr	r3, [r7, #20]
 800493a:	1ad3      	subs	r3, r2, r3
 800493c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004940:	4293      	cmp	r3, r2
 8004942:	d901      	bls.n	8004948 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
          {
            return HAL_TIMEOUT;
 8004944:	2303      	movs	r3, #3
 8004946:	e035      	b.n	80049b4 <HAL_RCCEx_PeriphCLKConfig+0x368>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004948:	4b1d      	ldr	r3, [pc, #116]	@ (80049c0 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 800494a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800494c:	f003 0302 	and.w	r3, r3, #2
 8004950:	2b00      	cmp	r3, #0
 8004952:	d0ee      	beq.n	8004932 <HAL_RCCEx_PeriphCLKConfig+0x2e6>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004958:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800495c:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004960:	d10d      	bne.n	800497e <HAL_RCCEx_PeriphCLKConfig+0x332>
 8004962:	4b17      	ldr	r3, [pc, #92]	@ (80049c0 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8004964:	689b      	ldr	r3, [r3, #8]
 8004966:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800496e:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 8004972:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004976:	4912      	ldr	r1, [pc, #72]	@ (80049c0 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8004978:	4313      	orrs	r3, r2
 800497a:	608b      	str	r3, [r1, #8]
 800497c:	e005      	b.n	800498a <HAL_RCCEx_PeriphCLKConfig+0x33e>
 800497e:	4b10      	ldr	r3, [pc, #64]	@ (80049c0 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8004980:	689b      	ldr	r3, [r3, #8]
 8004982:	4a0f      	ldr	r2, [pc, #60]	@ (80049c0 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8004984:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 8004988:	6093      	str	r3, [r2, #8]
 800498a:	4b0d      	ldr	r3, [pc, #52]	@ (80049c0 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 800498c:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004992:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004996:	490a      	ldr	r1, [pc, #40]	@ (80049c0 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8004998:	4313      	orrs	r3, r2
 800499a:	670b      	str	r3, [r1, #112]	@ 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- TIM configuration ---------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	681b      	ldr	r3, [r3, #0]
 80049a0:	f003 0310 	and.w	r3, r3, #16
 80049a4:	2b00      	cmp	r3, #0
 80049a6:	d004      	beq.n	80049b2 <HAL_RCCEx_PeriphCLKConfig+0x366>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	f893 202c 	ldrb.w	r2, [r3, #44]	@ 0x2c
 80049ae:	4b06      	ldr	r3, [pc, #24]	@ (80049c8 <HAL_RCCEx_PeriphCLKConfig+0x37c>)
 80049b0:	601a      	str	r2, [r3, #0]
  }
  return HAL_OK;
 80049b2:	2300      	movs	r3, #0
}
 80049b4:	4618      	mov	r0, r3
 80049b6:	3718      	adds	r7, #24
 80049b8:	46bd      	mov	sp, r7
 80049ba:	bd80      	pop	{r7, pc}
 80049bc:	40007000 	.word	0x40007000
 80049c0:	40023800 	.word	0x40023800
 80049c4:	42470e40 	.word	0x42470e40
 80049c8:	424711e0 	.word	0x424711e0

080049cc <HAL_SDRAM_Init>:
  *                the configuration information for SDRAM module.
  * @param  Timing Pointer to SDRAM control timing structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_Init(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_TimingTypeDef *Timing)
{
 80049cc:	b580      	push	{r7, lr}
 80049ce:	b082      	sub	sp, #8
 80049d0:	af00      	add	r7, sp, #0
 80049d2:	6078      	str	r0, [r7, #4]
 80049d4:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM handle parameter */
  if (hsdram == NULL)
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	2b00      	cmp	r3, #0
 80049da:	d101      	bne.n	80049e0 <HAL_SDRAM_Init+0x14>
  {
    return HAL_ERROR;
 80049dc:	2301      	movs	r3, #1
 80049de:	e025      	b.n	8004a2c <HAL_SDRAM_Init+0x60>
  }

  if (hsdram->State == HAL_SDRAM_STATE_RESET)
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 80049e6:	b2db      	uxtb	r3, r3
 80049e8:	2b00      	cmp	r3, #0
 80049ea:	d106      	bne.n	80049fa <HAL_SDRAM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hsdram->Lock = HAL_UNLOCKED;
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	2200      	movs	r2, #0
 80049f0:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d

    /* Init the low level hardware */
    hsdram->MspInitCallback(hsdram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SDRAM_MspInit(hsdram);
 80049f4:	6878      	ldr	r0, [r7, #4]
 80049f6:	f7fd fbd7 	bl	80021a8 <HAL_SDRAM_MspInit>
#endif /* USE_HAL_SDRAM_REGISTER_CALLBACKS */
  }

  /* Initialize the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	2202      	movs	r2, #2
 80049fe:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

  /* Initialize SDRAM control Interface */
  (void)FMC_SDRAM_Init(hsdram->Instance, &(hsdram->Init));
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	681a      	ldr	r2, [r3, #0]
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	3304      	adds	r3, #4
 8004a0a:	4619      	mov	r1, r3
 8004a0c:	4610      	mov	r0, r2
 8004a0e:	f001 fdaf 	bl	8006570 <FMC_SDRAM_Init>

  /* Initialize SDRAM timing Interface */
  (void)FMC_SDRAM_Timing_Init(hsdram->Instance, Timing, hsdram->Init.SDBank);
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	6818      	ldr	r0, [r3, #0]
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	685b      	ldr	r3, [r3, #4]
 8004a1a:	461a      	mov	r2, r3
 8004a1c:	6839      	ldr	r1, [r7, #0]
 8004a1e:	f001 fe04 	bl	800662a <FMC_SDRAM_Timing_Init>
  /* Update the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	2201      	movs	r2, #1
 8004a26:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

  return HAL_OK;
 8004a2a:	2300      	movs	r3, #0
}
 8004a2c:	4618      	mov	r0, r3
 8004a2e:	3708      	adds	r7, #8
 8004a30:	46bd      	mov	sp, r7
 8004a32:	bd80      	pop	{r7, pc}

08004a34 <HAL_SDRAM_SendCommand>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_SendCommand(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_CommandTypeDef *Command,
                                        uint32_t Timeout)
{
 8004a34:	b580      	push	{r7, lr}
 8004a36:	b086      	sub	sp, #24
 8004a38:	af00      	add	r7, sp, #0
 8004a3a:	60f8      	str	r0, [r7, #12]
 8004a3c:	60b9      	str	r1, [r7, #8]
 8004a3e:	607a      	str	r2, [r7, #4]
  HAL_SDRAM_StateTypeDef state = hsdram->State;
 8004a40:	68fb      	ldr	r3, [r7, #12]
 8004a42:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 8004a46:	75fb      	strb	r3, [r7, #23]

  /* Check the SDRAM controller state */
  if (state == HAL_SDRAM_STATE_BUSY)
 8004a48:	7dfb      	ldrb	r3, [r7, #23]
 8004a4a:	2b02      	cmp	r3, #2
 8004a4c:	d101      	bne.n	8004a52 <HAL_SDRAM_SendCommand+0x1e>
  {
    return HAL_BUSY;
 8004a4e:	2302      	movs	r3, #2
 8004a50:	e021      	b.n	8004a96 <HAL_SDRAM_SendCommand+0x62>
  }
  else if ((state == HAL_SDRAM_STATE_READY) || (state == HAL_SDRAM_STATE_PRECHARGED))
 8004a52:	7dfb      	ldrb	r3, [r7, #23]
 8004a54:	2b01      	cmp	r3, #1
 8004a56:	d002      	beq.n	8004a5e <HAL_SDRAM_SendCommand+0x2a>
 8004a58:	7dfb      	ldrb	r3, [r7, #23]
 8004a5a:	2b05      	cmp	r3, #5
 8004a5c:	d118      	bne.n	8004a90 <HAL_SDRAM_SendCommand+0x5c>
  {
    /* Update the SDRAM state */
    hsdram->State = HAL_SDRAM_STATE_BUSY;
 8004a5e:	68fb      	ldr	r3, [r7, #12]
 8004a60:	2202      	movs	r2, #2
 8004a62:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

    /* Send SDRAM command */
    (void)FMC_SDRAM_SendCommand(hsdram->Instance, Command, Timeout);
 8004a66:	68fb      	ldr	r3, [r7, #12]
 8004a68:	681b      	ldr	r3, [r3, #0]
 8004a6a:	687a      	ldr	r2, [r7, #4]
 8004a6c:	68b9      	ldr	r1, [r7, #8]
 8004a6e:	4618      	mov	r0, r3
 8004a70:	f001 fe44 	bl	80066fc <FMC_SDRAM_SendCommand>

    /* Update the SDRAM controller state state */
    if (Command->CommandMode == FMC_SDRAM_CMD_PALL)
 8004a74:	68bb      	ldr	r3, [r7, #8]
 8004a76:	681b      	ldr	r3, [r3, #0]
 8004a78:	2b02      	cmp	r3, #2
 8004a7a:	d104      	bne.n	8004a86 <HAL_SDRAM_SendCommand+0x52>
    {
      hsdram->State = HAL_SDRAM_STATE_PRECHARGED;
 8004a7c:	68fb      	ldr	r3, [r7, #12]
 8004a7e:	2205      	movs	r2, #5
 8004a80:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c
    if (Command->CommandMode == FMC_SDRAM_CMD_PALL)
 8004a84:	e006      	b.n	8004a94 <HAL_SDRAM_SendCommand+0x60>
    }
    else
    {
      hsdram->State = HAL_SDRAM_STATE_READY;
 8004a86:	68fb      	ldr	r3, [r7, #12]
 8004a88:	2201      	movs	r2, #1
 8004a8a:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c
    if (Command->CommandMode == FMC_SDRAM_CMD_PALL)
 8004a8e:	e001      	b.n	8004a94 <HAL_SDRAM_SendCommand+0x60>
    }
  }
  else
  {
    return HAL_ERROR;
 8004a90:	2301      	movs	r3, #1
 8004a92:	e000      	b.n	8004a96 <HAL_SDRAM_SendCommand+0x62>
  }

  return HAL_OK;
 8004a94:	2300      	movs	r3, #0
}
 8004a96:	4618      	mov	r0, r3
 8004a98:	3718      	adds	r7, #24
 8004a9a:	46bd      	mov	sp, r7
 8004a9c:	bd80      	pop	{r7, pc}

08004a9e <HAL_SDRAM_ProgramRefreshRate>:
  *                the configuration information for SDRAM module.
  * @param  RefreshRate The SDRAM refresh rate value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_ProgramRefreshRate(SDRAM_HandleTypeDef *hsdram, uint32_t RefreshRate)
{
 8004a9e:	b580      	push	{r7, lr}
 8004aa0:	b082      	sub	sp, #8
 8004aa2:	af00      	add	r7, sp, #0
 8004aa4:	6078      	str	r0, [r7, #4]
 8004aa6:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM controller state */
  if (hsdram->State == HAL_SDRAM_STATE_BUSY)
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 8004aae:	b2db      	uxtb	r3, r3
 8004ab0:	2b02      	cmp	r3, #2
 8004ab2:	d101      	bne.n	8004ab8 <HAL_SDRAM_ProgramRefreshRate+0x1a>
  {
    return HAL_BUSY;
 8004ab4:	2302      	movs	r3, #2
 8004ab6:	e016      	b.n	8004ae6 <HAL_SDRAM_ProgramRefreshRate+0x48>
  }
  else if (hsdram->State == HAL_SDRAM_STATE_READY)
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 8004abe:	b2db      	uxtb	r3, r3
 8004ac0:	2b01      	cmp	r3, #1
 8004ac2:	d10f      	bne.n	8004ae4 <HAL_SDRAM_ProgramRefreshRate+0x46>
  {
    /* Update the SDRAM state */
    hsdram->State = HAL_SDRAM_STATE_BUSY;
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	2202      	movs	r2, #2
 8004ac8:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

    /* Program the refresh rate */
    (void)FMC_SDRAM_ProgramRefreshRate(hsdram->Instance, RefreshRate);
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	681b      	ldr	r3, [r3, #0]
 8004ad0:	6839      	ldr	r1, [r7, #0]
 8004ad2:	4618      	mov	r0, r3
 8004ad4:	f001 fe4f 	bl	8006776 <FMC_SDRAM_ProgramRefreshRate>

    /* Update the SDRAM state */
    hsdram->State = HAL_SDRAM_STATE_READY;
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	2201      	movs	r2, #1
 8004adc:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c
  else
  {
    return HAL_ERROR;
  }

  return HAL_OK;
 8004ae0:	2300      	movs	r3, #0
 8004ae2:	e000      	b.n	8004ae6 <HAL_SDRAM_ProgramRefreshRate+0x48>
    return HAL_ERROR;
 8004ae4:	2301      	movs	r3, #1
}
 8004ae6:	4618      	mov	r0, r3
 8004ae8:	3708      	adds	r7, #8
 8004aea:	46bd      	mov	sp, r7
 8004aec:	bd80      	pop	{r7, pc}

08004aee <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004aee:	b580      	push	{r7, lr}
 8004af0:	b082      	sub	sp, #8
 8004af2:	af00      	add	r7, sp, #0
 8004af4:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	2b00      	cmp	r3, #0
 8004afa:	d101      	bne.n	8004b00 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8004afc:	2301      	movs	r3, #1
 8004afe:	e07b      	b.n	8004bf8 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004b04:	2b00      	cmp	r3, #0
 8004b06:	d108      	bne.n	8004b1a <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	685b      	ldr	r3, [r3, #4]
 8004b0c:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8004b10:	d009      	beq.n	8004b26 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	2200      	movs	r2, #0
 8004b16:	61da      	str	r2, [r3, #28]
 8004b18:	e005      	b.n	8004b26 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	2200      	movs	r2, #0
 8004b1e:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	2200      	movs	r2, #0
 8004b24:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	2200      	movs	r2, #0
 8004b2a:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8004b32:	b2db      	uxtb	r3, r3
 8004b34:	2b00      	cmp	r3, #0
 8004b36:	d106      	bne.n	8004b46 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	2200      	movs	r2, #0
 8004b3c:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8004b40:	6878      	ldr	r0, [r7, #4]
 8004b42:	f7fd f9cf 	bl	8001ee4 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	2202      	movs	r2, #2
 8004b4a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	681b      	ldr	r3, [r3, #0]
 8004b52:	681a      	ldr	r2, [r3, #0]
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	681b      	ldr	r3, [r3, #0]
 8004b58:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004b5c:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	685b      	ldr	r3, [r3, #4]
 8004b62:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	689b      	ldr	r3, [r3, #8]
 8004b6a:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8004b6e:	431a      	orrs	r2, r3
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	68db      	ldr	r3, [r3, #12]
 8004b74:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004b78:	431a      	orrs	r2, r3
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	691b      	ldr	r3, [r3, #16]
 8004b7e:	f003 0302 	and.w	r3, r3, #2
 8004b82:	431a      	orrs	r2, r3
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	695b      	ldr	r3, [r3, #20]
 8004b88:	f003 0301 	and.w	r3, r3, #1
 8004b8c:	431a      	orrs	r2, r3
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	699b      	ldr	r3, [r3, #24]
 8004b92:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004b96:	431a      	orrs	r2, r3
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	69db      	ldr	r3, [r3, #28]
 8004b9c:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8004ba0:	431a      	orrs	r2, r3
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	6a1b      	ldr	r3, [r3, #32]
 8004ba6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004baa:	ea42 0103 	orr.w	r1, r2, r3
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004bb2:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	681b      	ldr	r3, [r3, #0]
 8004bba:	430a      	orrs	r2, r1
 8004bbc:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	699b      	ldr	r3, [r3, #24]
 8004bc2:	0c1b      	lsrs	r3, r3, #16
 8004bc4:	f003 0104 	and.w	r1, r3, #4
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004bcc:	f003 0210 	and.w	r2, r3, #16
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	681b      	ldr	r3, [r3, #0]
 8004bd4:	430a      	orrs	r2, r1
 8004bd6:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	681b      	ldr	r3, [r3, #0]
 8004bdc:	69da      	ldr	r2, [r3, #28]
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	681b      	ldr	r3, [r3, #0]
 8004be2:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8004be6:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	2200      	movs	r2, #0
 8004bec:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	2201      	movs	r2, #1
 8004bf2:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 8004bf6:	2300      	movs	r3, #0
}
 8004bf8:	4618      	mov	r0, r3
 8004bfa:	3708      	adds	r7, #8
 8004bfc:	46bd      	mov	sp, r7
 8004bfe:	bd80      	pop	{r7, pc}

08004c00 <HAL_SPI_DeInit>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_DeInit(SPI_HandleTypeDef *hspi)
{
 8004c00:	b580      	push	{r7, lr}
 8004c02:	b082      	sub	sp, #8
 8004c04:	af00      	add	r7, sp, #0
 8004c06:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	2b00      	cmp	r3, #0
 8004c0c:	d101      	bne.n	8004c12 <HAL_SPI_DeInit+0x12>
  {
    return HAL_ERROR;
 8004c0e:	2301      	movs	r3, #1
 8004c10:	e01a      	b.n	8004c48 <HAL_SPI_DeInit+0x48>
  }

  /* Check SPI Instance parameter */
  assert_param(IS_SPI_ALL_INSTANCE(hspi->Instance));

  hspi->State = HAL_SPI_STATE_BUSY;
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	2202      	movs	r2, #2
 8004c16:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the SPI Peripheral Clock */
  __HAL_SPI_DISABLE(hspi);
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	681b      	ldr	r3, [r3, #0]
 8004c1e:	681a      	ldr	r2, [r3, #0]
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	681b      	ldr	r3, [r3, #0]
 8004c24:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004c28:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC... */
  hspi->MspDeInitCallback(hspi);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC... */
  HAL_SPI_MspDeInit(hspi);
 8004c2a:	6878      	ldr	r0, [r7, #4]
 8004c2c:	f7fd f9a2 	bl	8001f74 <HAL_SPI_MspDeInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	2200      	movs	r2, #0
 8004c34:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State = HAL_SPI_STATE_RESET;
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	2200      	movs	r2, #0
 8004c3a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Release Lock */
  __HAL_UNLOCK(hspi);
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	2200      	movs	r2, #0
 8004c42:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  return HAL_OK;
 8004c46:	2300      	movs	r3, #0
}
 8004c48:	4618      	mov	r0, r3
 8004c4a:	3708      	adds	r7, #8
 8004c4c:	46bd      	mov	sp, r7
 8004c4e:	bd80      	pop	{r7, pc}

08004c50 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004c50:	b580      	push	{r7, lr}
 8004c52:	b088      	sub	sp, #32
 8004c54:	af00      	add	r7, sp, #0
 8004c56:	60f8      	str	r0, [r7, #12]
 8004c58:	60b9      	str	r1, [r7, #8]
 8004c5a:	603b      	str	r3, [r7, #0]
 8004c5c:	4613      	mov	r3, r2
 8004c5e:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004c60:	f7fd fbca 	bl	80023f8 <HAL_GetTick>
 8004c64:	61f8      	str	r0, [r7, #28]
  initial_TxXferCount = Size;
 8004c66:	88fb      	ldrh	r3, [r7, #6]
 8004c68:	837b      	strh	r3, [r7, #26]

  if (hspi->State != HAL_SPI_STATE_READY)
 8004c6a:	68fb      	ldr	r3, [r7, #12]
 8004c6c:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8004c70:	b2db      	uxtb	r3, r3
 8004c72:	2b01      	cmp	r3, #1
 8004c74:	d001      	beq.n	8004c7a <HAL_SPI_Transmit+0x2a>
  {
    return HAL_BUSY;
 8004c76:	2302      	movs	r3, #2
 8004c78:	e12a      	b.n	8004ed0 <HAL_SPI_Transmit+0x280>
  }

  if ((pData == NULL) || (Size == 0U))
 8004c7a:	68bb      	ldr	r3, [r7, #8]
 8004c7c:	2b00      	cmp	r3, #0
 8004c7e:	d002      	beq.n	8004c86 <HAL_SPI_Transmit+0x36>
 8004c80:	88fb      	ldrh	r3, [r7, #6]
 8004c82:	2b00      	cmp	r3, #0
 8004c84:	d101      	bne.n	8004c8a <HAL_SPI_Transmit+0x3a>
  {
    return HAL_ERROR;
 8004c86:	2301      	movs	r3, #1
 8004c88:	e122      	b.n	8004ed0 <HAL_SPI_Transmit+0x280>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004c8a:	68fb      	ldr	r3, [r7, #12]
 8004c8c:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8004c90:	2b01      	cmp	r3, #1
 8004c92:	d101      	bne.n	8004c98 <HAL_SPI_Transmit+0x48>
 8004c94:	2302      	movs	r3, #2
 8004c96:	e11b      	b.n	8004ed0 <HAL_SPI_Transmit+0x280>
 8004c98:	68fb      	ldr	r3, [r7, #12]
 8004c9a:	2201      	movs	r2, #1
 8004c9c:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8004ca0:	68fb      	ldr	r3, [r7, #12]
 8004ca2:	2203      	movs	r2, #3
 8004ca4:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004ca8:	68fb      	ldr	r3, [r7, #12]
 8004caa:	2200      	movs	r2, #0
 8004cac:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 8004cae:	68fb      	ldr	r3, [r7, #12]
 8004cb0:	68ba      	ldr	r2, [r7, #8]
 8004cb2:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 8004cb4:	68fb      	ldr	r3, [r7, #12]
 8004cb6:	88fa      	ldrh	r2, [r7, #6]
 8004cb8:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 8004cba:	68fb      	ldr	r3, [r7, #12]
 8004cbc:	88fa      	ldrh	r2, [r7, #6]
 8004cbe:	86da      	strh	r2, [r3, #54]	@ 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8004cc0:	68fb      	ldr	r3, [r7, #12]
 8004cc2:	2200      	movs	r2, #0
 8004cc4:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = 0U;
 8004cc6:	68fb      	ldr	r3, [r7, #12]
 8004cc8:	2200      	movs	r2, #0
 8004cca:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 8004ccc:	68fb      	ldr	r3, [r7, #12]
 8004cce:	2200      	movs	r2, #0
 8004cd0:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxISR       = NULL;
 8004cd2:	68fb      	ldr	r3, [r7, #12]
 8004cd4:	2200      	movs	r2, #0
 8004cd6:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->RxISR       = NULL;
 8004cd8:	68fb      	ldr	r3, [r7, #12]
 8004cda:	2200      	movs	r2, #0
 8004cdc:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004cde:	68fb      	ldr	r3, [r7, #12]
 8004ce0:	689b      	ldr	r3, [r3, #8]
 8004ce2:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004ce6:	d10f      	bne.n	8004d08 <HAL_SPI_Transmit+0xb8>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8004ce8:	68fb      	ldr	r3, [r7, #12]
 8004cea:	681b      	ldr	r3, [r3, #0]
 8004cec:	681a      	ldr	r2, [r3, #0]
 8004cee:	68fb      	ldr	r3, [r7, #12]
 8004cf0:	681b      	ldr	r3, [r3, #0]
 8004cf2:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004cf6:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8004cf8:	68fb      	ldr	r3, [r7, #12]
 8004cfa:	681b      	ldr	r3, [r3, #0]
 8004cfc:	681a      	ldr	r2, [r3, #0]
 8004cfe:	68fb      	ldr	r3, [r7, #12]
 8004d00:	681b      	ldr	r3, [r3, #0]
 8004d02:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8004d06:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004d08:	68fb      	ldr	r3, [r7, #12]
 8004d0a:	681b      	ldr	r3, [r3, #0]
 8004d0c:	681b      	ldr	r3, [r3, #0]
 8004d0e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004d12:	2b40      	cmp	r3, #64	@ 0x40
 8004d14:	d007      	beq.n	8004d26 <HAL_SPI_Transmit+0xd6>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004d16:	68fb      	ldr	r3, [r7, #12]
 8004d18:	681b      	ldr	r3, [r3, #0]
 8004d1a:	681a      	ldr	r2, [r3, #0]
 8004d1c:	68fb      	ldr	r3, [r7, #12]
 8004d1e:	681b      	ldr	r3, [r3, #0]
 8004d20:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8004d24:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8004d26:	68fb      	ldr	r3, [r7, #12]
 8004d28:	68db      	ldr	r3, [r3, #12]
 8004d2a:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004d2e:	d152      	bne.n	8004dd6 <HAL_SPI_Transmit+0x186>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004d30:	68fb      	ldr	r3, [r7, #12]
 8004d32:	685b      	ldr	r3, [r3, #4]
 8004d34:	2b00      	cmp	r3, #0
 8004d36:	d002      	beq.n	8004d3e <HAL_SPI_Transmit+0xee>
 8004d38:	8b7b      	ldrh	r3, [r7, #26]
 8004d3a:	2b01      	cmp	r3, #1
 8004d3c:	d145      	bne.n	8004dca <HAL_SPI_Transmit+0x17a>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8004d3e:	68fb      	ldr	r3, [r7, #12]
 8004d40:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004d42:	881a      	ldrh	r2, [r3, #0]
 8004d44:	68fb      	ldr	r3, [r7, #12]
 8004d46:	681b      	ldr	r3, [r3, #0]
 8004d48:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8004d4a:	68fb      	ldr	r3, [r7, #12]
 8004d4c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004d4e:	1c9a      	adds	r2, r3, #2
 8004d50:	68fb      	ldr	r3, [r7, #12]
 8004d52:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8004d54:	68fb      	ldr	r3, [r7, #12]
 8004d56:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004d58:	b29b      	uxth	r3, r3
 8004d5a:	3b01      	subs	r3, #1
 8004d5c:	b29a      	uxth	r2, r3
 8004d5e:	68fb      	ldr	r3, [r7, #12]
 8004d60:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8004d62:	e032      	b.n	8004dca <HAL_SPI_Transmit+0x17a>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8004d64:	68fb      	ldr	r3, [r7, #12]
 8004d66:	681b      	ldr	r3, [r3, #0]
 8004d68:	689b      	ldr	r3, [r3, #8]
 8004d6a:	f003 0302 	and.w	r3, r3, #2
 8004d6e:	2b02      	cmp	r3, #2
 8004d70:	d112      	bne.n	8004d98 <HAL_SPI_Transmit+0x148>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8004d72:	68fb      	ldr	r3, [r7, #12]
 8004d74:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004d76:	881a      	ldrh	r2, [r3, #0]
 8004d78:	68fb      	ldr	r3, [r7, #12]
 8004d7a:	681b      	ldr	r3, [r3, #0]
 8004d7c:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004d7e:	68fb      	ldr	r3, [r7, #12]
 8004d80:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004d82:	1c9a      	adds	r2, r3, #2
 8004d84:	68fb      	ldr	r3, [r7, #12]
 8004d86:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8004d88:	68fb      	ldr	r3, [r7, #12]
 8004d8a:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004d8c:	b29b      	uxth	r3, r3
 8004d8e:	3b01      	subs	r3, #1
 8004d90:	b29a      	uxth	r2, r3
 8004d92:	68fb      	ldr	r3, [r7, #12]
 8004d94:	86da      	strh	r2, [r3, #54]	@ 0x36
 8004d96:	e018      	b.n	8004dca <HAL_SPI_Transmit+0x17a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004d98:	f7fd fb2e 	bl	80023f8 <HAL_GetTick>
 8004d9c:	4602      	mov	r2, r0
 8004d9e:	69fb      	ldr	r3, [r7, #28]
 8004da0:	1ad3      	subs	r3, r2, r3
 8004da2:	683a      	ldr	r2, [r7, #0]
 8004da4:	429a      	cmp	r2, r3
 8004da6:	d803      	bhi.n	8004db0 <HAL_SPI_Transmit+0x160>
 8004da8:	683b      	ldr	r3, [r7, #0]
 8004daa:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004dae:	d102      	bne.n	8004db6 <HAL_SPI_Transmit+0x166>
 8004db0:	683b      	ldr	r3, [r7, #0]
 8004db2:	2b00      	cmp	r3, #0
 8004db4:	d109      	bne.n	8004dca <HAL_SPI_Transmit+0x17a>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8004db6:	68fb      	ldr	r3, [r7, #12]
 8004db8:	2201      	movs	r2, #1
 8004dba:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8004dbe:	68fb      	ldr	r3, [r7, #12]
 8004dc0:	2200      	movs	r2, #0
 8004dc2:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8004dc6:	2303      	movs	r3, #3
 8004dc8:	e082      	b.n	8004ed0 <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 8004dca:	68fb      	ldr	r3, [r7, #12]
 8004dcc:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004dce:	b29b      	uxth	r3, r3
 8004dd0:	2b00      	cmp	r3, #0
 8004dd2:	d1c7      	bne.n	8004d64 <HAL_SPI_Transmit+0x114>
 8004dd4:	e053      	b.n	8004e7e <HAL_SPI_Transmit+0x22e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004dd6:	68fb      	ldr	r3, [r7, #12]
 8004dd8:	685b      	ldr	r3, [r3, #4]
 8004dda:	2b00      	cmp	r3, #0
 8004ddc:	d002      	beq.n	8004de4 <HAL_SPI_Transmit+0x194>
 8004dde:	8b7b      	ldrh	r3, [r7, #26]
 8004de0:	2b01      	cmp	r3, #1
 8004de2:	d147      	bne.n	8004e74 <HAL_SPI_Transmit+0x224>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8004de4:	68fb      	ldr	r3, [r7, #12]
 8004de6:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004de8:	68fb      	ldr	r3, [r7, #12]
 8004dea:	681b      	ldr	r3, [r3, #0]
 8004dec:	330c      	adds	r3, #12
 8004dee:	7812      	ldrb	r2, [r2, #0]
 8004df0:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8004df2:	68fb      	ldr	r3, [r7, #12]
 8004df4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004df6:	1c5a      	adds	r2, r3, #1
 8004df8:	68fb      	ldr	r3, [r7, #12]
 8004dfa:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8004dfc:	68fb      	ldr	r3, [r7, #12]
 8004dfe:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004e00:	b29b      	uxth	r3, r3
 8004e02:	3b01      	subs	r3, #1
 8004e04:	b29a      	uxth	r2, r3
 8004e06:	68fb      	ldr	r3, [r7, #12]
 8004e08:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while (hspi->TxXferCount > 0U)
 8004e0a:	e033      	b.n	8004e74 <HAL_SPI_Transmit+0x224>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8004e0c:	68fb      	ldr	r3, [r7, #12]
 8004e0e:	681b      	ldr	r3, [r3, #0]
 8004e10:	689b      	ldr	r3, [r3, #8]
 8004e12:	f003 0302 	and.w	r3, r3, #2
 8004e16:	2b02      	cmp	r3, #2
 8004e18:	d113      	bne.n	8004e42 <HAL_SPI_Transmit+0x1f2>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8004e1a:	68fb      	ldr	r3, [r7, #12]
 8004e1c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004e1e:	68fb      	ldr	r3, [r7, #12]
 8004e20:	681b      	ldr	r3, [r3, #0]
 8004e22:	330c      	adds	r3, #12
 8004e24:	7812      	ldrb	r2, [r2, #0]
 8004e26:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8004e28:	68fb      	ldr	r3, [r7, #12]
 8004e2a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004e2c:	1c5a      	adds	r2, r3, #1
 8004e2e:	68fb      	ldr	r3, [r7, #12]
 8004e30:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8004e32:	68fb      	ldr	r3, [r7, #12]
 8004e34:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004e36:	b29b      	uxth	r3, r3
 8004e38:	3b01      	subs	r3, #1
 8004e3a:	b29a      	uxth	r2, r3
 8004e3c:	68fb      	ldr	r3, [r7, #12]
 8004e3e:	86da      	strh	r2, [r3, #54]	@ 0x36
 8004e40:	e018      	b.n	8004e74 <HAL_SPI_Transmit+0x224>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004e42:	f7fd fad9 	bl	80023f8 <HAL_GetTick>
 8004e46:	4602      	mov	r2, r0
 8004e48:	69fb      	ldr	r3, [r7, #28]
 8004e4a:	1ad3      	subs	r3, r2, r3
 8004e4c:	683a      	ldr	r2, [r7, #0]
 8004e4e:	429a      	cmp	r2, r3
 8004e50:	d803      	bhi.n	8004e5a <HAL_SPI_Transmit+0x20a>
 8004e52:	683b      	ldr	r3, [r7, #0]
 8004e54:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004e58:	d102      	bne.n	8004e60 <HAL_SPI_Transmit+0x210>
 8004e5a:	683b      	ldr	r3, [r7, #0]
 8004e5c:	2b00      	cmp	r3, #0
 8004e5e:	d109      	bne.n	8004e74 <HAL_SPI_Transmit+0x224>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8004e60:	68fb      	ldr	r3, [r7, #12]
 8004e62:	2201      	movs	r2, #1
 8004e64:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8004e68:	68fb      	ldr	r3, [r7, #12]
 8004e6a:	2200      	movs	r2, #0
 8004e6c:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8004e70:	2303      	movs	r3, #3
 8004e72:	e02d      	b.n	8004ed0 <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 8004e74:	68fb      	ldr	r3, [r7, #12]
 8004e76:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004e78:	b29b      	uxth	r3, r3
 8004e7a:	2b00      	cmp	r3, #0
 8004e7c:	d1c6      	bne.n	8004e0c <HAL_SPI_Transmit+0x1bc>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004e7e:	69fa      	ldr	r2, [r7, #28]
 8004e80:	6839      	ldr	r1, [r7, #0]
 8004e82:	68f8      	ldr	r0, [r7, #12]
 8004e84:	f000 fbe6 	bl	8005654 <SPI_EndRxTxTransaction>
 8004e88:	4603      	mov	r3, r0
 8004e8a:	2b00      	cmp	r3, #0
 8004e8c:	d002      	beq.n	8004e94 <HAL_SPI_Transmit+0x244>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004e8e:	68fb      	ldr	r3, [r7, #12]
 8004e90:	2220      	movs	r2, #32
 8004e92:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8004e94:	68fb      	ldr	r3, [r7, #12]
 8004e96:	689b      	ldr	r3, [r3, #8]
 8004e98:	2b00      	cmp	r3, #0
 8004e9a:	d10a      	bne.n	8004eb2 <HAL_SPI_Transmit+0x262>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004e9c:	2300      	movs	r3, #0
 8004e9e:	617b      	str	r3, [r7, #20]
 8004ea0:	68fb      	ldr	r3, [r7, #12]
 8004ea2:	681b      	ldr	r3, [r3, #0]
 8004ea4:	68db      	ldr	r3, [r3, #12]
 8004ea6:	617b      	str	r3, [r7, #20]
 8004ea8:	68fb      	ldr	r3, [r7, #12]
 8004eaa:	681b      	ldr	r3, [r3, #0]
 8004eac:	689b      	ldr	r3, [r3, #8]
 8004eae:	617b      	str	r3, [r7, #20]
 8004eb0:	697b      	ldr	r3, [r7, #20]
  }

  hspi->State = HAL_SPI_STATE_READY;
 8004eb2:	68fb      	ldr	r3, [r7, #12]
 8004eb4:	2201      	movs	r2, #1
 8004eb6:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8004eba:	68fb      	ldr	r3, [r7, #12]
 8004ebc:	2200      	movs	r2, #0
 8004ebe:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004ec2:	68fb      	ldr	r3, [r7, #12]
 8004ec4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004ec6:	2b00      	cmp	r3, #0
 8004ec8:	d001      	beq.n	8004ece <HAL_SPI_Transmit+0x27e>
  {
    return HAL_ERROR;
 8004eca:	2301      	movs	r3, #1
 8004ecc:	e000      	b.n	8004ed0 <HAL_SPI_Transmit+0x280>
  }
  else
  {
    return HAL_OK;
 8004ece:	2300      	movs	r3, #0
  }
}
 8004ed0:	4618      	mov	r0, r3
 8004ed2:	3720      	adds	r7, #32
 8004ed4:	46bd      	mov	sp, r7
 8004ed6:	bd80      	pop	{r7, pc}

08004ed8 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004ed8:	b580      	push	{r7, lr}
 8004eda:	b088      	sub	sp, #32
 8004edc:	af02      	add	r7, sp, #8
 8004ede:	60f8      	str	r0, [r7, #12]
 8004ee0:	60b9      	str	r1, [r7, #8]
 8004ee2:	603b      	str	r3, [r7, #0]
 8004ee4:	4613      	mov	r3, r2
 8004ee6:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;

  if (hspi->State != HAL_SPI_STATE_READY)
 8004ee8:	68fb      	ldr	r3, [r7, #12]
 8004eea:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8004eee:	b2db      	uxtb	r3, r3
 8004ef0:	2b01      	cmp	r3, #1
 8004ef2:	d001      	beq.n	8004ef8 <HAL_SPI_Receive+0x20>
  {
    return HAL_BUSY;
 8004ef4:	2302      	movs	r3, #2
 8004ef6:	e104      	b.n	8005102 <HAL_SPI_Receive+0x22a>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8004ef8:	68fb      	ldr	r3, [r7, #12]
 8004efa:	685b      	ldr	r3, [r3, #4]
 8004efc:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8004f00:	d112      	bne.n	8004f28 <HAL_SPI_Receive+0x50>
 8004f02:	68fb      	ldr	r3, [r7, #12]
 8004f04:	689b      	ldr	r3, [r3, #8]
 8004f06:	2b00      	cmp	r3, #0
 8004f08:	d10e      	bne.n	8004f28 <HAL_SPI_Receive+0x50>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8004f0a:	68fb      	ldr	r3, [r7, #12]
 8004f0c:	2204      	movs	r2, #4
 8004f0e:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8004f12:	88fa      	ldrh	r2, [r7, #6]
 8004f14:	683b      	ldr	r3, [r7, #0]
 8004f16:	9300      	str	r3, [sp, #0]
 8004f18:	4613      	mov	r3, r2
 8004f1a:	68ba      	ldr	r2, [r7, #8]
 8004f1c:	68b9      	ldr	r1, [r7, #8]
 8004f1e:	68f8      	ldr	r0, [r7, #12]
 8004f20:	f000 f8f3 	bl	800510a <HAL_SPI_TransmitReceive>
 8004f24:	4603      	mov	r3, r0
 8004f26:	e0ec      	b.n	8005102 <HAL_SPI_Receive+0x22a>
  }

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004f28:	f7fd fa66 	bl	80023f8 <HAL_GetTick>
 8004f2c:	6178      	str	r0, [r7, #20]

  if ((pData == NULL) || (Size == 0U))
 8004f2e:	68bb      	ldr	r3, [r7, #8]
 8004f30:	2b00      	cmp	r3, #0
 8004f32:	d002      	beq.n	8004f3a <HAL_SPI_Receive+0x62>
 8004f34:	88fb      	ldrh	r3, [r7, #6]
 8004f36:	2b00      	cmp	r3, #0
 8004f38:	d101      	bne.n	8004f3e <HAL_SPI_Receive+0x66>
  {
    return HAL_ERROR;
 8004f3a:	2301      	movs	r3, #1
 8004f3c:	e0e1      	b.n	8005102 <HAL_SPI_Receive+0x22a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004f3e:	68fb      	ldr	r3, [r7, #12]
 8004f40:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8004f44:	2b01      	cmp	r3, #1
 8004f46:	d101      	bne.n	8004f4c <HAL_SPI_Receive+0x74>
 8004f48:	2302      	movs	r3, #2
 8004f4a:	e0da      	b.n	8005102 <HAL_SPI_Receive+0x22a>
 8004f4c:	68fb      	ldr	r3, [r7, #12]
 8004f4e:	2201      	movs	r2, #1
 8004f50:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8004f54:	68fb      	ldr	r3, [r7, #12]
 8004f56:	2204      	movs	r2, #4
 8004f58:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004f5c:	68fb      	ldr	r3, [r7, #12]
 8004f5e:	2200      	movs	r2, #0
 8004f60:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8004f62:	68fb      	ldr	r3, [r7, #12]
 8004f64:	68ba      	ldr	r2, [r7, #8]
 8004f66:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = Size;
 8004f68:	68fb      	ldr	r3, [r7, #12]
 8004f6a:	88fa      	ldrh	r2, [r7, #6]
 8004f6c:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = Size;
 8004f6e:	68fb      	ldr	r3, [r7, #12]
 8004f70:	88fa      	ldrh	r2, [r7, #6]
 8004f72:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8004f74:	68fb      	ldr	r3, [r7, #12]
 8004f76:	2200      	movs	r2, #0
 8004f78:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = 0U;
 8004f7a:	68fb      	ldr	r3, [r7, #12]
 8004f7c:	2200      	movs	r2, #0
 8004f7e:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = 0U;
 8004f80:	68fb      	ldr	r3, [r7, #12]
 8004f82:	2200      	movs	r2, #0
 8004f84:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->RxISR       = NULL;
 8004f86:	68fb      	ldr	r3, [r7, #12]
 8004f88:	2200      	movs	r2, #0
 8004f8a:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 8004f8c:	68fb      	ldr	r3, [r7, #12]
 8004f8e:	2200      	movs	r2, #0
 8004f90:	645a      	str	r2, [r3, #68]	@ 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004f92:	68fb      	ldr	r3, [r7, #12]
 8004f94:	689b      	ldr	r3, [r3, #8]
 8004f96:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004f9a:	d10f      	bne.n	8004fbc <HAL_SPI_Receive+0xe4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8004f9c:	68fb      	ldr	r3, [r7, #12]
 8004f9e:	681b      	ldr	r3, [r3, #0]
 8004fa0:	681a      	ldr	r2, [r3, #0]
 8004fa2:	68fb      	ldr	r3, [r7, #12]
 8004fa4:	681b      	ldr	r3, [r3, #0]
 8004fa6:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004faa:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8004fac:	68fb      	ldr	r3, [r7, #12]
 8004fae:	681b      	ldr	r3, [r3, #0]
 8004fb0:	681a      	ldr	r2, [r3, #0]
 8004fb2:	68fb      	ldr	r3, [r7, #12]
 8004fb4:	681b      	ldr	r3, [r3, #0]
 8004fb6:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8004fba:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004fbc:	68fb      	ldr	r3, [r7, #12]
 8004fbe:	681b      	ldr	r3, [r3, #0]
 8004fc0:	681b      	ldr	r3, [r3, #0]
 8004fc2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004fc6:	2b40      	cmp	r3, #64	@ 0x40
 8004fc8:	d007      	beq.n	8004fda <HAL_SPI_Receive+0x102>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004fca:	68fb      	ldr	r3, [r7, #12]
 8004fcc:	681b      	ldr	r3, [r3, #0]
 8004fce:	681a      	ldr	r2, [r3, #0]
 8004fd0:	68fb      	ldr	r3, [r7, #12]
 8004fd2:	681b      	ldr	r3, [r3, #0]
 8004fd4:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8004fd8:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8004fda:	68fb      	ldr	r3, [r7, #12]
 8004fdc:	68db      	ldr	r3, [r3, #12]
 8004fde:	2b00      	cmp	r3, #0
 8004fe0:	d170      	bne.n	80050c4 <HAL_SPI_Receive+0x1ec>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8004fe2:	e035      	b.n	8005050 <HAL_SPI_Receive+0x178>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8004fe4:	68fb      	ldr	r3, [r7, #12]
 8004fe6:	681b      	ldr	r3, [r3, #0]
 8004fe8:	689b      	ldr	r3, [r3, #8]
 8004fea:	f003 0301 	and.w	r3, r3, #1
 8004fee:	2b01      	cmp	r3, #1
 8004ff0:	d115      	bne.n	800501e <HAL_SPI_Receive+0x146>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8004ff2:	68fb      	ldr	r3, [r7, #12]
 8004ff4:	681b      	ldr	r3, [r3, #0]
 8004ff6:	f103 020c 	add.w	r2, r3, #12
 8004ffa:	68fb      	ldr	r3, [r7, #12]
 8004ffc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004ffe:	7812      	ldrb	r2, [r2, #0]
 8005000:	b2d2      	uxtb	r2, r2
 8005002:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8005004:	68fb      	ldr	r3, [r7, #12]
 8005006:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005008:	1c5a      	adds	r2, r3, #1
 800500a:	68fb      	ldr	r3, [r7, #12]
 800500c:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 800500e:	68fb      	ldr	r3, [r7, #12]
 8005010:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005012:	b29b      	uxth	r3, r3
 8005014:	3b01      	subs	r3, #1
 8005016:	b29a      	uxth	r2, r3
 8005018:	68fb      	ldr	r3, [r7, #12]
 800501a:	87da      	strh	r2, [r3, #62]	@ 0x3e
 800501c:	e018      	b.n	8005050 <HAL_SPI_Receive+0x178>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800501e:	f7fd f9eb 	bl	80023f8 <HAL_GetTick>
 8005022:	4602      	mov	r2, r0
 8005024:	697b      	ldr	r3, [r7, #20]
 8005026:	1ad3      	subs	r3, r2, r3
 8005028:	683a      	ldr	r2, [r7, #0]
 800502a:	429a      	cmp	r2, r3
 800502c:	d803      	bhi.n	8005036 <HAL_SPI_Receive+0x15e>
 800502e:	683b      	ldr	r3, [r7, #0]
 8005030:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005034:	d102      	bne.n	800503c <HAL_SPI_Receive+0x164>
 8005036:	683b      	ldr	r3, [r7, #0]
 8005038:	2b00      	cmp	r3, #0
 800503a:	d109      	bne.n	8005050 <HAL_SPI_Receive+0x178>
        {
          hspi->State = HAL_SPI_STATE_READY;
 800503c:	68fb      	ldr	r3, [r7, #12]
 800503e:	2201      	movs	r2, #1
 8005040:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8005044:	68fb      	ldr	r3, [r7, #12]
 8005046:	2200      	movs	r2, #0
 8005048:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 800504c:	2303      	movs	r3, #3
 800504e:	e058      	b.n	8005102 <HAL_SPI_Receive+0x22a>
    while (hspi->RxXferCount > 0U)
 8005050:	68fb      	ldr	r3, [r7, #12]
 8005052:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005054:	b29b      	uxth	r3, r3
 8005056:	2b00      	cmp	r3, #0
 8005058:	d1c4      	bne.n	8004fe4 <HAL_SPI_Receive+0x10c>
 800505a:	e038      	b.n	80050ce <HAL_SPI_Receive+0x1f6>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800505c:	68fb      	ldr	r3, [r7, #12]
 800505e:	681b      	ldr	r3, [r3, #0]
 8005060:	689b      	ldr	r3, [r3, #8]
 8005062:	f003 0301 	and.w	r3, r3, #1
 8005066:	2b01      	cmp	r3, #1
 8005068:	d113      	bne.n	8005092 <HAL_SPI_Receive+0x1ba>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800506a:	68fb      	ldr	r3, [r7, #12]
 800506c:	681b      	ldr	r3, [r3, #0]
 800506e:	68da      	ldr	r2, [r3, #12]
 8005070:	68fb      	ldr	r3, [r7, #12]
 8005072:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005074:	b292      	uxth	r2, r2
 8005076:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8005078:	68fb      	ldr	r3, [r7, #12]
 800507a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800507c:	1c9a      	adds	r2, r3, #2
 800507e:	68fb      	ldr	r3, [r7, #12]
 8005080:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8005082:	68fb      	ldr	r3, [r7, #12]
 8005084:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005086:	b29b      	uxth	r3, r3
 8005088:	3b01      	subs	r3, #1
 800508a:	b29a      	uxth	r2, r3
 800508c:	68fb      	ldr	r3, [r7, #12]
 800508e:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8005090:	e018      	b.n	80050c4 <HAL_SPI_Receive+0x1ec>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005092:	f7fd f9b1 	bl	80023f8 <HAL_GetTick>
 8005096:	4602      	mov	r2, r0
 8005098:	697b      	ldr	r3, [r7, #20]
 800509a:	1ad3      	subs	r3, r2, r3
 800509c:	683a      	ldr	r2, [r7, #0]
 800509e:	429a      	cmp	r2, r3
 80050a0:	d803      	bhi.n	80050aa <HAL_SPI_Receive+0x1d2>
 80050a2:	683b      	ldr	r3, [r7, #0]
 80050a4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80050a8:	d102      	bne.n	80050b0 <HAL_SPI_Receive+0x1d8>
 80050aa:	683b      	ldr	r3, [r7, #0]
 80050ac:	2b00      	cmp	r3, #0
 80050ae:	d109      	bne.n	80050c4 <HAL_SPI_Receive+0x1ec>
        {
          hspi->State = HAL_SPI_STATE_READY;
 80050b0:	68fb      	ldr	r3, [r7, #12]
 80050b2:	2201      	movs	r2, #1
 80050b4:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 80050b8:	68fb      	ldr	r3, [r7, #12]
 80050ba:	2200      	movs	r2, #0
 80050bc:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 80050c0:	2303      	movs	r3, #3
 80050c2:	e01e      	b.n	8005102 <HAL_SPI_Receive+0x22a>
    while (hspi->RxXferCount > 0U)
 80050c4:	68fb      	ldr	r3, [r7, #12]
 80050c6:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80050c8:	b29b      	uxth	r3, r3
 80050ca:	2b00      	cmp	r3, #0
 80050cc:	d1c6      	bne.n	800505c <HAL_SPI_Receive+0x184>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80050ce:	697a      	ldr	r2, [r7, #20]
 80050d0:	6839      	ldr	r1, [r7, #0]
 80050d2:	68f8      	ldr	r0, [r7, #12]
 80050d4:	f000 fa58 	bl	8005588 <SPI_EndRxTransaction>
 80050d8:	4603      	mov	r3, r0
 80050da:	2b00      	cmp	r3, #0
 80050dc:	d002      	beq.n	80050e4 <HAL_SPI_Receive+0x20c>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80050de:	68fb      	ldr	r3, [r7, #12]
 80050e0:	2220      	movs	r2, #32
 80050e2:	655a      	str	r2, [r3, #84]	@ 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  hspi->State = HAL_SPI_STATE_READY;
 80050e4:	68fb      	ldr	r3, [r7, #12]
 80050e6:	2201      	movs	r2, #1
 80050e8:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 80050ec:	68fb      	ldr	r3, [r7, #12]
 80050ee:	2200      	movs	r2, #0
 80050f0:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80050f4:	68fb      	ldr	r3, [r7, #12]
 80050f6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80050f8:	2b00      	cmp	r3, #0
 80050fa:	d001      	beq.n	8005100 <HAL_SPI_Receive+0x228>
  {
    return HAL_ERROR;
 80050fc:	2301      	movs	r3, #1
 80050fe:	e000      	b.n	8005102 <HAL_SPI_Receive+0x22a>
  }
  else
  {
    return HAL_OK;
 8005100:	2300      	movs	r3, #0
  }
}
 8005102:	4618      	mov	r0, r3
 8005104:	3718      	adds	r7, #24
 8005106:	46bd      	mov	sp, r7
 8005108:	bd80      	pop	{r7, pc}

0800510a <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                          uint16_t Size, uint32_t Timeout)
{
 800510a:	b580      	push	{r7, lr}
 800510c:	b08a      	sub	sp, #40	@ 0x28
 800510e:	af00      	add	r7, sp, #0
 8005110:	60f8      	str	r0, [r7, #12]
 8005112:	60b9      	str	r1, [r7, #8]
 8005114:	607a      	str	r2, [r7, #4]
 8005116:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8005118:	2301      	movs	r3, #1
 800511a:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800511c:	f7fd f96c 	bl	80023f8 <HAL_GetTick>
 8005120:	6238      	str	r0, [r7, #32]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8005122:	68fb      	ldr	r3, [r7, #12]
 8005124:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8005128:	77fb      	strb	r3, [r7, #31]
  tmp_mode            = hspi->Init.Mode;
 800512a:	68fb      	ldr	r3, [r7, #12]
 800512c:	685b      	ldr	r3, [r3, #4]
 800512e:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 8005130:	887b      	ldrh	r3, [r7, #2]
 8005132:	82fb      	strh	r3, [r7, #22]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8005134:	7ffb      	ldrb	r3, [r7, #31]
 8005136:	2b01      	cmp	r3, #1
 8005138:	d00c      	beq.n	8005154 <HAL_SPI_TransmitReceive+0x4a>
 800513a:	69bb      	ldr	r3, [r7, #24]
 800513c:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8005140:	d106      	bne.n	8005150 <HAL_SPI_TransmitReceive+0x46>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8005142:	68fb      	ldr	r3, [r7, #12]
 8005144:	689b      	ldr	r3, [r3, #8]
 8005146:	2b00      	cmp	r3, #0
 8005148:	d102      	bne.n	8005150 <HAL_SPI_TransmitReceive+0x46>
 800514a:	7ffb      	ldrb	r3, [r7, #31]
 800514c:	2b04      	cmp	r3, #4
 800514e:	d001      	beq.n	8005154 <HAL_SPI_TransmitReceive+0x4a>
  {
    return HAL_BUSY;
 8005150:	2302      	movs	r3, #2
 8005152:	e17f      	b.n	8005454 <HAL_SPI_TransmitReceive+0x34a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8005154:	68bb      	ldr	r3, [r7, #8]
 8005156:	2b00      	cmp	r3, #0
 8005158:	d005      	beq.n	8005166 <HAL_SPI_TransmitReceive+0x5c>
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	2b00      	cmp	r3, #0
 800515e:	d002      	beq.n	8005166 <HAL_SPI_TransmitReceive+0x5c>
 8005160:	887b      	ldrh	r3, [r7, #2]
 8005162:	2b00      	cmp	r3, #0
 8005164:	d101      	bne.n	800516a <HAL_SPI_TransmitReceive+0x60>
  {
    return HAL_ERROR;
 8005166:	2301      	movs	r3, #1
 8005168:	e174      	b.n	8005454 <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 800516a:	68fb      	ldr	r3, [r7, #12]
 800516c:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8005170:	2b01      	cmp	r3, #1
 8005172:	d101      	bne.n	8005178 <HAL_SPI_TransmitReceive+0x6e>
 8005174:	2302      	movs	r3, #2
 8005176:	e16d      	b.n	8005454 <HAL_SPI_TransmitReceive+0x34a>
 8005178:	68fb      	ldr	r3, [r7, #12]
 800517a:	2201      	movs	r2, #1
 800517c:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8005180:	68fb      	ldr	r3, [r7, #12]
 8005182:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8005186:	b2db      	uxtb	r3, r3
 8005188:	2b04      	cmp	r3, #4
 800518a:	d003      	beq.n	8005194 <HAL_SPI_TransmitReceive+0x8a>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800518c:	68fb      	ldr	r3, [r7, #12]
 800518e:	2205      	movs	r2, #5
 8005190:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005194:	68fb      	ldr	r3, [r7, #12]
 8005196:	2200      	movs	r2, #0
 8005198:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800519a:	68fb      	ldr	r3, [r7, #12]
 800519c:	687a      	ldr	r2, [r7, #4]
 800519e:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferCount = Size;
 80051a0:	68fb      	ldr	r3, [r7, #12]
 80051a2:	887a      	ldrh	r2, [r7, #2]
 80051a4:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->RxXferSize  = Size;
 80051a6:	68fb      	ldr	r3, [r7, #12]
 80051a8:	887a      	ldrh	r2, [r7, #2]
 80051aa:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 80051ac:	68fb      	ldr	r3, [r7, #12]
 80051ae:	68ba      	ldr	r2, [r7, #8]
 80051b0:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferCount = Size;
 80051b2:	68fb      	ldr	r3, [r7, #12]
 80051b4:	887a      	ldrh	r2, [r7, #2]
 80051b6:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->TxXferSize  = Size;
 80051b8:	68fb      	ldr	r3, [r7, #12]
 80051ba:	887a      	ldrh	r2, [r7, #2]
 80051bc:	869a      	strh	r2, [r3, #52]	@ 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80051be:	68fb      	ldr	r3, [r7, #12]
 80051c0:	2200      	movs	r2, #0
 80051c2:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 80051c4:	68fb      	ldr	r3, [r7, #12]
 80051c6:	2200      	movs	r2, #0
 80051c8:	645a      	str	r2, [r3, #68]	@ 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80051ca:	68fb      	ldr	r3, [r7, #12]
 80051cc:	681b      	ldr	r3, [r3, #0]
 80051ce:	681b      	ldr	r3, [r3, #0]
 80051d0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80051d4:	2b40      	cmp	r3, #64	@ 0x40
 80051d6:	d007      	beq.n	80051e8 <HAL_SPI_TransmitReceive+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80051d8:	68fb      	ldr	r3, [r7, #12]
 80051da:	681b      	ldr	r3, [r3, #0]
 80051dc:	681a      	ldr	r2, [r3, #0]
 80051de:	68fb      	ldr	r3, [r7, #12]
 80051e0:	681b      	ldr	r3, [r3, #0]
 80051e2:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80051e6:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80051e8:	68fb      	ldr	r3, [r7, #12]
 80051ea:	68db      	ldr	r3, [r3, #12]
 80051ec:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80051f0:	d17e      	bne.n	80052f0 <HAL_SPI_TransmitReceive+0x1e6>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80051f2:	68fb      	ldr	r3, [r7, #12]
 80051f4:	685b      	ldr	r3, [r3, #4]
 80051f6:	2b00      	cmp	r3, #0
 80051f8:	d002      	beq.n	8005200 <HAL_SPI_TransmitReceive+0xf6>
 80051fa:	8afb      	ldrh	r3, [r7, #22]
 80051fc:	2b01      	cmp	r3, #1
 80051fe:	d16c      	bne.n	80052da <HAL_SPI_TransmitReceive+0x1d0>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8005200:	68fb      	ldr	r3, [r7, #12]
 8005202:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005204:	881a      	ldrh	r2, [r3, #0]
 8005206:	68fb      	ldr	r3, [r7, #12]
 8005208:	681b      	ldr	r3, [r3, #0]
 800520a:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800520c:	68fb      	ldr	r3, [r7, #12]
 800520e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005210:	1c9a      	adds	r2, r3, #2
 8005212:	68fb      	ldr	r3, [r7, #12]
 8005214:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8005216:	68fb      	ldr	r3, [r7, #12]
 8005218:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800521a:	b29b      	uxth	r3, r3
 800521c:	3b01      	subs	r3, #1
 800521e:	b29a      	uxth	r2, r3
 8005220:	68fb      	ldr	r3, [r7, #12]
 8005222:	86da      	strh	r2, [r3, #54]	@ 0x36
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005224:	e059      	b.n	80052da <HAL_SPI_TransmitReceive+0x1d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8005226:	68fb      	ldr	r3, [r7, #12]
 8005228:	681b      	ldr	r3, [r3, #0]
 800522a:	689b      	ldr	r3, [r3, #8]
 800522c:	f003 0302 	and.w	r3, r3, #2
 8005230:	2b02      	cmp	r3, #2
 8005232:	d11b      	bne.n	800526c <HAL_SPI_TransmitReceive+0x162>
 8005234:	68fb      	ldr	r3, [r7, #12]
 8005236:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005238:	b29b      	uxth	r3, r3
 800523a:	2b00      	cmp	r3, #0
 800523c:	d016      	beq.n	800526c <HAL_SPI_TransmitReceive+0x162>
 800523e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005240:	2b01      	cmp	r3, #1
 8005242:	d113      	bne.n	800526c <HAL_SPI_TransmitReceive+0x162>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8005244:	68fb      	ldr	r3, [r7, #12]
 8005246:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005248:	881a      	ldrh	r2, [r3, #0]
 800524a:	68fb      	ldr	r3, [r7, #12]
 800524c:	681b      	ldr	r3, [r3, #0]
 800524e:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005250:	68fb      	ldr	r3, [r7, #12]
 8005252:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005254:	1c9a      	adds	r2, r3, #2
 8005256:	68fb      	ldr	r3, [r7, #12]
 8005258:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 800525a:	68fb      	ldr	r3, [r7, #12]
 800525c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800525e:	b29b      	uxth	r3, r3
 8005260:	3b01      	subs	r3, #1
 8005262:	b29a      	uxth	r2, r3
 8005264:	68fb      	ldr	r3, [r7, #12]
 8005266:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8005268:	2300      	movs	r3, #0
 800526a:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800526c:	68fb      	ldr	r3, [r7, #12]
 800526e:	681b      	ldr	r3, [r3, #0]
 8005270:	689b      	ldr	r3, [r3, #8]
 8005272:	f003 0301 	and.w	r3, r3, #1
 8005276:	2b01      	cmp	r3, #1
 8005278:	d119      	bne.n	80052ae <HAL_SPI_TransmitReceive+0x1a4>
 800527a:	68fb      	ldr	r3, [r7, #12]
 800527c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800527e:	b29b      	uxth	r3, r3
 8005280:	2b00      	cmp	r3, #0
 8005282:	d014      	beq.n	80052ae <HAL_SPI_TransmitReceive+0x1a4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8005284:	68fb      	ldr	r3, [r7, #12]
 8005286:	681b      	ldr	r3, [r3, #0]
 8005288:	68da      	ldr	r2, [r3, #12]
 800528a:	68fb      	ldr	r3, [r7, #12]
 800528c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800528e:	b292      	uxth	r2, r2
 8005290:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8005292:	68fb      	ldr	r3, [r7, #12]
 8005294:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005296:	1c9a      	adds	r2, r3, #2
 8005298:	68fb      	ldr	r3, [r7, #12]
 800529a:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 800529c:	68fb      	ldr	r3, [r7, #12]
 800529e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80052a0:	b29b      	uxth	r3, r3
 80052a2:	3b01      	subs	r3, #1
 80052a4:	b29a      	uxth	r2, r3
 80052a6:	68fb      	ldr	r3, [r7, #12]
 80052a8:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80052aa:	2301      	movs	r3, #1
 80052ac:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 80052ae:	f7fd f8a3 	bl	80023f8 <HAL_GetTick>
 80052b2:	4602      	mov	r2, r0
 80052b4:	6a3b      	ldr	r3, [r7, #32]
 80052b6:	1ad3      	subs	r3, r2, r3
 80052b8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80052ba:	429a      	cmp	r2, r3
 80052bc:	d80d      	bhi.n	80052da <HAL_SPI_TransmitReceive+0x1d0>
 80052be:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80052c0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80052c4:	d009      	beq.n	80052da <HAL_SPI_TransmitReceive+0x1d0>
      {
        hspi->State = HAL_SPI_STATE_READY;
 80052c6:	68fb      	ldr	r3, [r7, #12]
 80052c8:	2201      	movs	r2, #1
 80052ca:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 80052ce:	68fb      	ldr	r3, [r7, #12]
 80052d0:	2200      	movs	r2, #0
 80052d2:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 80052d6:	2303      	movs	r3, #3
 80052d8:	e0bc      	b.n	8005454 <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80052da:	68fb      	ldr	r3, [r7, #12]
 80052dc:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80052de:	b29b      	uxth	r3, r3
 80052e0:	2b00      	cmp	r3, #0
 80052e2:	d1a0      	bne.n	8005226 <HAL_SPI_TransmitReceive+0x11c>
 80052e4:	68fb      	ldr	r3, [r7, #12]
 80052e6:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80052e8:	b29b      	uxth	r3, r3
 80052ea:	2b00      	cmp	r3, #0
 80052ec:	d19b      	bne.n	8005226 <HAL_SPI_TransmitReceive+0x11c>
 80052ee:	e082      	b.n	80053f6 <HAL_SPI_TransmitReceive+0x2ec>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80052f0:	68fb      	ldr	r3, [r7, #12]
 80052f2:	685b      	ldr	r3, [r3, #4]
 80052f4:	2b00      	cmp	r3, #0
 80052f6:	d002      	beq.n	80052fe <HAL_SPI_TransmitReceive+0x1f4>
 80052f8:	8afb      	ldrh	r3, [r7, #22]
 80052fa:	2b01      	cmp	r3, #1
 80052fc:	d171      	bne.n	80053e2 <HAL_SPI_TransmitReceive+0x2d8>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 80052fe:	68fb      	ldr	r3, [r7, #12]
 8005300:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8005302:	68fb      	ldr	r3, [r7, #12]
 8005304:	681b      	ldr	r3, [r3, #0]
 8005306:	330c      	adds	r3, #12
 8005308:	7812      	ldrb	r2, [r2, #0]
 800530a:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800530c:	68fb      	ldr	r3, [r7, #12]
 800530e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005310:	1c5a      	adds	r2, r3, #1
 8005312:	68fb      	ldr	r3, [r7, #12]
 8005314:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8005316:	68fb      	ldr	r3, [r7, #12]
 8005318:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800531a:	b29b      	uxth	r3, r3
 800531c:	3b01      	subs	r3, #1
 800531e:	b29a      	uxth	r2, r3
 8005320:	68fb      	ldr	r3, [r7, #12]
 8005322:	86da      	strh	r2, [r3, #54]	@ 0x36
      {
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005324:	e05d      	b.n	80053e2 <HAL_SPI_TransmitReceive+0x2d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8005326:	68fb      	ldr	r3, [r7, #12]
 8005328:	681b      	ldr	r3, [r3, #0]
 800532a:	689b      	ldr	r3, [r3, #8]
 800532c:	f003 0302 	and.w	r3, r3, #2
 8005330:	2b02      	cmp	r3, #2
 8005332:	d11c      	bne.n	800536e <HAL_SPI_TransmitReceive+0x264>
 8005334:	68fb      	ldr	r3, [r7, #12]
 8005336:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005338:	b29b      	uxth	r3, r3
 800533a:	2b00      	cmp	r3, #0
 800533c:	d017      	beq.n	800536e <HAL_SPI_TransmitReceive+0x264>
 800533e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005340:	2b01      	cmp	r3, #1
 8005342:	d114      	bne.n	800536e <HAL_SPI_TransmitReceive+0x264>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 8005344:	68fb      	ldr	r3, [r7, #12]
 8005346:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8005348:	68fb      	ldr	r3, [r7, #12]
 800534a:	681b      	ldr	r3, [r3, #0]
 800534c:	330c      	adds	r3, #12
 800534e:	7812      	ldrb	r2, [r2, #0]
 8005350:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8005352:	68fb      	ldr	r3, [r7, #12]
 8005354:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005356:	1c5a      	adds	r2, r3, #1
 8005358:	68fb      	ldr	r3, [r7, #12]
 800535a:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 800535c:	68fb      	ldr	r3, [r7, #12]
 800535e:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005360:	b29b      	uxth	r3, r3
 8005362:	3b01      	subs	r3, #1
 8005364:	b29a      	uxth	r2, r3
 8005366:	68fb      	ldr	r3, [r7, #12]
 8005368:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800536a:	2300      	movs	r3, #0
 800536c:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800536e:	68fb      	ldr	r3, [r7, #12]
 8005370:	681b      	ldr	r3, [r3, #0]
 8005372:	689b      	ldr	r3, [r3, #8]
 8005374:	f003 0301 	and.w	r3, r3, #1
 8005378:	2b01      	cmp	r3, #1
 800537a:	d119      	bne.n	80053b0 <HAL_SPI_TransmitReceive+0x2a6>
 800537c:	68fb      	ldr	r3, [r7, #12]
 800537e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005380:	b29b      	uxth	r3, r3
 8005382:	2b00      	cmp	r3, #0
 8005384:	d014      	beq.n	80053b0 <HAL_SPI_TransmitReceive+0x2a6>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8005386:	68fb      	ldr	r3, [r7, #12]
 8005388:	681b      	ldr	r3, [r3, #0]
 800538a:	68da      	ldr	r2, [r3, #12]
 800538c:	68fb      	ldr	r3, [r7, #12]
 800538e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005390:	b2d2      	uxtb	r2, r2
 8005392:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8005394:	68fb      	ldr	r3, [r7, #12]
 8005396:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005398:	1c5a      	adds	r2, r3, #1
 800539a:	68fb      	ldr	r3, [r7, #12]
 800539c:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 800539e:	68fb      	ldr	r3, [r7, #12]
 80053a0:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80053a2:	b29b      	uxth	r3, r3
 80053a4:	3b01      	subs	r3, #1
 80053a6:	b29a      	uxth	r2, r3
 80053a8:	68fb      	ldr	r3, [r7, #12]
 80053aa:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80053ac:	2301      	movs	r3, #1
 80053ae:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 80053b0:	f7fd f822 	bl	80023f8 <HAL_GetTick>
 80053b4:	4602      	mov	r2, r0
 80053b6:	6a3b      	ldr	r3, [r7, #32]
 80053b8:	1ad3      	subs	r3, r2, r3
 80053ba:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80053bc:	429a      	cmp	r2, r3
 80053be:	d803      	bhi.n	80053c8 <HAL_SPI_TransmitReceive+0x2be>
 80053c0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80053c2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80053c6:	d102      	bne.n	80053ce <HAL_SPI_TransmitReceive+0x2c4>
 80053c8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80053ca:	2b00      	cmp	r3, #0
 80053cc:	d109      	bne.n	80053e2 <HAL_SPI_TransmitReceive+0x2d8>
      {
        hspi->State = HAL_SPI_STATE_READY;
 80053ce:	68fb      	ldr	r3, [r7, #12]
 80053d0:	2201      	movs	r2, #1
 80053d2:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 80053d6:	68fb      	ldr	r3, [r7, #12]
 80053d8:	2200      	movs	r2, #0
 80053da:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 80053de:	2303      	movs	r3, #3
 80053e0:	e038      	b.n	8005454 <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80053e2:	68fb      	ldr	r3, [r7, #12]
 80053e4:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80053e6:	b29b      	uxth	r3, r3
 80053e8:	2b00      	cmp	r3, #0
 80053ea:	d19c      	bne.n	8005326 <HAL_SPI_TransmitReceive+0x21c>
 80053ec:	68fb      	ldr	r3, [r7, #12]
 80053ee:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80053f0:	b29b      	uxth	r3, r3
 80053f2:	2b00      	cmp	r3, #0
 80053f4:	d197      	bne.n	8005326 <HAL_SPI_TransmitReceive+0x21c>
    return HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80053f6:	6a3a      	ldr	r2, [r7, #32]
 80053f8:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 80053fa:	68f8      	ldr	r0, [r7, #12]
 80053fc:	f000 f92a 	bl	8005654 <SPI_EndRxTxTransaction>
 8005400:	4603      	mov	r3, r0
 8005402:	2b00      	cmp	r3, #0
 8005404:	d008      	beq.n	8005418 <HAL_SPI_TransmitReceive+0x30e>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005406:	68fb      	ldr	r3, [r7, #12]
 8005408:	2220      	movs	r2, #32
 800540a:	655a      	str	r2, [r3, #84]	@ 0x54
    __HAL_UNLOCK(hspi);
 800540c:	68fb      	ldr	r3, [r7, #12]
 800540e:	2200      	movs	r2, #0
 8005410:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
    return HAL_ERROR;
 8005414:	2301      	movs	r3, #1
 8005416:	e01d      	b.n	8005454 <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8005418:	68fb      	ldr	r3, [r7, #12]
 800541a:	689b      	ldr	r3, [r3, #8]
 800541c:	2b00      	cmp	r3, #0
 800541e:	d10a      	bne.n	8005436 <HAL_SPI_TransmitReceive+0x32c>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8005420:	2300      	movs	r3, #0
 8005422:	613b      	str	r3, [r7, #16]
 8005424:	68fb      	ldr	r3, [r7, #12]
 8005426:	681b      	ldr	r3, [r3, #0]
 8005428:	68db      	ldr	r3, [r3, #12]
 800542a:	613b      	str	r3, [r7, #16]
 800542c:	68fb      	ldr	r3, [r7, #12]
 800542e:	681b      	ldr	r3, [r3, #0]
 8005430:	689b      	ldr	r3, [r3, #8]
 8005432:	613b      	str	r3, [r7, #16]
 8005434:	693b      	ldr	r3, [r7, #16]
  }


  hspi->State = HAL_SPI_STATE_READY;
 8005436:	68fb      	ldr	r3, [r7, #12]
 8005438:	2201      	movs	r2, #1
 800543a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 800543e:	68fb      	ldr	r3, [r7, #12]
 8005440:	2200      	movs	r2, #0
 8005442:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005446:	68fb      	ldr	r3, [r7, #12]
 8005448:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800544a:	2b00      	cmp	r3, #0
 800544c:	d001      	beq.n	8005452 <HAL_SPI_TransmitReceive+0x348>
  {
    return HAL_ERROR;
 800544e:	2301      	movs	r3, #1
 8005450:	e000      	b.n	8005454 <HAL_SPI_TransmitReceive+0x34a>
  }
  else
  {
    return HAL_OK;
 8005452:	2300      	movs	r3, #0
  }
}
 8005454:	4618      	mov	r0, r3
 8005456:	3728      	adds	r7, #40	@ 0x28
 8005458:	46bd      	mov	sp, r7
 800545a:	bd80      	pop	{r7, pc}

0800545c <HAL_SPI_GetState>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI state
  */
HAL_SPI_StateTypeDef HAL_SPI_GetState(const SPI_HandleTypeDef *hspi)
{
 800545c:	b480      	push	{r7}
 800545e:	b083      	sub	sp, #12
 8005460:	af00      	add	r7, sp, #0
 8005462:	6078      	str	r0, [r7, #4]
  /* Return SPI handle state */
  return hspi->State;
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800546a:	b2db      	uxtb	r3, r3
}
 800546c:	4618      	mov	r0, r3
 800546e:	370c      	adds	r7, #12
 8005470:	46bd      	mov	sp, r7
 8005472:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005476:	4770      	bx	lr

08005478 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8005478:	b580      	push	{r7, lr}
 800547a:	b088      	sub	sp, #32
 800547c:	af00      	add	r7, sp, #0
 800547e:	60f8      	str	r0, [r7, #12]
 8005480:	60b9      	str	r1, [r7, #8]
 8005482:	603b      	str	r3, [r7, #0]
 8005484:	4613      	mov	r3, r2
 8005486:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8005488:	f7fc ffb6 	bl	80023f8 <HAL_GetTick>
 800548c:	4602      	mov	r2, r0
 800548e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005490:	1a9b      	subs	r3, r3, r2
 8005492:	683a      	ldr	r2, [r7, #0]
 8005494:	4413      	add	r3, r2
 8005496:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8005498:	f7fc ffae 	bl	80023f8 <HAL_GetTick>
 800549c:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800549e:	4b39      	ldr	r3, [pc, #228]	@ (8005584 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80054a0:	681b      	ldr	r3, [r3, #0]
 80054a2:	015b      	lsls	r3, r3, #5
 80054a4:	0d1b      	lsrs	r3, r3, #20
 80054a6:	69fa      	ldr	r2, [r7, #28]
 80054a8:	fb02 f303 	mul.w	r3, r2, r3
 80054ac:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80054ae:	e054      	b.n	800555a <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 80054b0:	683b      	ldr	r3, [r7, #0]
 80054b2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80054b6:	d050      	beq.n	800555a <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80054b8:	f7fc ff9e 	bl	80023f8 <HAL_GetTick>
 80054bc:	4602      	mov	r2, r0
 80054be:	69bb      	ldr	r3, [r7, #24]
 80054c0:	1ad3      	subs	r3, r2, r3
 80054c2:	69fa      	ldr	r2, [r7, #28]
 80054c4:	429a      	cmp	r2, r3
 80054c6:	d902      	bls.n	80054ce <SPI_WaitFlagStateUntilTimeout+0x56>
 80054c8:	69fb      	ldr	r3, [r7, #28]
 80054ca:	2b00      	cmp	r3, #0
 80054cc:	d13d      	bne.n	800554a <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80054ce:	68fb      	ldr	r3, [r7, #12]
 80054d0:	681b      	ldr	r3, [r3, #0]
 80054d2:	685a      	ldr	r2, [r3, #4]
 80054d4:	68fb      	ldr	r3, [r7, #12]
 80054d6:	681b      	ldr	r3, [r3, #0]
 80054d8:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 80054dc:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80054de:	68fb      	ldr	r3, [r7, #12]
 80054e0:	685b      	ldr	r3, [r3, #4]
 80054e2:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80054e6:	d111      	bne.n	800550c <SPI_WaitFlagStateUntilTimeout+0x94>
 80054e8:	68fb      	ldr	r3, [r7, #12]
 80054ea:	689b      	ldr	r3, [r3, #8]
 80054ec:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80054f0:	d004      	beq.n	80054fc <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80054f2:	68fb      	ldr	r3, [r7, #12]
 80054f4:	689b      	ldr	r3, [r3, #8]
 80054f6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80054fa:	d107      	bne.n	800550c <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80054fc:	68fb      	ldr	r3, [r7, #12]
 80054fe:	681b      	ldr	r3, [r3, #0]
 8005500:	681a      	ldr	r2, [r3, #0]
 8005502:	68fb      	ldr	r3, [r7, #12]
 8005504:	681b      	ldr	r3, [r3, #0]
 8005506:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800550a:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800550c:	68fb      	ldr	r3, [r7, #12]
 800550e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005510:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005514:	d10f      	bne.n	8005536 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8005516:	68fb      	ldr	r3, [r7, #12]
 8005518:	681b      	ldr	r3, [r3, #0]
 800551a:	681a      	ldr	r2, [r3, #0]
 800551c:	68fb      	ldr	r3, [r7, #12]
 800551e:	681b      	ldr	r3, [r3, #0]
 8005520:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8005524:	601a      	str	r2, [r3, #0]
 8005526:	68fb      	ldr	r3, [r7, #12]
 8005528:	681b      	ldr	r3, [r3, #0]
 800552a:	681a      	ldr	r2, [r3, #0]
 800552c:	68fb      	ldr	r3, [r7, #12]
 800552e:	681b      	ldr	r3, [r3, #0]
 8005530:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8005534:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8005536:	68fb      	ldr	r3, [r7, #12]
 8005538:	2201      	movs	r2, #1
 800553a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800553e:	68fb      	ldr	r3, [r7, #12]
 8005540:	2200      	movs	r2, #0
 8005542:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 8005546:	2303      	movs	r3, #3
 8005548:	e017      	b.n	800557a <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800554a:	697b      	ldr	r3, [r7, #20]
 800554c:	2b00      	cmp	r3, #0
 800554e:	d101      	bne.n	8005554 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8005550:	2300      	movs	r3, #0
 8005552:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8005554:	697b      	ldr	r3, [r7, #20]
 8005556:	3b01      	subs	r3, #1
 8005558:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800555a:	68fb      	ldr	r3, [r7, #12]
 800555c:	681b      	ldr	r3, [r3, #0]
 800555e:	689a      	ldr	r2, [r3, #8]
 8005560:	68bb      	ldr	r3, [r7, #8]
 8005562:	4013      	ands	r3, r2
 8005564:	68ba      	ldr	r2, [r7, #8]
 8005566:	429a      	cmp	r2, r3
 8005568:	bf0c      	ite	eq
 800556a:	2301      	moveq	r3, #1
 800556c:	2300      	movne	r3, #0
 800556e:	b2db      	uxtb	r3, r3
 8005570:	461a      	mov	r2, r3
 8005572:	79fb      	ldrb	r3, [r7, #7]
 8005574:	429a      	cmp	r2, r3
 8005576:	d19b      	bne.n	80054b0 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8005578:	2300      	movs	r3, #0
}
 800557a:	4618      	mov	r0, r3
 800557c:	3720      	adds	r7, #32
 800557e:	46bd      	mov	sp, r7
 8005580:	bd80      	pop	{r7, pc}
 8005582:	bf00      	nop
 8005584:	20000048 	.word	0x20000048

08005588 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8005588:	b580      	push	{r7, lr}
 800558a:	b086      	sub	sp, #24
 800558c:	af02      	add	r7, sp, #8
 800558e:	60f8      	str	r0, [r7, #12]
 8005590:	60b9      	str	r1, [r7, #8]
 8005592:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005594:	68fb      	ldr	r3, [r7, #12]
 8005596:	685b      	ldr	r3, [r3, #4]
 8005598:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800559c:	d111      	bne.n	80055c2 <SPI_EndRxTransaction+0x3a>
 800559e:	68fb      	ldr	r3, [r7, #12]
 80055a0:	689b      	ldr	r3, [r3, #8]
 80055a2:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80055a6:	d004      	beq.n	80055b2 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80055a8:	68fb      	ldr	r3, [r7, #12]
 80055aa:	689b      	ldr	r3, [r3, #8]
 80055ac:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80055b0:	d107      	bne.n	80055c2 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 80055b2:	68fb      	ldr	r3, [r7, #12]
 80055b4:	681b      	ldr	r3, [r3, #0]
 80055b6:	681a      	ldr	r2, [r3, #0]
 80055b8:	68fb      	ldr	r3, [r7, #12]
 80055ba:	681b      	ldr	r3, [r3, #0]
 80055bc:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80055c0:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80055c2:	68fb      	ldr	r3, [r7, #12]
 80055c4:	685b      	ldr	r3, [r3, #4]
 80055c6:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80055ca:	d12a      	bne.n	8005622 <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 80055cc:	68fb      	ldr	r3, [r7, #12]
 80055ce:	689b      	ldr	r3, [r3, #8]
 80055d0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80055d4:	d012      	beq.n	80055fc <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80055d6:	687b      	ldr	r3, [r7, #4]
 80055d8:	9300      	str	r3, [sp, #0]
 80055da:	68bb      	ldr	r3, [r7, #8]
 80055dc:	2200      	movs	r2, #0
 80055de:	2180      	movs	r1, #128	@ 0x80
 80055e0:	68f8      	ldr	r0, [r7, #12]
 80055e2:	f7ff ff49 	bl	8005478 <SPI_WaitFlagStateUntilTimeout>
 80055e6:	4603      	mov	r3, r0
 80055e8:	2b00      	cmp	r3, #0
 80055ea:	d02d      	beq.n	8005648 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80055ec:	68fb      	ldr	r3, [r7, #12]
 80055ee:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80055f0:	f043 0220 	orr.w	r2, r3, #32
 80055f4:	68fb      	ldr	r3, [r7, #12]
 80055f6:	655a      	str	r2, [r3, #84]	@ 0x54
        return HAL_TIMEOUT;
 80055f8:	2303      	movs	r3, #3
 80055fa:	e026      	b.n	800564a <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	9300      	str	r3, [sp, #0]
 8005600:	68bb      	ldr	r3, [r7, #8]
 8005602:	2200      	movs	r2, #0
 8005604:	2101      	movs	r1, #1
 8005606:	68f8      	ldr	r0, [r7, #12]
 8005608:	f7ff ff36 	bl	8005478 <SPI_WaitFlagStateUntilTimeout>
 800560c:	4603      	mov	r3, r0
 800560e:	2b00      	cmp	r3, #0
 8005610:	d01a      	beq.n	8005648 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005612:	68fb      	ldr	r3, [r7, #12]
 8005614:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005616:	f043 0220 	orr.w	r2, r3, #32
 800561a:	68fb      	ldr	r3, [r7, #12]
 800561c:	655a      	str	r2, [r3, #84]	@ 0x54
        return HAL_TIMEOUT;
 800561e:	2303      	movs	r3, #3
 8005620:	e013      	b.n	800564a <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	9300      	str	r3, [sp, #0]
 8005626:	68bb      	ldr	r3, [r7, #8]
 8005628:	2200      	movs	r2, #0
 800562a:	2101      	movs	r1, #1
 800562c:	68f8      	ldr	r0, [r7, #12]
 800562e:	f7ff ff23 	bl	8005478 <SPI_WaitFlagStateUntilTimeout>
 8005632:	4603      	mov	r3, r0
 8005634:	2b00      	cmp	r3, #0
 8005636:	d007      	beq.n	8005648 <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005638:	68fb      	ldr	r3, [r7, #12]
 800563a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800563c:	f043 0220 	orr.w	r2, r3, #32
 8005640:	68fb      	ldr	r3, [r7, #12]
 8005642:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 8005644:	2303      	movs	r3, #3
 8005646:	e000      	b.n	800564a <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 8005648:	2300      	movs	r3, #0
}
 800564a:	4618      	mov	r0, r3
 800564c:	3710      	adds	r7, #16
 800564e:	46bd      	mov	sp, r7
 8005650:	bd80      	pop	{r7, pc}
	...

08005654 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8005654:	b580      	push	{r7, lr}
 8005656:	b088      	sub	sp, #32
 8005658:	af02      	add	r7, sp, #8
 800565a:	60f8      	str	r0, [r7, #12]
 800565c:	60b9      	str	r1, [r7, #8]
 800565e:	607a      	str	r2, [r7, #4]
  /* Wait until TXE flag */
  if(SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	9300      	str	r3, [sp, #0]
 8005664:	68bb      	ldr	r3, [r7, #8]
 8005666:	2201      	movs	r2, #1
 8005668:	2102      	movs	r1, #2
 800566a:	68f8      	ldr	r0, [r7, #12]
 800566c:	f7ff ff04 	bl	8005478 <SPI_WaitFlagStateUntilTimeout>
 8005670:	4603      	mov	r3, r0
 8005672:	2b00      	cmp	r3, #0
 8005674:	d007      	beq.n	8005686 <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005676:	68fb      	ldr	r3, [r7, #12]
 8005678:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800567a:	f043 0220 	orr.w	r2, r3, #32
 800567e:	68fb      	ldr	r3, [r7, #12]
 8005680:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 8005682:	2303      	movs	r3, #3
 8005684:	e032      	b.n	80056ec <SPI_EndRxTxTransaction+0x98>
  }

  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8005686:	4b1b      	ldr	r3, [pc, #108]	@ (80056f4 <SPI_EndRxTxTransaction+0xa0>)
 8005688:	681b      	ldr	r3, [r3, #0]
 800568a:	4a1b      	ldr	r2, [pc, #108]	@ (80056f8 <SPI_EndRxTxTransaction+0xa4>)
 800568c:	fba2 2303 	umull	r2, r3, r2, r3
 8005690:	0d5b      	lsrs	r3, r3, #21
 8005692:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8005696:	fb02 f303 	mul.w	r3, r2, r3
 800569a:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800569c:	68fb      	ldr	r3, [r7, #12]
 800569e:	685b      	ldr	r3, [r3, #4]
 80056a0:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80056a4:	d112      	bne.n	80056cc <SPI_EndRxTxTransaction+0x78>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80056a6:	687b      	ldr	r3, [r7, #4]
 80056a8:	9300      	str	r3, [sp, #0]
 80056aa:	68bb      	ldr	r3, [r7, #8]
 80056ac:	2200      	movs	r2, #0
 80056ae:	2180      	movs	r1, #128	@ 0x80
 80056b0:	68f8      	ldr	r0, [r7, #12]
 80056b2:	f7ff fee1 	bl	8005478 <SPI_WaitFlagStateUntilTimeout>
 80056b6:	4603      	mov	r3, r0
 80056b8:	2b00      	cmp	r3, #0
 80056ba:	d016      	beq.n	80056ea <SPI_EndRxTxTransaction+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80056bc:	68fb      	ldr	r3, [r7, #12]
 80056be:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80056c0:	f043 0220 	orr.w	r2, r3, #32
 80056c4:	68fb      	ldr	r3, [r7, #12]
 80056c6:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 80056c8:	2303      	movs	r3, #3
 80056ca:	e00f      	b.n	80056ec <SPI_EndRxTxTransaction+0x98>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 80056cc:	697b      	ldr	r3, [r7, #20]
 80056ce:	2b00      	cmp	r3, #0
 80056d0:	d00a      	beq.n	80056e8 <SPI_EndRxTxTransaction+0x94>
      {
        break;
      }
      count--;
 80056d2:	697b      	ldr	r3, [r7, #20]
 80056d4:	3b01      	subs	r3, #1
 80056d6:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 80056d8:	68fb      	ldr	r3, [r7, #12]
 80056da:	681b      	ldr	r3, [r3, #0]
 80056dc:	689b      	ldr	r3, [r3, #8]
 80056de:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80056e2:	2b80      	cmp	r3, #128	@ 0x80
 80056e4:	d0f2      	beq.n	80056cc <SPI_EndRxTxTransaction+0x78>
 80056e6:	e000      	b.n	80056ea <SPI_EndRxTxTransaction+0x96>
        break;
 80056e8:	bf00      	nop
  }

  return HAL_OK;
 80056ea:	2300      	movs	r3, #0
}
 80056ec:	4618      	mov	r0, r3
 80056ee:	3718      	adds	r7, #24
 80056f0:	46bd      	mov	sp, r7
 80056f2:	bd80      	pop	{r7, pc}
 80056f4:	20000048 	.word	0x20000048
 80056f8:	165e9f81 	.word	0x165e9f81

080056fc <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80056fc:	b580      	push	{r7, lr}
 80056fe:	b082      	sub	sp, #8
 8005700:	af00      	add	r7, sp, #0
 8005702:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	2b00      	cmp	r3, #0
 8005708:	d101      	bne.n	800570e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800570a:	2301      	movs	r3, #1
 800570c:	e041      	b.n	8005792 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800570e:	687b      	ldr	r3, [r7, #4]
 8005710:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005714:	b2db      	uxtb	r3, r3
 8005716:	2b00      	cmp	r3, #0
 8005718:	d106      	bne.n	8005728 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800571a:	687b      	ldr	r3, [r7, #4]
 800571c:	2200      	movs	r2, #0
 800571e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005722:	6878      	ldr	r0, [r7, #4]
 8005724:	f7fc fc44 	bl	8001fb0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005728:	687b      	ldr	r3, [r7, #4]
 800572a:	2202      	movs	r2, #2
 800572c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	681a      	ldr	r2, [r3, #0]
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	3304      	adds	r3, #4
 8005738:	4619      	mov	r1, r3
 800573a:	4610      	mov	r0, r2
 800573c:	f000 fa7e 	bl	8005c3c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005740:	687b      	ldr	r3, [r7, #4]
 8005742:	2201      	movs	r2, #1
 8005744:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005748:	687b      	ldr	r3, [r7, #4]
 800574a:	2201      	movs	r2, #1
 800574c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	2201      	movs	r2, #1
 8005754:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	2201      	movs	r2, #1
 800575c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	2201      	movs	r2, #1
 8005764:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	2201      	movs	r2, #1
 800576c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	2201      	movs	r2, #1
 8005774:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8005778:	687b      	ldr	r3, [r7, #4]
 800577a:	2201      	movs	r2, #1
 800577c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	2201      	movs	r2, #1
 8005784:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	2201      	movs	r2, #1
 800578c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8005790:	2300      	movs	r3, #0
}
 8005792:	4618      	mov	r0, r3
 8005794:	3708      	adds	r7, #8
 8005796:	46bd      	mov	sp, r7
 8005798:	bd80      	pop	{r7, pc}
	...

0800579c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800579c:	b480      	push	{r7}
 800579e:	b085      	sub	sp, #20
 80057a0:	af00      	add	r7, sp, #0
 80057a2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80057a4:	687b      	ldr	r3, [r7, #4]
 80057a6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80057aa:	b2db      	uxtb	r3, r3
 80057ac:	2b01      	cmp	r3, #1
 80057ae:	d001      	beq.n	80057b4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80057b0:	2301      	movs	r3, #1
 80057b2:	e04e      	b.n	8005852 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80057b4:	687b      	ldr	r3, [r7, #4]
 80057b6:	2202      	movs	r2, #2
 80057b8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	681b      	ldr	r3, [r3, #0]
 80057c0:	68da      	ldr	r2, [r3, #12]
 80057c2:	687b      	ldr	r3, [r7, #4]
 80057c4:	681b      	ldr	r3, [r3, #0]
 80057c6:	f042 0201 	orr.w	r2, r2, #1
 80057ca:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	681b      	ldr	r3, [r3, #0]
 80057d0:	4a23      	ldr	r2, [pc, #140]	@ (8005860 <HAL_TIM_Base_Start_IT+0xc4>)
 80057d2:	4293      	cmp	r3, r2
 80057d4:	d022      	beq.n	800581c <HAL_TIM_Base_Start_IT+0x80>
 80057d6:	687b      	ldr	r3, [r7, #4]
 80057d8:	681b      	ldr	r3, [r3, #0]
 80057da:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80057de:	d01d      	beq.n	800581c <HAL_TIM_Base_Start_IT+0x80>
 80057e0:	687b      	ldr	r3, [r7, #4]
 80057e2:	681b      	ldr	r3, [r3, #0]
 80057e4:	4a1f      	ldr	r2, [pc, #124]	@ (8005864 <HAL_TIM_Base_Start_IT+0xc8>)
 80057e6:	4293      	cmp	r3, r2
 80057e8:	d018      	beq.n	800581c <HAL_TIM_Base_Start_IT+0x80>
 80057ea:	687b      	ldr	r3, [r7, #4]
 80057ec:	681b      	ldr	r3, [r3, #0]
 80057ee:	4a1e      	ldr	r2, [pc, #120]	@ (8005868 <HAL_TIM_Base_Start_IT+0xcc>)
 80057f0:	4293      	cmp	r3, r2
 80057f2:	d013      	beq.n	800581c <HAL_TIM_Base_Start_IT+0x80>
 80057f4:	687b      	ldr	r3, [r7, #4]
 80057f6:	681b      	ldr	r3, [r3, #0]
 80057f8:	4a1c      	ldr	r2, [pc, #112]	@ (800586c <HAL_TIM_Base_Start_IT+0xd0>)
 80057fa:	4293      	cmp	r3, r2
 80057fc:	d00e      	beq.n	800581c <HAL_TIM_Base_Start_IT+0x80>
 80057fe:	687b      	ldr	r3, [r7, #4]
 8005800:	681b      	ldr	r3, [r3, #0]
 8005802:	4a1b      	ldr	r2, [pc, #108]	@ (8005870 <HAL_TIM_Base_Start_IT+0xd4>)
 8005804:	4293      	cmp	r3, r2
 8005806:	d009      	beq.n	800581c <HAL_TIM_Base_Start_IT+0x80>
 8005808:	687b      	ldr	r3, [r7, #4]
 800580a:	681b      	ldr	r3, [r3, #0]
 800580c:	4a19      	ldr	r2, [pc, #100]	@ (8005874 <HAL_TIM_Base_Start_IT+0xd8>)
 800580e:	4293      	cmp	r3, r2
 8005810:	d004      	beq.n	800581c <HAL_TIM_Base_Start_IT+0x80>
 8005812:	687b      	ldr	r3, [r7, #4]
 8005814:	681b      	ldr	r3, [r3, #0]
 8005816:	4a18      	ldr	r2, [pc, #96]	@ (8005878 <HAL_TIM_Base_Start_IT+0xdc>)
 8005818:	4293      	cmp	r3, r2
 800581a:	d111      	bne.n	8005840 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	681b      	ldr	r3, [r3, #0]
 8005820:	689b      	ldr	r3, [r3, #8]
 8005822:	f003 0307 	and.w	r3, r3, #7
 8005826:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005828:	68fb      	ldr	r3, [r7, #12]
 800582a:	2b06      	cmp	r3, #6
 800582c:	d010      	beq.n	8005850 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 800582e:	687b      	ldr	r3, [r7, #4]
 8005830:	681b      	ldr	r3, [r3, #0]
 8005832:	681a      	ldr	r2, [r3, #0]
 8005834:	687b      	ldr	r3, [r7, #4]
 8005836:	681b      	ldr	r3, [r3, #0]
 8005838:	f042 0201 	orr.w	r2, r2, #1
 800583c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800583e:	e007      	b.n	8005850 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005840:	687b      	ldr	r3, [r7, #4]
 8005842:	681b      	ldr	r3, [r3, #0]
 8005844:	681a      	ldr	r2, [r3, #0]
 8005846:	687b      	ldr	r3, [r7, #4]
 8005848:	681b      	ldr	r3, [r3, #0]
 800584a:	f042 0201 	orr.w	r2, r2, #1
 800584e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005850:	2300      	movs	r3, #0
}
 8005852:	4618      	mov	r0, r3
 8005854:	3714      	adds	r7, #20
 8005856:	46bd      	mov	sp, r7
 8005858:	f85d 7b04 	ldr.w	r7, [sp], #4
 800585c:	4770      	bx	lr
 800585e:	bf00      	nop
 8005860:	40010000 	.word	0x40010000
 8005864:	40000400 	.word	0x40000400
 8005868:	40000800 	.word	0x40000800
 800586c:	40000c00 	.word	0x40000c00
 8005870:	40010400 	.word	0x40010400
 8005874:	40014000 	.word	0x40014000
 8005878:	40001800 	.word	0x40001800

0800587c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800587c:	b580      	push	{r7, lr}
 800587e:	b084      	sub	sp, #16
 8005880:	af00      	add	r7, sp, #0
 8005882:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8005884:	687b      	ldr	r3, [r7, #4]
 8005886:	681b      	ldr	r3, [r3, #0]
 8005888:	68db      	ldr	r3, [r3, #12]
 800588a:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	681b      	ldr	r3, [r3, #0]
 8005890:	691b      	ldr	r3, [r3, #16]
 8005892:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8005894:	68bb      	ldr	r3, [r7, #8]
 8005896:	f003 0302 	and.w	r3, r3, #2
 800589a:	2b00      	cmp	r3, #0
 800589c:	d020      	beq.n	80058e0 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800589e:	68fb      	ldr	r3, [r7, #12]
 80058a0:	f003 0302 	and.w	r3, r3, #2
 80058a4:	2b00      	cmp	r3, #0
 80058a6:	d01b      	beq.n	80058e0 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	681b      	ldr	r3, [r3, #0]
 80058ac:	f06f 0202 	mvn.w	r2, #2
 80058b0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	2201      	movs	r2, #1
 80058b6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	681b      	ldr	r3, [r3, #0]
 80058bc:	699b      	ldr	r3, [r3, #24]
 80058be:	f003 0303 	and.w	r3, r3, #3
 80058c2:	2b00      	cmp	r3, #0
 80058c4:	d003      	beq.n	80058ce <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80058c6:	6878      	ldr	r0, [r7, #4]
 80058c8:	f000 f999 	bl	8005bfe <HAL_TIM_IC_CaptureCallback>
 80058cc:	e005      	b.n	80058da <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80058ce:	6878      	ldr	r0, [r7, #4]
 80058d0:	f000 f98b 	bl	8005bea <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80058d4:	6878      	ldr	r0, [r7, #4]
 80058d6:	f000 f99c 	bl	8005c12 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80058da:	687b      	ldr	r3, [r7, #4]
 80058dc:	2200      	movs	r2, #0
 80058de:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80058e0:	68bb      	ldr	r3, [r7, #8]
 80058e2:	f003 0304 	and.w	r3, r3, #4
 80058e6:	2b00      	cmp	r3, #0
 80058e8:	d020      	beq.n	800592c <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80058ea:	68fb      	ldr	r3, [r7, #12]
 80058ec:	f003 0304 	and.w	r3, r3, #4
 80058f0:	2b00      	cmp	r3, #0
 80058f2:	d01b      	beq.n	800592c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	681b      	ldr	r3, [r3, #0]
 80058f8:	f06f 0204 	mvn.w	r2, #4
 80058fc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80058fe:	687b      	ldr	r3, [r7, #4]
 8005900:	2202      	movs	r2, #2
 8005902:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005904:	687b      	ldr	r3, [r7, #4]
 8005906:	681b      	ldr	r3, [r3, #0]
 8005908:	699b      	ldr	r3, [r3, #24]
 800590a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800590e:	2b00      	cmp	r3, #0
 8005910:	d003      	beq.n	800591a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005912:	6878      	ldr	r0, [r7, #4]
 8005914:	f000 f973 	bl	8005bfe <HAL_TIM_IC_CaptureCallback>
 8005918:	e005      	b.n	8005926 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800591a:	6878      	ldr	r0, [r7, #4]
 800591c:	f000 f965 	bl	8005bea <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005920:	6878      	ldr	r0, [r7, #4]
 8005922:	f000 f976 	bl	8005c12 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005926:	687b      	ldr	r3, [r7, #4]
 8005928:	2200      	movs	r2, #0
 800592a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800592c:	68bb      	ldr	r3, [r7, #8]
 800592e:	f003 0308 	and.w	r3, r3, #8
 8005932:	2b00      	cmp	r3, #0
 8005934:	d020      	beq.n	8005978 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8005936:	68fb      	ldr	r3, [r7, #12]
 8005938:	f003 0308 	and.w	r3, r3, #8
 800593c:	2b00      	cmp	r3, #0
 800593e:	d01b      	beq.n	8005978 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8005940:	687b      	ldr	r3, [r7, #4]
 8005942:	681b      	ldr	r3, [r3, #0]
 8005944:	f06f 0208 	mvn.w	r2, #8
 8005948:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800594a:	687b      	ldr	r3, [r7, #4]
 800594c:	2204      	movs	r2, #4
 800594e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	681b      	ldr	r3, [r3, #0]
 8005954:	69db      	ldr	r3, [r3, #28]
 8005956:	f003 0303 	and.w	r3, r3, #3
 800595a:	2b00      	cmp	r3, #0
 800595c:	d003      	beq.n	8005966 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800595e:	6878      	ldr	r0, [r7, #4]
 8005960:	f000 f94d 	bl	8005bfe <HAL_TIM_IC_CaptureCallback>
 8005964:	e005      	b.n	8005972 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005966:	6878      	ldr	r0, [r7, #4]
 8005968:	f000 f93f 	bl	8005bea <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800596c:	6878      	ldr	r0, [r7, #4]
 800596e:	f000 f950 	bl	8005c12 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005972:	687b      	ldr	r3, [r7, #4]
 8005974:	2200      	movs	r2, #0
 8005976:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8005978:	68bb      	ldr	r3, [r7, #8]
 800597a:	f003 0310 	and.w	r3, r3, #16
 800597e:	2b00      	cmp	r3, #0
 8005980:	d020      	beq.n	80059c4 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8005982:	68fb      	ldr	r3, [r7, #12]
 8005984:	f003 0310 	and.w	r3, r3, #16
 8005988:	2b00      	cmp	r3, #0
 800598a:	d01b      	beq.n	80059c4 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	681b      	ldr	r3, [r3, #0]
 8005990:	f06f 0210 	mvn.w	r2, #16
 8005994:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005996:	687b      	ldr	r3, [r7, #4]
 8005998:	2208      	movs	r2, #8
 800599a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	681b      	ldr	r3, [r3, #0]
 80059a0:	69db      	ldr	r3, [r3, #28]
 80059a2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80059a6:	2b00      	cmp	r3, #0
 80059a8:	d003      	beq.n	80059b2 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80059aa:	6878      	ldr	r0, [r7, #4]
 80059ac:	f000 f927 	bl	8005bfe <HAL_TIM_IC_CaptureCallback>
 80059b0:	e005      	b.n	80059be <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80059b2:	6878      	ldr	r0, [r7, #4]
 80059b4:	f000 f919 	bl	8005bea <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80059b8:	6878      	ldr	r0, [r7, #4]
 80059ba:	f000 f92a 	bl	8005c12 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80059be:	687b      	ldr	r3, [r7, #4]
 80059c0:	2200      	movs	r2, #0
 80059c2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80059c4:	68bb      	ldr	r3, [r7, #8]
 80059c6:	f003 0301 	and.w	r3, r3, #1
 80059ca:	2b00      	cmp	r3, #0
 80059cc:	d00c      	beq.n	80059e8 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80059ce:	68fb      	ldr	r3, [r7, #12]
 80059d0:	f003 0301 	and.w	r3, r3, #1
 80059d4:	2b00      	cmp	r3, #0
 80059d6:	d007      	beq.n	80059e8 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 80059d8:	687b      	ldr	r3, [r7, #4]
 80059da:	681b      	ldr	r3, [r3, #0]
 80059dc:	f06f 0201 	mvn.w	r2, #1
 80059e0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80059e2:	6878      	ldr	r0, [r7, #4]
 80059e4:	f7fb fb82 	bl	80010ec <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 80059e8:	68bb      	ldr	r3, [r7, #8]
 80059ea:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80059ee:	2b00      	cmp	r3, #0
 80059f0:	d00c      	beq.n	8005a0c <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80059f2:	68fb      	ldr	r3, [r7, #12]
 80059f4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80059f8:	2b00      	cmp	r3, #0
 80059fa:	d007      	beq.n	8005a0c <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 80059fc:	687b      	ldr	r3, [r7, #4]
 80059fe:	681b      	ldr	r3, [r3, #0]
 8005a00:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8005a04:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005a06:	6878      	ldr	r0, [r7, #4]
 8005a08:	f000 fae4 	bl	8005fd4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8005a0c:	68bb      	ldr	r3, [r7, #8]
 8005a0e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005a12:	2b00      	cmp	r3, #0
 8005a14:	d00c      	beq.n	8005a30 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8005a16:	68fb      	ldr	r3, [r7, #12]
 8005a18:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005a1c:	2b00      	cmp	r3, #0
 8005a1e:	d007      	beq.n	8005a30 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8005a20:	687b      	ldr	r3, [r7, #4]
 8005a22:	681b      	ldr	r3, [r3, #0]
 8005a24:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8005a28:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005a2a:	6878      	ldr	r0, [r7, #4]
 8005a2c:	f000 f8fb 	bl	8005c26 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8005a30:	68bb      	ldr	r3, [r7, #8]
 8005a32:	f003 0320 	and.w	r3, r3, #32
 8005a36:	2b00      	cmp	r3, #0
 8005a38:	d00c      	beq.n	8005a54 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8005a3a:	68fb      	ldr	r3, [r7, #12]
 8005a3c:	f003 0320 	and.w	r3, r3, #32
 8005a40:	2b00      	cmp	r3, #0
 8005a42:	d007      	beq.n	8005a54 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8005a44:	687b      	ldr	r3, [r7, #4]
 8005a46:	681b      	ldr	r3, [r3, #0]
 8005a48:	f06f 0220 	mvn.w	r2, #32
 8005a4c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005a4e:	6878      	ldr	r0, [r7, #4]
 8005a50:	f000 fab6 	bl	8005fc0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005a54:	bf00      	nop
 8005a56:	3710      	adds	r7, #16
 8005a58:	46bd      	mov	sp, r7
 8005a5a:	bd80      	pop	{r7, pc}

08005a5c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005a5c:	b580      	push	{r7, lr}
 8005a5e:	b084      	sub	sp, #16
 8005a60:	af00      	add	r7, sp, #0
 8005a62:	6078      	str	r0, [r7, #4]
 8005a64:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005a66:	2300      	movs	r3, #0
 8005a68:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8005a6a:	687b      	ldr	r3, [r7, #4]
 8005a6c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005a70:	2b01      	cmp	r3, #1
 8005a72:	d101      	bne.n	8005a78 <HAL_TIM_ConfigClockSource+0x1c>
 8005a74:	2302      	movs	r3, #2
 8005a76:	e0b4      	b.n	8005be2 <HAL_TIM_ConfigClockSource+0x186>
 8005a78:	687b      	ldr	r3, [r7, #4]
 8005a7a:	2201      	movs	r2, #1
 8005a7c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005a80:	687b      	ldr	r3, [r7, #4]
 8005a82:	2202      	movs	r2, #2
 8005a84:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005a88:	687b      	ldr	r3, [r7, #4]
 8005a8a:	681b      	ldr	r3, [r3, #0]
 8005a8c:	689b      	ldr	r3, [r3, #8]
 8005a8e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005a90:	68bb      	ldr	r3, [r7, #8]
 8005a92:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8005a96:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005a98:	68bb      	ldr	r3, [r7, #8]
 8005a9a:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8005a9e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8005aa0:	687b      	ldr	r3, [r7, #4]
 8005aa2:	681b      	ldr	r3, [r3, #0]
 8005aa4:	68ba      	ldr	r2, [r7, #8]
 8005aa6:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005aa8:	683b      	ldr	r3, [r7, #0]
 8005aaa:	681b      	ldr	r3, [r3, #0]
 8005aac:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005ab0:	d03e      	beq.n	8005b30 <HAL_TIM_ConfigClockSource+0xd4>
 8005ab2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005ab6:	f200 8087 	bhi.w	8005bc8 <HAL_TIM_ConfigClockSource+0x16c>
 8005aba:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005abe:	f000 8086 	beq.w	8005bce <HAL_TIM_ConfigClockSource+0x172>
 8005ac2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005ac6:	d87f      	bhi.n	8005bc8 <HAL_TIM_ConfigClockSource+0x16c>
 8005ac8:	2b70      	cmp	r3, #112	@ 0x70
 8005aca:	d01a      	beq.n	8005b02 <HAL_TIM_ConfigClockSource+0xa6>
 8005acc:	2b70      	cmp	r3, #112	@ 0x70
 8005ace:	d87b      	bhi.n	8005bc8 <HAL_TIM_ConfigClockSource+0x16c>
 8005ad0:	2b60      	cmp	r3, #96	@ 0x60
 8005ad2:	d050      	beq.n	8005b76 <HAL_TIM_ConfigClockSource+0x11a>
 8005ad4:	2b60      	cmp	r3, #96	@ 0x60
 8005ad6:	d877      	bhi.n	8005bc8 <HAL_TIM_ConfigClockSource+0x16c>
 8005ad8:	2b50      	cmp	r3, #80	@ 0x50
 8005ada:	d03c      	beq.n	8005b56 <HAL_TIM_ConfigClockSource+0xfa>
 8005adc:	2b50      	cmp	r3, #80	@ 0x50
 8005ade:	d873      	bhi.n	8005bc8 <HAL_TIM_ConfigClockSource+0x16c>
 8005ae0:	2b40      	cmp	r3, #64	@ 0x40
 8005ae2:	d058      	beq.n	8005b96 <HAL_TIM_ConfigClockSource+0x13a>
 8005ae4:	2b40      	cmp	r3, #64	@ 0x40
 8005ae6:	d86f      	bhi.n	8005bc8 <HAL_TIM_ConfigClockSource+0x16c>
 8005ae8:	2b30      	cmp	r3, #48	@ 0x30
 8005aea:	d064      	beq.n	8005bb6 <HAL_TIM_ConfigClockSource+0x15a>
 8005aec:	2b30      	cmp	r3, #48	@ 0x30
 8005aee:	d86b      	bhi.n	8005bc8 <HAL_TIM_ConfigClockSource+0x16c>
 8005af0:	2b20      	cmp	r3, #32
 8005af2:	d060      	beq.n	8005bb6 <HAL_TIM_ConfigClockSource+0x15a>
 8005af4:	2b20      	cmp	r3, #32
 8005af6:	d867      	bhi.n	8005bc8 <HAL_TIM_ConfigClockSource+0x16c>
 8005af8:	2b00      	cmp	r3, #0
 8005afa:	d05c      	beq.n	8005bb6 <HAL_TIM_ConfigClockSource+0x15a>
 8005afc:	2b10      	cmp	r3, #16
 8005afe:	d05a      	beq.n	8005bb6 <HAL_TIM_ConfigClockSource+0x15a>
 8005b00:	e062      	b.n	8005bc8 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005b02:	687b      	ldr	r3, [r7, #4]
 8005b04:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8005b06:	683b      	ldr	r3, [r7, #0]
 8005b08:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8005b0a:	683b      	ldr	r3, [r7, #0]
 8005b0c:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8005b0e:	683b      	ldr	r3, [r7, #0]
 8005b10:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8005b12:	f000 f9b9 	bl	8005e88 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8005b16:	687b      	ldr	r3, [r7, #4]
 8005b18:	681b      	ldr	r3, [r3, #0]
 8005b1a:	689b      	ldr	r3, [r3, #8]
 8005b1c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005b1e:	68bb      	ldr	r3, [r7, #8]
 8005b20:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8005b24:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8005b26:	687b      	ldr	r3, [r7, #4]
 8005b28:	681b      	ldr	r3, [r3, #0]
 8005b2a:	68ba      	ldr	r2, [r7, #8]
 8005b2c:	609a      	str	r2, [r3, #8]
      break;
 8005b2e:	e04f      	b.n	8005bd0 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005b30:	687b      	ldr	r3, [r7, #4]
 8005b32:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8005b34:	683b      	ldr	r3, [r7, #0]
 8005b36:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8005b38:	683b      	ldr	r3, [r7, #0]
 8005b3a:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8005b3c:	683b      	ldr	r3, [r7, #0]
 8005b3e:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8005b40:	f000 f9a2 	bl	8005e88 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005b44:	687b      	ldr	r3, [r7, #4]
 8005b46:	681b      	ldr	r3, [r3, #0]
 8005b48:	689a      	ldr	r2, [r3, #8]
 8005b4a:	687b      	ldr	r3, [r7, #4]
 8005b4c:	681b      	ldr	r3, [r3, #0]
 8005b4e:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8005b52:	609a      	str	r2, [r3, #8]
      break;
 8005b54:	e03c      	b.n	8005bd0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005b56:	687b      	ldr	r3, [r7, #4]
 8005b58:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005b5a:	683b      	ldr	r3, [r7, #0]
 8005b5c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005b5e:	683b      	ldr	r3, [r7, #0]
 8005b60:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005b62:	461a      	mov	r2, r3
 8005b64:	f000 f916 	bl	8005d94 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005b68:	687b      	ldr	r3, [r7, #4]
 8005b6a:	681b      	ldr	r3, [r3, #0]
 8005b6c:	2150      	movs	r1, #80	@ 0x50
 8005b6e:	4618      	mov	r0, r3
 8005b70:	f000 f96f 	bl	8005e52 <TIM_ITRx_SetConfig>
      break;
 8005b74:	e02c      	b.n	8005bd0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8005b76:	687b      	ldr	r3, [r7, #4]
 8005b78:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005b7a:	683b      	ldr	r3, [r7, #0]
 8005b7c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005b7e:	683b      	ldr	r3, [r7, #0]
 8005b80:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8005b82:	461a      	mov	r2, r3
 8005b84:	f000 f935 	bl	8005df2 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005b88:	687b      	ldr	r3, [r7, #4]
 8005b8a:	681b      	ldr	r3, [r3, #0]
 8005b8c:	2160      	movs	r1, #96	@ 0x60
 8005b8e:	4618      	mov	r0, r3
 8005b90:	f000 f95f 	bl	8005e52 <TIM_ITRx_SetConfig>
      break;
 8005b94:	e01c      	b.n	8005bd0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005b96:	687b      	ldr	r3, [r7, #4]
 8005b98:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005b9a:	683b      	ldr	r3, [r7, #0]
 8005b9c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005b9e:	683b      	ldr	r3, [r7, #0]
 8005ba0:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005ba2:	461a      	mov	r2, r3
 8005ba4:	f000 f8f6 	bl	8005d94 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005ba8:	687b      	ldr	r3, [r7, #4]
 8005baa:	681b      	ldr	r3, [r3, #0]
 8005bac:	2140      	movs	r1, #64	@ 0x40
 8005bae:	4618      	mov	r0, r3
 8005bb0:	f000 f94f 	bl	8005e52 <TIM_ITRx_SetConfig>
      break;
 8005bb4:	e00c      	b.n	8005bd0 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8005bb6:	687b      	ldr	r3, [r7, #4]
 8005bb8:	681a      	ldr	r2, [r3, #0]
 8005bba:	683b      	ldr	r3, [r7, #0]
 8005bbc:	681b      	ldr	r3, [r3, #0]
 8005bbe:	4619      	mov	r1, r3
 8005bc0:	4610      	mov	r0, r2
 8005bc2:	f000 f946 	bl	8005e52 <TIM_ITRx_SetConfig>
      break;
 8005bc6:	e003      	b.n	8005bd0 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8005bc8:	2301      	movs	r3, #1
 8005bca:	73fb      	strb	r3, [r7, #15]
      break;
 8005bcc:	e000      	b.n	8005bd0 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8005bce:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005bd0:	687b      	ldr	r3, [r7, #4]
 8005bd2:	2201      	movs	r2, #1
 8005bd4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8005bd8:	687b      	ldr	r3, [r7, #4]
 8005bda:	2200      	movs	r2, #0
 8005bdc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8005be0:	7bfb      	ldrb	r3, [r7, #15]
}
 8005be2:	4618      	mov	r0, r3
 8005be4:	3710      	adds	r7, #16
 8005be6:	46bd      	mov	sp, r7
 8005be8:	bd80      	pop	{r7, pc}

08005bea <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005bea:	b480      	push	{r7}
 8005bec:	b083      	sub	sp, #12
 8005bee:	af00      	add	r7, sp, #0
 8005bf0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005bf2:	bf00      	nop
 8005bf4:	370c      	adds	r7, #12
 8005bf6:	46bd      	mov	sp, r7
 8005bf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bfc:	4770      	bx	lr

08005bfe <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005bfe:	b480      	push	{r7}
 8005c00:	b083      	sub	sp, #12
 8005c02:	af00      	add	r7, sp, #0
 8005c04:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005c06:	bf00      	nop
 8005c08:	370c      	adds	r7, #12
 8005c0a:	46bd      	mov	sp, r7
 8005c0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c10:	4770      	bx	lr

08005c12 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005c12:	b480      	push	{r7}
 8005c14:	b083      	sub	sp, #12
 8005c16:	af00      	add	r7, sp, #0
 8005c18:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005c1a:	bf00      	nop
 8005c1c:	370c      	adds	r7, #12
 8005c1e:	46bd      	mov	sp, r7
 8005c20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c24:	4770      	bx	lr

08005c26 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005c26:	b480      	push	{r7}
 8005c28:	b083      	sub	sp, #12
 8005c2a:	af00      	add	r7, sp, #0
 8005c2c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005c2e:	bf00      	nop
 8005c30:	370c      	adds	r7, #12
 8005c32:	46bd      	mov	sp, r7
 8005c34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c38:	4770      	bx	lr
	...

08005c3c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8005c3c:	b480      	push	{r7}
 8005c3e:	b085      	sub	sp, #20
 8005c40:	af00      	add	r7, sp, #0
 8005c42:	6078      	str	r0, [r7, #4]
 8005c44:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005c46:	687b      	ldr	r3, [r7, #4]
 8005c48:	681b      	ldr	r3, [r3, #0]
 8005c4a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005c4c:	687b      	ldr	r3, [r7, #4]
 8005c4e:	4a46      	ldr	r2, [pc, #280]	@ (8005d68 <TIM_Base_SetConfig+0x12c>)
 8005c50:	4293      	cmp	r3, r2
 8005c52:	d013      	beq.n	8005c7c <TIM_Base_SetConfig+0x40>
 8005c54:	687b      	ldr	r3, [r7, #4]
 8005c56:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005c5a:	d00f      	beq.n	8005c7c <TIM_Base_SetConfig+0x40>
 8005c5c:	687b      	ldr	r3, [r7, #4]
 8005c5e:	4a43      	ldr	r2, [pc, #268]	@ (8005d6c <TIM_Base_SetConfig+0x130>)
 8005c60:	4293      	cmp	r3, r2
 8005c62:	d00b      	beq.n	8005c7c <TIM_Base_SetConfig+0x40>
 8005c64:	687b      	ldr	r3, [r7, #4]
 8005c66:	4a42      	ldr	r2, [pc, #264]	@ (8005d70 <TIM_Base_SetConfig+0x134>)
 8005c68:	4293      	cmp	r3, r2
 8005c6a:	d007      	beq.n	8005c7c <TIM_Base_SetConfig+0x40>
 8005c6c:	687b      	ldr	r3, [r7, #4]
 8005c6e:	4a41      	ldr	r2, [pc, #260]	@ (8005d74 <TIM_Base_SetConfig+0x138>)
 8005c70:	4293      	cmp	r3, r2
 8005c72:	d003      	beq.n	8005c7c <TIM_Base_SetConfig+0x40>
 8005c74:	687b      	ldr	r3, [r7, #4]
 8005c76:	4a40      	ldr	r2, [pc, #256]	@ (8005d78 <TIM_Base_SetConfig+0x13c>)
 8005c78:	4293      	cmp	r3, r2
 8005c7a:	d108      	bne.n	8005c8e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005c7c:	68fb      	ldr	r3, [r7, #12]
 8005c7e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005c82:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005c84:	683b      	ldr	r3, [r7, #0]
 8005c86:	685b      	ldr	r3, [r3, #4]
 8005c88:	68fa      	ldr	r2, [r7, #12]
 8005c8a:	4313      	orrs	r3, r2
 8005c8c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005c8e:	687b      	ldr	r3, [r7, #4]
 8005c90:	4a35      	ldr	r2, [pc, #212]	@ (8005d68 <TIM_Base_SetConfig+0x12c>)
 8005c92:	4293      	cmp	r3, r2
 8005c94:	d02b      	beq.n	8005cee <TIM_Base_SetConfig+0xb2>
 8005c96:	687b      	ldr	r3, [r7, #4]
 8005c98:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005c9c:	d027      	beq.n	8005cee <TIM_Base_SetConfig+0xb2>
 8005c9e:	687b      	ldr	r3, [r7, #4]
 8005ca0:	4a32      	ldr	r2, [pc, #200]	@ (8005d6c <TIM_Base_SetConfig+0x130>)
 8005ca2:	4293      	cmp	r3, r2
 8005ca4:	d023      	beq.n	8005cee <TIM_Base_SetConfig+0xb2>
 8005ca6:	687b      	ldr	r3, [r7, #4]
 8005ca8:	4a31      	ldr	r2, [pc, #196]	@ (8005d70 <TIM_Base_SetConfig+0x134>)
 8005caa:	4293      	cmp	r3, r2
 8005cac:	d01f      	beq.n	8005cee <TIM_Base_SetConfig+0xb2>
 8005cae:	687b      	ldr	r3, [r7, #4]
 8005cb0:	4a30      	ldr	r2, [pc, #192]	@ (8005d74 <TIM_Base_SetConfig+0x138>)
 8005cb2:	4293      	cmp	r3, r2
 8005cb4:	d01b      	beq.n	8005cee <TIM_Base_SetConfig+0xb2>
 8005cb6:	687b      	ldr	r3, [r7, #4]
 8005cb8:	4a2f      	ldr	r2, [pc, #188]	@ (8005d78 <TIM_Base_SetConfig+0x13c>)
 8005cba:	4293      	cmp	r3, r2
 8005cbc:	d017      	beq.n	8005cee <TIM_Base_SetConfig+0xb2>
 8005cbe:	687b      	ldr	r3, [r7, #4]
 8005cc0:	4a2e      	ldr	r2, [pc, #184]	@ (8005d7c <TIM_Base_SetConfig+0x140>)
 8005cc2:	4293      	cmp	r3, r2
 8005cc4:	d013      	beq.n	8005cee <TIM_Base_SetConfig+0xb2>
 8005cc6:	687b      	ldr	r3, [r7, #4]
 8005cc8:	4a2d      	ldr	r2, [pc, #180]	@ (8005d80 <TIM_Base_SetConfig+0x144>)
 8005cca:	4293      	cmp	r3, r2
 8005ccc:	d00f      	beq.n	8005cee <TIM_Base_SetConfig+0xb2>
 8005cce:	687b      	ldr	r3, [r7, #4]
 8005cd0:	4a2c      	ldr	r2, [pc, #176]	@ (8005d84 <TIM_Base_SetConfig+0x148>)
 8005cd2:	4293      	cmp	r3, r2
 8005cd4:	d00b      	beq.n	8005cee <TIM_Base_SetConfig+0xb2>
 8005cd6:	687b      	ldr	r3, [r7, #4]
 8005cd8:	4a2b      	ldr	r2, [pc, #172]	@ (8005d88 <TIM_Base_SetConfig+0x14c>)
 8005cda:	4293      	cmp	r3, r2
 8005cdc:	d007      	beq.n	8005cee <TIM_Base_SetConfig+0xb2>
 8005cde:	687b      	ldr	r3, [r7, #4]
 8005ce0:	4a2a      	ldr	r2, [pc, #168]	@ (8005d8c <TIM_Base_SetConfig+0x150>)
 8005ce2:	4293      	cmp	r3, r2
 8005ce4:	d003      	beq.n	8005cee <TIM_Base_SetConfig+0xb2>
 8005ce6:	687b      	ldr	r3, [r7, #4]
 8005ce8:	4a29      	ldr	r2, [pc, #164]	@ (8005d90 <TIM_Base_SetConfig+0x154>)
 8005cea:	4293      	cmp	r3, r2
 8005cec:	d108      	bne.n	8005d00 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005cee:	68fb      	ldr	r3, [r7, #12]
 8005cf0:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005cf4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005cf6:	683b      	ldr	r3, [r7, #0]
 8005cf8:	68db      	ldr	r3, [r3, #12]
 8005cfa:	68fa      	ldr	r2, [r7, #12]
 8005cfc:	4313      	orrs	r3, r2
 8005cfe:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005d00:	68fb      	ldr	r3, [r7, #12]
 8005d02:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8005d06:	683b      	ldr	r3, [r7, #0]
 8005d08:	695b      	ldr	r3, [r3, #20]
 8005d0a:	4313      	orrs	r3, r2
 8005d0c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005d0e:	687b      	ldr	r3, [r7, #4]
 8005d10:	68fa      	ldr	r2, [r7, #12]
 8005d12:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005d14:	683b      	ldr	r3, [r7, #0]
 8005d16:	689a      	ldr	r2, [r3, #8]
 8005d18:	687b      	ldr	r3, [r7, #4]
 8005d1a:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005d1c:	683b      	ldr	r3, [r7, #0]
 8005d1e:	681a      	ldr	r2, [r3, #0]
 8005d20:	687b      	ldr	r3, [r7, #4]
 8005d22:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005d24:	687b      	ldr	r3, [r7, #4]
 8005d26:	4a10      	ldr	r2, [pc, #64]	@ (8005d68 <TIM_Base_SetConfig+0x12c>)
 8005d28:	4293      	cmp	r3, r2
 8005d2a:	d003      	beq.n	8005d34 <TIM_Base_SetConfig+0xf8>
 8005d2c:	687b      	ldr	r3, [r7, #4]
 8005d2e:	4a12      	ldr	r2, [pc, #72]	@ (8005d78 <TIM_Base_SetConfig+0x13c>)
 8005d30:	4293      	cmp	r3, r2
 8005d32:	d103      	bne.n	8005d3c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005d34:	683b      	ldr	r3, [r7, #0]
 8005d36:	691a      	ldr	r2, [r3, #16]
 8005d38:	687b      	ldr	r3, [r7, #4]
 8005d3a:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005d3c:	687b      	ldr	r3, [r7, #4]
 8005d3e:	2201      	movs	r2, #1
 8005d40:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8005d42:	687b      	ldr	r3, [r7, #4]
 8005d44:	691b      	ldr	r3, [r3, #16]
 8005d46:	f003 0301 	and.w	r3, r3, #1
 8005d4a:	2b01      	cmp	r3, #1
 8005d4c:	d105      	bne.n	8005d5a <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8005d4e:	687b      	ldr	r3, [r7, #4]
 8005d50:	691b      	ldr	r3, [r3, #16]
 8005d52:	f023 0201 	bic.w	r2, r3, #1
 8005d56:	687b      	ldr	r3, [r7, #4]
 8005d58:	611a      	str	r2, [r3, #16]
  }
}
 8005d5a:	bf00      	nop
 8005d5c:	3714      	adds	r7, #20
 8005d5e:	46bd      	mov	sp, r7
 8005d60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d64:	4770      	bx	lr
 8005d66:	bf00      	nop
 8005d68:	40010000 	.word	0x40010000
 8005d6c:	40000400 	.word	0x40000400
 8005d70:	40000800 	.word	0x40000800
 8005d74:	40000c00 	.word	0x40000c00
 8005d78:	40010400 	.word	0x40010400
 8005d7c:	40014000 	.word	0x40014000
 8005d80:	40014400 	.word	0x40014400
 8005d84:	40014800 	.word	0x40014800
 8005d88:	40001800 	.word	0x40001800
 8005d8c:	40001c00 	.word	0x40001c00
 8005d90:	40002000 	.word	0x40002000

08005d94 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005d94:	b480      	push	{r7}
 8005d96:	b087      	sub	sp, #28
 8005d98:	af00      	add	r7, sp, #0
 8005d9a:	60f8      	str	r0, [r7, #12]
 8005d9c:	60b9      	str	r1, [r7, #8]
 8005d9e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005da0:	68fb      	ldr	r3, [r7, #12]
 8005da2:	6a1b      	ldr	r3, [r3, #32]
 8005da4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005da6:	68fb      	ldr	r3, [r7, #12]
 8005da8:	6a1b      	ldr	r3, [r3, #32]
 8005daa:	f023 0201 	bic.w	r2, r3, #1
 8005dae:	68fb      	ldr	r3, [r7, #12]
 8005db0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005db2:	68fb      	ldr	r3, [r7, #12]
 8005db4:	699b      	ldr	r3, [r3, #24]
 8005db6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005db8:	693b      	ldr	r3, [r7, #16]
 8005dba:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8005dbe:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005dc0:	687b      	ldr	r3, [r7, #4]
 8005dc2:	011b      	lsls	r3, r3, #4
 8005dc4:	693a      	ldr	r2, [r7, #16]
 8005dc6:	4313      	orrs	r3, r2
 8005dc8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005dca:	697b      	ldr	r3, [r7, #20]
 8005dcc:	f023 030a 	bic.w	r3, r3, #10
 8005dd0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8005dd2:	697a      	ldr	r2, [r7, #20]
 8005dd4:	68bb      	ldr	r3, [r7, #8]
 8005dd6:	4313      	orrs	r3, r2
 8005dd8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005dda:	68fb      	ldr	r3, [r7, #12]
 8005ddc:	693a      	ldr	r2, [r7, #16]
 8005dde:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005de0:	68fb      	ldr	r3, [r7, #12]
 8005de2:	697a      	ldr	r2, [r7, #20]
 8005de4:	621a      	str	r2, [r3, #32]
}
 8005de6:	bf00      	nop
 8005de8:	371c      	adds	r7, #28
 8005dea:	46bd      	mov	sp, r7
 8005dec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005df0:	4770      	bx	lr

08005df2 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005df2:	b480      	push	{r7}
 8005df4:	b087      	sub	sp, #28
 8005df6:	af00      	add	r7, sp, #0
 8005df8:	60f8      	str	r0, [r7, #12]
 8005dfa:	60b9      	str	r1, [r7, #8]
 8005dfc:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8005dfe:	68fb      	ldr	r3, [r7, #12]
 8005e00:	6a1b      	ldr	r3, [r3, #32]
 8005e02:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005e04:	68fb      	ldr	r3, [r7, #12]
 8005e06:	6a1b      	ldr	r3, [r3, #32]
 8005e08:	f023 0210 	bic.w	r2, r3, #16
 8005e0c:	68fb      	ldr	r3, [r7, #12]
 8005e0e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005e10:	68fb      	ldr	r3, [r7, #12]
 8005e12:	699b      	ldr	r3, [r3, #24]
 8005e14:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005e16:	693b      	ldr	r3, [r7, #16]
 8005e18:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8005e1c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005e1e:	687b      	ldr	r3, [r7, #4]
 8005e20:	031b      	lsls	r3, r3, #12
 8005e22:	693a      	ldr	r2, [r7, #16]
 8005e24:	4313      	orrs	r3, r2
 8005e26:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005e28:	697b      	ldr	r3, [r7, #20]
 8005e2a:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8005e2e:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005e30:	68bb      	ldr	r3, [r7, #8]
 8005e32:	011b      	lsls	r3, r3, #4
 8005e34:	697a      	ldr	r2, [r7, #20]
 8005e36:	4313      	orrs	r3, r2
 8005e38:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005e3a:	68fb      	ldr	r3, [r7, #12]
 8005e3c:	693a      	ldr	r2, [r7, #16]
 8005e3e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005e40:	68fb      	ldr	r3, [r7, #12]
 8005e42:	697a      	ldr	r2, [r7, #20]
 8005e44:	621a      	str	r2, [r3, #32]
}
 8005e46:	bf00      	nop
 8005e48:	371c      	adds	r7, #28
 8005e4a:	46bd      	mov	sp, r7
 8005e4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e50:	4770      	bx	lr

08005e52 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8005e52:	b480      	push	{r7}
 8005e54:	b085      	sub	sp, #20
 8005e56:	af00      	add	r7, sp, #0
 8005e58:	6078      	str	r0, [r7, #4]
 8005e5a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005e5c:	687b      	ldr	r3, [r7, #4]
 8005e5e:	689b      	ldr	r3, [r3, #8]
 8005e60:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005e62:	68fb      	ldr	r3, [r7, #12]
 8005e64:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005e68:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005e6a:	683a      	ldr	r2, [r7, #0]
 8005e6c:	68fb      	ldr	r3, [r7, #12]
 8005e6e:	4313      	orrs	r3, r2
 8005e70:	f043 0307 	orr.w	r3, r3, #7
 8005e74:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005e76:	687b      	ldr	r3, [r7, #4]
 8005e78:	68fa      	ldr	r2, [r7, #12]
 8005e7a:	609a      	str	r2, [r3, #8]
}
 8005e7c:	bf00      	nop
 8005e7e:	3714      	adds	r7, #20
 8005e80:	46bd      	mov	sp, r7
 8005e82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e86:	4770      	bx	lr

08005e88 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005e88:	b480      	push	{r7}
 8005e8a:	b087      	sub	sp, #28
 8005e8c:	af00      	add	r7, sp, #0
 8005e8e:	60f8      	str	r0, [r7, #12]
 8005e90:	60b9      	str	r1, [r7, #8]
 8005e92:	607a      	str	r2, [r7, #4]
 8005e94:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8005e96:	68fb      	ldr	r3, [r7, #12]
 8005e98:	689b      	ldr	r3, [r3, #8]
 8005e9a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005e9c:	697b      	ldr	r3, [r7, #20]
 8005e9e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8005ea2:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005ea4:	683b      	ldr	r3, [r7, #0]
 8005ea6:	021a      	lsls	r2, r3, #8
 8005ea8:	687b      	ldr	r3, [r7, #4]
 8005eaa:	431a      	orrs	r2, r3
 8005eac:	68bb      	ldr	r3, [r7, #8]
 8005eae:	4313      	orrs	r3, r2
 8005eb0:	697a      	ldr	r2, [r7, #20]
 8005eb2:	4313      	orrs	r3, r2
 8005eb4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005eb6:	68fb      	ldr	r3, [r7, #12]
 8005eb8:	697a      	ldr	r2, [r7, #20]
 8005eba:	609a      	str	r2, [r3, #8]
}
 8005ebc:	bf00      	nop
 8005ebe:	371c      	adds	r7, #28
 8005ec0:	46bd      	mov	sp, r7
 8005ec2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ec6:	4770      	bx	lr

08005ec8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005ec8:	b480      	push	{r7}
 8005eca:	b085      	sub	sp, #20
 8005ecc:	af00      	add	r7, sp, #0
 8005ece:	6078      	str	r0, [r7, #4]
 8005ed0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005ed2:	687b      	ldr	r3, [r7, #4]
 8005ed4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005ed8:	2b01      	cmp	r3, #1
 8005eda:	d101      	bne.n	8005ee0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005edc:	2302      	movs	r3, #2
 8005ede:	e05a      	b.n	8005f96 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8005ee0:	687b      	ldr	r3, [r7, #4]
 8005ee2:	2201      	movs	r2, #1
 8005ee4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005ee8:	687b      	ldr	r3, [r7, #4]
 8005eea:	2202      	movs	r2, #2
 8005eec:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005ef0:	687b      	ldr	r3, [r7, #4]
 8005ef2:	681b      	ldr	r3, [r3, #0]
 8005ef4:	685b      	ldr	r3, [r3, #4]
 8005ef6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005ef8:	687b      	ldr	r3, [r7, #4]
 8005efa:	681b      	ldr	r3, [r3, #0]
 8005efc:	689b      	ldr	r3, [r3, #8]
 8005efe:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005f00:	68fb      	ldr	r3, [r7, #12]
 8005f02:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005f06:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005f08:	683b      	ldr	r3, [r7, #0]
 8005f0a:	681b      	ldr	r3, [r3, #0]
 8005f0c:	68fa      	ldr	r2, [r7, #12]
 8005f0e:	4313      	orrs	r3, r2
 8005f10:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005f12:	687b      	ldr	r3, [r7, #4]
 8005f14:	681b      	ldr	r3, [r3, #0]
 8005f16:	68fa      	ldr	r2, [r7, #12]
 8005f18:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005f1a:	687b      	ldr	r3, [r7, #4]
 8005f1c:	681b      	ldr	r3, [r3, #0]
 8005f1e:	4a21      	ldr	r2, [pc, #132]	@ (8005fa4 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8005f20:	4293      	cmp	r3, r2
 8005f22:	d022      	beq.n	8005f6a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005f24:	687b      	ldr	r3, [r7, #4]
 8005f26:	681b      	ldr	r3, [r3, #0]
 8005f28:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005f2c:	d01d      	beq.n	8005f6a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005f2e:	687b      	ldr	r3, [r7, #4]
 8005f30:	681b      	ldr	r3, [r3, #0]
 8005f32:	4a1d      	ldr	r2, [pc, #116]	@ (8005fa8 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8005f34:	4293      	cmp	r3, r2
 8005f36:	d018      	beq.n	8005f6a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005f38:	687b      	ldr	r3, [r7, #4]
 8005f3a:	681b      	ldr	r3, [r3, #0]
 8005f3c:	4a1b      	ldr	r2, [pc, #108]	@ (8005fac <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8005f3e:	4293      	cmp	r3, r2
 8005f40:	d013      	beq.n	8005f6a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005f42:	687b      	ldr	r3, [r7, #4]
 8005f44:	681b      	ldr	r3, [r3, #0]
 8005f46:	4a1a      	ldr	r2, [pc, #104]	@ (8005fb0 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8005f48:	4293      	cmp	r3, r2
 8005f4a:	d00e      	beq.n	8005f6a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005f4c:	687b      	ldr	r3, [r7, #4]
 8005f4e:	681b      	ldr	r3, [r3, #0]
 8005f50:	4a18      	ldr	r2, [pc, #96]	@ (8005fb4 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8005f52:	4293      	cmp	r3, r2
 8005f54:	d009      	beq.n	8005f6a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005f56:	687b      	ldr	r3, [r7, #4]
 8005f58:	681b      	ldr	r3, [r3, #0]
 8005f5a:	4a17      	ldr	r2, [pc, #92]	@ (8005fb8 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8005f5c:	4293      	cmp	r3, r2
 8005f5e:	d004      	beq.n	8005f6a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005f60:	687b      	ldr	r3, [r7, #4]
 8005f62:	681b      	ldr	r3, [r3, #0]
 8005f64:	4a15      	ldr	r2, [pc, #84]	@ (8005fbc <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8005f66:	4293      	cmp	r3, r2
 8005f68:	d10c      	bne.n	8005f84 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005f6a:	68bb      	ldr	r3, [r7, #8]
 8005f6c:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005f70:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005f72:	683b      	ldr	r3, [r7, #0]
 8005f74:	685b      	ldr	r3, [r3, #4]
 8005f76:	68ba      	ldr	r2, [r7, #8]
 8005f78:	4313      	orrs	r3, r2
 8005f7a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005f7c:	687b      	ldr	r3, [r7, #4]
 8005f7e:	681b      	ldr	r3, [r3, #0]
 8005f80:	68ba      	ldr	r2, [r7, #8]
 8005f82:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005f84:	687b      	ldr	r3, [r7, #4]
 8005f86:	2201      	movs	r2, #1
 8005f88:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8005f8c:	687b      	ldr	r3, [r7, #4]
 8005f8e:	2200      	movs	r2, #0
 8005f90:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8005f94:	2300      	movs	r3, #0
}
 8005f96:	4618      	mov	r0, r3
 8005f98:	3714      	adds	r7, #20
 8005f9a:	46bd      	mov	sp, r7
 8005f9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fa0:	4770      	bx	lr
 8005fa2:	bf00      	nop
 8005fa4:	40010000 	.word	0x40010000
 8005fa8:	40000400 	.word	0x40000400
 8005fac:	40000800 	.word	0x40000800
 8005fb0:	40000c00 	.word	0x40000c00
 8005fb4:	40010400 	.word	0x40010400
 8005fb8:	40014000 	.word	0x40014000
 8005fbc:	40001800 	.word	0x40001800

08005fc0 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005fc0:	b480      	push	{r7}
 8005fc2:	b083      	sub	sp, #12
 8005fc4:	af00      	add	r7, sp, #0
 8005fc6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005fc8:	bf00      	nop
 8005fca:	370c      	adds	r7, #12
 8005fcc:	46bd      	mov	sp, r7
 8005fce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fd2:	4770      	bx	lr

08005fd4 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005fd4:	b480      	push	{r7}
 8005fd6:	b083      	sub	sp, #12
 8005fd8:	af00      	add	r7, sp, #0
 8005fda:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005fdc:	bf00      	nop
 8005fde:	370c      	adds	r7, #12
 8005fe0:	46bd      	mov	sp, r7
 8005fe2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fe6:	4770      	bx	lr

08005fe8 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005fe8:	b580      	push	{r7, lr}
 8005fea:	b082      	sub	sp, #8
 8005fec:	af00      	add	r7, sp, #0
 8005fee:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005ff0:	687b      	ldr	r3, [r7, #4]
 8005ff2:	2b00      	cmp	r3, #0
 8005ff4:	d101      	bne.n	8005ffa <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005ff6:	2301      	movs	r3, #1
 8005ff8:	e042      	b.n	8006080 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8005ffa:	687b      	ldr	r3, [r7, #4]
 8005ffc:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006000:	b2db      	uxtb	r3, r3
 8006002:	2b00      	cmp	r3, #0
 8006004:	d106      	bne.n	8006014 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006006:	687b      	ldr	r3, [r7, #4]
 8006008:	2200      	movs	r2, #0
 800600a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800600e:	6878      	ldr	r0, [r7, #4]
 8006010:	f7fb fff0 	bl	8001ff4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006014:	687b      	ldr	r3, [r7, #4]
 8006016:	2224      	movs	r2, #36	@ 0x24
 8006018:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800601c:	687b      	ldr	r3, [r7, #4]
 800601e:	681b      	ldr	r3, [r3, #0]
 8006020:	68da      	ldr	r2, [r3, #12]
 8006022:	687b      	ldr	r3, [r7, #4]
 8006024:	681b      	ldr	r3, [r3, #0]
 8006026:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800602a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800602c:	6878      	ldr	r0, [r7, #4]
 800602e:	f000 f82b 	bl	8006088 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006032:	687b      	ldr	r3, [r7, #4]
 8006034:	681b      	ldr	r3, [r3, #0]
 8006036:	691a      	ldr	r2, [r3, #16]
 8006038:	687b      	ldr	r3, [r7, #4]
 800603a:	681b      	ldr	r3, [r3, #0]
 800603c:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8006040:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006042:	687b      	ldr	r3, [r7, #4]
 8006044:	681b      	ldr	r3, [r3, #0]
 8006046:	695a      	ldr	r2, [r3, #20]
 8006048:	687b      	ldr	r3, [r7, #4]
 800604a:	681b      	ldr	r3, [r3, #0]
 800604c:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8006050:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8006052:	687b      	ldr	r3, [r7, #4]
 8006054:	681b      	ldr	r3, [r3, #0]
 8006056:	68da      	ldr	r2, [r3, #12]
 8006058:	687b      	ldr	r3, [r7, #4]
 800605a:	681b      	ldr	r3, [r3, #0]
 800605c:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8006060:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006062:	687b      	ldr	r3, [r7, #4]
 8006064:	2200      	movs	r2, #0
 8006066:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8006068:	687b      	ldr	r3, [r7, #4]
 800606a:	2220      	movs	r2, #32
 800606c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8006070:	687b      	ldr	r3, [r7, #4]
 8006072:	2220      	movs	r2, #32
 8006074:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006078:	687b      	ldr	r3, [r7, #4]
 800607a:	2200      	movs	r2, #0
 800607c:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 800607e:	2300      	movs	r3, #0
}
 8006080:	4618      	mov	r0, r3
 8006082:	3708      	adds	r7, #8
 8006084:	46bd      	mov	sp, r7
 8006086:	bd80      	pop	{r7, pc}

08006088 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006088:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800608c:	b0c0      	sub	sp, #256	@ 0x100
 800608e:	af00      	add	r7, sp, #0
 8006090:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006094:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006098:	681b      	ldr	r3, [r3, #0]
 800609a:	691b      	ldr	r3, [r3, #16]
 800609c:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 80060a0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80060a4:	68d9      	ldr	r1, [r3, #12]
 80060a6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80060aa:	681a      	ldr	r2, [r3, #0]
 80060ac:	ea40 0301 	orr.w	r3, r0, r1
 80060b0:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80060b2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80060b6:	689a      	ldr	r2, [r3, #8]
 80060b8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80060bc:	691b      	ldr	r3, [r3, #16]
 80060be:	431a      	orrs	r2, r3
 80060c0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80060c4:	695b      	ldr	r3, [r3, #20]
 80060c6:	431a      	orrs	r2, r3
 80060c8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80060cc:	69db      	ldr	r3, [r3, #28]
 80060ce:	4313      	orrs	r3, r2
 80060d0:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80060d4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80060d8:	681b      	ldr	r3, [r3, #0]
 80060da:	68db      	ldr	r3, [r3, #12]
 80060dc:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 80060e0:	f021 010c 	bic.w	r1, r1, #12
 80060e4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80060e8:	681a      	ldr	r2, [r3, #0]
 80060ea:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 80060ee:	430b      	orrs	r3, r1
 80060f0:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80060f2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80060f6:	681b      	ldr	r3, [r3, #0]
 80060f8:	695b      	ldr	r3, [r3, #20]
 80060fa:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 80060fe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006102:	6999      	ldr	r1, [r3, #24]
 8006104:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006108:	681a      	ldr	r2, [r3, #0]
 800610a:	ea40 0301 	orr.w	r3, r0, r1
 800610e:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8006110:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006114:	681a      	ldr	r2, [r3, #0]
 8006116:	4b8f      	ldr	r3, [pc, #572]	@ (8006354 <UART_SetConfig+0x2cc>)
 8006118:	429a      	cmp	r2, r3
 800611a:	d005      	beq.n	8006128 <UART_SetConfig+0xa0>
 800611c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006120:	681a      	ldr	r2, [r3, #0]
 8006122:	4b8d      	ldr	r3, [pc, #564]	@ (8006358 <UART_SetConfig+0x2d0>)
 8006124:	429a      	cmp	r2, r3
 8006126:	d104      	bne.n	8006132 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8006128:	f7fe fa4a 	bl	80045c0 <HAL_RCC_GetPCLK2Freq>
 800612c:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8006130:	e003      	b.n	800613a <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8006132:	f7fe fa31 	bl	8004598 <HAL_RCC_GetPCLK1Freq>
 8006136:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800613a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800613e:	69db      	ldr	r3, [r3, #28]
 8006140:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006144:	f040 810c 	bne.w	8006360 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8006148:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800614c:	2200      	movs	r2, #0
 800614e:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8006152:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8006156:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 800615a:	4622      	mov	r2, r4
 800615c:	462b      	mov	r3, r5
 800615e:	1891      	adds	r1, r2, r2
 8006160:	65b9      	str	r1, [r7, #88]	@ 0x58
 8006162:	415b      	adcs	r3, r3
 8006164:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8006166:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 800616a:	4621      	mov	r1, r4
 800616c:	eb12 0801 	adds.w	r8, r2, r1
 8006170:	4629      	mov	r1, r5
 8006172:	eb43 0901 	adc.w	r9, r3, r1
 8006176:	f04f 0200 	mov.w	r2, #0
 800617a:	f04f 0300 	mov.w	r3, #0
 800617e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8006182:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8006186:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800618a:	4690      	mov	r8, r2
 800618c:	4699      	mov	r9, r3
 800618e:	4623      	mov	r3, r4
 8006190:	eb18 0303 	adds.w	r3, r8, r3
 8006194:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8006198:	462b      	mov	r3, r5
 800619a:	eb49 0303 	adc.w	r3, r9, r3
 800619e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 80061a2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80061a6:	685b      	ldr	r3, [r3, #4]
 80061a8:	2200      	movs	r2, #0
 80061aa:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 80061ae:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 80061b2:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 80061b6:	460b      	mov	r3, r1
 80061b8:	18db      	adds	r3, r3, r3
 80061ba:	653b      	str	r3, [r7, #80]	@ 0x50
 80061bc:	4613      	mov	r3, r2
 80061be:	eb42 0303 	adc.w	r3, r2, r3
 80061c2:	657b      	str	r3, [r7, #84]	@ 0x54
 80061c4:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 80061c8:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 80061cc:	f7fa f810 	bl	80001f0 <__aeabi_uldivmod>
 80061d0:	4602      	mov	r2, r0
 80061d2:	460b      	mov	r3, r1
 80061d4:	4b61      	ldr	r3, [pc, #388]	@ (800635c <UART_SetConfig+0x2d4>)
 80061d6:	fba3 2302 	umull	r2, r3, r3, r2
 80061da:	095b      	lsrs	r3, r3, #5
 80061dc:	011c      	lsls	r4, r3, #4
 80061de:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80061e2:	2200      	movs	r2, #0
 80061e4:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80061e8:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 80061ec:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 80061f0:	4642      	mov	r2, r8
 80061f2:	464b      	mov	r3, r9
 80061f4:	1891      	adds	r1, r2, r2
 80061f6:	64b9      	str	r1, [r7, #72]	@ 0x48
 80061f8:	415b      	adcs	r3, r3
 80061fa:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80061fc:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8006200:	4641      	mov	r1, r8
 8006202:	eb12 0a01 	adds.w	sl, r2, r1
 8006206:	4649      	mov	r1, r9
 8006208:	eb43 0b01 	adc.w	fp, r3, r1
 800620c:	f04f 0200 	mov.w	r2, #0
 8006210:	f04f 0300 	mov.w	r3, #0
 8006214:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8006218:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800621c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8006220:	4692      	mov	sl, r2
 8006222:	469b      	mov	fp, r3
 8006224:	4643      	mov	r3, r8
 8006226:	eb1a 0303 	adds.w	r3, sl, r3
 800622a:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800622e:	464b      	mov	r3, r9
 8006230:	eb4b 0303 	adc.w	r3, fp, r3
 8006234:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8006238:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800623c:	685b      	ldr	r3, [r3, #4]
 800623e:	2200      	movs	r2, #0
 8006240:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8006244:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8006248:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 800624c:	460b      	mov	r3, r1
 800624e:	18db      	adds	r3, r3, r3
 8006250:	643b      	str	r3, [r7, #64]	@ 0x40
 8006252:	4613      	mov	r3, r2
 8006254:	eb42 0303 	adc.w	r3, r2, r3
 8006258:	647b      	str	r3, [r7, #68]	@ 0x44
 800625a:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 800625e:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8006262:	f7f9 ffc5 	bl	80001f0 <__aeabi_uldivmod>
 8006266:	4602      	mov	r2, r0
 8006268:	460b      	mov	r3, r1
 800626a:	4611      	mov	r1, r2
 800626c:	4b3b      	ldr	r3, [pc, #236]	@ (800635c <UART_SetConfig+0x2d4>)
 800626e:	fba3 2301 	umull	r2, r3, r3, r1
 8006272:	095b      	lsrs	r3, r3, #5
 8006274:	2264      	movs	r2, #100	@ 0x64
 8006276:	fb02 f303 	mul.w	r3, r2, r3
 800627a:	1acb      	subs	r3, r1, r3
 800627c:	00db      	lsls	r3, r3, #3
 800627e:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8006282:	4b36      	ldr	r3, [pc, #216]	@ (800635c <UART_SetConfig+0x2d4>)
 8006284:	fba3 2302 	umull	r2, r3, r3, r2
 8006288:	095b      	lsrs	r3, r3, #5
 800628a:	005b      	lsls	r3, r3, #1
 800628c:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8006290:	441c      	add	r4, r3
 8006292:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006296:	2200      	movs	r2, #0
 8006298:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800629c:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 80062a0:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 80062a4:	4642      	mov	r2, r8
 80062a6:	464b      	mov	r3, r9
 80062a8:	1891      	adds	r1, r2, r2
 80062aa:	63b9      	str	r1, [r7, #56]	@ 0x38
 80062ac:	415b      	adcs	r3, r3
 80062ae:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80062b0:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 80062b4:	4641      	mov	r1, r8
 80062b6:	1851      	adds	r1, r2, r1
 80062b8:	6339      	str	r1, [r7, #48]	@ 0x30
 80062ba:	4649      	mov	r1, r9
 80062bc:	414b      	adcs	r3, r1
 80062be:	637b      	str	r3, [r7, #52]	@ 0x34
 80062c0:	f04f 0200 	mov.w	r2, #0
 80062c4:	f04f 0300 	mov.w	r3, #0
 80062c8:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 80062cc:	4659      	mov	r1, fp
 80062ce:	00cb      	lsls	r3, r1, #3
 80062d0:	4651      	mov	r1, sl
 80062d2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80062d6:	4651      	mov	r1, sl
 80062d8:	00ca      	lsls	r2, r1, #3
 80062da:	4610      	mov	r0, r2
 80062dc:	4619      	mov	r1, r3
 80062de:	4603      	mov	r3, r0
 80062e0:	4642      	mov	r2, r8
 80062e2:	189b      	adds	r3, r3, r2
 80062e4:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80062e8:	464b      	mov	r3, r9
 80062ea:	460a      	mov	r2, r1
 80062ec:	eb42 0303 	adc.w	r3, r2, r3
 80062f0:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80062f4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80062f8:	685b      	ldr	r3, [r3, #4]
 80062fa:	2200      	movs	r2, #0
 80062fc:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8006300:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8006304:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8006308:	460b      	mov	r3, r1
 800630a:	18db      	adds	r3, r3, r3
 800630c:	62bb      	str	r3, [r7, #40]	@ 0x28
 800630e:	4613      	mov	r3, r2
 8006310:	eb42 0303 	adc.w	r3, r2, r3
 8006314:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8006316:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 800631a:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 800631e:	f7f9 ff67 	bl	80001f0 <__aeabi_uldivmod>
 8006322:	4602      	mov	r2, r0
 8006324:	460b      	mov	r3, r1
 8006326:	4b0d      	ldr	r3, [pc, #52]	@ (800635c <UART_SetConfig+0x2d4>)
 8006328:	fba3 1302 	umull	r1, r3, r3, r2
 800632c:	095b      	lsrs	r3, r3, #5
 800632e:	2164      	movs	r1, #100	@ 0x64
 8006330:	fb01 f303 	mul.w	r3, r1, r3
 8006334:	1ad3      	subs	r3, r2, r3
 8006336:	00db      	lsls	r3, r3, #3
 8006338:	3332      	adds	r3, #50	@ 0x32
 800633a:	4a08      	ldr	r2, [pc, #32]	@ (800635c <UART_SetConfig+0x2d4>)
 800633c:	fba2 2303 	umull	r2, r3, r2, r3
 8006340:	095b      	lsrs	r3, r3, #5
 8006342:	f003 0207 	and.w	r2, r3, #7
 8006346:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800634a:	681b      	ldr	r3, [r3, #0]
 800634c:	4422      	add	r2, r4
 800634e:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8006350:	e106      	b.n	8006560 <UART_SetConfig+0x4d8>
 8006352:	bf00      	nop
 8006354:	40011000 	.word	0x40011000
 8006358:	40011400 	.word	0x40011400
 800635c:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8006360:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006364:	2200      	movs	r2, #0
 8006366:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800636a:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 800636e:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8006372:	4642      	mov	r2, r8
 8006374:	464b      	mov	r3, r9
 8006376:	1891      	adds	r1, r2, r2
 8006378:	6239      	str	r1, [r7, #32]
 800637a:	415b      	adcs	r3, r3
 800637c:	627b      	str	r3, [r7, #36]	@ 0x24
 800637e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8006382:	4641      	mov	r1, r8
 8006384:	1854      	adds	r4, r2, r1
 8006386:	4649      	mov	r1, r9
 8006388:	eb43 0501 	adc.w	r5, r3, r1
 800638c:	f04f 0200 	mov.w	r2, #0
 8006390:	f04f 0300 	mov.w	r3, #0
 8006394:	00eb      	lsls	r3, r5, #3
 8006396:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800639a:	00e2      	lsls	r2, r4, #3
 800639c:	4614      	mov	r4, r2
 800639e:	461d      	mov	r5, r3
 80063a0:	4643      	mov	r3, r8
 80063a2:	18e3      	adds	r3, r4, r3
 80063a4:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80063a8:	464b      	mov	r3, r9
 80063aa:	eb45 0303 	adc.w	r3, r5, r3
 80063ae:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 80063b2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80063b6:	685b      	ldr	r3, [r3, #4]
 80063b8:	2200      	movs	r2, #0
 80063ba:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80063be:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 80063c2:	f04f 0200 	mov.w	r2, #0
 80063c6:	f04f 0300 	mov.w	r3, #0
 80063ca:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 80063ce:	4629      	mov	r1, r5
 80063d0:	008b      	lsls	r3, r1, #2
 80063d2:	4621      	mov	r1, r4
 80063d4:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80063d8:	4621      	mov	r1, r4
 80063da:	008a      	lsls	r2, r1, #2
 80063dc:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 80063e0:	f7f9 ff06 	bl	80001f0 <__aeabi_uldivmod>
 80063e4:	4602      	mov	r2, r0
 80063e6:	460b      	mov	r3, r1
 80063e8:	4b60      	ldr	r3, [pc, #384]	@ (800656c <UART_SetConfig+0x4e4>)
 80063ea:	fba3 2302 	umull	r2, r3, r3, r2
 80063ee:	095b      	lsrs	r3, r3, #5
 80063f0:	011c      	lsls	r4, r3, #4
 80063f2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80063f6:	2200      	movs	r2, #0
 80063f8:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80063fc:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8006400:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8006404:	4642      	mov	r2, r8
 8006406:	464b      	mov	r3, r9
 8006408:	1891      	adds	r1, r2, r2
 800640a:	61b9      	str	r1, [r7, #24]
 800640c:	415b      	adcs	r3, r3
 800640e:	61fb      	str	r3, [r7, #28]
 8006410:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8006414:	4641      	mov	r1, r8
 8006416:	1851      	adds	r1, r2, r1
 8006418:	6139      	str	r1, [r7, #16]
 800641a:	4649      	mov	r1, r9
 800641c:	414b      	adcs	r3, r1
 800641e:	617b      	str	r3, [r7, #20]
 8006420:	f04f 0200 	mov.w	r2, #0
 8006424:	f04f 0300 	mov.w	r3, #0
 8006428:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800642c:	4659      	mov	r1, fp
 800642e:	00cb      	lsls	r3, r1, #3
 8006430:	4651      	mov	r1, sl
 8006432:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006436:	4651      	mov	r1, sl
 8006438:	00ca      	lsls	r2, r1, #3
 800643a:	4610      	mov	r0, r2
 800643c:	4619      	mov	r1, r3
 800643e:	4603      	mov	r3, r0
 8006440:	4642      	mov	r2, r8
 8006442:	189b      	adds	r3, r3, r2
 8006444:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8006448:	464b      	mov	r3, r9
 800644a:	460a      	mov	r2, r1
 800644c:	eb42 0303 	adc.w	r3, r2, r3
 8006450:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8006454:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006458:	685b      	ldr	r3, [r3, #4]
 800645a:	2200      	movs	r2, #0
 800645c:	67bb      	str	r3, [r7, #120]	@ 0x78
 800645e:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8006460:	f04f 0200 	mov.w	r2, #0
 8006464:	f04f 0300 	mov.w	r3, #0
 8006468:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 800646c:	4649      	mov	r1, r9
 800646e:	008b      	lsls	r3, r1, #2
 8006470:	4641      	mov	r1, r8
 8006472:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006476:	4641      	mov	r1, r8
 8006478:	008a      	lsls	r2, r1, #2
 800647a:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 800647e:	f7f9 feb7 	bl	80001f0 <__aeabi_uldivmod>
 8006482:	4602      	mov	r2, r0
 8006484:	460b      	mov	r3, r1
 8006486:	4611      	mov	r1, r2
 8006488:	4b38      	ldr	r3, [pc, #224]	@ (800656c <UART_SetConfig+0x4e4>)
 800648a:	fba3 2301 	umull	r2, r3, r3, r1
 800648e:	095b      	lsrs	r3, r3, #5
 8006490:	2264      	movs	r2, #100	@ 0x64
 8006492:	fb02 f303 	mul.w	r3, r2, r3
 8006496:	1acb      	subs	r3, r1, r3
 8006498:	011b      	lsls	r3, r3, #4
 800649a:	3332      	adds	r3, #50	@ 0x32
 800649c:	4a33      	ldr	r2, [pc, #204]	@ (800656c <UART_SetConfig+0x4e4>)
 800649e:	fba2 2303 	umull	r2, r3, r2, r3
 80064a2:	095b      	lsrs	r3, r3, #5
 80064a4:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80064a8:	441c      	add	r4, r3
 80064aa:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80064ae:	2200      	movs	r2, #0
 80064b0:	673b      	str	r3, [r7, #112]	@ 0x70
 80064b2:	677a      	str	r2, [r7, #116]	@ 0x74
 80064b4:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 80064b8:	4642      	mov	r2, r8
 80064ba:	464b      	mov	r3, r9
 80064bc:	1891      	adds	r1, r2, r2
 80064be:	60b9      	str	r1, [r7, #8]
 80064c0:	415b      	adcs	r3, r3
 80064c2:	60fb      	str	r3, [r7, #12]
 80064c4:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80064c8:	4641      	mov	r1, r8
 80064ca:	1851      	adds	r1, r2, r1
 80064cc:	6039      	str	r1, [r7, #0]
 80064ce:	4649      	mov	r1, r9
 80064d0:	414b      	adcs	r3, r1
 80064d2:	607b      	str	r3, [r7, #4]
 80064d4:	f04f 0200 	mov.w	r2, #0
 80064d8:	f04f 0300 	mov.w	r3, #0
 80064dc:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80064e0:	4659      	mov	r1, fp
 80064e2:	00cb      	lsls	r3, r1, #3
 80064e4:	4651      	mov	r1, sl
 80064e6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80064ea:	4651      	mov	r1, sl
 80064ec:	00ca      	lsls	r2, r1, #3
 80064ee:	4610      	mov	r0, r2
 80064f0:	4619      	mov	r1, r3
 80064f2:	4603      	mov	r3, r0
 80064f4:	4642      	mov	r2, r8
 80064f6:	189b      	adds	r3, r3, r2
 80064f8:	66bb      	str	r3, [r7, #104]	@ 0x68
 80064fa:	464b      	mov	r3, r9
 80064fc:	460a      	mov	r2, r1
 80064fe:	eb42 0303 	adc.w	r3, r2, r3
 8006502:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8006504:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006508:	685b      	ldr	r3, [r3, #4]
 800650a:	2200      	movs	r2, #0
 800650c:	663b      	str	r3, [r7, #96]	@ 0x60
 800650e:	667a      	str	r2, [r7, #100]	@ 0x64
 8006510:	f04f 0200 	mov.w	r2, #0
 8006514:	f04f 0300 	mov.w	r3, #0
 8006518:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 800651c:	4649      	mov	r1, r9
 800651e:	008b      	lsls	r3, r1, #2
 8006520:	4641      	mov	r1, r8
 8006522:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006526:	4641      	mov	r1, r8
 8006528:	008a      	lsls	r2, r1, #2
 800652a:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 800652e:	f7f9 fe5f 	bl	80001f0 <__aeabi_uldivmod>
 8006532:	4602      	mov	r2, r0
 8006534:	460b      	mov	r3, r1
 8006536:	4b0d      	ldr	r3, [pc, #52]	@ (800656c <UART_SetConfig+0x4e4>)
 8006538:	fba3 1302 	umull	r1, r3, r3, r2
 800653c:	095b      	lsrs	r3, r3, #5
 800653e:	2164      	movs	r1, #100	@ 0x64
 8006540:	fb01 f303 	mul.w	r3, r1, r3
 8006544:	1ad3      	subs	r3, r2, r3
 8006546:	011b      	lsls	r3, r3, #4
 8006548:	3332      	adds	r3, #50	@ 0x32
 800654a:	4a08      	ldr	r2, [pc, #32]	@ (800656c <UART_SetConfig+0x4e4>)
 800654c:	fba2 2303 	umull	r2, r3, r2, r3
 8006550:	095b      	lsrs	r3, r3, #5
 8006552:	f003 020f 	and.w	r2, r3, #15
 8006556:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800655a:	681b      	ldr	r3, [r3, #0]
 800655c:	4422      	add	r2, r4
 800655e:	609a      	str	r2, [r3, #8]
}
 8006560:	bf00      	nop
 8006562:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8006566:	46bd      	mov	sp, r7
 8006568:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800656c:	51eb851f 	.word	0x51eb851f

08006570 <FMC_SDRAM_Init>:
  * @param  Device Pointer to SDRAM device instance
  * @param  Init Pointer to SDRAM Initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_InitTypeDef *Init)
{
 8006570:	b480      	push	{r7}
 8006572:	b083      	sub	sp, #12
 8006574:	af00      	add	r7, sp, #0
 8006576:	6078      	str	r0, [r7, #4]
 8006578:	6039      	str	r1, [r7, #0]
  assert_param(IS_FMC_SDCLOCK_PERIOD(Init->SDClockPeriod));
  assert_param(IS_FMC_READ_BURST(Init->ReadBurst));
  assert_param(IS_FMC_READPIPE_DELAY(Init->ReadPipeDelay));

  /* Set SDRAM bank configuration parameters */
  if (Init->SDBank == FMC_SDRAM_BANK1)
 800657a:	683b      	ldr	r3, [r7, #0]
 800657c:	681b      	ldr	r3, [r3, #0]
 800657e:	2b00      	cmp	r3, #0
 8006580:	d123      	bne.n	80065ca <FMC_SDRAM_Init+0x5a>
  {
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 8006582:	687b      	ldr	r3, [r7, #4]
 8006584:	681b      	ldr	r3, [r3, #0]
 8006586:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 800658a:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 800658e:	683a      	ldr	r2, [r7, #0]
 8006590:	6851      	ldr	r1, [r2, #4]
 8006592:	683a      	ldr	r2, [r7, #0]
 8006594:	6892      	ldr	r2, [r2, #8]
 8006596:	4311      	orrs	r1, r2
 8006598:	683a      	ldr	r2, [r7, #0]
 800659a:	68d2      	ldr	r2, [r2, #12]
 800659c:	4311      	orrs	r1, r2
 800659e:	683a      	ldr	r2, [r7, #0]
 80065a0:	6912      	ldr	r2, [r2, #16]
 80065a2:	4311      	orrs	r1, r2
 80065a4:	683a      	ldr	r2, [r7, #0]
 80065a6:	6952      	ldr	r2, [r2, #20]
 80065a8:	4311      	orrs	r1, r2
 80065aa:	683a      	ldr	r2, [r7, #0]
 80065ac:	6992      	ldr	r2, [r2, #24]
 80065ae:	4311      	orrs	r1, r2
 80065b0:	683a      	ldr	r2, [r7, #0]
 80065b2:	69d2      	ldr	r2, [r2, #28]
 80065b4:	4311      	orrs	r1, r2
 80065b6:	683a      	ldr	r2, [r7, #0]
 80065b8:	6a12      	ldr	r2, [r2, #32]
 80065ba:	4311      	orrs	r1, r2
 80065bc:	683a      	ldr	r2, [r7, #0]
 80065be:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80065c0:	430a      	orrs	r2, r1
 80065c2:	431a      	orrs	r2, r3
 80065c4:	687b      	ldr	r3, [r7, #4]
 80065c6:	601a      	str	r2, [r3, #0]
 80065c8:	e028      	b.n	800661c <FMC_SDRAM_Init+0xac>
                Init->ReadBurst          |
                Init->ReadPipeDelay));
  }
  else /* FMC_Bank2_SDRAM */
  {
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 80065ca:	687b      	ldr	r3, [r7, #4]
 80065cc:	681b      	ldr	r3, [r3, #0]
 80065ce:	f423 42f8 	bic.w	r2, r3, #31744	@ 0x7c00
 80065d2:	683b      	ldr	r3, [r7, #0]
 80065d4:	69d9      	ldr	r1, [r3, #28]
 80065d6:	683b      	ldr	r3, [r7, #0]
 80065d8:	6a1b      	ldr	r3, [r3, #32]
 80065da:	4319      	orrs	r1, r3
 80065dc:	683b      	ldr	r3, [r7, #0]
 80065de:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80065e0:	430b      	orrs	r3, r1
 80065e2:	431a      	orrs	r2, r3
 80065e4:	687b      	ldr	r3, [r7, #4]
 80065e6:	601a      	str	r2, [r3, #0]
               FMC_SDCR1_RPIPE,
               (Init->SDClockPeriod      |
                Init->ReadBurst          |
                Init->ReadPipeDelay));

    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK2],
 80065e8:	687b      	ldr	r3, [r7, #4]
 80065ea:	685b      	ldr	r3, [r3, #4]
 80065ec:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 80065f0:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 80065f4:	683a      	ldr	r2, [r7, #0]
 80065f6:	6851      	ldr	r1, [r2, #4]
 80065f8:	683a      	ldr	r2, [r7, #0]
 80065fa:	6892      	ldr	r2, [r2, #8]
 80065fc:	4311      	orrs	r1, r2
 80065fe:	683a      	ldr	r2, [r7, #0]
 8006600:	68d2      	ldr	r2, [r2, #12]
 8006602:	4311      	orrs	r1, r2
 8006604:	683a      	ldr	r2, [r7, #0]
 8006606:	6912      	ldr	r2, [r2, #16]
 8006608:	4311      	orrs	r1, r2
 800660a:	683a      	ldr	r2, [r7, #0]
 800660c:	6952      	ldr	r2, [r2, #20]
 800660e:	4311      	orrs	r1, r2
 8006610:	683a      	ldr	r2, [r7, #0]
 8006612:	6992      	ldr	r2, [r2, #24]
 8006614:	430a      	orrs	r2, r1
 8006616:	431a      	orrs	r2, r3
 8006618:	687b      	ldr	r3, [r7, #4]
 800661a:	605a      	str	r2, [r3, #4]
                Init->InternalBankNumber |
                Init->CASLatency         |
                Init->WriteProtection));
  }

  return HAL_OK;
 800661c:	2300      	movs	r3, #0
}
 800661e:	4618      	mov	r0, r3
 8006620:	370c      	adds	r7, #12
 8006622:	46bd      	mov	sp, r7
 8006624:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006628:	4770      	bx	lr

0800662a <FMC_SDRAM_Timing_Init>:
  * @param  Bank SDRAM bank number
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Timing_Init(FMC_SDRAM_TypeDef *Device,
                                        FMC_SDRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 800662a:	b480      	push	{r7}
 800662c:	b085      	sub	sp, #20
 800662e:	af00      	add	r7, sp, #0
 8006630:	60f8      	str	r0, [r7, #12]
 8006632:	60b9      	str	r1, [r7, #8]
 8006634:	607a      	str	r2, [r7, #4]
  assert_param(IS_FMC_RP_DELAY(Timing->RPDelay));
  assert_param(IS_FMC_RCD_DELAY(Timing->RCDDelay));
  assert_param(IS_FMC_SDRAM_BANK(Bank));

  /* Set SDRAM device timing parameters */
  if (Bank == FMC_SDRAM_BANK1)
 8006636:	687b      	ldr	r3, [r7, #4]
 8006638:	2b00      	cmp	r3, #0
 800663a:	d128      	bne.n	800668e <FMC_SDRAM_Timing_Init+0x64>
  {
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 800663c:	68fb      	ldr	r3, [r7, #12]
 800663e:	689b      	ldr	r3, [r3, #8]
 8006640:	f003 4270 	and.w	r2, r3, #4026531840	@ 0xf0000000
 8006644:	68bb      	ldr	r3, [r7, #8]
 8006646:	681b      	ldr	r3, [r3, #0]
 8006648:	1e59      	subs	r1, r3, #1
 800664a:	68bb      	ldr	r3, [r7, #8]
 800664c:	685b      	ldr	r3, [r3, #4]
 800664e:	3b01      	subs	r3, #1
 8006650:	011b      	lsls	r3, r3, #4
 8006652:	4319      	orrs	r1, r3
 8006654:	68bb      	ldr	r3, [r7, #8]
 8006656:	689b      	ldr	r3, [r3, #8]
 8006658:	3b01      	subs	r3, #1
 800665a:	021b      	lsls	r3, r3, #8
 800665c:	4319      	orrs	r1, r3
 800665e:	68bb      	ldr	r3, [r7, #8]
 8006660:	68db      	ldr	r3, [r3, #12]
 8006662:	3b01      	subs	r3, #1
 8006664:	031b      	lsls	r3, r3, #12
 8006666:	4319      	orrs	r1, r3
 8006668:	68bb      	ldr	r3, [r7, #8]
 800666a:	691b      	ldr	r3, [r3, #16]
 800666c:	3b01      	subs	r3, #1
 800666e:	041b      	lsls	r3, r3, #16
 8006670:	4319      	orrs	r1, r3
 8006672:	68bb      	ldr	r3, [r7, #8]
 8006674:	695b      	ldr	r3, [r3, #20]
 8006676:	3b01      	subs	r3, #1
 8006678:	051b      	lsls	r3, r3, #20
 800667a:	4319      	orrs	r1, r3
 800667c:	68bb      	ldr	r3, [r7, #8]
 800667e:	699b      	ldr	r3, [r3, #24]
 8006680:	3b01      	subs	r3, #1
 8006682:	061b      	lsls	r3, r3, #24
 8006684:	430b      	orrs	r3, r1
 8006686:	431a      	orrs	r2, r3
 8006688:	68fb      	ldr	r3, [r7, #12]
 800668a:	609a      	str	r2, [r3, #8]
 800668c:	e02f      	b.n	80066ee <FMC_SDRAM_Timing_Init+0xc4>
                (((Timing->RPDelay) - 1U)              << FMC_SDTR1_TRP_Pos)  |
                (((Timing->RCDDelay) - 1U)             << FMC_SDTR1_TRCD_Pos)));
  }
  else /* FMC_Bank2_SDRAM */
  {
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 800668e:	68fb      	ldr	r3, [r7, #12]
 8006690:	689b      	ldr	r3, [r3, #8]
 8006692:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8006696:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800669a:	68ba      	ldr	r2, [r7, #8]
 800669c:	68d2      	ldr	r2, [r2, #12]
 800669e:	3a01      	subs	r2, #1
 80066a0:	0311      	lsls	r1, r2, #12
 80066a2:	68ba      	ldr	r2, [r7, #8]
 80066a4:	6952      	ldr	r2, [r2, #20]
 80066a6:	3a01      	subs	r2, #1
 80066a8:	0512      	lsls	r2, r2, #20
 80066aa:	430a      	orrs	r2, r1
 80066ac:	431a      	orrs	r2, r3
 80066ae:	68fb      	ldr	r3, [r7, #12]
 80066b0:	609a      	str	r2, [r3, #8]
               FMC_SDTR1_TRC |
               FMC_SDTR1_TRP,
               (((Timing->RowCycleDelay) - 1U)         << FMC_SDTR1_TRC_Pos)  |
               (((Timing->RPDelay) - 1U)               << FMC_SDTR1_TRP_Pos));

    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK2],
 80066b2:	68fb      	ldr	r3, [r7, #12]
 80066b4:	68db      	ldr	r3, [r3, #12]
 80066b6:	f003 4270 	and.w	r2, r3, #4026531840	@ 0xf0000000
 80066ba:	68bb      	ldr	r3, [r7, #8]
 80066bc:	681b      	ldr	r3, [r3, #0]
 80066be:	1e59      	subs	r1, r3, #1
 80066c0:	68bb      	ldr	r3, [r7, #8]
 80066c2:	685b      	ldr	r3, [r3, #4]
 80066c4:	3b01      	subs	r3, #1
 80066c6:	011b      	lsls	r3, r3, #4
 80066c8:	4319      	orrs	r1, r3
 80066ca:	68bb      	ldr	r3, [r7, #8]
 80066cc:	689b      	ldr	r3, [r3, #8]
 80066ce:	3b01      	subs	r3, #1
 80066d0:	021b      	lsls	r3, r3, #8
 80066d2:	4319      	orrs	r1, r3
 80066d4:	68bb      	ldr	r3, [r7, #8]
 80066d6:	691b      	ldr	r3, [r3, #16]
 80066d8:	3b01      	subs	r3, #1
 80066da:	041b      	lsls	r3, r3, #16
 80066dc:	4319      	orrs	r1, r3
 80066de:	68bb      	ldr	r3, [r7, #8]
 80066e0:	699b      	ldr	r3, [r3, #24]
 80066e2:	3b01      	subs	r3, #1
 80066e4:	061b      	lsls	r3, r3, #24
 80066e6:	430b      	orrs	r3, r1
 80066e8:	431a      	orrs	r2, r3
 80066ea:	68fb      	ldr	r3, [r7, #12]
 80066ec:	60da      	str	r2, [r3, #12]
                (((Timing->SelfRefreshTime) - 1U)      << FMC_SDTR1_TRAS_Pos) |
                (((Timing->WriteRecoveryTime) - 1U)    << FMC_SDTR1_TWR_Pos)  |
                (((Timing->RCDDelay) - 1U)             << FMC_SDTR1_TRCD_Pos)));
  }

  return HAL_OK;
 80066ee:	2300      	movs	r3, #0
}
 80066f0:	4618      	mov	r0, r3
 80066f2:	3714      	adds	r7, #20
 80066f4:	46bd      	mov	sp, r7
 80066f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066fa:	4770      	bx	lr

080066fc <FMC_SDRAM_SendCommand>:
  * @param  Timeout Timeout wait value
  * @retval HAL state
  */
HAL_StatusTypeDef FMC_SDRAM_SendCommand(FMC_SDRAM_TypeDef *Device,
                                        FMC_SDRAM_CommandTypeDef *Command, uint32_t Timeout)
{
 80066fc:	b580      	push	{r7, lr}
 80066fe:	b086      	sub	sp, #24
 8006700:	af00      	add	r7, sp, #0
 8006702:	60f8      	str	r0, [r7, #12]
 8006704:	60b9      	str	r1, [r7, #8]
 8006706:	607a      	str	r2, [r7, #4]
  uint32_t tickstart = 0U;
 8006708:	2300      	movs	r3, #0
 800670a:	617b      	str	r3, [r7, #20]
  assert_param(IS_FMC_COMMAND_TARGET(Command->CommandTarget));
  assert_param(IS_FMC_AUTOREFRESH_NUMBER(Command->AutoRefreshNumber));
  assert_param(IS_FMC_MODE_REGISTER(Command->ModeRegisterDefinition));

  /* Set command register */
  MODIFY_REG(Device->SDCMR, (FMC_SDCMR_MODE | FMC_SDCMR_CTB2 | FMC_SDCMR_CTB1 | FMC_SDCMR_NRFS | FMC_SDCMR_MRD),
 800670c:	68fb      	ldr	r3, [r7, #12]
 800670e:	691b      	ldr	r3, [r3, #16]
 8006710:	0d9b      	lsrs	r3, r3, #22
 8006712:	059b      	lsls	r3, r3, #22
 8006714:	68ba      	ldr	r2, [r7, #8]
 8006716:	6811      	ldr	r1, [r2, #0]
 8006718:	68ba      	ldr	r2, [r7, #8]
 800671a:	6852      	ldr	r2, [r2, #4]
 800671c:	4311      	orrs	r1, r2
 800671e:	68ba      	ldr	r2, [r7, #8]
 8006720:	6892      	ldr	r2, [r2, #8]
 8006722:	3a01      	subs	r2, #1
 8006724:	0152      	lsls	r2, r2, #5
 8006726:	4311      	orrs	r1, r2
 8006728:	68ba      	ldr	r2, [r7, #8]
 800672a:	68d2      	ldr	r2, [r2, #12]
 800672c:	0252      	lsls	r2, r2, #9
 800672e:	430a      	orrs	r2, r1
 8006730:	431a      	orrs	r2, r3
 8006732:	68fb      	ldr	r3, [r7, #12]
 8006734:	611a      	str	r2, [r3, #16]
             ((Command->CommandMode) | (Command->CommandTarget) |
              (((Command->AutoRefreshNumber) - 1U) << FMC_SDCMR_NRFS_Pos) |
              ((Command->ModeRegisterDefinition) << FMC_SDCMR_MRD_Pos)));
  /* Get tick */
  tickstart = HAL_GetTick();
 8006736:	f7fb fe5f 	bl	80023f8 <HAL_GetTick>
 800673a:	6178      	str	r0, [r7, #20]

  /* wait until command is send */
  while (HAL_IS_BIT_SET(Device->SDSR, FMC_SDSR_BUSY))
 800673c:	e010      	b.n	8006760 <FMC_SDRAM_SendCommand+0x64>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800673e:	687b      	ldr	r3, [r7, #4]
 8006740:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006744:	d00c      	beq.n	8006760 <FMC_SDRAM_SendCommand+0x64>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 8006746:	687b      	ldr	r3, [r7, #4]
 8006748:	2b00      	cmp	r3, #0
 800674a:	d007      	beq.n	800675c <FMC_SDRAM_SendCommand+0x60>
 800674c:	f7fb fe54 	bl	80023f8 <HAL_GetTick>
 8006750:	4602      	mov	r2, r0
 8006752:	697b      	ldr	r3, [r7, #20]
 8006754:	1ad3      	subs	r3, r2, r3
 8006756:	687a      	ldr	r2, [r7, #4]
 8006758:	429a      	cmp	r2, r3
 800675a:	d201      	bcs.n	8006760 <FMC_SDRAM_SendCommand+0x64>
      {
        return HAL_TIMEOUT;
 800675c:	2303      	movs	r3, #3
 800675e:	e006      	b.n	800676e <FMC_SDRAM_SendCommand+0x72>
  while (HAL_IS_BIT_SET(Device->SDSR, FMC_SDSR_BUSY))
 8006760:	68fb      	ldr	r3, [r7, #12]
 8006762:	699b      	ldr	r3, [r3, #24]
 8006764:	f003 0320 	and.w	r3, r3, #32
 8006768:	2b20      	cmp	r3, #32
 800676a:	d0e8      	beq.n	800673e <FMC_SDRAM_SendCommand+0x42>
      }
    }
  }
  return HAL_OK;
 800676c:	2300      	movs	r3, #0
}
 800676e:	4618      	mov	r0, r3
 8006770:	3718      	adds	r7, #24
 8006772:	46bd      	mov	sp, r7
 8006774:	bd80      	pop	{r7, pc}

08006776 <FMC_SDRAM_ProgramRefreshRate>:
  * @param  Device Pointer to SDRAM device instance
  * @param  RefreshRate The SDRAM refresh rate value.
  * @retval HAL state
  */
HAL_StatusTypeDef FMC_SDRAM_ProgramRefreshRate(FMC_SDRAM_TypeDef *Device, uint32_t RefreshRate)
{
 8006776:	b480      	push	{r7}
 8006778:	b083      	sub	sp, #12
 800677a:	af00      	add	r7, sp, #0
 800677c:	6078      	str	r0, [r7, #4]
 800677e:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FMC_SDRAM_DEVICE(Device));
  assert_param(IS_FMC_REFRESH_RATE(RefreshRate));

  /* Set the refresh rate in command register */
  MODIFY_REG(Device->SDRTR, FMC_SDRTR_COUNT, (RefreshRate << FMC_SDRTR_COUNT_Pos));
 8006780:	687b      	ldr	r3, [r7, #4]
 8006782:	695b      	ldr	r3, [r3, #20]
 8006784:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 8006788:	f023 033e 	bic.w	r3, r3, #62	@ 0x3e
 800678c:	683a      	ldr	r2, [r7, #0]
 800678e:	0052      	lsls	r2, r2, #1
 8006790:	431a      	orrs	r2, r3
 8006792:	687b      	ldr	r3, [r7, #4]
 8006794:	615a      	str	r2, [r3, #20]

  return HAL_OK;
 8006796:	2300      	movs	r3, #0
}
 8006798:	4618      	mov	r0, r3
 800679a:	370c      	adds	r7, #12
 800679c:	46bd      	mov	sp, r7
 800679e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067a2:	4770      	bx	lr

080067a4 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 80067a4:	b480      	push	{r7}
 80067a6:	b085      	sub	sp, #20
 80067a8:	af00      	add	r7, sp, #0
 80067aa:	4603      	mov	r3, r0
 80067ac:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 80067ae:	2300      	movs	r3, #0
 80067b0:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 80067b2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80067b6:	2b84      	cmp	r3, #132	@ 0x84
 80067b8:	d005      	beq.n	80067c6 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 80067ba:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 80067be:	68fb      	ldr	r3, [r7, #12]
 80067c0:	4413      	add	r3, r2
 80067c2:	3303      	adds	r3, #3
 80067c4:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 80067c6:	68fb      	ldr	r3, [r7, #12]
}
 80067c8:	4618      	mov	r0, r3
 80067ca:	3714      	adds	r7, #20
 80067cc:	46bd      	mov	sp, r7
 80067ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067d2:	4770      	bx	lr

080067d4 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 80067d4:	b580      	push	{r7, lr}
 80067d6:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 80067d8:	f000 faf0 	bl	8006dbc <vTaskStartScheduler>
  
  return osOK;
 80067dc:	2300      	movs	r3, #0
}
 80067de:	4618      	mov	r0, r3
 80067e0:	bd80      	pop	{r7, pc}

080067e2 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 80067e2:	b5f0      	push	{r4, r5, r6, r7, lr}
 80067e4:	b089      	sub	sp, #36	@ 0x24
 80067e6:	af04      	add	r7, sp, #16
 80067e8:	6078      	str	r0, [r7, #4]
 80067ea:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 80067ec:	687b      	ldr	r3, [r7, #4]
 80067ee:	695b      	ldr	r3, [r3, #20]
 80067f0:	2b00      	cmp	r3, #0
 80067f2:	d020      	beq.n	8006836 <osThreadCreate+0x54>
 80067f4:	687b      	ldr	r3, [r7, #4]
 80067f6:	699b      	ldr	r3, [r3, #24]
 80067f8:	2b00      	cmp	r3, #0
 80067fa:	d01c      	beq.n	8006836 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80067fc:	687b      	ldr	r3, [r7, #4]
 80067fe:	685c      	ldr	r4, [r3, #4]
 8006800:	687b      	ldr	r3, [r7, #4]
 8006802:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8006804:	687b      	ldr	r3, [r7, #4]
 8006806:	691e      	ldr	r6, [r3, #16]
 8006808:	687b      	ldr	r3, [r7, #4]
 800680a:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800680e:	4618      	mov	r0, r3
 8006810:	f7ff ffc8 	bl	80067a4 <makeFreeRtosPriority>
 8006814:	4601      	mov	r1, r0
              thread_def->buffer, thread_def->controlblock);
 8006816:	687b      	ldr	r3, [r7, #4]
 8006818:	695b      	ldr	r3, [r3, #20]
 800681a:	687a      	ldr	r2, [r7, #4]
 800681c:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800681e:	9202      	str	r2, [sp, #8]
 8006820:	9301      	str	r3, [sp, #4]
 8006822:	9100      	str	r1, [sp, #0]
 8006824:	683b      	ldr	r3, [r7, #0]
 8006826:	4632      	mov	r2, r6
 8006828:	4629      	mov	r1, r5
 800682a:	4620      	mov	r0, r4
 800682c:	f000 f8ed 	bl	8006a0a <xTaskCreateStatic>
 8006830:	4603      	mov	r3, r0
 8006832:	60fb      	str	r3, [r7, #12]
 8006834:	e01c      	b.n	8006870 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8006836:	687b      	ldr	r3, [r7, #4]
 8006838:	685c      	ldr	r4, [r3, #4]
 800683a:	687b      	ldr	r3, [r7, #4]
 800683c:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 800683e:	687b      	ldr	r3, [r7, #4]
 8006840:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8006842:	b29e      	uxth	r6, r3
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8006844:	687b      	ldr	r3, [r7, #4]
 8006846:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800684a:	4618      	mov	r0, r3
 800684c:	f7ff ffaa 	bl	80067a4 <makeFreeRtosPriority>
 8006850:	4602      	mov	r2, r0
 8006852:	f107 030c 	add.w	r3, r7, #12
 8006856:	9301      	str	r3, [sp, #4]
 8006858:	9200      	str	r2, [sp, #0]
 800685a:	683b      	ldr	r3, [r7, #0]
 800685c:	4632      	mov	r2, r6
 800685e:	4629      	mov	r1, r5
 8006860:	4620      	mov	r0, r4
 8006862:	f000 f932 	bl	8006aca <xTaskCreate>
 8006866:	4603      	mov	r3, r0
 8006868:	2b01      	cmp	r3, #1
 800686a:	d001      	beq.n	8006870 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 800686c:	2300      	movs	r3, #0
 800686e:	e000      	b.n	8006872 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8006870:	68fb      	ldr	r3, [r7, #12]
}
 8006872:	4618      	mov	r0, r3
 8006874:	3714      	adds	r7, #20
 8006876:	46bd      	mov	sp, r7
 8006878:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800687a <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 800687a:	b580      	push	{r7, lr}
 800687c:	b084      	sub	sp, #16
 800687e:	af00      	add	r7, sp, #0
 8006880:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 8006882:	687b      	ldr	r3, [r7, #4]
 8006884:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8006886:	68fb      	ldr	r3, [r7, #12]
 8006888:	2b00      	cmp	r3, #0
 800688a:	d001      	beq.n	8006890 <osDelay+0x16>
 800688c:	68fb      	ldr	r3, [r7, #12]
 800688e:	e000      	b.n	8006892 <osDelay+0x18>
 8006890:	2301      	movs	r3, #1
 8006892:	4618      	mov	r0, r3
 8006894:	f000 fa5c 	bl	8006d50 <vTaskDelay>
  
  return osOK;
 8006898:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 800689a:	4618      	mov	r0, r3
 800689c:	3710      	adds	r7, #16
 800689e:	46bd      	mov	sp, r7
 80068a0:	bd80      	pop	{r7, pc}

080068a2 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80068a2:	b480      	push	{r7}
 80068a4:	b083      	sub	sp, #12
 80068a6:	af00      	add	r7, sp, #0
 80068a8:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80068aa:	687b      	ldr	r3, [r7, #4]
 80068ac:	f103 0208 	add.w	r2, r3, #8
 80068b0:	687b      	ldr	r3, [r7, #4]
 80068b2:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80068b4:	687b      	ldr	r3, [r7, #4]
 80068b6:	f04f 32ff 	mov.w	r2, #4294967295
 80068ba:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80068bc:	687b      	ldr	r3, [r7, #4]
 80068be:	f103 0208 	add.w	r2, r3, #8
 80068c2:	687b      	ldr	r3, [r7, #4]
 80068c4:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80068c6:	687b      	ldr	r3, [r7, #4]
 80068c8:	f103 0208 	add.w	r2, r3, #8
 80068cc:	687b      	ldr	r3, [r7, #4]
 80068ce:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80068d0:	687b      	ldr	r3, [r7, #4]
 80068d2:	2200      	movs	r2, #0
 80068d4:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80068d6:	bf00      	nop
 80068d8:	370c      	adds	r7, #12
 80068da:	46bd      	mov	sp, r7
 80068dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068e0:	4770      	bx	lr

080068e2 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80068e2:	b480      	push	{r7}
 80068e4:	b083      	sub	sp, #12
 80068e6:	af00      	add	r7, sp, #0
 80068e8:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 80068ea:	687b      	ldr	r3, [r7, #4]
 80068ec:	2200      	movs	r2, #0
 80068ee:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80068f0:	bf00      	nop
 80068f2:	370c      	adds	r7, #12
 80068f4:	46bd      	mov	sp, r7
 80068f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068fa:	4770      	bx	lr

080068fc <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80068fc:	b480      	push	{r7}
 80068fe:	b085      	sub	sp, #20
 8006900:	af00      	add	r7, sp, #0
 8006902:	6078      	str	r0, [r7, #4]
 8006904:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8006906:	687b      	ldr	r3, [r7, #4]
 8006908:	685b      	ldr	r3, [r3, #4]
 800690a:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800690c:	683b      	ldr	r3, [r7, #0]
 800690e:	68fa      	ldr	r2, [r7, #12]
 8006910:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8006912:	68fb      	ldr	r3, [r7, #12]
 8006914:	689a      	ldr	r2, [r3, #8]
 8006916:	683b      	ldr	r3, [r7, #0]
 8006918:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800691a:	68fb      	ldr	r3, [r7, #12]
 800691c:	689b      	ldr	r3, [r3, #8]
 800691e:	683a      	ldr	r2, [r7, #0]
 8006920:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8006922:	68fb      	ldr	r3, [r7, #12]
 8006924:	683a      	ldr	r2, [r7, #0]
 8006926:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8006928:	683b      	ldr	r3, [r7, #0]
 800692a:	687a      	ldr	r2, [r7, #4]
 800692c:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800692e:	687b      	ldr	r3, [r7, #4]
 8006930:	681b      	ldr	r3, [r3, #0]
 8006932:	1c5a      	adds	r2, r3, #1
 8006934:	687b      	ldr	r3, [r7, #4]
 8006936:	601a      	str	r2, [r3, #0]
}
 8006938:	bf00      	nop
 800693a:	3714      	adds	r7, #20
 800693c:	46bd      	mov	sp, r7
 800693e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006942:	4770      	bx	lr

08006944 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8006944:	b480      	push	{r7}
 8006946:	b085      	sub	sp, #20
 8006948:	af00      	add	r7, sp, #0
 800694a:	6078      	str	r0, [r7, #4]
 800694c:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800694e:	683b      	ldr	r3, [r7, #0]
 8006950:	681b      	ldr	r3, [r3, #0]
 8006952:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8006954:	68bb      	ldr	r3, [r7, #8]
 8006956:	f1b3 3fff 	cmp.w	r3, #4294967295
 800695a:	d103      	bne.n	8006964 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800695c:	687b      	ldr	r3, [r7, #4]
 800695e:	691b      	ldr	r3, [r3, #16]
 8006960:	60fb      	str	r3, [r7, #12]
 8006962:	e00c      	b.n	800697e <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8006964:	687b      	ldr	r3, [r7, #4]
 8006966:	3308      	adds	r3, #8
 8006968:	60fb      	str	r3, [r7, #12]
 800696a:	e002      	b.n	8006972 <vListInsert+0x2e>
 800696c:	68fb      	ldr	r3, [r7, #12]
 800696e:	685b      	ldr	r3, [r3, #4]
 8006970:	60fb      	str	r3, [r7, #12]
 8006972:	68fb      	ldr	r3, [r7, #12]
 8006974:	685b      	ldr	r3, [r3, #4]
 8006976:	681b      	ldr	r3, [r3, #0]
 8006978:	68ba      	ldr	r2, [r7, #8]
 800697a:	429a      	cmp	r2, r3
 800697c:	d2f6      	bcs.n	800696c <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800697e:	68fb      	ldr	r3, [r7, #12]
 8006980:	685a      	ldr	r2, [r3, #4]
 8006982:	683b      	ldr	r3, [r7, #0]
 8006984:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8006986:	683b      	ldr	r3, [r7, #0]
 8006988:	685b      	ldr	r3, [r3, #4]
 800698a:	683a      	ldr	r2, [r7, #0]
 800698c:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800698e:	683b      	ldr	r3, [r7, #0]
 8006990:	68fa      	ldr	r2, [r7, #12]
 8006992:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8006994:	68fb      	ldr	r3, [r7, #12]
 8006996:	683a      	ldr	r2, [r7, #0]
 8006998:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800699a:	683b      	ldr	r3, [r7, #0]
 800699c:	687a      	ldr	r2, [r7, #4]
 800699e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80069a0:	687b      	ldr	r3, [r7, #4]
 80069a2:	681b      	ldr	r3, [r3, #0]
 80069a4:	1c5a      	adds	r2, r3, #1
 80069a6:	687b      	ldr	r3, [r7, #4]
 80069a8:	601a      	str	r2, [r3, #0]
}
 80069aa:	bf00      	nop
 80069ac:	3714      	adds	r7, #20
 80069ae:	46bd      	mov	sp, r7
 80069b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069b4:	4770      	bx	lr

080069b6 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80069b6:	b480      	push	{r7}
 80069b8:	b085      	sub	sp, #20
 80069ba:	af00      	add	r7, sp, #0
 80069bc:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 80069be:	687b      	ldr	r3, [r7, #4]
 80069c0:	691b      	ldr	r3, [r3, #16]
 80069c2:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80069c4:	687b      	ldr	r3, [r7, #4]
 80069c6:	685b      	ldr	r3, [r3, #4]
 80069c8:	687a      	ldr	r2, [r7, #4]
 80069ca:	6892      	ldr	r2, [r2, #8]
 80069cc:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80069ce:	687b      	ldr	r3, [r7, #4]
 80069d0:	689b      	ldr	r3, [r3, #8]
 80069d2:	687a      	ldr	r2, [r7, #4]
 80069d4:	6852      	ldr	r2, [r2, #4]
 80069d6:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80069d8:	68fb      	ldr	r3, [r7, #12]
 80069da:	685b      	ldr	r3, [r3, #4]
 80069dc:	687a      	ldr	r2, [r7, #4]
 80069de:	429a      	cmp	r2, r3
 80069e0:	d103      	bne.n	80069ea <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80069e2:	687b      	ldr	r3, [r7, #4]
 80069e4:	689a      	ldr	r2, [r3, #8]
 80069e6:	68fb      	ldr	r3, [r7, #12]
 80069e8:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 80069ea:	687b      	ldr	r3, [r7, #4]
 80069ec:	2200      	movs	r2, #0
 80069ee:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80069f0:	68fb      	ldr	r3, [r7, #12]
 80069f2:	681b      	ldr	r3, [r3, #0]
 80069f4:	1e5a      	subs	r2, r3, #1
 80069f6:	68fb      	ldr	r3, [r7, #12]
 80069f8:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80069fa:	68fb      	ldr	r3, [r7, #12]
 80069fc:	681b      	ldr	r3, [r3, #0]
}
 80069fe:	4618      	mov	r0, r3
 8006a00:	3714      	adds	r7, #20
 8006a02:	46bd      	mov	sp, r7
 8006a04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a08:	4770      	bx	lr

08006a0a <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8006a0a:	b580      	push	{r7, lr}
 8006a0c:	b08e      	sub	sp, #56	@ 0x38
 8006a0e:	af04      	add	r7, sp, #16
 8006a10:	60f8      	str	r0, [r7, #12]
 8006a12:	60b9      	str	r1, [r7, #8]
 8006a14:	607a      	str	r2, [r7, #4]
 8006a16:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8006a18:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006a1a:	2b00      	cmp	r3, #0
 8006a1c:	d10b      	bne.n	8006a36 <xTaskCreateStatic+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8006a1e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006a22:	f383 8811 	msr	BASEPRI, r3
 8006a26:	f3bf 8f6f 	isb	sy
 8006a2a:	f3bf 8f4f 	dsb	sy
 8006a2e:	623b      	str	r3, [r7, #32]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8006a30:	bf00      	nop
 8006a32:	bf00      	nop
 8006a34:	e7fd      	b.n	8006a32 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8006a36:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006a38:	2b00      	cmp	r3, #0
 8006a3a:	d10b      	bne.n	8006a54 <xTaskCreateStatic+0x4a>
	__asm volatile
 8006a3c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006a40:	f383 8811 	msr	BASEPRI, r3
 8006a44:	f3bf 8f6f 	isb	sy
 8006a48:	f3bf 8f4f 	dsb	sy
 8006a4c:	61fb      	str	r3, [r7, #28]
}
 8006a4e:	bf00      	nop
 8006a50:	bf00      	nop
 8006a52:	e7fd      	b.n	8006a50 <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8006a54:	2358      	movs	r3, #88	@ 0x58
 8006a56:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8006a58:	693b      	ldr	r3, [r7, #16]
 8006a5a:	2b58      	cmp	r3, #88	@ 0x58
 8006a5c:	d00b      	beq.n	8006a76 <xTaskCreateStatic+0x6c>
	__asm volatile
 8006a5e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006a62:	f383 8811 	msr	BASEPRI, r3
 8006a66:	f3bf 8f6f 	isb	sy
 8006a6a:	f3bf 8f4f 	dsb	sy
 8006a6e:	61bb      	str	r3, [r7, #24]
}
 8006a70:	bf00      	nop
 8006a72:	bf00      	nop
 8006a74:	e7fd      	b.n	8006a72 <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8006a76:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8006a78:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006a7a:	2b00      	cmp	r3, #0
 8006a7c:	d01e      	beq.n	8006abc <xTaskCreateStatic+0xb2>
 8006a7e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006a80:	2b00      	cmp	r3, #0
 8006a82:	d01b      	beq.n	8006abc <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8006a84:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006a86:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8006a88:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006a8a:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8006a8c:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8006a8e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006a90:	2202      	movs	r2, #2
 8006a92:	f883 2055 	strb.w	r2, [r3, #85]	@ 0x55
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8006a96:	2300      	movs	r3, #0
 8006a98:	9303      	str	r3, [sp, #12]
 8006a9a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006a9c:	9302      	str	r3, [sp, #8]
 8006a9e:	f107 0314 	add.w	r3, r7, #20
 8006aa2:	9301      	str	r3, [sp, #4]
 8006aa4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006aa6:	9300      	str	r3, [sp, #0]
 8006aa8:	683b      	ldr	r3, [r7, #0]
 8006aaa:	687a      	ldr	r2, [r7, #4]
 8006aac:	68b9      	ldr	r1, [r7, #8]
 8006aae:	68f8      	ldr	r0, [r7, #12]
 8006ab0:	f000 f850 	bl	8006b54 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8006ab4:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8006ab6:	f000 f8e1 	bl	8006c7c <prvAddNewTaskToReadyList>
 8006aba:	e001      	b.n	8006ac0 <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 8006abc:	2300      	movs	r3, #0
 8006abe:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8006ac0:	697b      	ldr	r3, [r7, #20]
	}
 8006ac2:	4618      	mov	r0, r3
 8006ac4:	3728      	adds	r7, #40	@ 0x28
 8006ac6:	46bd      	mov	sp, r7
 8006ac8:	bd80      	pop	{r7, pc}

08006aca <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8006aca:	b580      	push	{r7, lr}
 8006acc:	b08c      	sub	sp, #48	@ 0x30
 8006ace:	af04      	add	r7, sp, #16
 8006ad0:	60f8      	str	r0, [r7, #12]
 8006ad2:	60b9      	str	r1, [r7, #8]
 8006ad4:	603b      	str	r3, [r7, #0]
 8006ad6:	4613      	mov	r3, r2
 8006ad8:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8006ada:	88fb      	ldrh	r3, [r7, #6]
 8006adc:	009b      	lsls	r3, r3, #2
 8006ade:	4618      	mov	r0, r3
 8006ae0:	f000 ff02 	bl	80078e8 <pvPortMalloc>
 8006ae4:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8006ae6:	697b      	ldr	r3, [r7, #20]
 8006ae8:	2b00      	cmp	r3, #0
 8006aea:	d00e      	beq.n	8006b0a <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8006aec:	2058      	movs	r0, #88	@ 0x58
 8006aee:	f000 fefb 	bl	80078e8 <pvPortMalloc>
 8006af2:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8006af4:	69fb      	ldr	r3, [r7, #28]
 8006af6:	2b00      	cmp	r3, #0
 8006af8:	d003      	beq.n	8006b02 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8006afa:	69fb      	ldr	r3, [r7, #28]
 8006afc:	697a      	ldr	r2, [r7, #20]
 8006afe:	631a      	str	r2, [r3, #48]	@ 0x30
 8006b00:	e005      	b.n	8006b0e <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8006b02:	6978      	ldr	r0, [r7, #20]
 8006b04:	f000 ffc4 	bl	8007a90 <vPortFree>
 8006b08:	e001      	b.n	8006b0e <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8006b0a:	2300      	movs	r3, #0
 8006b0c:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8006b0e:	69fb      	ldr	r3, [r7, #28]
 8006b10:	2b00      	cmp	r3, #0
 8006b12:	d017      	beq.n	8006b44 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8006b14:	69fb      	ldr	r3, [r7, #28]
 8006b16:	2200      	movs	r2, #0
 8006b18:	f883 2055 	strb.w	r2, [r3, #85]	@ 0x55
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8006b1c:	88fa      	ldrh	r2, [r7, #6]
 8006b1e:	2300      	movs	r3, #0
 8006b20:	9303      	str	r3, [sp, #12]
 8006b22:	69fb      	ldr	r3, [r7, #28]
 8006b24:	9302      	str	r3, [sp, #8]
 8006b26:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006b28:	9301      	str	r3, [sp, #4]
 8006b2a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006b2c:	9300      	str	r3, [sp, #0]
 8006b2e:	683b      	ldr	r3, [r7, #0]
 8006b30:	68b9      	ldr	r1, [r7, #8]
 8006b32:	68f8      	ldr	r0, [r7, #12]
 8006b34:	f000 f80e 	bl	8006b54 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8006b38:	69f8      	ldr	r0, [r7, #28]
 8006b3a:	f000 f89f 	bl	8006c7c <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8006b3e:	2301      	movs	r3, #1
 8006b40:	61bb      	str	r3, [r7, #24]
 8006b42:	e002      	b.n	8006b4a <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8006b44:	f04f 33ff 	mov.w	r3, #4294967295
 8006b48:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8006b4a:	69bb      	ldr	r3, [r7, #24]
	}
 8006b4c:	4618      	mov	r0, r3
 8006b4e:	3720      	adds	r7, #32
 8006b50:	46bd      	mov	sp, r7
 8006b52:	bd80      	pop	{r7, pc}

08006b54 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8006b54:	b580      	push	{r7, lr}
 8006b56:	b088      	sub	sp, #32
 8006b58:	af00      	add	r7, sp, #0
 8006b5a:	60f8      	str	r0, [r7, #12]
 8006b5c:	60b9      	str	r1, [r7, #8]
 8006b5e:	607a      	str	r2, [r7, #4]
 8006b60:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8006b62:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006b64:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 8006b66:	687b      	ldr	r3, [r7, #4]
 8006b68:	009b      	lsls	r3, r3, #2
 8006b6a:	461a      	mov	r2, r3
 8006b6c:	21a5      	movs	r1, #165	@ 0xa5
 8006b6e:	f001 f8af 	bl	8007cd0 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8006b72:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006b74:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8006b76:	687b      	ldr	r3, [r7, #4]
 8006b78:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8006b7c:	3b01      	subs	r3, #1
 8006b7e:	009b      	lsls	r3, r3, #2
 8006b80:	4413      	add	r3, r2
 8006b82:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8006b84:	69bb      	ldr	r3, [r7, #24]
 8006b86:	f023 0307 	bic.w	r3, r3, #7
 8006b8a:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8006b8c:	69bb      	ldr	r3, [r7, #24]
 8006b8e:	f003 0307 	and.w	r3, r3, #7
 8006b92:	2b00      	cmp	r3, #0
 8006b94:	d00b      	beq.n	8006bae <prvInitialiseNewTask+0x5a>
	__asm volatile
 8006b96:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006b9a:	f383 8811 	msr	BASEPRI, r3
 8006b9e:	f3bf 8f6f 	isb	sy
 8006ba2:	f3bf 8f4f 	dsb	sy
 8006ba6:	617b      	str	r3, [r7, #20]
}
 8006ba8:	bf00      	nop
 8006baa:	bf00      	nop
 8006bac:	e7fd      	b.n	8006baa <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8006bae:	68bb      	ldr	r3, [r7, #8]
 8006bb0:	2b00      	cmp	r3, #0
 8006bb2:	d01f      	beq.n	8006bf4 <prvInitialiseNewTask+0xa0>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8006bb4:	2300      	movs	r3, #0
 8006bb6:	61fb      	str	r3, [r7, #28]
 8006bb8:	e012      	b.n	8006be0 <prvInitialiseNewTask+0x8c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8006bba:	68ba      	ldr	r2, [r7, #8]
 8006bbc:	69fb      	ldr	r3, [r7, #28]
 8006bbe:	4413      	add	r3, r2
 8006bc0:	7819      	ldrb	r1, [r3, #0]
 8006bc2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006bc4:	69fb      	ldr	r3, [r7, #28]
 8006bc6:	4413      	add	r3, r2
 8006bc8:	3334      	adds	r3, #52	@ 0x34
 8006bca:	460a      	mov	r2, r1
 8006bcc:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8006bce:	68ba      	ldr	r2, [r7, #8]
 8006bd0:	69fb      	ldr	r3, [r7, #28]
 8006bd2:	4413      	add	r3, r2
 8006bd4:	781b      	ldrb	r3, [r3, #0]
 8006bd6:	2b00      	cmp	r3, #0
 8006bd8:	d006      	beq.n	8006be8 <prvInitialiseNewTask+0x94>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8006bda:	69fb      	ldr	r3, [r7, #28]
 8006bdc:	3301      	adds	r3, #1
 8006bde:	61fb      	str	r3, [r7, #28]
 8006be0:	69fb      	ldr	r3, [r7, #28]
 8006be2:	2b0f      	cmp	r3, #15
 8006be4:	d9e9      	bls.n	8006bba <prvInitialiseNewTask+0x66>
 8006be6:	e000      	b.n	8006bea <prvInitialiseNewTask+0x96>
			{
				break;
 8006be8:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8006bea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006bec:	2200      	movs	r2, #0
 8006bee:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8006bf2:	e003      	b.n	8006bfc <prvInitialiseNewTask+0xa8>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8006bf4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006bf6:	2200      	movs	r2, #0
 8006bf8:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8006bfc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006bfe:	2b06      	cmp	r3, #6
 8006c00:	d901      	bls.n	8006c06 <prvInitialiseNewTask+0xb2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8006c02:	2306      	movs	r3, #6
 8006c04:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8006c06:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006c08:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8006c0a:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8006c0c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006c0e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8006c10:	645a      	str	r2, [r3, #68]	@ 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8006c12:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006c14:	2200      	movs	r2, #0
 8006c16:	649a      	str	r2, [r3, #72]	@ 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8006c18:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006c1a:	3304      	adds	r3, #4
 8006c1c:	4618      	mov	r0, r3
 8006c1e:	f7ff fe60 	bl	80068e2 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8006c22:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006c24:	3318      	adds	r3, #24
 8006c26:	4618      	mov	r0, r3
 8006c28:	f7ff fe5b 	bl	80068e2 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8006c2c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006c2e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006c30:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006c32:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006c34:	f1c3 0207 	rsb	r2, r3, #7
 8006c38:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006c3a:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8006c3c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006c3e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006c40:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif /* portCRITICAL_NESTING_IN_TCB */

	#if ( configUSE_APPLICATION_TASK_TAG == 1 )
	{
		pxNewTCB->pxTaskTag = NULL;
 8006c42:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006c44:	2200      	movs	r2, #0
 8006c46:	64da      	str	r2, [r3, #76]	@ 0x4c
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8006c48:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006c4a:	2200      	movs	r2, #0
 8006c4c:	651a      	str	r2, [r3, #80]	@ 0x50
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8006c4e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006c50:	2200      	movs	r2, #0
 8006c52:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8006c56:	683a      	ldr	r2, [r7, #0]
 8006c58:	68f9      	ldr	r1, [r7, #12]
 8006c5a:	69b8      	ldr	r0, [r7, #24]
 8006c5c:	f000 fc36 	bl	80074cc <pxPortInitialiseStack>
 8006c60:	4602      	mov	r2, r0
 8006c62:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006c64:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8006c66:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006c68:	2b00      	cmp	r3, #0
 8006c6a:	d002      	beq.n	8006c72 <prvInitialiseNewTask+0x11e>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8006c6c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006c6e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006c70:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006c72:	bf00      	nop
 8006c74:	3720      	adds	r7, #32
 8006c76:	46bd      	mov	sp, r7
 8006c78:	bd80      	pop	{r7, pc}
	...

08006c7c <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8006c7c:	b580      	push	{r7, lr}
 8006c7e:	b082      	sub	sp, #8
 8006c80:	af00      	add	r7, sp, #0
 8006c82:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8006c84:	f000 fd50 	bl	8007728 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8006c88:	4b2a      	ldr	r3, [pc, #168]	@ (8006d34 <prvAddNewTaskToReadyList+0xb8>)
 8006c8a:	681b      	ldr	r3, [r3, #0]
 8006c8c:	3301      	adds	r3, #1
 8006c8e:	4a29      	ldr	r2, [pc, #164]	@ (8006d34 <prvAddNewTaskToReadyList+0xb8>)
 8006c90:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8006c92:	4b29      	ldr	r3, [pc, #164]	@ (8006d38 <prvAddNewTaskToReadyList+0xbc>)
 8006c94:	681b      	ldr	r3, [r3, #0]
 8006c96:	2b00      	cmp	r3, #0
 8006c98:	d109      	bne.n	8006cae <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8006c9a:	4a27      	ldr	r2, [pc, #156]	@ (8006d38 <prvAddNewTaskToReadyList+0xbc>)
 8006c9c:	687b      	ldr	r3, [r7, #4]
 8006c9e:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8006ca0:	4b24      	ldr	r3, [pc, #144]	@ (8006d34 <prvAddNewTaskToReadyList+0xb8>)
 8006ca2:	681b      	ldr	r3, [r3, #0]
 8006ca4:	2b01      	cmp	r3, #1
 8006ca6:	d110      	bne.n	8006cca <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8006ca8:	f000 faec 	bl	8007284 <prvInitialiseTaskLists>
 8006cac:	e00d      	b.n	8006cca <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8006cae:	4b23      	ldr	r3, [pc, #140]	@ (8006d3c <prvAddNewTaskToReadyList+0xc0>)
 8006cb0:	681b      	ldr	r3, [r3, #0]
 8006cb2:	2b00      	cmp	r3, #0
 8006cb4:	d109      	bne.n	8006cca <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8006cb6:	4b20      	ldr	r3, [pc, #128]	@ (8006d38 <prvAddNewTaskToReadyList+0xbc>)
 8006cb8:	681b      	ldr	r3, [r3, #0]
 8006cba:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006cbc:	687b      	ldr	r3, [r7, #4]
 8006cbe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006cc0:	429a      	cmp	r2, r3
 8006cc2:	d802      	bhi.n	8006cca <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8006cc4:	4a1c      	ldr	r2, [pc, #112]	@ (8006d38 <prvAddNewTaskToReadyList+0xbc>)
 8006cc6:	687b      	ldr	r3, [r7, #4]
 8006cc8:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8006cca:	4b1d      	ldr	r3, [pc, #116]	@ (8006d40 <prvAddNewTaskToReadyList+0xc4>)
 8006ccc:	681b      	ldr	r3, [r3, #0]
 8006cce:	3301      	adds	r3, #1
 8006cd0:	4a1b      	ldr	r2, [pc, #108]	@ (8006d40 <prvAddNewTaskToReadyList+0xc4>)
 8006cd2:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8006cd4:	687b      	ldr	r3, [r7, #4]
 8006cd6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006cd8:	2201      	movs	r2, #1
 8006cda:	409a      	lsls	r2, r3
 8006cdc:	4b19      	ldr	r3, [pc, #100]	@ (8006d44 <prvAddNewTaskToReadyList+0xc8>)
 8006cde:	681b      	ldr	r3, [r3, #0]
 8006ce0:	4313      	orrs	r3, r2
 8006ce2:	4a18      	ldr	r2, [pc, #96]	@ (8006d44 <prvAddNewTaskToReadyList+0xc8>)
 8006ce4:	6013      	str	r3, [r2, #0]
 8006ce6:	687b      	ldr	r3, [r7, #4]
 8006ce8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006cea:	4613      	mov	r3, r2
 8006cec:	009b      	lsls	r3, r3, #2
 8006cee:	4413      	add	r3, r2
 8006cf0:	009b      	lsls	r3, r3, #2
 8006cf2:	4a15      	ldr	r2, [pc, #84]	@ (8006d48 <prvAddNewTaskToReadyList+0xcc>)
 8006cf4:	441a      	add	r2, r3
 8006cf6:	687b      	ldr	r3, [r7, #4]
 8006cf8:	3304      	adds	r3, #4
 8006cfa:	4619      	mov	r1, r3
 8006cfc:	4610      	mov	r0, r2
 8006cfe:	f7ff fdfd 	bl	80068fc <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8006d02:	f000 fd43 	bl	800778c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8006d06:	4b0d      	ldr	r3, [pc, #52]	@ (8006d3c <prvAddNewTaskToReadyList+0xc0>)
 8006d08:	681b      	ldr	r3, [r3, #0]
 8006d0a:	2b00      	cmp	r3, #0
 8006d0c:	d00e      	beq.n	8006d2c <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8006d0e:	4b0a      	ldr	r3, [pc, #40]	@ (8006d38 <prvAddNewTaskToReadyList+0xbc>)
 8006d10:	681b      	ldr	r3, [r3, #0]
 8006d12:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006d14:	687b      	ldr	r3, [r7, #4]
 8006d16:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006d18:	429a      	cmp	r2, r3
 8006d1a:	d207      	bcs.n	8006d2c <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8006d1c:	4b0b      	ldr	r3, [pc, #44]	@ (8006d4c <prvAddNewTaskToReadyList+0xd0>)
 8006d1e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006d22:	601a      	str	r2, [r3, #0]
 8006d24:	f3bf 8f4f 	dsb	sy
 8006d28:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006d2c:	bf00      	nop
 8006d2e:	3708      	adds	r7, #8
 8006d30:	46bd      	mov	sp, r7
 8006d32:	bd80      	pop	{r7, pc}
 8006d34:	20000894 	.word	0x20000894
 8006d38:	20000794 	.word	0x20000794
 8006d3c:	200008a0 	.word	0x200008a0
 8006d40:	200008b0 	.word	0x200008b0
 8006d44:	2000089c 	.word	0x2000089c
 8006d48:	20000798 	.word	0x20000798
 8006d4c:	e000ed04 	.word	0xe000ed04

08006d50 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8006d50:	b580      	push	{r7, lr}
 8006d52:	b084      	sub	sp, #16
 8006d54:	af00      	add	r7, sp, #0
 8006d56:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8006d58:	2300      	movs	r3, #0
 8006d5a:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8006d5c:	687b      	ldr	r3, [r7, #4]
 8006d5e:	2b00      	cmp	r3, #0
 8006d60:	d018      	beq.n	8006d94 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8006d62:	4b14      	ldr	r3, [pc, #80]	@ (8006db4 <vTaskDelay+0x64>)
 8006d64:	681b      	ldr	r3, [r3, #0]
 8006d66:	2b00      	cmp	r3, #0
 8006d68:	d00b      	beq.n	8006d82 <vTaskDelay+0x32>
	__asm volatile
 8006d6a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006d6e:	f383 8811 	msr	BASEPRI, r3
 8006d72:	f3bf 8f6f 	isb	sy
 8006d76:	f3bf 8f4f 	dsb	sy
 8006d7a:	60bb      	str	r3, [r7, #8]
}
 8006d7c:	bf00      	nop
 8006d7e:	bf00      	nop
 8006d80:	e7fd      	b.n	8006d7e <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8006d82:	f000 f87d 	bl	8006e80 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8006d86:	2100      	movs	r1, #0
 8006d88:	6878      	ldr	r0, [r7, #4]
 8006d8a:	f000 fb39 	bl	8007400 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8006d8e:	f000 f885 	bl	8006e9c <xTaskResumeAll>
 8006d92:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8006d94:	68fb      	ldr	r3, [r7, #12]
 8006d96:	2b00      	cmp	r3, #0
 8006d98:	d107      	bne.n	8006daa <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 8006d9a:	4b07      	ldr	r3, [pc, #28]	@ (8006db8 <vTaskDelay+0x68>)
 8006d9c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006da0:	601a      	str	r2, [r3, #0]
 8006da2:	f3bf 8f4f 	dsb	sy
 8006da6:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8006daa:	bf00      	nop
 8006dac:	3710      	adds	r7, #16
 8006dae:	46bd      	mov	sp, r7
 8006db0:	bd80      	pop	{r7, pc}
 8006db2:	bf00      	nop
 8006db4:	200008bc 	.word	0x200008bc
 8006db8:	e000ed04 	.word	0xe000ed04

08006dbc <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8006dbc:	b580      	push	{r7, lr}
 8006dbe:	b08a      	sub	sp, #40	@ 0x28
 8006dc0:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8006dc2:	2300      	movs	r3, #0
 8006dc4:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8006dc6:	2300      	movs	r3, #0
 8006dc8:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8006dca:	463a      	mov	r2, r7
 8006dcc:	1d39      	adds	r1, r7, #4
 8006dce:	f107 0308 	add.w	r3, r7, #8
 8006dd2:	4618      	mov	r0, r3
 8006dd4:	f7f9 fbbc 	bl	8000550 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8006dd8:	6839      	ldr	r1, [r7, #0]
 8006dda:	687b      	ldr	r3, [r7, #4]
 8006ddc:	68ba      	ldr	r2, [r7, #8]
 8006dde:	9202      	str	r2, [sp, #8]
 8006de0:	9301      	str	r3, [sp, #4]
 8006de2:	2300      	movs	r3, #0
 8006de4:	9300      	str	r3, [sp, #0]
 8006de6:	2300      	movs	r3, #0
 8006de8:	460a      	mov	r2, r1
 8006dea:	491f      	ldr	r1, [pc, #124]	@ (8006e68 <vTaskStartScheduler+0xac>)
 8006dec:	481f      	ldr	r0, [pc, #124]	@ (8006e6c <vTaskStartScheduler+0xb0>)
 8006dee:	f7ff fe0c 	bl	8006a0a <xTaskCreateStatic>
 8006df2:	4603      	mov	r3, r0
 8006df4:	4a1e      	ldr	r2, [pc, #120]	@ (8006e70 <vTaskStartScheduler+0xb4>)
 8006df6:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8006df8:	4b1d      	ldr	r3, [pc, #116]	@ (8006e70 <vTaskStartScheduler+0xb4>)
 8006dfa:	681b      	ldr	r3, [r3, #0]
 8006dfc:	2b00      	cmp	r3, #0
 8006dfe:	d002      	beq.n	8006e06 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8006e00:	2301      	movs	r3, #1
 8006e02:	617b      	str	r3, [r7, #20]
 8006e04:	e001      	b.n	8006e0a <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8006e06:	2300      	movs	r3, #0
 8006e08:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8006e0a:	697b      	ldr	r3, [r7, #20]
 8006e0c:	2b01      	cmp	r3, #1
 8006e0e:	d116      	bne.n	8006e3e <vTaskStartScheduler+0x82>
	__asm volatile
 8006e10:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006e14:	f383 8811 	msr	BASEPRI, r3
 8006e18:	f3bf 8f6f 	isb	sy
 8006e1c:	f3bf 8f4f 	dsb	sy
 8006e20:	613b      	str	r3, [r7, #16]
}
 8006e22:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8006e24:	4b13      	ldr	r3, [pc, #76]	@ (8006e74 <vTaskStartScheduler+0xb8>)
 8006e26:	f04f 32ff 	mov.w	r2, #4294967295
 8006e2a:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8006e2c:	4b12      	ldr	r3, [pc, #72]	@ (8006e78 <vTaskStartScheduler+0xbc>)
 8006e2e:	2201      	movs	r2, #1
 8006e30:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8006e32:	4b12      	ldr	r3, [pc, #72]	@ (8006e7c <vTaskStartScheduler+0xc0>)
 8006e34:	2200      	movs	r2, #0
 8006e36:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8006e38:	f000 fbd2 	bl	80075e0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8006e3c:	e00f      	b.n	8006e5e <vTaskStartScheduler+0xa2>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8006e3e:	697b      	ldr	r3, [r7, #20]
 8006e40:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006e44:	d10b      	bne.n	8006e5e <vTaskStartScheduler+0xa2>
	__asm volatile
 8006e46:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006e4a:	f383 8811 	msr	BASEPRI, r3
 8006e4e:	f3bf 8f6f 	isb	sy
 8006e52:	f3bf 8f4f 	dsb	sy
 8006e56:	60fb      	str	r3, [r7, #12]
}
 8006e58:	bf00      	nop
 8006e5a:	bf00      	nop
 8006e5c:	e7fd      	b.n	8006e5a <vTaskStartScheduler+0x9e>
}
 8006e5e:	bf00      	nop
 8006e60:	3718      	adds	r7, #24
 8006e62:	46bd      	mov	sp, r7
 8006e64:	bd80      	pop	{r7, pc}
 8006e66:	bf00      	nop
 8006e68:	08007d68 	.word	0x08007d68
 8006e6c:	08007251 	.word	0x08007251
 8006e70:	200008b8 	.word	0x200008b8
 8006e74:	200008b4 	.word	0x200008b4
 8006e78:	200008a0 	.word	0x200008a0
 8006e7c:	20000898 	.word	0x20000898

08006e80 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8006e80:	b480      	push	{r7}
 8006e82:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8006e84:	4b04      	ldr	r3, [pc, #16]	@ (8006e98 <vTaskSuspendAll+0x18>)
 8006e86:	681b      	ldr	r3, [r3, #0]
 8006e88:	3301      	adds	r3, #1
 8006e8a:	4a03      	ldr	r2, [pc, #12]	@ (8006e98 <vTaskSuspendAll+0x18>)
 8006e8c:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8006e8e:	bf00      	nop
 8006e90:	46bd      	mov	sp, r7
 8006e92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e96:	4770      	bx	lr
 8006e98:	200008bc 	.word	0x200008bc

08006e9c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8006e9c:	b580      	push	{r7, lr}
 8006e9e:	b084      	sub	sp, #16
 8006ea0:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8006ea2:	2300      	movs	r3, #0
 8006ea4:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8006ea6:	2300      	movs	r3, #0
 8006ea8:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8006eaa:	4b42      	ldr	r3, [pc, #264]	@ (8006fb4 <xTaskResumeAll+0x118>)
 8006eac:	681b      	ldr	r3, [r3, #0]
 8006eae:	2b00      	cmp	r3, #0
 8006eb0:	d10b      	bne.n	8006eca <xTaskResumeAll+0x2e>
	__asm volatile
 8006eb2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006eb6:	f383 8811 	msr	BASEPRI, r3
 8006eba:	f3bf 8f6f 	isb	sy
 8006ebe:	f3bf 8f4f 	dsb	sy
 8006ec2:	603b      	str	r3, [r7, #0]
}
 8006ec4:	bf00      	nop
 8006ec6:	bf00      	nop
 8006ec8:	e7fd      	b.n	8006ec6 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8006eca:	f000 fc2d 	bl	8007728 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8006ece:	4b39      	ldr	r3, [pc, #228]	@ (8006fb4 <xTaskResumeAll+0x118>)
 8006ed0:	681b      	ldr	r3, [r3, #0]
 8006ed2:	3b01      	subs	r3, #1
 8006ed4:	4a37      	ldr	r2, [pc, #220]	@ (8006fb4 <xTaskResumeAll+0x118>)
 8006ed6:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006ed8:	4b36      	ldr	r3, [pc, #216]	@ (8006fb4 <xTaskResumeAll+0x118>)
 8006eda:	681b      	ldr	r3, [r3, #0]
 8006edc:	2b00      	cmp	r3, #0
 8006ede:	d161      	bne.n	8006fa4 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8006ee0:	4b35      	ldr	r3, [pc, #212]	@ (8006fb8 <xTaskResumeAll+0x11c>)
 8006ee2:	681b      	ldr	r3, [r3, #0]
 8006ee4:	2b00      	cmp	r3, #0
 8006ee6:	d05d      	beq.n	8006fa4 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8006ee8:	e02e      	b.n	8006f48 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006eea:	4b34      	ldr	r3, [pc, #208]	@ (8006fbc <xTaskResumeAll+0x120>)
 8006eec:	68db      	ldr	r3, [r3, #12]
 8006eee:	68db      	ldr	r3, [r3, #12]
 8006ef0:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8006ef2:	68fb      	ldr	r3, [r7, #12]
 8006ef4:	3318      	adds	r3, #24
 8006ef6:	4618      	mov	r0, r3
 8006ef8:	f7ff fd5d 	bl	80069b6 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006efc:	68fb      	ldr	r3, [r7, #12]
 8006efe:	3304      	adds	r3, #4
 8006f00:	4618      	mov	r0, r3
 8006f02:	f7ff fd58 	bl	80069b6 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8006f06:	68fb      	ldr	r3, [r7, #12]
 8006f08:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006f0a:	2201      	movs	r2, #1
 8006f0c:	409a      	lsls	r2, r3
 8006f0e:	4b2c      	ldr	r3, [pc, #176]	@ (8006fc0 <xTaskResumeAll+0x124>)
 8006f10:	681b      	ldr	r3, [r3, #0]
 8006f12:	4313      	orrs	r3, r2
 8006f14:	4a2a      	ldr	r2, [pc, #168]	@ (8006fc0 <xTaskResumeAll+0x124>)
 8006f16:	6013      	str	r3, [r2, #0]
 8006f18:	68fb      	ldr	r3, [r7, #12]
 8006f1a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006f1c:	4613      	mov	r3, r2
 8006f1e:	009b      	lsls	r3, r3, #2
 8006f20:	4413      	add	r3, r2
 8006f22:	009b      	lsls	r3, r3, #2
 8006f24:	4a27      	ldr	r2, [pc, #156]	@ (8006fc4 <xTaskResumeAll+0x128>)
 8006f26:	441a      	add	r2, r3
 8006f28:	68fb      	ldr	r3, [r7, #12]
 8006f2a:	3304      	adds	r3, #4
 8006f2c:	4619      	mov	r1, r3
 8006f2e:	4610      	mov	r0, r2
 8006f30:	f7ff fce4 	bl	80068fc <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8006f34:	68fb      	ldr	r3, [r7, #12]
 8006f36:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006f38:	4b23      	ldr	r3, [pc, #140]	@ (8006fc8 <xTaskResumeAll+0x12c>)
 8006f3a:	681b      	ldr	r3, [r3, #0]
 8006f3c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006f3e:	429a      	cmp	r2, r3
 8006f40:	d302      	bcc.n	8006f48 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 8006f42:	4b22      	ldr	r3, [pc, #136]	@ (8006fcc <xTaskResumeAll+0x130>)
 8006f44:	2201      	movs	r2, #1
 8006f46:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8006f48:	4b1c      	ldr	r3, [pc, #112]	@ (8006fbc <xTaskResumeAll+0x120>)
 8006f4a:	681b      	ldr	r3, [r3, #0]
 8006f4c:	2b00      	cmp	r3, #0
 8006f4e:	d1cc      	bne.n	8006eea <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8006f50:	68fb      	ldr	r3, [r7, #12]
 8006f52:	2b00      	cmp	r3, #0
 8006f54:	d001      	beq.n	8006f5a <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8006f56:	f000 fa33 	bl	80073c0 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8006f5a:	4b1d      	ldr	r3, [pc, #116]	@ (8006fd0 <xTaskResumeAll+0x134>)
 8006f5c:	681b      	ldr	r3, [r3, #0]
 8006f5e:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8006f60:	687b      	ldr	r3, [r7, #4]
 8006f62:	2b00      	cmp	r3, #0
 8006f64:	d010      	beq.n	8006f88 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8006f66:	f000 f837 	bl	8006fd8 <xTaskIncrementTick>
 8006f6a:	4603      	mov	r3, r0
 8006f6c:	2b00      	cmp	r3, #0
 8006f6e:	d002      	beq.n	8006f76 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8006f70:	4b16      	ldr	r3, [pc, #88]	@ (8006fcc <xTaskResumeAll+0x130>)
 8006f72:	2201      	movs	r2, #1
 8006f74:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8006f76:	687b      	ldr	r3, [r7, #4]
 8006f78:	3b01      	subs	r3, #1
 8006f7a:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8006f7c:	687b      	ldr	r3, [r7, #4]
 8006f7e:	2b00      	cmp	r3, #0
 8006f80:	d1f1      	bne.n	8006f66 <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 8006f82:	4b13      	ldr	r3, [pc, #76]	@ (8006fd0 <xTaskResumeAll+0x134>)
 8006f84:	2200      	movs	r2, #0
 8006f86:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8006f88:	4b10      	ldr	r3, [pc, #64]	@ (8006fcc <xTaskResumeAll+0x130>)
 8006f8a:	681b      	ldr	r3, [r3, #0]
 8006f8c:	2b00      	cmp	r3, #0
 8006f8e:	d009      	beq.n	8006fa4 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8006f90:	2301      	movs	r3, #1
 8006f92:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8006f94:	4b0f      	ldr	r3, [pc, #60]	@ (8006fd4 <xTaskResumeAll+0x138>)
 8006f96:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006f9a:	601a      	str	r2, [r3, #0]
 8006f9c:	f3bf 8f4f 	dsb	sy
 8006fa0:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8006fa4:	f000 fbf2 	bl	800778c <vPortExitCritical>

	return xAlreadyYielded;
 8006fa8:	68bb      	ldr	r3, [r7, #8]
}
 8006faa:	4618      	mov	r0, r3
 8006fac:	3710      	adds	r7, #16
 8006fae:	46bd      	mov	sp, r7
 8006fb0:	bd80      	pop	{r7, pc}
 8006fb2:	bf00      	nop
 8006fb4:	200008bc 	.word	0x200008bc
 8006fb8:	20000894 	.word	0x20000894
 8006fbc:	20000854 	.word	0x20000854
 8006fc0:	2000089c 	.word	0x2000089c
 8006fc4:	20000798 	.word	0x20000798
 8006fc8:	20000794 	.word	0x20000794
 8006fcc:	200008a8 	.word	0x200008a8
 8006fd0:	200008a4 	.word	0x200008a4
 8006fd4:	e000ed04 	.word	0xe000ed04

08006fd8 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8006fd8:	b580      	push	{r7, lr}
 8006fda:	b086      	sub	sp, #24
 8006fdc:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8006fde:	2300      	movs	r3, #0
 8006fe0:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006fe2:	4b4f      	ldr	r3, [pc, #316]	@ (8007120 <xTaskIncrementTick+0x148>)
 8006fe4:	681b      	ldr	r3, [r3, #0]
 8006fe6:	2b00      	cmp	r3, #0
 8006fe8:	f040 808f 	bne.w	800710a <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8006fec:	4b4d      	ldr	r3, [pc, #308]	@ (8007124 <xTaskIncrementTick+0x14c>)
 8006fee:	681b      	ldr	r3, [r3, #0]
 8006ff0:	3301      	adds	r3, #1
 8006ff2:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8006ff4:	4a4b      	ldr	r2, [pc, #300]	@ (8007124 <xTaskIncrementTick+0x14c>)
 8006ff6:	693b      	ldr	r3, [r7, #16]
 8006ff8:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8006ffa:	693b      	ldr	r3, [r7, #16]
 8006ffc:	2b00      	cmp	r3, #0
 8006ffe:	d121      	bne.n	8007044 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 8007000:	4b49      	ldr	r3, [pc, #292]	@ (8007128 <xTaskIncrementTick+0x150>)
 8007002:	681b      	ldr	r3, [r3, #0]
 8007004:	681b      	ldr	r3, [r3, #0]
 8007006:	2b00      	cmp	r3, #0
 8007008:	d00b      	beq.n	8007022 <xTaskIncrementTick+0x4a>
	__asm volatile
 800700a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800700e:	f383 8811 	msr	BASEPRI, r3
 8007012:	f3bf 8f6f 	isb	sy
 8007016:	f3bf 8f4f 	dsb	sy
 800701a:	603b      	str	r3, [r7, #0]
}
 800701c:	bf00      	nop
 800701e:	bf00      	nop
 8007020:	e7fd      	b.n	800701e <xTaskIncrementTick+0x46>
 8007022:	4b41      	ldr	r3, [pc, #260]	@ (8007128 <xTaskIncrementTick+0x150>)
 8007024:	681b      	ldr	r3, [r3, #0]
 8007026:	60fb      	str	r3, [r7, #12]
 8007028:	4b40      	ldr	r3, [pc, #256]	@ (800712c <xTaskIncrementTick+0x154>)
 800702a:	681b      	ldr	r3, [r3, #0]
 800702c:	4a3e      	ldr	r2, [pc, #248]	@ (8007128 <xTaskIncrementTick+0x150>)
 800702e:	6013      	str	r3, [r2, #0]
 8007030:	4a3e      	ldr	r2, [pc, #248]	@ (800712c <xTaskIncrementTick+0x154>)
 8007032:	68fb      	ldr	r3, [r7, #12]
 8007034:	6013      	str	r3, [r2, #0]
 8007036:	4b3e      	ldr	r3, [pc, #248]	@ (8007130 <xTaskIncrementTick+0x158>)
 8007038:	681b      	ldr	r3, [r3, #0]
 800703a:	3301      	adds	r3, #1
 800703c:	4a3c      	ldr	r2, [pc, #240]	@ (8007130 <xTaskIncrementTick+0x158>)
 800703e:	6013      	str	r3, [r2, #0]
 8007040:	f000 f9be 	bl	80073c0 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8007044:	4b3b      	ldr	r3, [pc, #236]	@ (8007134 <xTaskIncrementTick+0x15c>)
 8007046:	681b      	ldr	r3, [r3, #0]
 8007048:	693a      	ldr	r2, [r7, #16]
 800704a:	429a      	cmp	r2, r3
 800704c:	d348      	bcc.n	80070e0 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800704e:	4b36      	ldr	r3, [pc, #216]	@ (8007128 <xTaskIncrementTick+0x150>)
 8007050:	681b      	ldr	r3, [r3, #0]
 8007052:	681b      	ldr	r3, [r3, #0]
 8007054:	2b00      	cmp	r3, #0
 8007056:	d104      	bne.n	8007062 <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007058:	4b36      	ldr	r3, [pc, #216]	@ (8007134 <xTaskIncrementTick+0x15c>)
 800705a:	f04f 32ff 	mov.w	r2, #4294967295
 800705e:	601a      	str	r2, [r3, #0]
					break;
 8007060:	e03e      	b.n	80070e0 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007062:	4b31      	ldr	r3, [pc, #196]	@ (8007128 <xTaskIncrementTick+0x150>)
 8007064:	681b      	ldr	r3, [r3, #0]
 8007066:	68db      	ldr	r3, [r3, #12]
 8007068:	68db      	ldr	r3, [r3, #12]
 800706a:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800706c:	68bb      	ldr	r3, [r7, #8]
 800706e:	685b      	ldr	r3, [r3, #4]
 8007070:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8007072:	693a      	ldr	r2, [r7, #16]
 8007074:	687b      	ldr	r3, [r7, #4]
 8007076:	429a      	cmp	r2, r3
 8007078:	d203      	bcs.n	8007082 <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800707a:	4a2e      	ldr	r2, [pc, #184]	@ (8007134 <xTaskIncrementTick+0x15c>)
 800707c:	687b      	ldr	r3, [r7, #4]
 800707e:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8007080:	e02e      	b.n	80070e0 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007082:	68bb      	ldr	r3, [r7, #8]
 8007084:	3304      	adds	r3, #4
 8007086:	4618      	mov	r0, r3
 8007088:	f7ff fc95 	bl	80069b6 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800708c:	68bb      	ldr	r3, [r7, #8]
 800708e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007090:	2b00      	cmp	r3, #0
 8007092:	d004      	beq.n	800709e <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8007094:	68bb      	ldr	r3, [r7, #8]
 8007096:	3318      	adds	r3, #24
 8007098:	4618      	mov	r0, r3
 800709a:	f7ff fc8c 	bl	80069b6 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800709e:	68bb      	ldr	r3, [r7, #8]
 80070a0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80070a2:	2201      	movs	r2, #1
 80070a4:	409a      	lsls	r2, r3
 80070a6:	4b24      	ldr	r3, [pc, #144]	@ (8007138 <xTaskIncrementTick+0x160>)
 80070a8:	681b      	ldr	r3, [r3, #0]
 80070aa:	4313      	orrs	r3, r2
 80070ac:	4a22      	ldr	r2, [pc, #136]	@ (8007138 <xTaskIncrementTick+0x160>)
 80070ae:	6013      	str	r3, [r2, #0]
 80070b0:	68bb      	ldr	r3, [r7, #8]
 80070b2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80070b4:	4613      	mov	r3, r2
 80070b6:	009b      	lsls	r3, r3, #2
 80070b8:	4413      	add	r3, r2
 80070ba:	009b      	lsls	r3, r3, #2
 80070bc:	4a1f      	ldr	r2, [pc, #124]	@ (800713c <xTaskIncrementTick+0x164>)
 80070be:	441a      	add	r2, r3
 80070c0:	68bb      	ldr	r3, [r7, #8]
 80070c2:	3304      	adds	r3, #4
 80070c4:	4619      	mov	r1, r3
 80070c6:	4610      	mov	r0, r2
 80070c8:	f7ff fc18 	bl	80068fc <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80070cc:	68bb      	ldr	r3, [r7, #8]
 80070ce:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80070d0:	4b1b      	ldr	r3, [pc, #108]	@ (8007140 <xTaskIncrementTick+0x168>)
 80070d2:	681b      	ldr	r3, [r3, #0]
 80070d4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80070d6:	429a      	cmp	r2, r3
 80070d8:	d3b9      	bcc.n	800704e <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 80070da:	2301      	movs	r3, #1
 80070dc:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80070de:	e7b6      	b.n	800704e <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80070e0:	4b17      	ldr	r3, [pc, #92]	@ (8007140 <xTaskIncrementTick+0x168>)
 80070e2:	681b      	ldr	r3, [r3, #0]
 80070e4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80070e6:	4915      	ldr	r1, [pc, #84]	@ (800713c <xTaskIncrementTick+0x164>)
 80070e8:	4613      	mov	r3, r2
 80070ea:	009b      	lsls	r3, r3, #2
 80070ec:	4413      	add	r3, r2
 80070ee:	009b      	lsls	r3, r3, #2
 80070f0:	440b      	add	r3, r1
 80070f2:	681b      	ldr	r3, [r3, #0]
 80070f4:	2b01      	cmp	r3, #1
 80070f6:	d901      	bls.n	80070fc <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 80070f8:	2301      	movs	r3, #1
 80070fa:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 80070fc:	4b11      	ldr	r3, [pc, #68]	@ (8007144 <xTaskIncrementTick+0x16c>)
 80070fe:	681b      	ldr	r3, [r3, #0]
 8007100:	2b00      	cmp	r3, #0
 8007102:	d007      	beq.n	8007114 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 8007104:	2301      	movs	r3, #1
 8007106:	617b      	str	r3, [r7, #20]
 8007108:	e004      	b.n	8007114 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800710a:	4b0f      	ldr	r3, [pc, #60]	@ (8007148 <xTaskIncrementTick+0x170>)
 800710c:	681b      	ldr	r3, [r3, #0]
 800710e:	3301      	adds	r3, #1
 8007110:	4a0d      	ldr	r2, [pc, #52]	@ (8007148 <xTaskIncrementTick+0x170>)
 8007112:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8007114:	697b      	ldr	r3, [r7, #20]
}
 8007116:	4618      	mov	r0, r3
 8007118:	3718      	adds	r7, #24
 800711a:	46bd      	mov	sp, r7
 800711c:	bd80      	pop	{r7, pc}
 800711e:	bf00      	nop
 8007120:	200008bc 	.word	0x200008bc
 8007124:	20000898 	.word	0x20000898
 8007128:	2000084c 	.word	0x2000084c
 800712c:	20000850 	.word	0x20000850
 8007130:	200008ac 	.word	0x200008ac
 8007134:	200008b4 	.word	0x200008b4
 8007138:	2000089c 	.word	0x2000089c
 800713c:	20000798 	.word	0x20000798
 8007140:	20000794 	.word	0x20000794
 8007144:	200008a8 	.word	0x200008a8
 8007148:	200008a4 	.word	0x200008a4

0800714c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800714c:	b580      	push	{r7, lr}
 800714e:	b088      	sub	sp, #32
 8007150:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8007152:	4b3a      	ldr	r3, [pc, #232]	@ (800723c <vTaskSwitchContext+0xf0>)
 8007154:	681b      	ldr	r3, [r3, #0]
 8007156:	2b00      	cmp	r3, #0
 8007158:	d003      	beq.n	8007162 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800715a:	4b39      	ldr	r3, [pc, #228]	@ (8007240 <vTaskSwitchContext+0xf4>)
 800715c:	2201      	movs	r2, #1
 800715e:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8007160:	e067      	b.n	8007232 <vTaskSwitchContext+0xe6>
		xYieldPending = pdFALSE;
 8007162:	4b37      	ldr	r3, [pc, #220]	@ (8007240 <vTaskSwitchContext+0xf4>)
 8007164:	2200      	movs	r2, #0
 8007166:	601a      	str	r2, [r3, #0]
		taskCHECK_FOR_STACK_OVERFLOW();
 8007168:	4b36      	ldr	r3, [pc, #216]	@ (8007244 <vTaskSwitchContext+0xf8>)
 800716a:	681b      	ldr	r3, [r3, #0]
 800716c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800716e:	61fb      	str	r3, [r7, #28]
 8007170:	f04f 33a5 	mov.w	r3, #2779096485	@ 0xa5a5a5a5
 8007174:	61bb      	str	r3, [r7, #24]
 8007176:	69fb      	ldr	r3, [r7, #28]
 8007178:	681b      	ldr	r3, [r3, #0]
 800717a:	69ba      	ldr	r2, [r7, #24]
 800717c:	429a      	cmp	r2, r3
 800717e:	d111      	bne.n	80071a4 <vTaskSwitchContext+0x58>
 8007180:	69fb      	ldr	r3, [r7, #28]
 8007182:	3304      	adds	r3, #4
 8007184:	681b      	ldr	r3, [r3, #0]
 8007186:	69ba      	ldr	r2, [r7, #24]
 8007188:	429a      	cmp	r2, r3
 800718a:	d10b      	bne.n	80071a4 <vTaskSwitchContext+0x58>
 800718c:	69fb      	ldr	r3, [r7, #28]
 800718e:	3308      	adds	r3, #8
 8007190:	681b      	ldr	r3, [r3, #0]
 8007192:	69ba      	ldr	r2, [r7, #24]
 8007194:	429a      	cmp	r2, r3
 8007196:	d105      	bne.n	80071a4 <vTaskSwitchContext+0x58>
 8007198:	69fb      	ldr	r3, [r7, #28]
 800719a:	330c      	adds	r3, #12
 800719c:	681b      	ldr	r3, [r3, #0]
 800719e:	69ba      	ldr	r2, [r7, #24]
 80071a0:	429a      	cmp	r2, r3
 80071a2:	d008      	beq.n	80071b6 <vTaskSwitchContext+0x6a>
 80071a4:	4b27      	ldr	r3, [pc, #156]	@ (8007244 <vTaskSwitchContext+0xf8>)
 80071a6:	681a      	ldr	r2, [r3, #0]
 80071a8:	4b26      	ldr	r3, [pc, #152]	@ (8007244 <vTaskSwitchContext+0xf8>)
 80071aa:	681b      	ldr	r3, [r3, #0]
 80071ac:	3334      	adds	r3, #52	@ 0x34
 80071ae:	4619      	mov	r1, r3
 80071b0:	4610      	mov	r0, r2
 80071b2:	f7f9 f9ba 	bl	800052a <vApplicationStackOverflowHook>
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80071b6:	4b24      	ldr	r3, [pc, #144]	@ (8007248 <vTaskSwitchContext+0xfc>)
 80071b8:	681b      	ldr	r3, [r3, #0]
 80071ba:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 80071bc:	68fb      	ldr	r3, [r7, #12]
 80071be:	fab3 f383 	clz	r3, r3
 80071c2:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 80071c4:	7afb      	ldrb	r3, [r7, #11]
 80071c6:	f1c3 031f 	rsb	r3, r3, #31
 80071ca:	617b      	str	r3, [r7, #20]
 80071cc:	491f      	ldr	r1, [pc, #124]	@ (800724c <vTaskSwitchContext+0x100>)
 80071ce:	697a      	ldr	r2, [r7, #20]
 80071d0:	4613      	mov	r3, r2
 80071d2:	009b      	lsls	r3, r3, #2
 80071d4:	4413      	add	r3, r2
 80071d6:	009b      	lsls	r3, r3, #2
 80071d8:	440b      	add	r3, r1
 80071da:	681b      	ldr	r3, [r3, #0]
 80071dc:	2b00      	cmp	r3, #0
 80071de:	d10b      	bne.n	80071f8 <vTaskSwitchContext+0xac>
	__asm volatile
 80071e0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80071e4:	f383 8811 	msr	BASEPRI, r3
 80071e8:	f3bf 8f6f 	isb	sy
 80071ec:	f3bf 8f4f 	dsb	sy
 80071f0:	607b      	str	r3, [r7, #4]
}
 80071f2:	bf00      	nop
 80071f4:	bf00      	nop
 80071f6:	e7fd      	b.n	80071f4 <vTaskSwitchContext+0xa8>
 80071f8:	697a      	ldr	r2, [r7, #20]
 80071fa:	4613      	mov	r3, r2
 80071fc:	009b      	lsls	r3, r3, #2
 80071fe:	4413      	add	r3, r2
 8007200:	009b      	lsls	r3, r3, #2
 8007202:	4a12      	ldr	r2, [pc, #72]	@ (800724c <vTaskSwitchContext+0x100>)
 8007204:	4413      	add	r3, r2
 8007206:	613b      	str	r3, [r7, #16]
 8007208:	693b      	ldr	r3, [r7, #16]
 800720a:	685b      	ldr	r3, [r3, #4]
 800720c:	685a      	ldr	r2, [r3, #4]
 800720e:	693b      	ldr	r3, [r7, #16]
 8007210:	605a      	str	r2, [r3, #4]
 8007212:	693b      	ldr	r3, [r7, #16]
 8007214:	685a      	ldr	r2, [r3, #4]
 8007216:	693b      	ldr	r3, [r7, #16]
 8007218:	3308      	adds	r3, #8
 800721a:	429a      	cmp	r2, r3
 800721c:	d104      	bne.n	8007228 <vTaskSwitchContext+0xdc>
 800721e:	693b      	ldr	r3, [r7, #16]
 8007220:	685b      	ldr	r3, [r3, #4]
 8007222:	685a      	ldr	r2, [r3, #4]
 8007224:	693b      	ldr	r3, [r7, #16]
 8007226:	605a      	str	r2, [r3, #4]
 8007228:	693b      	ldr	r3, [r7, #16]
 800722a:	685b      	ldr	r3, [r3, #4]
 800722c:	68db      	ldr	r3, [r3, #12]
 800722e:	4a05      	ldr	r2, [pc, #20]	@ (8007244 <vTaskSwitchContext+0xf8>)
 8007230:	6013      	str	r3, [r2, #0]
}
 8007232:	bf00      	nop
 8007234:	3720      	adds	r7, #32
 8007236:	46bd      	mov	sp, r7
 8007238:	bd80      	pop	{r7, pc}
 800723a:	bf00      	nop
 800723c:	200008bc 	.word	0x200008bc
 8007240:	200008a8 	.word	0x200008a8
 8007244:	20000794 	.word	0x20000794
 8007248:	2000089c 	.word	0x2000089c
 800724c:	20000798 	.word	0x20000798

08007250 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8007250:	b580      	push	{r7, lr}
 8007252:	b082      	sub	sp, #8
 8007254:	af00      	add	r7, sp, #0
 8007256:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8007258:	f000 f854 	bl	8007304 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800725c:	4b07      	ldr	r3, [pc, #28]	@ (800727c <prvIdleTask+0x2c>)
 800725e:	681b      	ldr	r3, [r3, #0]
 8007260:	2b01      	cmp	r3, #1
 8007262:	d907      	bls.n	8007274 <prvIdleTask+0x24>
			{
				taskYIELD();
 8007264:	4b06      	ldr	r3, [pc, #24]	@ (8007280 <prvIdleTask+0x30>)
 8007266:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800726a:	601a      	str	r2, [r3, #0]
 800726c:	f3bf 8f4f 	dsb	sy
 8007270:	f3bf 8f6f 	isb	sy
			/* Call the user defined function from within the idle task.  This
			allows the application designer to add background functionality
			without the overhead of a separate task.
			NOTE: vApplicationIdleHook() MUST NOT, UNDER ANY CIRCUMSTANCES,
			CALL A FUNCTION THAT MIGHT BLOCK. */
			vApplicationIdleHook();
 8007274:	f7f9 f952 	bl	800051c <vApplicationIdleHook>
		prvCheckTasksWaitingTermination();
 8007278:	e7ee      	b.n	8007258 <prvIdleTask+0x8>
 800727a:	bf00      	nop
 800727c:	20000798 	.word	0x20000798
 8007280:	e000ed04 	.word	0xe000ed04

08007284 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8007284:	b580      	push	{r7, lr}
 8007286:	b082      	sub	sp, #8
 8007288:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800728a:	2300      	movs	r3, #0
 800728c:	607b      	str	r3, [r7, #4]
 800728e:	e00c      	b.n	80072aa <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8007290:	687a      	ldr	r2, [r7, #4]
 8007292:	4613      	mov	r3, r2
 8007294:	009b      	lsls	r3, r3, #2
 8007296:	4413      	add	r3, r2
 8007298:	009b      	lsls	r3, r3, #2
 800729a:	4a12      	ldr	r2, [pc, #72]	@ (80072e4 <prvInitialiseTaskLists+0x60>)
 800729c:	4413      	add	r3, r2
 800729e:	4618      	mov	r0, r3
 80072a0:	f7ff faff 	bl	80068a2 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80072a4:	687b      	ldr	r3, [r7, #4]
 80072a6:	3301      	adds	r3, #1
 80072a8:	607b      	str	r3, [r7, #4]
 80072aa:	687b      	ldr	r3, [r7, #4]
 80072ac:	2b06      	cmp	r3, #6
 80072ae:	d9ef      	bls.n	8007290 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 80072b0:	480d      	ldr	r0, [pc, #52]	@ (80072e8 <prvInitialiseTaskLists+0x64>)
 80072b2:	f7ff faf6 	bl	80068a2 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80072b6:	480d      	ldr	r0, [pc, #52]	@ (80072ec <prvInitialiseTaskLists+0x68>)
 80072b8:	f7ff faf3 	bl	80068a2 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80072bc:	480c      	ldr	r0, [pc, #48]	@ (80072f0 <prvInitialiseTaskLists+0x6c>)
 80072be:	f7ff faf0 	bl	80068a2 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 80072c2:	480c      	ldr	r0, [pc, #48]	@ (80072f4 <prvInitialiseTaskLists+0x70>)
 80072c4:	f7ff faed 	bl	80068a2 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 80072c8:	480b      	ldr	r0, [pc, #44]	@ (80072f8 <prvInitialiseTaskLists+0x74>)
 80072ca:	f7ff faea 	bl	80068a2 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 80072ce:	4b0b      	ldr	r3, [pc, #44]	@ (80072fc <prvInitialiseTaskLists+0x78>)
 80072d0:	4a05      	ldr	r2, [pc, #20]	@ (80072e8 <prvInitialiseTaskLists+0x64>)
 80072d2:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80072d4:	4b0a      	ldr	r3, [pc, #40]	@ (8007300 <prvInitialiseTaskLists+0x7c>)
 80072d6:	4a05      	ldr	r2, [pc, #20]	@ (80072ec <prvInitialiseTaskLists+0x68>)
 80072d8:	601a      	str	r2, [r3, #0]
}
 80072da:	bf00      	nop
 80072dc:	3708      	adds	r7, #8
 80072de:	46bd      	mov	sp, r7
 80072e0:	bd80      	pop	{r7, pc}
 80072e2:	bf00      	nop
 80072e4:	20000798 	.word	0x20000798
 80072e8:	20000824 	.word	0x20000824
 80072ec:	20000838 	.word	0x20000838
 80072f0:	20000854 	.word	0x20000854
 80072f4:	20000868 	.word	0x20000868
 80072f8:	20000880 	.word	0x20000880
 80072fc:	2000084c 	.word	0x2000084c
 8007300:	20000850 	.word	0x20000850

08007304 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8007304:	b580      	push	{r7, lr}
 8007306:	b082      	sub	sp, #8
 8007308:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800730a:	e019      	b.n	8007340 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800730c:	f000 fa0c 	bl	8007728 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007310:	4b10      	ldr	r3, [pc, #64]	@ (8007354 <prvCheckTasksWaitingTermination+0x50>)
 8007312:	68db      	ldr	r3, [r3, #12]
 8007314:	68db      	ldr	r3, [r3, #12]
 8007316:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007318:	687b      	ldr	r3, [r7, #4]
 800731a:	3304      	adds	r3, #4
 800731c:	4618      	mov	r0, r3
 800731e:	f7ff fb4a 	bl	80069b6 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8007322:	4b0d      	ldr	r3, [pc, #52]	@ (8007358 <prvCheckTasksWaitingTermination+0x54>)
 8007324:	681b      	ldr	r3, [r3, #0]
 8007326:	3b01      	subs	r3, #1
 8007328:	4a0b      	ldr	r2, [pc, #44]	@ (8007358 <prvCheckTasksWaitingTermination+0x54>)
 800732a:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800732c:	4b0b      	ldr	r3, [pc, #44]	@ (800735c <prvCheckTasksWaitingTermination+0x58>)
 800732e:	681b      	ldr	r3, [r3, #0]
 8007330:	3b01      	subs	r3, #1
 8007332:	4a0a      	ldr	r2, [pc, #40]	@ (800735c <prvCheckTasksWaitingTermination+0x58>)
 8007334:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8007336:	f000 fa29 	bl	800778c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800733a:	6878      	ldr	r0, [r7, #4]
 800733c:	f000 f810 	bl	8007360 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8007340:	4b06      	ldr	r3, [pc, #24]	@ (800735c <prvCheckTasksWaitingTermination+0x58>)
 8007342:	681b      	ldr	r3, [r3, #0]
 8007344:	2b00      	cmp	r3, #0
 8007346:	d1e1      	bne.n	800730c <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8007348:	bf00      	nop
 800734a:	bf00      	nop
 800734c:	3708      	adds	r7, #8
 800734e:	46bd      	mov	sp, r7
 8007350:	bd80      	pop	{r7, pc}
 8007352:	bf00      	nop
 8007354:	20000868 	.word	0x20000868
 8007358:	20000894 	.word	0x20000894
 800735c:	2000087c 	.word	0x2000087c

08007360 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8007360:	b580      	push	{r7, lr}
 8007362:	b084      	sub	sp, #16
 8007364:	af00      	add	r7, sp, #0
 8007366:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8007368:	687b      	ldr	r3, [r7, #4]
 800736a:	f893 3055 	ldrb.w	r3, [r3, #85]	@ 0x55
 800736e:	2b00      	cmp	r3, #0
 8007370:	d108      	bne.n	8007384 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8007372:	687b      	ldr	r3, [r7, #4]
 8007374:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007376:	4618      	mov	r0, r3
 8007378:	f000 fb8a 	bl	8007a90 <vPortFree>
				vPortFree( pxTCB );
 800737c:	6878      	ldr	r0, [r7, #4]
 800737e:	f000 fb87 	bl	8007a90 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8007382:	e019      	b.n	80073b8 <prvDeleteTCB+0x58>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8007384:	687b      	ldr	r3, [r7, #4]
 8007386:	f893 3055 	ldrb.w	r3, [r3, #85]	@ 0x55
 800738a:	2b01      	cmp	r3, #1
 800738c:	d103      	bne.n	8007396 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 800738e:	6878      	ldr	r0, [r7, #4]
 8007390:	f000 fb7e 	bl	8007a90 <vPortFree>
	}
 8007394:	e010      	b.n	80073b8 <prvDeleteTCB+0x58>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8007396:	687b      	ldr	r3, [r7, #4]
 8007398:	f893 3055 	ldrb.w	r3, [r3, #85]	@ 0x55
 800739c:	2b02      	cmp	r3, #2
 800739e:	d00b      	beq.n	80073b8 <prvDeleteTCB+0x58>
	__asm volatile
 80073a0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80073a4:	f383 8811 	msr	BASEPRI, r3
 80073a8:	f3bf 8f6f 	isb	sy
 80073ac:	f3bf 8f4f 	dsb	sy
 80073b0:	60fb      	str	r3, [r7, #12]
}
 80073b2:	bf00      	nop
 80073b4:	bf00      	nop
 80073b6:	e7fd      	b.n	80073b4 <prvDeleteTCB+0x54>
	}
 80073b8:	bf00      	nop
 80073ba:	3710      	adds	r7, #16
 80073bc:	46bd      	mov	sp, r7
 80073be:	bd80      	pop	{r7, pc}

080073c0 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80073c0:	b480      	push	{r7}
 80073c2:	b083      	sub	sp, #12
 80073c4:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80073c6:	4b0c      	ldr	r3, [pc, #48]	@ (80073f8 <prvResetNextTaskUnblockTime+0x38>)
 80073c8:	681b      	ldr	r3, [r3, #0]
 80073ca:	681b      	ldr	r3, [r3, #0]
 80073cc:	2b00      	cmp	r3, #0
 80073ce:	d104      	bne.n	80073da <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80073d0:	4b0a      	ldr	r3, [pc, #40]	@ (80073fc <prvResetNextTaskUnblockTime+0x3c>)
 80073d2:	f04f 32ff 	mov.w	r2, #4294967295
 80073d6:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 80073d8:	e008      	b.n	80073ec <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80073da:	4b07      	ldr	r3, [pc, #28]	@ (80073f8 <prvResetNextTaskUnblockTime+0x38>)
 80073dc:	681b      	ldr	r3, [r3, #0]
 80073de:	68db      	ldr	r3, [r3, #12]
 80073e0:	68db      	ldr	r3, [r3, #12]
 80073e2:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80073e4:	687b      	ldr	r3, [r7, #4]
 80073e6:	685b      	ldr	r3, [r3, #4]
 80073e8:	4a04      	ldr	r2, [pc, #16]	@ (80073fc <prvResetNextTaskUnblockTime+0x3c>)
 80073ea:	6013      	str	r3, [r2, #0]
}
 80073ec:	bf00      	nop
 80073ee:	370c      	adds	r7, #12
 80073f0:	46bd      	mov	sp, r7
 80073f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073f6:	4770      	bx	lr
 80073f8:	2000084c 	.word	0x2000084c
 80073fc:	200008b4 	.word	0x200008b4

08007400 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8007400:	b580      	push	{r7, lr}
 8007402:	b084      	sub	sp, #16
 8007404:	af00      	add	r7, sp, #0
 8007406:	6078      	str	r0, [r7, #4]
 8007408:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800740a:	4b29      	ldr	r3, [pc, #164]	@ (80074b0 <prvAddCurrentTaskToDelayedList+0xb0>)
 800740c:	681b      	ldr	r3, [r3, #0]
 800740e:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8007410:	4b28      	ldr	r3, [pc, #160]	@ (80074b4 <prvAddCurrentTaskToDelayedList+0xb4>)
 8007412:	681b      	ldr	r3, [r3, #0]
 8007414:	3304      	adds	r3, #4
 8007416:	4618      	mov	r0, r3
 8007418:	f7ff facd 	bl	80069b6 <uxListRemove>
 800741c:	4603      	mov	r3, r0
 800741e:	2b00      	cmp	r3, #0
 8007420:	d10b      	bne.n	800743a <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8007422:	4b24      	ldr	r3, [pc, #144]	@ (80074b4 <prvAddCurrentTaskToDelayedList+0xb4>)
 8007424:	681b      	ldr	r3, [r3, #0]
 8007426:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007428:	2201      	movs	r2, #1
 800742a:	fa02 f303 	lsl.w	r3, r2, r3
 800742e:	43da      	mvns	r2, r3
 8007430:	4b21      	ldr	r3, [pc, #132]	@ (80074b8 <prvAddCurrentTaskToDelayedList+0xb8>)
 8007432:	681b      	ldr	r3, [r3, #0]
 8007434:	4013      	ands	r3, r2
 8007436:	4a20      	ldr	r2, [pc, #128]	@ (80074b8 <prvAddCurrentTaskToDelayedList+0xb8>)
 8007438:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800743a:	687b      	ldr	r3, [r7, #4]
 800743c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007440:	d10a      	bne.n	8007458 <prvAddCurrentTaskToDelayedList+0x58>
 8007442:	683b      	ldr	r3, [r7, #0]
 8007444:	2b00      	cmp	r3, #0
 8007446:	d007      	beq.n	8007458 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007448:	4b1a      	ldr	r3, [pc, #104]	@ (80074b4 <prvAddCurrentTaskToDelayedList+0xb4>)
 800744a:	681b      	ldr	r3, [r3, #0]
 800744c:	3304      	adds	r3, #4
 800744e:	4619      	mov	r1, r3
 8007450:	481a      	ldr	r0, [pc, #104]	@ (80074bc <prvAddCurrentTaskToDelayedList+0xbc>)
 8007452:	f7ff fa53 	bl	80068fc <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8007456:	e026      	b.n	80074a6 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8007458:	68fa      	ldr	r2, [r7, #12]
 800745a:	687b      	ldr	r3, [r7, #4]
 800745c:	4413      	add	r3, r2
 800745e:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8007460:	4b14      	ldr	r3, [pc, #80]	@ (80074b4 <prvAddCurrentTaskToDelayedList+0xb4>)
 8007462:	681b      	ldr	r3, [r3, #0]
 8007464:	68ba      	ldr	r2, [r7, #8]
 8007466:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8007468:	68ba      	ldr	r2, [r7, #8]
 800746a:	68fb      	ldr	r3, [r7, #12]
 800746c:	429a      	cmp	r2, r3
 800746e:	d209      	bcs.n	8007484 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007470:	4b13      	ldr	r3, [pc, #76]	@ (80074c0 <prvAddCurrentTaskToDelayedList+0xc0>)
 8007472:	681a      	ldr	r2, [r3, #0]
 8007474:	4b0f      	ldr	r3, [pc, #60]	@ (80074b4 <prvAddCurrentTaskToDelayedList+0xb4>)
 8007476:	681b      	ldr	r3, [r3, #0]
 8007478:	3304      	adds	r3, #4
 800747a:	4619      	mov	r1, r3
 800747c:	4610      	mov	r0, r2
 800747e:	f7ff fa61 	bl	8006944 <vListInsert>
}
 8007482:	e010      	b.n	80074a6 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007484:	4b0f      	ldr	r3, [pc, #60]	@ (80074c4 <prvAddCurrentTaskToDelayedList+0xc4>)
 8007486:	681a      	ldr	r2, [r3, #0]
 8007488:	4b0a      	ldr	r3, [pc, #40]	@ (80074b4 <prvAddCurrentTaskToDelayedList+0xb4>)
 800748a:	681b      	ldr	r3, [r3, #0]
 800748c:	3304      	adds	r3, #4
 800748e:	4619      	mov	r1, r3
 8007490:	4610      	mov	r0, r2
 8007492:	f7ff fa57 	bl	8006944 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8007496:	4b0c      	ldr	r3, [pc, #48]	@ (80074c8 <prvAddCurrentTaskToDelayedList+0xc8>)
 8007498:	681b      	ldr	r3, [r3, #0]
 800749a:	68ba      	ldr	r2, [r7, #8]
 800749c:	429a      	cmp	r2, r3
 800749e:	d202      	bcs.n	80074a6 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 80074a0:	4a09      	ldr	r2, [pc, #36]	@ (80074c8 <prvAddCurrentTaskToDelayedList+0xc8>)
 80074a2:	68bb      	ldr	r3, [r7, #8]
 80074a4:	6013      	str	r3, [r2, #0]
}
 80074a6:	bf00      	nop
 80074a8:	3710      	adds	r7, #16
 80074aa:	46bd      	mov	sp, r7
 80074ac:	bd80      	pop	{r7, pc}
 80074ae:	bf00      	nop
 80074b0:	20000898 	.word	0x20000898
 80074b4:	20000794 	.word	0x20000794
 80074b8:	2000089c 	.word	0x2000089c
 80074bc:	20000880 	.word	0x20000880
 80074c0:	20000850 	.word	0x20000850
 80074c4:	2000084c 	.word	0x2000084c
 80074c8:	200008b4 	.word	0x200008b4

080074cc <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 80074cc:	b480      	push	{r7}
 80074ce:	b085      	sub	sp, #20
 80074d0:	af00      	add	r7, sp, #0
 80074d2:	60f8      	str	r0, [r7, #12]
 80074d4:	60b9      	str	r1, [r7, #8]
 80074d6:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 80074d8:	68fb      	ldr	r3, [r7, #12]
 80074da:	3b04      	subs	r3, #4
 80074dc:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80074de:	68fb      	ldr	r3, [r7, #12]
 80074e0:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 80074e4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80074e6:	68fb      	ldr	r3, [r7, #12]
 80074e8:	3b04      	subs	r3, #4
 80074ea:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80074ec:	68bb      	ldr	r3, [r7, #8]
 80074ee:	f023 0201 	bic.w	r2, r3, #1
 80074f2:	68fb      	ldr	r3, [r7, #12]
 80074f4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80074f6:	68fb      	ldr	r3, [r7, #12]
 80074f8:	3b04      	subs	r3, #4
 80074fa:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80074fc:	4a0c      	ldr	r2, [pc, #48]	@ (8007530 <pxPortInitialiseStack+0x64>)
 80074fe:	68fb      	ldr	r3, [r7, #12]
 8007500:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8007502:	68fb      	ldr	r3, [r7, #12]
 8007504:	3b14      	subs	r3, #20
 8007506:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8007508:	687a      	ldr	r2, [r7, #4]
 800750a:	68fb      	ldr	r3, [r7, #12]
 800750c:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800750e:	68fb      	ldr	r3, [r7, #12]
 8007510:	3b04      	subs	r3, #4
 8007512:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8007514:	68fb      	ldr	r3, [r7, #12]
 8007516:	f06f 0202 	mvn.w	r2, #2
 800751a:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800751c:	68fb      	ldr	r3, [r7, #12]
 800751e:	3b20      	subs	r3, #32
 8007520:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8007522:	68fb      	ldr	r3, [r7, #12]
}
 8007524:	4618      	mov	r0, r3
 8007526:	3714      	adds	r7, #20
 8007528:	46bd      	mov	sp, r7
 800752a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800752e:	4770      	bx	lr
 8007530:	08007535 	.word	0x08007535

08007534 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8007534:	b480      	push	{r7}
 8007536:	b085      	sub	sp, #20
 8007538:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800753a:	2300      	movs	r3, #0
 800753c:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800753e:	4b13      	ldr	r3, [pc, #76]	@ (800758c <prvTaskExitError+0x58>)
 8007540:	681b      	ldr	r3, [r3, #0]
 8007542:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007546:	d00b      	beq.n	8007560 <prvTaskExitError+0x2c>
	__asm volatile
 8007548:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800754c:	f383 8811 	msr	BASEPRI, r3
 8007550:	f3bf 8f6f 	isb	sy
 8007554:	f3bf 8f4f 	dsb	sy
 8007558:	60fb      	str	r3, [r7, #12]
}
 800755a:	bf00      	nop
 800755c:	bf00      	nop
 800755e:	e7fd      	b.n	800755c <prvTaskExitError+0x28>
	__asm volatile
 8007560:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007564:	f383 8811 	msr	BASEPRI, r3
 8007568:	f3bf 8f6f 	isb	sy
 800756c:	f3bf 8f4f 	dsb	sy
 8007570:	60bb      	str	r3, [r7, #8]
}
 8007572:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8007574:	bf00      	nop
 8007576:	687b      	ldr	r3, [r7, #4]
 8007578:	2b00      	cmp	r3, #0
 800757a:	d0fc      	beq.n	8007576 <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800757c:	bf00      	nop
 800757e:	bf00      	nop
 8007580:	3714      	adds	r7, #20
 8007582:	46bd      	mov	sp, r7
 8007584:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007588:	4770      	bx	lr
 800758a:	bf00      	nop
 800758c:	20000054 	.word	0x20000054

08007590 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8007590:	4b07      	ldr	r3, [pc, #28]	@ (80075b0 <pxCurrentTCBConst2>)
 8007592:	6819      	ldr	r1, [r3, #0]
 8007594:	6808      	ldr	r0, [r1, #0]
 8007596:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800759a:	f380 8809 	msr	PSP, r0
 800759e:	f3bf 8f6f 	isb	sy
 80075a2:	f04f 0000 	mov.w	r0, #0
 80075a6:	f380 8811 	msr	BASEPRI, r0
 80075aa:	4770      	bx	lr
 80075ac:	f3af 8000 	nop.w

080075b0 <pxCurrentTCBConst2>:
 80075b0:	20000794 	.word	0x20000794
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 80075b4:	bf00      	nop
 80075b6:	bf00      	nop

080075b8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 80075b8:	4808      	ldr	r0, [pc, #32]	@ (80075dc <prvPortStartFirstTask+0x24>)
 80075ba:	6800      	ldr	r0, [r0, #0]
 80075bc:	6800      	ldr	r0, [r0, #0]
 80075be:	f380 8808 	msr	MSP, r0
 80075c2:	f04f 0000 	mov.w	r0, #0
 80075c6:	f380 8814 	msr	CONTROL, r0
 80075ca:	b662      	cpsie	i
 80075cc:	b661      	cpsie	f
 80075ce:	f3bf 8f4f 	dsb	sy
 80075d2:	f3bf 8f6f 	isb	sy
 80075d6:	df00      	svc	0
 80075d8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 80075da:	bf00      	nop
 80075dc:	e000ed08 	.word	0xe000ed08

080075e0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80075e0:	b580      	push	{r7, lr}
 80075e2:	b086      	sub	sp, #24
 80075e4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 80075e6:	4b47      	ldr	r3, [pc, #284]	@ (8007704 <xPortStartScheduler+0x124>)
 80075e8:	681b      	ldr	r3, [r3, #0]
 80075ea:	4a47      	ldr	r2, [pc, #284]	@ (8007708 <xPortStartScheduler+0x128>)
 80075ec:	4293      	cmp	r3, r2
 80075ee:	d10b      	bne.n	8007608 <xPortStartScheduler+0x28>
	__asm volatile
 80075f0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80075f4:	f383 8811 	msr	BASEPRI, r3
 80075f8:	f3bf 8f6f 	isb	sy
 80075fc:	f3bf 8f4f 	dsb	sy
 8007600:	60fb      	str	r3, [r7, #12]
}
 8007602:	bf00      	nop
 8007604:	bf00      	nop
 8007606:	e7fd      	b.n	8007604 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8007608:	4b3e      	ldr	r3, [pc, #248]	@ (8007704 <xPortStartScheduler+0x124>)
 800760a:	681b      	ldr	r3, [r3, #0]
 800760c:	4a3f      	ldr	r2, [pc, #252]	@ (800770c <xPortStartScheduler+0x12c>)
 800760e:	4293      	cmp	r3, r2
 8007610:	d10b      	bne.n	800762a <xPortStartScheduler+0x4a>
	__asm volatile
 8007612:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007616:	f383 8811 	msr	BASEPRI, r3
 800761a:	f3bf 8f6f 	isb	sy
 800761e:	f3bf 8f4f 	dsb	sy
 8007622:	613b      	str	r3, [r7, #16]
}
 8007624:	bf00      	nop
 8007626:	bf00      	nop
 8007628:	e7fd      	b.n	8007626 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800762a:	4b39      	ldr	r3, [pc, #228]	@ (8007710 <xPortStartScheduler+0x130>)
 800762c:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800762e:	697b      	ldr	r3, [r7, #20]
 8007630:	781b      	ldrb	r3, [r3, #0]
 8007632:	b2db      	uxtb	r3, r3
 8007634:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8007636:	697b      	ldr	r3, [r7, #20]
 8007638:	22ff      	movs	r2, #255	@ 0xff
 800763a:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800763c:	697b      	ldr	r3, [r7, #20]
 800763e:	781b      	ldrb	r3, [r3, #0]
 8007640:	b2db      	uxtb	r3, r3
 8007642:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8007644:	78fb      	ldrb	r3, [r7, #3]
 8007646:	b2db      	uxtb	r3, r3
 8007648:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 800764c:	b2da      	uxtb	r2, r3
 800764e:	4b31      	ldr	r3, [pc, #196]	@ (8007714 <xPortStartScheduler+0x134>)
 8007650:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8007652:	4b31      	ldr	r3, [pc, #196]	@ (8007718 <xPortStartScheduler+0x138>)
 8007654:	2207      	movs	r2, #7
 8007656:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8007658:	e009      	b.n	800766e <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 800765a:	4b2f      	ldr	r3, [pc, #188]	@ (8007718 <xPortStartScheduler+0x138>)
 800765c:	681b      	ldr	r3, [r3, #0]
 800765e:	3b01      	subs	r3, #1
 8007660:	4a2d      	ldr	r2, [pc, #180]	@ (8007718 <xPortStartScheduler+0x138>)
 8007662:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8007664:	78fb      	ldrb	r3, [r7, #3]
 8007666:	b2db      	uxtb	r3, r3
 8007668:	005b      	lsls	r3, r3, #1
 800766a:	b2db      	uxtb	r3, r3
 800766c:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800766e:	78fb      	ldrb	r3, [r7, #3]
 8007670:	b2db      	uxtb	r3, r3
 8007672:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007676:	2b80      	cmp	r3, #128	@ 0x80
 8007678:	d0ef      	beq.n	800765a <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800767a:	4b27      	ldr	r3, [pc, #156]	@ (8007718 <xPortStartScheduler+0x138>)
 800767c:	681b      	ldr	r3, [r3, #0]
 800767e:	f1c3 0307 	rsb	r3, r3, #7
 8007682:	2b04      	cmp	r3, #4
 8007684:	d00b      	beq.n	800769e <xPortStartScheduler+0xbe>
	__asm volatile
 8007686:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800768a:	f383 8811 	msr	BASEPRI, r3
 800768e:	f3bf 8f6f 	isb	sy
 8007692:	f3bf 8f4f 	dsb	sy
 8007696:	60bb      	str	r3, [r7, #8]
}
 8007698:	bf00      	nop
 800769a:	bf00      	nop
 800769c:	e7fd      	b.n	800769a <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800769e:	4b1e      	ldr	r3, [pc, #120]	@ (8007718 <xPortStartScheduler+0x138>)
 80076a0:	681b      	ldr	r3, [r3, #0]
 80076a2:	021b      	lsls	r3, r3, #8
 80076a4:	4a1c      	ldr	r2, [pc, #112]	@ (8007718 <xPortStartScheduler+0x138>)
 80076a6:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80076a8:	4b1b      	ldr	r3, [pc, #108]	@ (8007718 <xPortStartScheduler+0x138>)
 80076aa:	681b      	ldr	r3, [r3, #0]
 80076ac:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 80076b0:	4a19      	ldr	r2, [pc, #100]	@ (8007718 <xPortStartScheduler+0x138>)
 80076b2:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80076b4:	687b      	ldr	r3, [r7, #4]
 80076b6:	b2da      	uxtb	r2, r3
 80076b8:	697b      	ldr	r3, [r7, #20]
 80076ba:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80076bc:	4b17      	ldr	r3, [pc, #92]	@ (800771c <xPortStartScheduler+0x13c>)
 80076be:	681b      	ldr	r3, [r3, #0]
 80076c0:	4a16      	ldr	r2, [pc, #88]	@ (800771c <xPortStartScheduler+0x13c>)
 80076c2:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80076c6:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80076c8:	4b14      	ldr	r3, [pc, #80]	@ (800771c <xPortStartScheduler+0x13c>)
 80076ca:	681b      	ldr	r3, [r3, #0]
 80076cc:	4a13      	ldr	r2, [pc, #76]	@ (800771c <xPortStartScheduler+0x13c>)
 80076ce:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 80076d2:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 80076d4:	f000 f8da 	bl	800788c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 80076d8:	4b11      	ldr	r3, [pc, #68]	@ (8007720 <xPortStartScheduler+0x140>)
 80076da:	2200      	movs	r2, #0
 80076dc:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 80076de:	f000 f8f9 	bl	80078d4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 80076e2:	4b10      	ldr	r3, [pc, #64]	@ (8007724 <xPortStartScheduler+0x144>)
 80076e4:	681b      	ldr	r3, [r3, #0]
 80076e6:	4a0f      	ldr	r2, [pc, #60]	@ (8007724 <xPortStartScheduler+0x144>)
 80076e8:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 80076ec:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 80076ee:	f7ff ff63 	bl	80075b8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 80076f2:	f7ff fd2b 	bl	800714c <vTaskSwitchContext>
	prvTaskExitError();
 80076f6:	f7ff ff1d 	bl	8007534 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 80076fa:	2300      	movs	r3, #0
}
 80076fc:	4618      	mov	r0, r3
 80076fe:	3718      	adds	r7, #24
 8007700:	46bd      	mov	sp, r7
 8007702:	bd80      	pop	{r7, pc}
 8007704:	e000ed00 	.word	0xe000ed00
 8007708:	410fc271 	.word	0x410fc271
 800770c:	410fc270 	.word	0x410fc270
 8007710:	e000e400 	.word	0xe000e400
 8007714:	200008c0 	.word	0x200008c0
 8007718:	200008c4 	.word	0x200008c4
 800771c:	e000ed20 	.word	0xe000ed20
 8007720:	20000054 	.word	0x20000054
 8007724:	e000ef34 	.word	0xe000ef34

08007728 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8007728:	b480      	push	{r7}
 800772a:	b083      	sub	sp, #12
 800772c:	af00      	add	r7, sp, #0
	__asm volatile
 800772e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007732:	f383 8811 	msr	BASEPRI, r3
 8007736:	f3bf 8f6f 	isb	sy
 800773a:	f3bf 8f4f 	dsb	sy
 800773e:	607b      	str	r3, [r7, #4]
}
 8007740:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8007742:	4b10      	ldr	r3, [pc, #64]	@ (8007784 <vPortEnterCritical+0x5c>)
 8007744:	681b      	ldr	r3, [r3, #0]
 8007746:	3301      	adds	r3, #1
 8007748:	4a0e      	ldr	r2, [pc, #56]	@ (8007784 <vPortEnterCritical+0x5c>)
 800774a:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800774c:	4b0d      	ldr	r3, [pc, #52]	@ (8007784 <vPortEnterCritical+0x5c>)
 800774e:	681b      	ldr	r3, [r3, #0]
 8007750:	2b01      	cmp	r3, #1
 8007752:	d110      	bne.n	8007776 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8007754:	4b0c      	ldr	r3, [pc, #48]	@ (8007788 <vPortEnterCritical+0x60>)
 8007756:	681b      	ldr	r3, [r3, #0]
 8007758:	b2db      	uxtb	r3, r3
 800775a:	2b00      	cmp	r3, #0
 800775c:	d00b      	beq.n	8007776 <vPortEnterCritical+0x4e>
	__asm volatile
 800775e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007762:	f383 8811 	msr	BASEPRI, r3
 8007766:	f3bf 8f6f 	isb	sy
 800776a:	f3bf 8f4f 	dsb	sy
 800776e:	603b      	str	r3, [r7, #0]
}
 8007770:	bf00      	nop
 8007772:	bf00      	nop
 8007774:	e7fd      	b.n	8007772 <vPortEnterCritical+0x4a>
	}
}
 8007776:	bf00      	nop
 8007778:	370c      	adds	r7, #12
 800777a:	46bd      	mov	sp, r7
 800777c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007780:	4770      	bx	lr
 8007782:	bf00      	nop
 8007784:	20000054 	.word	0x20000054
 8007788:	e000ed04 	.word	0xe000ed04

0800778c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800778c:	b480      	push	{r7}
 800778e:	b083      	sub	sp, #12
 8007790:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8007792:	4b12      	ldr	r3, [pc, #72]	@ (80077dc <vPortExitCritical+0x50>)
 8007794:	681b      	ldr	r3, [r3, #0]
 8007796:	2b00      	cmp	r3, #0
 8007798:	d10b      	bne.n	80077b2 <vPortExitCritical+0x26>
	__asm volatile
 800779a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800779e:	f383 8811 	msr	BASEPRI, r3
 80077a2:	f3bf 8f6f 	isb	sy
 80077a6:	f3bf 8f4f 	dsb	sy
 80077aa:	607b      	str	r3, [r7, #4]
}
 80077ac:	bf00      	nop
 80077ae:	bf00      	nop
 80077b0:	e7fd      	b.n	80077ae <vPortExitCritical+0x22>
	uxCriticalNesting--;
 80077b2:	4b0a      	ldr	r3, [pc, #40]	@ (80077dc <vPortExitCritical+0x50>)
 80077b4:	681b      	ldr	r3, [r3, #0]
 80077b6:	3b01      	subs	r3, #1
 80077b8:	4a08      	ldr	r2, [pc, #32]	@ (80077dc <vPortExitCritical+0x50>)
 80077ba:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 80077bc:	4b07      	ldr	r3, [pc, #28]	@ (80077dc <vPortExitCritical+0x50>)
 80077be:	681b      	ldr	r3, [r3, #0]
 80077c0:	2b00      	cmp	r3, #0
 80077c2:	d105      	bne.n	80077d0 <vPortExitCritical+0x44>
 80077c4:	2300      	movs	r3, #0
 80077c6:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80077c8:	683b      	ldr	r3, [r7, #0]
 80077ca:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 80077ce:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 80077d0:	bf00      	nop
 80077d2:	370c      	adds	r7, #12
 80077d4:	46bd      	mov	sp, r7
 80077d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077da:	4770      	bx	lr
 80077dc:	20000054 	.word	0x20000054

080077e0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80077e0:	f3ef 8009 	mrs	r0, PSP
 80077e4:	f3bf 8f6f 	isb	sy
 80077e8:	4b15      	ldr	r3, [pc, #84]	@ (8007840 <pxCurrentTCBConst>)
 80077ea:	681a      	ldr	r2, [r3, #0]
 80077ec:	f01e 0f10 	tst.w	lr, #16
 80077f0:	bf08      	it	eq
 80077f2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 80077f6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80077fa:	6010      	str	r0, [r2, #0]
 80077fc:	e92d 0009 	stmdb	sp!, {r0, r3}
 8007800:	f04f 0050 	mov.w	r0, #80	@ 0x50
 8007804:	f380 8811 	msr	BASEPRI, r0
 8007808:	f3bf 8f4f 	dsb	sy
 800780c:	f3bf 8f6f 	isb	sy
 8007810:	f7ff fc9c 	bl	800714c <vTaskSwitchContext>
 8007814:	f04f 0000 	mov.w	r0, #0
 8007818:	f380 8811 	msr	BASEPRI, r0
 800781c:	bc09      	pop	{r0, r3}
 800781e:	6819      	ldr	r1, [r3, #0]
 8007820:	6808      	ldr	r0, [r1, #0]
 8007822:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007826:	f01e 0f10 	tst.w	lr, #16
 800782a:	bf08      	it	eq
 800782c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8007830:	f380 8809 	msr	PSP, r0
 8007834:	f3bf 8f6f 	isb	sy
 8007838:	4770      	bx	lr
 800783a:	bf00      	nop
 800783c:	f3af 8000 	nop.w

08007840 <pxCurrentTCBConst>:
 8007840:	20000794 	.word	0x20000794
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8007844:	bf00      	nop
 8007846:	bf00      	nop

08007848 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8007848:	b580      	push	{r7, lr}
 800784a:	b082      	sub	sp, #8
 800784c:	af00      	add	r7, sp, #0
	__asm volatile
 800784e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007852:	f383 8811 	msr	BASEPRI, r3
 8007856:	f3bf 8f6f 	isb	sy
 800785a:	f3bf 8f4f 	dsb	sy
 800785e:	607b      	str	r3, [r7, #4]
}
 8007860:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8007862:	f7ff fbb9 	bl	8006fd8 <xTaskIncrementTick>
 8007866:	4603      	mov	r3, r0
 8007868:	2b00      	cmp	r3, #0
 800786a:	d003      	beq.n	8007874 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800786c:	4b06      	ldr	r3, [pc, #24]	@ (8007888 <SysTick_Handler+0x40>)
 800786e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007872:	601a      	str	r2, [r3, #0]
 8007874:	2300      	movs	r3, #0
 8007876:	603b      	str	r3, [r7, #0]
	__asm volatile
 8007878:	683b      	ldr	r3, [r7, #0]
 800787a:	f383 8811 	msr	BASEPRI, r3
}
 800787e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8007880:	bf00      	nop
 8007882:	3708      	adds	r7, #8
 8007884:	46bd      	mov	sp, r7
 8007886:	bd80      	pop	{r7, pc}
 8007888:	e000ed04 	.word	0xe000ed04

0800788c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800788c:	b480      	push	{r7}
 800788e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8007890:	4b0b      	ldr	r3, [pc, #44]	@ (80078c0 <vPortSetupTimerInterrupt+0x34>)
 8007892:	2200      	movs	r2, #0
 8007894:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8007896:	4b0b      	ldr	r3, [pc, #44]	@ (80078c4 <vPortSetupTimerInterrupt+0x38>)
 8007898:	2200      	movs	r2, #0
 800789a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800789c:	4b0a      	ldr	r3, [pc, #40]	@ (80078c8 <vPortSetupTimerInterrupt+0x3c>)
 800789e:	681b      	ldr	r3, [r3, #0]
 80078a0:	4a0a      	ldr	r2, [pc, #40]	@ (80078cc <vPortSetupTimerInterrupt+0x40>)
 80078a2:	fba2 2303 	umull	r2, r3, r2, r3
 80078a6:	099b      	lsrs	r3, r3, #6
 80078a8:	4a09      	ldr	r2, [pc, #36]	@ (80078d0 <vPortSetupTimerInterrupt+0x44>)
 80078aa:	3b01      	subs	r3, #1
 80078ac:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80078ae:	4b04      	ldr	r3, [pc, #16]	@ (80078c0 <vPortSetupTimerInterrupt+0x34>)
 80078b0:	2207      	movs	r2, #7
 80078b2:	601a      	str	r2, [r3, #0]
}
 80078b4:	bf00      	nop
 80078b6:	46bd      	mov	sp, r7
 80078b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078bc:	4770      	bx	lr
 80078be:	bf00      	nop
 80078c0:	e000e010 	.word	0xe000e010
 80078c4:	e000e018 	.word	0xe000e018
 80078c8:	20000048 	.word	0x20000048
 80078cc:	10624dd3 	.word	0x10624dd3
 80078d0:	e000e014 	.word	0xe000e014

080078d4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 80078d4:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 80078e4 <vPortEnableVFP+0x10>
 80078d8:	6801      	ldr	r1, [r0, #0]
 80078da:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80078de:	6001      	str	r1, [r0, #0]
 80078e0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 80078e2:	bf00      	nop
 80078e4:	e000ed88 	.word	0xe000ed88

080078e8 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 80078e8:	b580      	push	{r7, lr}
 80078ea:	b08a      	sub	sp, #40	@ 0x28
 80078ec:	af00      	add	r7, sp, #0
 80078ee:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 80078f0:	2300      	movs	r3, #0
 80078f2:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 80078f4:	f7ff fac4 	bl	8006e80 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 80078f8:	4b5f      	ldr	r3, [pc, #380]	@ (8007a78 <pvPortMalloc+0x190>)
 80078fa:	681b      	ldr	r3, [r3, #0]
 80078fc:	2b00      	cmp	r3, #0
 80078fe:	d101      	bne.n	8007904 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8007900:	f000 f92a 	bl	8007b58 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8007904:	4b5d      	ldr	r3, [pc, #372]	@ (8007a7c <pvPortMalloc+0x194>)
 8007906:	681a      	ldr	r2, [r3, #0]
 8007908:	687b      	ldr	r3, [r7, #4]
 800790a:	4013      	ands	r3, r2
 800790c:	2b00      	cmp	r3, #0
 800790e:	f040 8095 	bne.w	8007a3c <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8007912:	687b      	ldr	r3, [r7, #4]
 8007914:	2b00      	cmp	r3, #0
 8007916:	d01e      	beq.n	8007956 <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 8007918:	2208      	movs	r2, #8
 800791a:	687b      	ldr	r3, [r7, #4]
 800791c:	4413      	add	r3, r2
 800791e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8007920:	687b      	ldr	r3, [r7, #4]
 8007922:	f003 0307 	and.w	r3, r3, #7
 8007926:	2b00      	cmp	r3, #0
 8007928:	d015      	beq.n	8007956 <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800792a:	687b      	ldr	r3, [r7, #4]
 800792c:	f023 0307 	bic.w	r3, r3, #7
 8007930:	3308      	adds	r3, #8
 8007932:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8007934:	687b      	ldr	r3, [r7, #4]
 8007936:	f003 0307 	and.w	r3, r3, #7
 800793a:	2b00      	cmp	r3, #0
 800793c:	d00b      	beq.n	8007956 <pvPortMalloc+0x6e>
	__asm volatile
 800793e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007942:	f383 8811 	msr	BASEPRI, r3
 8007946:	f3bf 8f6f 	isb	sy
 800794a:	f3bf 8f4f 	dsb	sy
 800794e:	617b      	str	r3, [r7, #20]
}
 8007950:	bf00      	nop
 8007952:	bf00      	nop
 8007954:	e7fd      	b.n	8007952 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8007956:	687b      	ldr	r3, [r7, #4]
 8007958:	2b00      	cmp	r3, #0
 800795a:	d06f      	beq.n	8007a3c <pvPortMalloc+0x154>
 800795c:	4b48      	ldr	r3, [pc, #288]	@ (8007a80 <pvPortMalloc+0x198>)
 800795e:	681b      	ldr	r3, [r3, #0]
 8007960:	687a      	ldr	r2, [r7, #4]
 8007962:	429a      	cmp	r2, r3
 8007964:	d86a      	bhi.n	8007a3c <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8007966:	4b47      	ldr	r3, [pc, #284]	@ (8007a84 <pvPortMalloc+0x19c>)
 8007968:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800796a:	4b46      	ldr	r3, [pc, #280]	@ (8007a84 <pvPortMalloc+0x19c>)
 800796c:	681b      	ldr	r3, [r3, #0]
 800796e:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8007970:	e004      	b.n	800797c <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 8007972:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007974:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8007976:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007978:	681b      	ldr	r3, [r3, #0]
 800797a:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800797c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800797e:	685b      	ldr	r3, [r3, #4]
 8007980:	687a      	ldr	r2, [r7, #4]
 8007982:	429a      	cmp	r2, r3
 8007984:	d903      	bls.n	800798e <pvPortMalloc+0xa6>
 8007986:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007988:	681b      	ldr	r3, [r3, #0]
 800798a:	2b00      	cmp	r3, #0
 800798c:	d1f1      	bne.n	8007972 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800798e:	4b3a      	ldr	r3, [pc, #232]	@ (8007a78 <pvPortMalloc+0x190>)
 8007990:	681b      	ldr	r3, [r3, #0]
 8007992:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007994:	429a      	cmp	r2, r3
 8007996:	d051      	beq.n	8007a3c <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8007998:	6a3b      	ldr	r3, [r7, #32]
 800799a:	681b      	ldr	r3, [r3, #0]
 800799c:	2208      	movs	r2, #8
 800799e:	4413      	add	r3, r2
 80079a0:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80079a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80079a4:	681a      	ldr	r2, [r3, #0]
 80079a6:	6a3b      	ldr	r3, [r7, #32]
 80079a8:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80079aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80079ac:	685a      	ldr	r2, [r3, #4]
 80079ae:	687b      	ldr	r3, [r7, #4]
 80079b0:	1ad2      	subs	r2, r2, r3
 80079b2:	2308      	movs	r3, #8
 80079b4:	005b      	lsls	r3, r3, #1
 80079b6:	429a      	cmp	r2, r3
 80079b8:	d920      	bls.n	80079fc <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80079ba:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80079bc:	687b      	ldr	r3, [r7, #4]
 80079be:	4413      	add	r3, r2
 80079c0:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80079c2:	69bb      	ldr	r3, [r7, #24]
 80079c4:	f003 0307 	and.w	r3, r3, #7
 80079c8:	2b00      	cmp	r3, #0
 80079ca:	d00b      	beq.n	80079e4 <pvPortMalloc+0xfc>
	__asm volatile
 80079cc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80079d0:	f383 8811 	msr	BASEPRI, r3
 80079d4:	f3bf 8f6f 	isb	sy
 80079d8:	f3bf 8f4f 	dsb	sy
 80079dc:	613b      	str	r3, [r7, #16]
}
 80079de:	bf00      	nop
 80079e0:	bf00      	nop
 80079e2:	e7fd      	b.n	80079e0 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80079e4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80079e6:	685a      	ldr	r2, [r3, #4]
 80079e8:	687b      	ldr	r3, [r7, #4]
 80079ea:	1ad2      	subs	r2, r2, r3
 80079ec:	69bb      	ldr	r3, [r7, #24]
 80079ee:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 80079f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80079f2:	687a      	ldr	r2, [r7, #4]
 80079f4:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80079f6:	69b8      	ldr	r0, [r7, #24]
 80079f8:	f000 f910 	bl	8007c1c <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80079fc:	4b20      	ldr	r3, [pc, #128]	@ (8007a80 <pvPortMalloc+0x198>)
 80079fe:	681a      	ldr	r2, [r3, #0]
 8007a00:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007a02:	685b      	ldr	r3, [r3, #4]
 8007a04:	1ad3      	subs	r3, r2, r3
 8007a06:	4a1e      	ldr	r2, [pc, #120]	@ (8007a80 <pvPortMalloc+0x198>)
 8007a08:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8007a0a:	4b1d      	ldr	r3, [pc, #116]	@ (8007a80 <pvPortMalloc+0x198>)
 8007a0c:	681a      	ldr	r2, [r3, #0]
 8007a0e:	4b1e      	ldr	r3, [pc, #120]	@ (8007a88 <pvPortMalloc+0x1a0>)
 8007a10:	681b      	ldr	r3, [r3, #0]
 8007a12:	429a      	cmp	r2, r3
 8007a14:	d203      	bcs.n	8007a1e <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8007a16:	4b1a      	ldr	r3, [pc, #104]	@ (8007a80 <pvPortMalloc+0x198>)
 8007a18:	681b      	ldr	r3, [r3, #0]
 8007a1a:	4a1b      	ldr	r2, [pc, #108]	@ (8007a88 <pvPortMalloc+0x1a0>)
 8007a1c:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8007a1e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007a20:	685a      	ldr	r2, [r3, #4]
 8007a22:	4b16      	ldr	r3, [pc, #88]	@ (8007a7c <pvPortMalloc+0x194>)
 8007a24:	681b      	ldr	r3, [r3, #0]
 8007a26:	431a      	orrs	r2, r3
 8007a28:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007a2a:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8007a2c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007a2e:	2200      	movs	r2, #0
 8007a30:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8007a32:	4b16      	ldr	r3, [pc, #88]	@ (8007a8c <pvPortMalloc+0x1a4>)
 8007a34:	681b      	ldr	r3, [r3, #0]
 8007a36:	3301      	adds	r3, #1
 8007a38:	4a14      	ldr	r2, [pc, #80]	@ (8007a8c <pvPortMalloc+0x1a4>)
 8007a3a:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8007a3c:	f7ff fa2e 	bl	8006e9c <xTaskResumeAll>

	#if( configUSE_MALLOC_FAILED_HOOK == 1 )
	{
		if( pvReturn == NULL )
 8007a40:	69fb      	ldr	r3, [r7, #28]
 8007a42:	2b00      	cmp	r3, #0
 8007a44:	d101      	bne.n	8007a4a <pvPortMalloc+0x162>
		{
			extern void vApplicationMallocFailedHook( void );
			vApplicationMallocFailedHook();
 8007a46:	f7f8 fd7b 	bl	8000540 <vApplicationMallocFailedHook>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8007a4a:	69fb      	ldr	r3, [r7, #28]
 8007a4c:	f003 0307 	and.w	r3, r3, #7
 8007a50:	2b00      	cmp	r3, #0
 8007a52:	d00b      	beq.n	8007a6c <pvPortMalloc+0x184>
	__asm volatile
 8007a54:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007a58:	f383 8811 	msr	BASEPRI, r3
 8007a5c:	f3bf 8f6f 	isb	sy
 8007a60:	f3bf 8f4f 	dsb	sy
 8007a64:	60fb      	str	r3, [r7, #12]
}
 8007a66:	bf00      	nop
 8007a68:	bf00      	nop
 8007a6a:	e7fd      	b.n	8007a68 <pvPortMalloc+0x180>
	return pvReturn;
 8007a6c:	69fb      	ldr	r3, [r7, #28]
}
 8007a6e:	4618      	mov	r0, r3
 8007a70:	3728      	adds	r7, #40	@ 0x28
 8007a72:	46bd      	mov	sp, r7
 8007a74:	bd80      	pop	{r7, pc}
 8007a76:	bf00      	nop
 8007a78:	200088d0 	.word	0x200088d0
 8007a7c:	200088e4 	.word	0x200088e4
 8007a80:	200088d4 	.word	0x200088d4
 8007a84:	200088c8 	.word	0x200088c8
 8007a88:	200088d8 	.word	0x200088d8
 8007a8c:	200088dc 	.word	0x200088dc

08007a90 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8007a90:	b580      	push	{r7, lr}
 8007a92:	b086      	sub	sp, #24
 8007a94:	af00      	add	r7, sp, #0
 8007a96:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8007a98:	687b      	ldr	r3, [r7, #4]
 8007a9a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8007a9c:	687b      	ldr	r3, [r7, #4]
 8007a9e:	2b00      	cmp	r3, #0
 8007aa0:	d04f      	beq.n	8007b42 <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8007aa2:	2308      	movs	r3, #8
 8007aa4:	425b      	negs	r3, r3
 8007aa6:	697a      	ldr	r2, [r7, #20]
 8007aa8:	4413      	add	r3, r2
 8007aaa:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8007aac:	697b      	ldr	r3, [r7, #20]
 8007aae:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8007ab0:	693b      	ldr	r3, [r7, #16]
 8007ab2:	685a      	ldr	r2, [r3, #4]
 8007ab4:	4b25      	ldr	r3, [pc, #148]	@ (8007b4c <vPortFree+0xbc>)
 8007ab6:	681b      	ldr	r3, [r3, #0]
 8007ab8:	4013      	ands	r3, r2
 8007aba:	2b00      	cmp	r3, #0
 8007abc:	d10b      	bne.n	8007ad6 <vPortFree+0x46>
	__asm volatile
 8007abe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007ac2:	f383 8811 	msr	BASEPRI, r3
 8007ac6:	f3bf 8f6f 	isb	sy
 8007aca:	f3bf 8f4f 	dsb	sy
 8007ace:	60fb      	str	r3, [r7, #12]
}
 8007ad0:	bf00      	nop
 8007ad2:	bf00      	nop
 8007ad4:	e7fd      	b.n	8007ad2 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8007ad6:	693b      	ldr	r3, [r7, #16]
 8007ad8:	681b      	ldr	r3, [r3, #0]
 8007ada:	2b00      	cmp	r3, #0
 8007adc:	d00b      	beq.n	8007af6 <vPortFree+0x66>
	__asm volatile
 8007ade:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007ae2:	f383 8811 	msr	BASEPRI, r3
 8007ae6:	f3bf 8f6f 	isb	sy
 8007aea:	f3bf 8f4f 	dsb	sy
 8007aee:	60bb      	str	r3, [r7, #8]
}
 8007af0:	bf00      	nop
 8007af2:	bf00      	nop
 8007af4:	e7fd      	b.n	8007af2 <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8007af6:	693b      	ldr	r3, [r7, #16]
 8007af8:	685a      	ldr	r2, [r3, #4]
 8007afa:	4b14      	ldr	r3, [pc, #80]	@ (8007b4c <vPortFree+0xbc>)
 8007afc:	681b      	ldr	r3, [r3, #0]
 8007afe:	4013      	ands	r3, r2
 8007b00:	2b00      	cmp	r3, #0
 8007b02:	d01e      	beq.n	8007b42 <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8007b04:	693b      	ldr	r3, [r7, #16]
 8007b06:	681b      	ldr	r3, [r3, #0]
 8007b08:	2b00      	cmp	r3, #0
 8007b0a:	d11a      	bne.n	8007b42 <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8007b0c:	693b      	ldr	r3, [r7, #16]
 8007b0e:	685a      	ldr	r2, [r3, #4]
 8007b10:	4b0e      	ldr	r3, [pc, #56]	@ (8007b4c <vPortFree+0xbc>)
 8007b12:	681b      	ldr	r3, [r3, #0]
 8007b14:	43db      	mvns	r3, r3
 8007b16:	401a      	ands	r2, r3
 8007b18:	693b      	ldr	r3, [r7, #16]
 8007b1a:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8007b1c:	f7ff f9b0 	bl	8006e80 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8007b20:	693b      	ldr	r3, [r7, #16]
 8007b22:	685a      	ldr	r2, [r3, #4]
 8007b24:	4b0a      	ldr	r3, [pc, #40]	@ (8007b50 <vPortFree+0xc0>)
 8007b26:	681b      	ldr	r3, [r3, #0]
 8007b28:	4413      	add	r3, r2
 8007b2a:	4a09      	ldr	r2, [pc, #36]	@ (8007b50 <vPortFree+0xc0>)
 8007b2c:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8007b2e:	6938      	ldr	r0, [r7, #16]
 8007b30:	f000 f874 	bl	8007c1c <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8007b34:	4b07      	ldr	r3, [pc, #28]	@ (8007b54 <vPortFree+0xc4>)
 8007b36:	681b      	ldr	r3, [r3, #0]
 8007b38:	3301      	adds	r3, #1
 8007b3a:	4a06      	ldr	r2, [pc, #24]	@ (8007b54 <vPortFree+0xc4>)
 8007b3c:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8007b3e:	f7ff f9ad 	bl	8006e9c <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8007b42:	bf00      	nop
 8007b44:	3718      	adds	r7, #24
 8007b46:	46bd      	mov	sp, r7
 8007b48:	bd80      	pop	{r7, pc}
 8007b4a:	bf00      	nop
 8007b4c:	200088e4 	.word	0x200088e4
 8007b50:	200088d4 	.word	0x200088d4
 8007b54:	200088e0 	.word	0x200088e0

08007b58 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8007b58:	b480      	push	{r7}
 8007b5a:	b085      	sub	sp, #20
 8007b5c:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8007b5e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8007b62:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8007b64:	4b27      	ldr	r3, [pc, #156]	@ (8007c04 <prvHeapInit+0xac>)
 8007b66:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8007b68:	68fb      	ldr	r3, [r7, #12]
 8007b6a:	f003 0307 	and.w	r3, r3, #7
 8007b6e:	2b00      	cmp	r3, #0
 8007b70:	d00c      	beq.n	8007b8c <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8007b72:	68fb      	ldr	r3, [r7, #12]
 8007b74:	3307      	adds	r3, #7
 8007b76:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8007b78:	68fb      	ldr	r3, [r7, #12]
 8007b7a:	f023 0307 	bic.w	r3, r3, #7
 8007b7e:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8007b80:	68ba      	ldr	r2, [r7, #8]
 8007b82:	68fb      	ldr	r3, [r7, #12]
 8007b84:	1ad3      	subs	r3, r2, r3
 8007b86:	4a1f      	ldr	r2, [pc, #124]	@ (8007c04 <prvHeapInit+0xac>)
 8007b88:	4413      	add	r3, r2
 8007b8a:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8007b8c:	68fb      	ldr	r3, [r7, #12]
 8007b8e:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8007b90:	4a1d      	ldr	r2, [pc, #116]	@ (8007c08 <prvHeapInit+0xb0>)
 8007b92:	687b      	ldr	r3, [r7, #4]
 8007b94:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8007b96:	4b1c      	ldr	r3, [pc, #112]	@ (8007c08 <prvHeapInit+0xb0>)
 8007b98:	2200      	movs	r2, #0
 8007b9a:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8007b9c:	687b      	ldr	r3, [r7, #4]
 8007b9e:	68ba      	ldr	r2, [r7, #8]
 8007ba0:	4413      	add	r3, r2
 8007ba2:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8007ba4:	2208      	movs	r2, #8
 8007ba6:	68fb      	ldr	r3, [r7, #12]
 8007ba8:	1a9b      	subs	r3, r3, r2
 8007baa:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8007bac:	68fb      	ldr	r3, [r7, #12]
 8007bae:	f023 0307 	bic.w	r3, r3, #7
 8007bb2:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8007bb4:	68fb      	ldr	r3, [r7, #12]
 8007bb6:	4a15      	ldr	r2, [pc, #84]	@ (8007c0c <prvHeapInit+0xb4>)
 8007bb8:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8007bba:	4b14      	ldr	r3, [pc, #80]	@ (8007c0c <prvHeapInit+0xb4>)
 8007bbc:	681b      	ldr	r3, [r3, #0]
 8007bbe:	2200      	movs	r2, #0
 8007bc0:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8007bc2:	4b12      	ldr	r3, [pc, #72]	@ (8007c0c <prvHeapInit+0xb4>)
 8007bc4:	681b      	ldr	r3, [r3, #0]
 8007bc6:	2200      	movs	r2, #0
 8007bc8:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8007bca:	687b      	ldr	r3, [r7, #4]
 8007bcc:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8007bce:	683b      	ldr	r3, [r7, #0]
 8007bd0:	68fa      	ldr	r2, [r7, #12]
 8007bd2:	1ad2      	subs	r2, r2, r3
 8007bd4:	683b      	ldr	r3, [r7, #0]
 8007bd6:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8007bd8:	4b0c      	ldr	r3, [pc, #48]	@ (8007c0c <prvHeapInit+0xb4>)
 8007bda:	681a      	ldr	r2, [r3, #0]
 8007bdc:	683b      	ldr	r3, [r7, #0]
 8007bde:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8007be0:	683b      	ldr	r3, [r7, #0]
 8007be2:	685b      	ldr	r3, [r3, #4]
 8007be4:	4a0a      	ldr	r2, [pc, #40]	@ (8007c10 <prvHeapInit+0xb8>)
 8007be6:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8007be8:	683b      	ldr	r3, [r7, #0]
 8007bea:	685b      	ldr	r3, [r3, #4]
 8007bec:	4a09      	ldr	r2, [pc, #36]	@ (8007c14 <prvHeapInit+0xbc>)
 8007bee:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8007bf0:	4b09      	ldr	r3, [pc, #36]	@ (8007c18 <prvHeapInit+0xc0>)
 8007bf2:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8007bf6:	601a      	str	r2, [r3, #0]
}
 8007bf8:	bf00      	nop
 8007bfa:	3714      	adds	r7, #20
 8007bfc:	46bd      	mov	sp, r7
 8007bfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c02:	4770      	bx	lr
 8007c04:	200008c8 	.word	0x200008c8
 8007c08:	200088c8 	.word	0x200088c8
 8007c0c:	200088d0 	.word	0x200088d0
 8007c10:	200088d8 	.word	0x200088d8
 8007c14:	200088d4 	.word	0x200088d4
 8007c18:	200088e4 	.word	0x200088e4

08007c1c <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8007c1c:	b480      	push	{r7}
 8007c1e:	b085      	sub	sp, #20
 8007c20:	af00      	add	r7, sp, #0
 8007c22:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8007c24:	4b28      	ldr	r3, [pc, #160]	@ (8007cc8 <prvInsertBlockIntoFreeList+0xac>)
 8007c26:	60fb      	str	r3, [r7, #12]
 8007c28:	e002      	b.n	8007c30 <prvInsertBlockIntoFreeList+0x14>
 8007c2a:	68fb      	ldr	r3, [r7, #12]
 8007c2c:	681b      	ldr	r3, [r3, #0]
 8007c2e:	60fb      	str	r3, [r7, #12]
 8007c30:	68fb      	ldr	r3, [r7, #12]
 8007c32:	681b      	ldr	r3, [r3, #0]
 8007c34:	687a      	ldr	r2, [r7, #4]
 8007c36:	429a      	cmp	r2, r3
 8007c38:	d8f7      	bhi.n	8007c2a <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8007c3a:	68fb      	ldr	r3, [r7, #12]
 8007c3c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8007c3e:	68fb      	ldr	r3, [r7, #12]
 8007c40:	685b      	ldr	r3, [r3, #4]
 8007c42:	68ba      	ldr	r2, [r7, #8]
 8007c44:	4413      	add	r3, r2
 8007c46:	687a      	ldr	r2, [r7, #4]
 8007c48:	429a      	cmp	r2, r3
 8007c4a:	d108      	bne.n	8007c5e <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8007c4c:	68fb      	ldr	r3, [r7, #12]
 8007c4e:	685a      	ldr	r2, [r3, #4]
 8007c50:	687b      	ldr	r3, [r7, #4]
 8007c52:	685b      	ldr	r3, [r3, #4]
 8007c54:	441a      	add	r2, r3
 8007c56:	68fb      	ldr	r3, [r7, #12]
 8007c58:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8007c5a:	68fb      	ldr	r3, [r7, #12]
 8007c5c:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8007c5e:	687b      	ldr	r3, [r7, #4]
 8007c60:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8007c62:	687b      	ldr	r3, [r7, #4]
 8007c64:	685b      	ldr	r3, [r3, #4]
 8007c66:	68ba      	ldr	r2, [r7, #8]
 8007c68:	441a      	add	r2, r3
 8007c6a:	68fb      	ldr	r3, [r7, #12]
 8007c6c:	681b      	ldr	r3, [r3, #0]
 8007c6e:	429a      	cmp	r2, r3
 8007c70:	d118      	bne.n	8007ca4 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8007c72:	68fb      	ldr	r3, [r7, #12]
 8007c74:	681a      	ldr	r2, [r3, #0]
 8007c76:	4b15      	ldr	r3, [pc, #84]	@ (8007ccc <prvInsertBlockIntoFreeList+0xb0>)
 8007c78:	681b      	ldr	r3, [r3, #0]
 8007c7a:	429a      	cmp	r2, r3
 8007c7c:	d00d      	beq.n	8007c9a <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8007c7e:	687b      	ldr	r3, [r7, #4]
 8007c80:	685a      	ldr	r2, [r3, #4]
 8007c82:	68fb      	ldr	r3, [r7, #12]
 8007c84:	681b      	ldr	r3, [r3, #0]
 8007c86:	685b      	ldr	r3, [r3, #4]
 8007c88:	441a      	add	r2, r3
 8007c8a:	687b      	ldr	r3, [r7, #4]
 8007c8c:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8007c8e:	68fb      	ldr	r3, [r7, #12]
 8007c90:	681b      	ldr	r3, [r3, #0]
 8007c92:	681a      	ldr	r2, [r3, #0]
 8007c94:	687b      	ldr	r3, [r7, #4]
 8007c96:	601a      	str	r2, [r3, #0]
 8007c98:	e008      	b.n	8007cac <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8007c9a:	4b0c      	ldr	r3, [pc, #48]	@ (8007ccc <prvInsertBlockIntoFreeList+0xb0>)
 8007c9c:	681a      	ldr	r2, [r3, #0]
 8007c9e:	687b      	ldr	r3, [r7, #4]
 8007ca0:	601a      	str	r2, [r3, #0]
 8007ca2:	e003      	b.n	8007cac <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8007ca4:	68fb      	ldr	r3, [r7, #12]
 8007ca6:	681a      	ldr	r2, [r3, #0]
 8007ca8:	687b      	ldr	r3, [r7, #4]
 8007caa:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8007cac:	68fa      	ldr	r2, [r7, #12]
 8007cae:	687b      	ldr	r3, [r7, #4]
 8007cb0:	429a      	cmp	r2, r3
 8007cb2:	d002      	beq.n	8007cba <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8007cb4:	68fb      	ldr	r3, [r7, #12]
 8007cb6:	687a      	ldr	r2, [r7, #4]
 8007cb8:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8007cba:	bf00      	nop
 8007cbc:	3714      	adds	r7, #20
 8007cbe:	46bd      	mov	sp, r7
 8007cc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cc4:	4770      	bx	lr
 8007cc6:	bf00      	nop
 8007cc8:	200088c8 	.word	0x200088c8
 8007ccc:	200088d0 	.word	0x200088d0

08007cd0 <memset>:
 8007cd0:	4402      	add	r2, r0
 8007cd2:	4603      	mov	r3, r0
 8007cd4:	4293      	cmp	r3, r2
 8007cd6:	d100      	bne.n	8007cda <memset+0xa>
 8007cd8:	4770      	bx	lr
 8007cda:	f803 1b01 	strb.w	r1, [r3], #1
 8007cde:	e7f9      	b.n	8007cd4 <memset+0x4>

08007ce0 <__libc_init_array>:
 8007ce0:	b570      	push	{r4, r5, r6, lr}
 8007ce2:	4d0d      	ldr	r5, [pc, #52]	@ (8007d18 <__libc_init_array+0x38>)
 8007ce4:	4c0d      	ldr	r4, [pc, #52]	@ (8007d1c <__libc_init_array+0x3c>)
 8007ce6:	1b64      	subs	r4, r4, r5
 8007ce8:	10a4      	asrs	r4, r4, #2
 8007cea:	2600      	movs	r6, #0
 8007cec:	42a6      	cmp	r6, r4
 8007cee:	d109      	bne.n	8007d04 <__libc_init_array+0x24>
 8007cf0:	4d0b      	ldr	r5, [pc, #44]	@ (8007d20 <__libc_init_array+0x40>)
 8007cf2:	4c0c      	ldr	r4, [pc, #48]	@ (8007d24 <__libc_init_array+0x44>)
 8007cf4:	f000 f818 	bl	8007d28 <_init>
 8007cf8:	1b64      	subs	r4, r4, r5
 8007cfa:	10a4      	asrs	r4, r4, #2
 8007cfc:	2600      	movs	r6, #0
 8007cfe:	42a6      	cmp	r6, r4
 8007d00:	d105      	bne.n	8007d0e <__libc_init_array+0x2e>
 8007d02:	bd70      	pop	{r4, r5, r6, pc}
 8007d04:	f855 3b04 	ldr.w	r3, [r5], #4
 8007d08:	4798      	blx	r3
 8007d0a:	3601      	adds	r6, #1
 8007d0c:	e7ee      	b.n	8007cec <__libc_init_array+0xc>
 8007d0e:	f855 3b04 	ldr.w	r3, [r5], #4
 8007d12:	4798      	blx	r3
 8007d14:	3601      	adds	r6, #1
 8007d16:	e7f2      	b.n	8007cfe <__libc_init_array+0x1e>
 8007d18:	08009850 	.word	0x08009850
 8007d1c:	08009850 	.word	0x08009850
 8007d20:	08009850 	.word	0x08009850
 8007d24:	08009854 	.word	0x08009854

08007d28 <_init>:
 8007d28:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007d2a:	bf00      	nop
 8007d2c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007d2e:	bc08      	pop	{r3}
 8007d30:	469e      	mov	lr, r3
 8007d32:	4770      	bx	lr

08007d34 <_fini>:
 8007d34:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007d36:	bf00      	nop
 8007d38:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007d3a:	bc08      	pop	{r3}
 8007d3c:	469e      	mov	lr, r3
 8007d3e:	4770      	bx	lr
